buildscript {
    ext {
        jacocoVersion = "0.8.1"
        lombokVersion = "1.16.20"
        jmsVersion = '2.0.1'
        makeItEasyVersion = "4.0.0"
        springBootVersion = "2.0.2.RELEASE"
        javaJwtVersion = "3.2.0"
        jacksonVersion = "2.9.5"
        mapstructVersion = "1.2.0.CR2"
        micrometerVersion = "1.0.6"
        springFoxSwaggerVersion = "2.9.2"
        wiremockVersion="2.0.0.RELEASE"
        cucumberVersion="1.2.5"
        thoughtworksVersion = '1.4.9'
        extentsReportVersion = '3.0.2'
    }
    repositories {
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.1.RELEASE")
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.15"
        classpath "gradle.plugin.com.github.spacialcircumstances:gradle-cucumber-reporting:0.0.9"
    }
}

repositories {
    jcenter()
}

apply plugin: 'java'
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: 'org.springframework.boot'
apply plugin: "io.spring.dependency-management"
apply plugin: "jacoco"
apply plugin: "net.ltgt.apt"

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencyManagement {

}

dependencies {
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.11.4'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-devtools"
    implementation "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    implementation "net.logstash.logback:logstash-logback-encoder:5.1"
    implementation "ch.qos.logback.contrib:logback-json-classic:0.1.5"
    implementation "ch.qos.logback.contrib:logback-jackson:0.1.5"

    implementation "io.springfox:springfox-swagger2:$springFoxSwaggerVersion"
    implementation "io.springfox:springfox-swagger-ui:$springFoxSwaggerVersion"

    implementation "com.auth0:java-jwt:$javaJwtVersion"

    implementation "org.projectlombok:lombok:$lombokVersion"

    implementation "joda-time:joda-time:2.10"

    implementation "com.thoughtworks.xstream:xstream:$thoughtworksVersion"

    implementation "org.mapstruct:mapstruct-jdk8:$mapstructVersion"
    compileOnly "org.mapstruct:mapstruct-processor:$mapstructVersion"

    implementation "io.micrometer:micrometer-registry-prometheus:$micrometerVersion"

    implementation 'com.aventstack:extentreports:5.0.6'

    testImplementation 'io.projectreactor:reactor-test'
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.springframework.cloud:spring-cloud-contract-wiremock:$wiremockVersion"
    testImplementation 'org.springframework:spring-tx:5.1.2.RELEASE'

    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.rest-assured:spring-mock-mvc'
    testImplementation 'io.rest-assured:json-schema-validator'
    testImplementation "com.github.javafaker:javafaker:0.18"

    testCompile 'com.intuit.karate:karate-junit4:0.6.0'
    testCompile 'com.intuit.karate:karate-apache:0.6.0'

    apt "org.projectlombok:lombok:$lombokVersion"
    apt "org.mapstruct:mapstruct-processor:$mapstructVersion"
}

task execute (type:JavaExec) {
    systemProperty "spring.profiles.active", System.getProperty("profile")
}


test {
    systemProperty 'spring.profiles.active', System.getProperty('spring.profiles.active')
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat = "full"
    }
}

jacoco {
    toolVersion = "$jacocoVersion"
}

jacocoTestReport {
    additionalSourceDirs = files(sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

sourceSets {
    test {
        resources {
            srcDir file("src/test/java")
            exclude "**/*.java"
        }
    }
}

