/*
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.RestError;
import org.openapitools.client.model.Specialty;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpecialtyApi
 */
@Ignore
public class SpecialtyApiTest {

    private final SpecialtyApi api = new SpecialtyApi();

    
    /**
     * Create a specialty
     *
     * Creates a specialty .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSpecialtyTest() {
        Specialty specialty = null;

        Specialty response = api.addSpecialty(specialty);

        // TODO: test validations
    }
    
    /**
     * Delete a specialty by ID
     *
     * Returns the specialty or a 404 error.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSpecialtyTest() {
        Integer specialtyId = null;

        Specialty response = api.deleteSpecialty(specialtyId);

        // TODO: test validations
    }
    
    /**
     * Get a specialty by ID
     *
     * Returns the specialty or a 404 error.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSpecialtyTest() {
        Integer specialtyId = null;

        Specialty response = api.getSpecialty(specialtyId);

        // TODO: test validations
    }
    
    /**
     * Lists specialties
     *
     * Returns an array of specialty .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listSpecialtiesTest() {

        List<Specialty> response = api.listSpecialties();

        // TODO: test validations
    }
    
    /**
     * Update a specialty by ID
     *
     * Returns the specialty or a 404 error.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSpecialtyTest() {
        Integer specialtyId = null;
        Specialty specialty = null;

        Specialty response = api.updateSpecialty(specialtyId, specialty);

        // TODO: test validations
    }
    
}
