/*
 * Programming Languages Forum
 * This is the API specification for the Programming Languages Forum
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.CreateQuestion201Response;
import org.openapitools.client.model.DifficultyLevelRequestDto;
import org.openapitools.client.model.ErrorResponseObject;
import org.openapitools.client.model.GetBookmarkedQuestions200Response;
import org.openapitools.client.model.NewQuestion;
import org.openapitools.client.model.RateQuestion200Response;
import org.openapitools.client.model.UpdateQuestion;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for QuestionsApi
 */
@Ignore
public class QuestionsApiTest {

    private final QuestionsApi api = new QuestionsApi();

    
    /**
     * Bookmark a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookmarkQuestionTest() {
        Integer questionId = null;

        api.bookmarkQuestion(questionId);

        // TODO: test validations
    }
    
    /**
     * Create a new question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createQuestionTest() {
        NewQuestion newQuestion = null;

        CreateQuestion201Response response = api.createQuestion(newQuestion);

        // TODO: test validations
    }
    
    /**
     * Delete a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteQuestionTest() {
        Integer questionId = null;

        api.deleteQuestion(questionId);

        // TODO: test validations
    }
    
    /**
     * Downvote a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downvoteQuestionTest() {
        Integer questionId = null;

        api.downvoteQuestion(questionId);

        // TODO: test validations
    }
    
    /**
     * Get bookmarked questions
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBookmarkedQuestionsTest() {

        GetBookmarkedQuestions200Response response = api.getBookmarkedQuestions();

        // TODO: test validations
    }
    
    /**
     * Get question details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getQuestionDetailsTest() {
        Integer questionId = null;

        CreateQuestion201Response response = api.getQuestionDetails(questionId);

        // TODO: test validations
    }
    
    /**
     * Rate a question&#39;s level of difficulty.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rateQuestionTest() {
        Long id = null;
        DifficultyLevelRequestDto difficultyLevelRequestDto = null;

        RateQuestion200Response response = api.rateQuestion(id, difficultyLevelRequestDto);

        // TODO: test validations
    }
    
    /**
     * Remove bookmark from a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeQuestionBookmarkTest() {
        Integer questionId = null;

        api.removeQuestionBookmark(questionId);

        // TODO: test validations
    }
    
    /**
     * Update a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateQuestionTest() {
        Integer questionId = null;
        UpdateQuestion updateQuestion = null;

        CreateQuestion201Response response = api.updateQuestion(questionId, updateQuestion);

        // TODO: test validations
    }
    
    /**
     * Upvote a question
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upvoteQuestionTest() {
        Integer questionId = null;

        api.upvoteQuestion(questionId);

        // TODO: test validations
    }
    
}
