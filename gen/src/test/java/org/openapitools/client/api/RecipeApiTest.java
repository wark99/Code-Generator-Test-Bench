/*
 * Semantic Cuisine
 * This is the API specification for the Semantic Browse for Cuisines application.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.AddCommentToRecipe201Response;
import org.openapitools.client.model.AddCommentToRecipeRequest;
import org.openapitools.client.model.CreateRecipe201Response;
import org.openapitools.client.model.ErrorResponseObject;
import org.openapitools.client.model.GetCommentsForRecipe200Response;
import org.openapitools.client.model.GetRecipesForEntity200Response;
import org.openapitools.client.model.GetUserFollowing200Response;
import org.openapitools.client.model.NewRecipe;
import org.openapitools.client.model.RateRecipeRequest;
import org.openapitools.client.model.SuccessResponseObject;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecipeApi
 */
@Ignore
public class RecipeApiTest {

    private final RecipeApi api = new RecipeApi();

    
    /**
     * Add a comment to a recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addCommentToRecipeTest() {
        Integer recipeId = null;
        AddCommentToRecipeRequest addCommentToRecipeRequest = null;

        AddCommentToRecipe201Response response = api.addCommentToRecipe(recipeId, addCommentToRecipeRequest);

        // TODO: test validations
    }
    
    /**
     * Bookmark a recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void bookmarkRecipeTest() {
        Integer recipeId = null;

        SuccessResponseObject response = api.bookmarkRecipe(recipeId);

        // TODO: test validations
    }
    
    /**
     * Create a new recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRecipeTest() {
        NewRecipe newRecipe = null;

        CreateRecipe201Response response = api.createRecipe(newRecipe);

        // TODO: test validations
    }
    
    /**
     * Delete a recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRecipeByIdTest() {
        Integer recipeId = null;

        SuccessResponseObject response = api.deleteRecipeById(recipeId);

        // TODO: test validations
    }
    
    /**
     * Get users who bookmarked a recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getBookmarkersTest() {
        Integer recipeId = null;

        GetUserFollowing200Response response = api.getBookmarkers(recipeId);

        // TODO: test validations
    }
    
    /**
     * Get comments for a recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCommentsForRecipeTest() {
        Integer recipeId = null;

        GetCommentsForRecipe200Response response = api.getCommentsForRecipe(recipeId);

        // TODO: test validations
    }
    
    /**
     * Get recipe details
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipeByIdTest() {
        Integer recipeId = null;

        CreateRecipe201Response response = api.getRecipeById(recipeId);

        // TODO: test validations
    }
    
    /**
     * Get recipes for dish, cuisine
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRecipesForEntityTest() {
        String sort = null;
        String dishId = null;
        String cuisineId = null;

        GetRecipesForEntity200Response response = api.getRecipesForEntity(sort, dishId, cuisineId);

        // TODO: test validations
    }
    
    /**
     * Rate a recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rateRecipeTest() {
        Integer recipeId = null;
        RateRecipeRequest rateRecipeRequest = null;

        SuccessResponseObject response = api.rateRecipe(recipeId, rateRecipeRequest);

        // TODO: test validations
    }
    
    /**
     * Remove upvote from a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeUpvoteFromCommentTest() {
        Integer recipeId = null;
        Integer commentId = null;

        AddCommentToRecipe201Response response = api.removeUpvoteFromComment(recipeId, commentId);

        // TODO: test validations
    }
    
    /**
     * Unbookmark a recipe
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unbookmarkRecipeTest() {
        Integer recipeId = null;

        SuccessResponseObject response = api.unbookmarkRecipe(recipeId);

        // TODO: test validations
    }
    
    /**
     * Upvote a comment
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void upvoteCommentTest() {
        Integer recipeId = null;
        Integer commentId = null;

        AddCommentToRecipe201Response response = api.upvoteComment(recipeId, commentId);

        // TODO: test validations
    }
    
}
