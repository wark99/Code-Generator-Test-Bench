/*
 * Semantic Cuisine
 * This is the API specification for the Semantic Browse for Cuisines application.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.ErrorResponseObject;
import org.openapitools.client.model.Login200Response;
import org.openapitools.client.model.Logout200Response;
import org.openapitools.client.model.ResetPasswordRequest;
import org.openapitools.client.model.ResetPasswordRequestRequest;
import org.openapitools.client.model.SuccessResponseObject;
import org.openapitools.client.model.UserLogin;
import org.openapitools.client.model.UserRegistration;
import org.openapitools.client.model.VerifyEmailRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthApi
 */
@Ignore
public class AuthApiTest {

    private final AuthApi api = new AuthApi();

    
    /**
     * User login
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void loginTest() {
        UserLogin userLogin = null;

        Login200Response response = api.login(userLogin);

        // TODO: test validations
    }
    
    /**
     * User logout
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void logoutTest() {

        Logout200Response response = api.logout();

        // TODO: test validations
    }
    
    /**
     * Resend verification email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendVerificationEmailTest() {

        Logout200Response response = api.resendVerificationEmail();

        // TODO: test validations
    }
    
    /**
     * Reset password
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordTest() {
        ResetPasswordRequest resetPasswordRequest = null;

        Logout200Response response = api.resetPassword(resetPasswordRequest);

        // TODO: test validations
    }
    
    /**
     * Request password reset
     *
     * A password reset link will be sent to the user&#39;s email if it exists. The response must always be success (even if email does not exist). This is to prevent email enumeration attacks.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetPasswordRequestTest() {
        ResetPasswordRequestRequest resetPasswordRequestRequest = null;

        Logout200Response response = api.resetPasswordRequest(resetPasswordRequestRequest);

        // TODO: test validations
    }
    
    /**
     * Register a new user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signupTest() {
        UserRegistration userRegistration = null;

        SuccessResponseObject response = api.signup(userRegistration);

        // TODO: test validations
    }
    
    /**
     * Verify user&#39;s email
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyEmailTest() {
        VerifyEmailRequest verifyEmailRequest = null;

        Logout200Response response = api.verifyEmail(verifyEmailRequest);

        // TODO: test validations
    }
    
}
