/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.ErrorMessage;
import org.openapitools.client.model.PayStatementReportAck;
import org.openapitools.client.model.PayStatementReportConstraints;
import org.openapitools.client.model.PayrollReportAck;
import org.openapitools.client.model.PayrollReportConstraints;
import org.openapitools.client.model.SecurityFreezeErrorMessage;
import org.openapitools.client.model.VOETransactionsReportAck;
import org.openapitools.client.model.VOETransactionsReportConstraints;
import org.openapitools.client.model.VOIEPaystubReportAck;
import org.openapitools.client.model.VOIEPaystubWithTXVerifyReportAck;
import org.openapitools.client.model.VOIEReportConstraints;
import org.openapitools.client.model.VOIEWithTXVerifyReportConstraints;
import org.openapitools.client.model.VOIReportAck;
import org.openapitools.client.model.VOIReportConstraints;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VerifyIncomeAndEmploymentApi
 */
@Ignore
public class VerifyIncomeAndEmploymentApiTest {

    private final VerifyIncomeAndEmploymentApi api = new VerifyIncomeAndEmploymentApi();

    
    /**
     * Generate Pay Statement Report for the customer
     *
     * Generate Pay Statement Extraction Report for the given customer. This service accepts asset IDs of the stored pay statements to generate a Pay Statement Extraction Report.  This is a premium service. The billing rate is the variable rate for Pay Statement Extraction Report under the current subscription plan. The billable event is the successful generation of a Pay Statement Extraction Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generatePayStatementReportTest() {
        String customerId = null;
        PayStatementReportConstraints payStatementReportConstraints = null;
        String callbackUrl = null;

        PayStatementReportAck response = api.generatePayStatementReport(customerId, payStatementReportConstraints, callbackUrl);

        // TODO: test validations
    }
    
    /**
     * Generate VOE - Payroll Report for the customer
     *
     * Generate or refresh a VOE - Payroll report. Often used as a complementary report to the VOIE-Payroll report to fulfill the pre-close VOE requirements. It retrieves the customer&#39;s employment details and employment status through the payroll source without any income information.  This is a premium service. The billable event is the successful generation of a VOE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateVOEPayrollReportTest() {
        String customerId = null;
        PayrollReportConstraints payrollReportConstraints = null;
        String callbackUrl = null;

        PayrollReportAck response = api.generateVOEPayrollReport(customerId, payrollReportConstraints, callbackUrl);

        // TODO: test validations
    }
    
    /**
     * Generate VOE - Transactions Report for the customer
     *
     * Premium Service: A billable event when the API response is successful.  MVS-Direct integration developers only.  Used as a complimentary report to the VOA with Income and VOIE - Paystub (with TXVerify) reports and used to fulfill the pre-close VOE requirements.  Retrieve the latest credit transaction information from the borrower&#39;s connected bank accounts and groups them into income streams so that you can view their payment history to ensure a direct deport was made within the expected cadence. The report displays transaction descriptions without any dollar amounts so that income re-verification isn&#39;t necessary.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateVOETransactionsReportTest() {
        String customerId = null;
        VOETransactionsReportConstraints voETransactionsReportConstraints = null;
        String callbackUrl = null;

        VOETransactionsReportAck response = api.generateVOETransactionsReport(customerId, voETransactionsReportConstraints, callbackUrl);

        // TODO: test validations
    }
    
    /**
     * Generate VOIE - Paystub Report for the customer
     *
     * Generate a VOIE - Paystub report. This service uses the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub report with digitized paystub details.  This is a premium service. The billing rate is the variable rate for VOIE - Paystub under the current subscription plan. The billable event is the successful generation of a VOIE - Paystub Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateVOIEPaystubReportTest() {
        String customerId = null;
        VOIEReportConstraints voIEReportConstraints = null;
        String callbackUrl = null;

        VOIEPaystubReportAck response = api.generateVOIEPaystubReport(customerId, voIEReportConstraints, callbackUrl);

        // TODO: test validations
    }
    
    /**
     * Generate VOIE Paystub (with TXVerify) Report for the customer
     *
     * Generate a VOIE - Paystub (with TXVerify) report for all checking and savings under the given customer. This service retrieves up to two years of transaction history for the given accounts. It then uses this information as well as the provided paystub(s), which are passed into the request body as asset IDs (generated using the Store Customer Pay Statement API) to generate the VOIE - Paystub (with TXVerify) report.  Note: if you are using this API to refresh the bank transactions, use the same asset ID from the first report. A new paystub is not required unless the paystub is too old for underwriting requirements. Using the same asset ID that was on the original report and the previously extracted details will be used to speed up report generation response time.  This is a premium service. The billing rate is the variable rate for VOIE TXVerify under the current subscription plan. The billable event is the successful generation of a VOIE TXVerify Report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateVOIEPaystubWithTXVerifyReportTest() {
        String customerId = null;
        VOIEWithTXVerifyReportConstraints voIEWithTXVerifyReportConstraints = null;
        String callbackUrl = null;

        VOIEPaystubWithTXVerifyReportAck response = api.generateVOIEPaystubWithTXVerifyReport(customerId, voIEWithTXVerifyReportConstraints, callbackUrl);

        // TODO: test validations
    }
    
    /**
     * Generate VOI Report for the customer
     *
     * Generate a Verification of Income (VOI) report for all checking, savings, and money market accounts for the given customer. This service retrieves up to two years of transaction history for each account and uses this information to generate the VOI report.  This is a premium service. The billing rate is the variable rate for Verification of Income under the current subscription plan. The billable event is the successful generation of a VOI report.  If no account of type checking, savings, or money market is found, the service will return HTTP 400 Bad Request.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void generateVOIReportTest() {
        String customerId = null;
        VOIReportConstraints voIReportConstraints = null;
        String callbackUrl = null;

        VOIReportAck response = api.generateVOIReport(customerId, voIReportConstraints, callbackUrl);

        // TODO: test validations
    }
    
    /**
     * Generate VOIE - Payroll Report for the customer
     *
     * Generate or refresh a VOIE - Payroll report. For clients using the product via a consumer permissioning experience via Connect, the original VOIE - Payroll report generates when the consumer completes the Connect experience, and this API is only used for future report refreshes without reengaging the consumer.  This is a premium service. The billable event is the successful generation of a VOIE - Payroll report.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshVOIEPayrollReportTest() {
        String customerId = null;
        PayrollReportConstraints payrollReportConstraints = null;
        String callbackUrl = null;

        PayrollReportAck response = api.refreshVOIEPayrollReport(customerId, payrollReportConstraints, callbackUrl);

        // TODO: test validations
    }
    
}
