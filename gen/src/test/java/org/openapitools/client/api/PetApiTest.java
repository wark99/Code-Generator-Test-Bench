/*
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.Pet;
import org.openapitools.client.model.PetFields;
import org.openapitools.client.model.RestError;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PetApi
 */
@Ignore
public class PetApiTest {

    private final PetApi api = new PetApi();

    
    /**
     * Create a pet
     *
     * Creates a pet .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPetTest() {
        Pet pet = null;

        Pet response = api.addPet(pet);

        // TODO: test validations
    }
    
    /**
     * Adds a pet to an owner
     *
     * Records the details of a new pet.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPetToOwnerTest() {
        Integer ownerId = null;
        PetFields petFields = null;

        Pet response = api.addPetToOwner(ownerId, petFields);

        // TODO: test validations
    }
    
    /**
     * Delete a pet by ID
     *
     * Returns the pet or a 404 error.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePetTest() {
        Integer petId = null;

        Pet response = api.deletePet(petId);

        // TODO: test validations
    }
    
    /**
     * Get a pet by ID
     *
     * Returns the pet or a 404 error.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getOwnersPetTest() {
        Integer ownerId = null;
        Integer petId = null;

        Pet response = api.getOwnersPet(ownerId, petId);

        // TODO: test validations
    }
    
    /**
     * Get a pet by ID
     *
     * Returns the pet  or a 404 error.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPetTest() {
        Integer petId = null;

        Pet response = api.getPet(petId);

        // TODO: test validations
    }
    
    /**
     * Lists pet
     *
     * Returns an array of pet .
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listPetsTest() {

        List<Pet> response = api.listPets();

        // TODO: test validations
    }
    
    /**
     * Update a pet&#39;s details
     *
     * Updates the pet record with the specified details.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOwnersPetTest() {
        Integer ownerId = null;
        Integer petId = null;
        PetFields petFields = null;

        api.updateOwnersPet(ownerId, petId, petFields);

        // TODO: test validations
    }
    
    /**
     * Update a pet by ID
     *
     * Returns the pet or a 404 error.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePetTest() {
        Integer petId = null;
        Pet pet = null;

        Pet response = api.updatePet(petId, pet);

        // TODO: test validations
    }
    
}
