/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.CustomerAccount;
import org.openapitools.client.model.CustomerAccounts;
import org.openapitools.client.model.ErrorMessage;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Ignore
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    
    /**
     * Delete Access to Customer Account by ID
     *
     * This will delete access to a specific account only. If there are multiple permissioned accounts, then partners and their customers will have the flexibility to continue to access data from other connected accounts using the consented (Oauth) token for the customer. The customer data on that specific account will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise retention policy consistent with legal and business purposes. â€‹ _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerAccountTest() {
        String customerId = null;
        String accountId = null;

        api.deleteCustomerAccount(customerId, accountId);

        // TODO: test validations
    }
    
    /**
     * Delete Access to Customer Accounts by Institution Login ID
     *
     * Delete access to all customer accounts for a given FI.â€‹ This will delete access to the underlying account(s) under a given Institution Login ID. The customer data will no longer be accessible. Any customer data already collected will be retained in accordance with our enterprise retention policy consistent with legal and business purposes. _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerAccountsByInstitutionLoginTest() {
        String customerId = null;
        String institutionLoginId = null;

        api.deleteCustomerAccountsByInstitutionLogin(customerId, institutionLoginId);

        // TODO: test validations
    }
    
    /**
     * Get Customer Account by ID
     *
     * Get a customer account by ID.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerAccountTest() {
        String customerId = null;
        String accountId = null;

        CustomerAccount response = api.getCustomerAccount(customerId, accountId);

        // TODO: test validations
    }
    
    /**
     * Get Customer Accounts
     *
     * Get all accounts owned by the given customer.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerAccountsTest() {
        String customerId = null;
        String status = null;
        String accountType = null;

        CustomerAccounts response = api.getCustomerAccounts(customerId, status, accountType);

        // TODO: test validations
    }
    
    /**
     * Get Customer Accounts by Institution ID
     *
     * Get all active accounts owned by the given customer at the given institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerAccountsByInstitutionTest() {
        String customerId = null;
        Long institutionId = null;

        CustomerAccounts response = api.getCustomerAccountsByInstitution(customerId, institutionId);

        // TODO: test validations
    }
    
    /**
     * Get Customer Accounts by Institution Login ID
     *
     * Get all accounts associated with the given institution login. All accounts returned are accessible by a single set of credentials on a single institution.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCustomerAccountsByInstitutionLoginTest() {
        String customerId = null;
        String institutionLoginId = null;

        CustomerAccounts response = api.getCustomerAccountsByInstitutionLogin(customerId, institutionLoginId);

        // TODO: test validations
    }
    
    /**
     * Refresh Customer Accounts
     *
     * Refresh account and transaction data for all accounts associated with the  given &#x60;customerId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh services repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all Data Access Tiers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshCustomerAccountsTest() {
        String customerId = null;

        CustomerAccounts response = api.refreshCustomerAccounts(customerId);

        // TODO: test validations
    }
    
    /**
     * Refresh Customer Accounts by Institution Login ID
     *
     * Refresh account and transaction data for all accounts associated with a given &#x60;institutionLoginId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Because many financial institutions only post transactions once per day, calling Refresh repeatedly is usually a waste of resources and is not recommended.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  The recommended timeout setting for this request is 120 seconds in order to receive a response. However, you can terminate the connection after making the call the operation will still complete. You will have to pull the account records to check for an updated aggregation attempt date to know when the refresh is complete.  Note: This service is not available for all Data Access Tiers.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshCustomerAccountsByInstitutionLoginTest() {
        String customerId = null;
        String institutionLoginId = null;

        CustomerAccounts response = api.refreshCustomerAccountsByInstitutionLogin(customerId, institutionLoginId);

        // TODO: test validations
    }
    
    /**
     * Refresh Customer Account by Institution Login ID for Data Access Tiers
     *
     * Refresh account and transaction data for all accounts associated with a given &#39;institutionLoginId&#x60; with a connection to the institution. Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day.  Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for Data Access Tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshCustomerAccountsByInstitutionLoginV2Test() {
        String customerId = null;
        String institutionLoginId = null;

        api.refreshCustomerAccountsByInstitutionLoginV2(customerId, institutionLoginId);

        // TODO: test validations
    }
    
    /**
     * Refresh Customer Accounts for Data Access Tiers
     *
     * Refresh account and transaction data for all accounts associated with the  given &#x60;customerId&#x60; with a connection to the institution.  Client apps are not permitted to automate calls to the Refresh services. Active accounts are automatically refreshed by Finicity once per day. Apps may call Refresh services for a specific customer when there is a specific business case for the need of data that is up to date as of the moment. Please discuss with your account manager and systems engineer for further clarification.  Note: This service will be used for Data Access Tiers ASD, AFD and ATD.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshCustomerAccountsV2Test() {
        String customerId = null;

        api.refreshCustomerAccountsV2(customerId);

        // TODO: test validations
    }
    
}
