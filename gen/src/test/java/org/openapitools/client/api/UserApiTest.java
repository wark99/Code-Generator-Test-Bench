/*
 * Semantic Cuisine
 * This is the API specification for the Semantic Browse for Cuisines application.
 *
 * The version of the OpenAPI document: 1.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.model.ErrorResponseObject;
import org.openapitools.client.model.GetRecipesForEntity200Response;
import org.openapitools.client.model.GetUserById200Response;
import org.openapitools.client.model.GetUserFollowing200Response;
import org.openapitools.client.model.UserProfile;
import org.junit.Test;
import org.junit.Ignore;

import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Follow a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void followUserTest() {
        Integer userId = null;

        GetUserById200Response response = api.followUser(userId);

        // TODO: test validations
    }
    
    /**
     * Get user&#39;s feed
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getFeedTest() {
        String type = null;

        GetRecipesForEntity200Response response = api.getFeed(type);

        // TODO: test validations
    }
    
    /**
     * Get own profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getMeTest() {

        GetUserById200Response response = api.getMe();

        // TODO: test validations
    }
    
    /**
     * Get user profile
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserByIdTest() {
        Integer userId = null;

        GetUserById200Response response = api.getUserById(userId);

        // TODO: test validations
    }
    
    /**
     * Get user&#39;s followers
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserFollowersTest() {
        Integer userId = null;

        GetUserFollowing200Response response = api.getUserFollowers(userId);

        // TODO: test validations
    }
    
    /**
     * Get users being followed
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUserFollowingTest() {
        Integer userId = null;

        GetUserFollowing200Response response = api.getUserFollowing(userId);

        // TODO: test validations
    }
    
    /**
     * Search for users
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void searchUsersTest() {
        String q = null;

        GetUserFollowing200Response response = api.searchUsers(q);

        // TODO: test validations
    }
    
    /**
     * Unfollow a user
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void unfollowUserTest() {
        Integer userId = null;

        GetUserById200Response response = api.unfollowUser(userId);

        // TODO: test validations
    }
    
    /**
     * Update user profile
     *
     * Can only update own profile
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateUserByIdTest() {
        Integer userId = null;
        UserProfile userProfile = null;

        GetUserById200Response response = api.updateUserById(userId, userProfile);

        // TODO: test validations
    }
    
}
