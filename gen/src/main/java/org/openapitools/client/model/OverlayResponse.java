/*
 * CIC-NEW
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OverlayResponseImages1Inner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * OverlayResponse
 */
@JsonPropertyOrder({
  OverlayResponse.JSON_PROPERTY_IMAGES,
  OverlayResponse.JSON_PROPERTY_ACTIVE,
  OverlayResponse.JSON_PROPERTY_AVAILABLE,
  OverlayResponse.JSON_PROPERTY_DISPLAY_POSITION,
  OverlayResponse.JSON_PROPERTY_SELECTED_POSITION_STRING,
  OverlayResponse.JSON_PROPERTY_SELECTED_POSITIONS,
  OverlayResponse.JSON_PROPERTY_MANUAL_ADJUSTMENT,
  OverlayResponse.JSON_PROPERTY_UPDATER
})
@JsonTypeName("overlayResponse")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:13:48.943071954Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class OverlayResponse {
  public static final String JSON_PROPERTY_IMAGES = "images";
  private List<OverlayResponseImages1Inner> images;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Integer active;

  public static final String JSON_PROPERTY_AVAILABLE = "available";
  private Integer available;

  /**
   * Gets or Sets displayPosition
   */
  public enum DisplayPositionEnum {
    FIRST("FIRST"),
    
    ALL("ALL"),
    
    SPECIFIC("SPECIFIC"),
    
    LAST("LAST");

    private String value;

    DisplayPositionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DisplayPositionEnum fromValue(String value) {
      for (DisplayPositionEnum b : DisplayPositionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_DISPLAY_POSITION = "displayPosition";
  private DisplayPositionEnum displayPosition;

  public static final String JSON_PROPERTY_SELECTED_POSITION_STRING = "selectedPositionString";
  private Integer selectedPositionString;

  public static final String JSON_PROPERTY_SELECTED_POSITIONS = "selectedPositions";
  private List<Integer> selectedPositions;

  public static final String JSON_PROPERTY_MANUAL_ADJUSTMENT = "manualAdjustment";
  private Boolean manualAdjustment;

  public static final String JSON_PROPERTY_UPDATER = "updater";
  private String updater;

  public OverlayResponse() {
  }

  public OverlayResponse images(List<OverlayResponseImages1Inner> images) {
    
    this.images = images;
    return this;
  }

  public OverlayResponse addImagesItem(OverlayResponseImages1Inner imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * Get images
   * @return images
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<OverlayResponseImages1Inner> getImages() {
    return images;
  }


  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImages(List<OverlayResponseImages1Inner> images) {
    this.images = images;
  }


  public OverlayResponse active(Integer active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Integer active) {
    this.active = active;
  }


  public OverlayResponse available(Integer available) {
    
    this.available = available;
    return this;
  }

   /**
   * Get available
   * @return available
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAvailable() {
    return available;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailable(Integer available) {
    this.available = available;
  }


  public OverlayResponse displayPosition(DisplayPositionEnum displayPosition) {
    
    this.displayPosition = displayPosition;
    return this;
  }

   /**
   * Get displayPosition
   * @return displayPosition
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DISPLAY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DisplayPositionEnum getDisplayPosition() {
    return displayPosition;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_POSITION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDisplayPosition(DisplayPositionEnum displayPosition) {
    this.displayPosition = displayPosition;
  }


  public OverlayResponse selectedPositionString(Integer selectedPositionString) {
    
    this.selectedPositionString = selectedPositionString;
    return this;
  }

   /**
   * Get selectedPositionString
   * @return selectedPositionString
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELECTED_POSITION_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSelectedPositionString() {
    return selectedPositionString;
  }


  @JsonProperty(JSON_PROPERTY_SELECTED_POSITION_STRING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelectedPositionString(Integer selectedPositionString) {
    this.selectedPositionString = selectedPositionString;
  }


  public OverlayResponse selectedPositions(List<Integer> selectedPositions) {
    
    this.selectedPositions = selectedPositions;
    return this;
  }

  public OverlayResponse addSelectedPositionsItem(Integer selectedPositionsItem) {
    if (this.selectedPositions == null) {
      this.selectedPositions = new ArrayList<>();
    }
    this.selectedPositions.add(selectedPositionsItem);
    return this;
  }

   /**
   * Get selectedPositions
   * @return selectedPositions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SELECTED_POSITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getSelectedPositions() {
    return selectedPositions;
  }


  @JsonProperty(JSON_PROPERTY_SELECTED_POSITIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSelectedPositions(List<Integer> selectedPositions) {
    this.selectedPositions = selectedPositions;
  }


  public OverlayResponse manualAdjustment(Boolean manualAdjustment) {
    
    this.manualAdjustment = manualAdjustment;
    return this;
  }

   /**
   * Get manualAdjustment
   * @return manualAdjustment
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANUAL_ADJUSTMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getManualAdjustment() {
    return manualAdjustment;
  }


  @JsonProperty(JSON_PROPERTY_MANUAL_ADJUSTMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManualAdjustment(Boolean manualAdjustment) {
    this.manualAdjustment = manualAdjustment;
  }


  public OverlayResponse updater(String updater) {
    
    this.updater = updater;
    return this;
  }

   /**
   * Get updater
   * @return updater
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUpdater() {
    return updater;
  }


  @JsonProperty(JSON_PROPERTY_UPDATER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdater(String updater) {
    this.updater = updater;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OverlayResponse overlayResponse = (OverlayResponse) o;
    return Objects.equals(this.images, overlayResponse.images) &&
        Objects.equals(this.active, overlayResponse.active) &&
        Objects.equals(this.available, overlayResponse.available) &&
        Objects.equals(this.displayPosition, overlayResponse.displayPosition) &&
        Objects.equals(this.selectedPositionString, overlayResponse.selectedPositionString) &&
        Objects.equals(this.selectedPositions, overlayResponse.selectedPositions) &&
        Objects.equals(this.manualAdjustment, overlayResponse.manualAdjustment) &&
        Objects.equals(this.updater, overlayResponse.updater);
  }

  @Override
  public int hashCode() {
    return Objects.hash(images, active, available, displayPosition, selectedPositionString, selectedPositions, manualAdjustment, updater);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OverlayResponse {\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("    displayPosition: ").append(toIndentedString(displayPosition)).append("\n");
    sb.append("    selectedPositionString: ").append(toIndentedString(selectedPositionString)).append("\n");
    sb.append("    selectedPositions: ").append(toIndentedString(selectedPositions)).append("\n");
    sb.append("    manualAdjustment: ").append(toIndentedString(manualAdjustment)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

