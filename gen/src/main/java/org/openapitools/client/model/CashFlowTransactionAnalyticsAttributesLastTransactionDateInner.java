/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CashFlowTransactionAnalyticsAttributesLastTransactionDateInner
 */
@JsonPropertyOrder({
  CashFlowTransactionAnalyticsAttributesLastTransactionDateInner.JSON_PROPERTY_DATE,
  CashFlowTransactionAnalyticsAttributesLastTransactionDateInner.JSON_PROPERTY_DEPOSITS_CREDITS,
  CashFlowTransactionAnalyticsAttributesLastTransactionDateInner.JSON_PROPERTY_WITHDRAWALS_DEBITS,
  CashFlowTransactionAnalyticsAttributesLastTransactionDateInner.JSON_PROPERTY_ZERO_AMOUNT_TRANSACTION,
  CashFlowTransactionAnalyticsAttributesLastTransactionDateInner.JSON_PROPERTY_TRANSACTION_DESCRIPTION
})
@JsonTypeName("CashFlowTransactionAnalyticsAttributes_lastTransactionDate_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:34:32.874275138Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CashFlowTransactionAnalyticsAttributesLastTransactionDateInner {
  public static final String JSON_PROPERTY_DATE = "date";
  private String date;

  public static final String JSON_PROPERTY_DEPOSITS_CREDITS = "depositsCredits";
  private BigDecimal depositsCredits;

  public static final String JSON_PROPERTY_WITHDRAWALS_DEBITS = "withdrawalsDebits";
  private BigDecimal withdrawalsDebits;

  public static final String JSON_PROPERTY_ZERO_AMOUNT_TRANSACTION = "zeroAmountTransaction";
  private BigDecimal zeroAmountTransaction;

  public static final String JSON_PROPERTY_TRANSACTION_DESCRIPTION = "transactionDescription";
  private String transactionDescription;

  public CashFlowTransactionAnalyticsAttributesLastTransactionDateInner() {
  }

  public CashFlowTransactionAnalyticsAttributesLastTransactionDateInner date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * Date the deposit transaction was posted
   * @return date
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(String date) {
    this.date = date;
  }


  public CashFlowTransactionAnalyticsAttributesLastTransactionDateInner depositsCredits(BigDecimal depositsCredits) {
    
    this.depositsCredits = depositsCredits;
    return this;
  }

   /**
   * Amount of transaction if deposit, otherwise null
   * @return depositsCredits
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEPOSITS_CREDITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getDepositsCredits() {
    return depositsCredits;
  }


  @JsonProperty(JSON_PROPERTY_DEPOSITS_CREDITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDepositsCredits(BigDecimal depositsCredits) {
    this.depositsCredits = depositsCredits;
  }


  public CashFlowTransactionAnalyticsAttributesLastTransactionDateInner withdrawalsDebits(BigDecimal withdrawalsDebits) {
    
    this.withdrawalsDebits = withdrawalsDebits;
    return this;
  }

   /**
   * Amount of transaction if withdrawal, otherwise null
   * @return withdrawalsDebits
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WITHDRAWALS_DEBITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getWithdrawalsDebits() {
    return withdrawalsDebits;
  }


  @JsonProperty(JSON_PROPERTY_WITHDRAWALS_DEBITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWithdrawalsDebits(BigDecimal withdrawalsDebits) {
    this.withdrawalsDebits = withdrawalsDebits;
  }


  public CashFlowTransactionAnalyticsAttributesLastTransactionDateInner zeroAmountTransaction(BigDecimal zeroAmountTransaction) {
    
    this.zeroAmountTransaction = zeroAmountTransaction;
    return this;
  }

   /**
   * Amount of transaction if zero, otherwise null
   * @return zeroAmountTransaction
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ZERO_AMOUNT_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getZeroAmountTransaction() {
    return zeroAmountTransaction;
  }


  @JsonProperty(JSON_PROPERTY_ZERO_AMOUNT_TRANSACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZeroAmountTransaction(BigDecimal zeroAmountTransaction) {
    this.zeroAmountTransaction = zeroAmountTransaction;
  }


  public CashFlowTransactionAnalyticsAttributesLastTransactionDateInner transactionDescription(String transactionDescription) {
    
    this.transactionDescription = transactionDescription;
    return this;
  }

   /**
   * Description of transaction
   * @return transactionDescription
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTransactionDescription() {
    return transactionDescription;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionDescription(String transactionDescription) {
    this.transactionDescription = transactionDescription;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowTransactionAnalyticsAttributesLastTransactionDateInner cashFlowTransactionAnalyticsAttributesLastTransactionDateInner = (CashFlowTransactionAnalyticsAttributesLastTransactionDateInner) o;
    return Objects.equals(this.date, cashFlowTransactionAnalyticsAttributesLastTransactionDateInner.date) &&
        Objects.equals(this.depositsCredits, cashFlowTransactionAnalyticsAttributesLastTransactionDateInner.depositsCredits) &&
        Objects.equals(this.withdrawalsDebits, cashFlowTransactionAnalyticsAttributesLastTransactionDateInner.withdrawalsDebits) &&
        Objects.equals(this.zeroAmountTransaction, cashFlowTransactionAnalyticsAttributesLastTransactionDateInner.zeroAmountTransaction) &&
        Objects.equals(this.transactionDescription, cashFlowTransactionAnalyticsAttributesLastTransactionDateInner.transactionDescription);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, depositsCredits, withdrawalsDebits, zeroAmountTransaction, transactionDescription);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowTransactionAnalyticsAttributesLastTransactionDateInner {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    depositsCredits: ").append(toIndentedString(depositsCredits)).append("\n");
    sb.append("    withdrawalsDebits: ").append(toIndentedString(withdrawalsDebits)).append("\n");
    sb.append("    zeroAmountTransaction: ").append(toIndentedString(zeroAmountTransaction)).append("\n");
    sb.append("    transactionDescription: ").append(toIndentedString(transactionDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

