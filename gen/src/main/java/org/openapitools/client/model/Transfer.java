/*
 * IBM Cloud Video - Distributions API
 *   Some useful links: - [Distribution API Wiki](https://github.com/wiki) - [Distribution API Source](https://github.com/distribution-api/)
 *
 * The version of the OpenAPI document: 1.0.1
 * Contact: kendrick@us.ibm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Transfer
 */
@JsonPropertyOrder({
  Transfer.JSON_PROPERTY_ID,
  Transfer.JSON_PROPERTY_URI,
  Transfer.JSON_PROPERTY_STATE,
  Transfer.JSON_PROPERTY_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:23:21.806739296Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Transfer {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_URI = "uri";
  private String uri;

  /**
   * File Transfer State
   */
  public enum StateEnum {
    UNKNOWN("UNKNOWN"),
    
    WAITING_FOR_CONTENT_COMPLETION("WAITING_FOR_CONTENT_COMPLETION"),
    
    SEND_ERROR("SEND_ERROR"),
    
    SCHEDULED_FOR_SEND("SCHEDULED_FOR_SEND"),
    
    SENDING("SENDING"),
    
    SENT("SENT"),
    
    ABORTED("ABORTED"),
    
    EXPORT_ERROR("EXPORT_ERROR"),
    
    SCHEDULED_FOR_EXPORT("SCHEDULED_FOR_EXPORT"),
    
    EXPORTING("EXPORTING"),
    
    EXPORTED("EXPORTED");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  private StateEnum state;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public Transfer() {
  }

  public Transfer id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * File Transfer Id
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public Transfer uri(String uri) {
    
    this.uri = uri;
    return this;
  }

   /**
   * Uri Resolving to the content in s3 (s3 uri)
   * @return uri
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(String uri) {
    this.uri = uri;
  }


  public Transfer state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * File Transfer State
   * @return state
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(StateEnum state) {
    this.state = state;
  }


  public Transfer message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transfer transfer = (Transfer) o;
    return Objects.equals(this.id, transfer.id) &&
        Objects.equals(this.uri, transfer.uri) &&
        Objects.equals(this.state, transfer.state) &&
        Objects.equals(this.message, transfer.message);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, uri, state, message);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transfer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

