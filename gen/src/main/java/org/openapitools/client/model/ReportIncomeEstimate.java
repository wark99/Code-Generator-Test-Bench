/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ReportIncomeEstimate
 */
@JsonPropertyOrder({
  ReportIncomeEstimate.JSON_PROPERTY_NET_ANNUAL,
  ReportIncomeEstimate.JSON_PROPERTY_PROJECTED_NET_ANNUAL,
  ReportIncomeEstimate.JSON_PROPERTY_ESTIMATED_GROSS_ANNUAL,
  ReportIncomeEstimate.JSON_PROPERTY_PROJECTED_GROSS_ANNUAL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:26:42.703698393Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ReportIncomeEstimate {
  public static final String JSON_PROPERTY_NET_ANNUAL = "netAnnual";
  private BigDecimal netAnnual;

  public static final String JSON_PROPERTY_PROJECTED_NET_ANNUAL = "projectedNetAnnual";
  private BigDecimal projectedNetAnnual;

  public static final String JSON_PROPERTY_ESTIMATED_GROSS_ANNUAL = "estimatedGrossAnnual";
  private BigDecimal estimatedGrossAnnual;

  public static final String JSON_PROPERTY_PROJECTED_GROSS_ANNUAL = "projectedGrossAnnual";
  private BigDecimal projectedGrossAnnual;

  public ReportIncomeEstimate() {
  }

  public ReportIncomeEstimate netAnnual(BigDecimal netAnnual) {
    
    this.netAnnual = netAnnual;
    return this;
  }

   /**
   * Sum of all values in &#x60;netMonthlyIncome&#x60; over the previous 12 months
   * @return netAnnual
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NET_ANNUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getNetAnnual() {
    return netAnnual;
  }


  @JsonProperty(JSON_PROPERTY_NET_ANNUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNetAnnual(BigDecimal netAnnual) {
    this.netAnnual = netAnnual;
  }


  public ReportIncomeEstimate projectedNetAnnual(BigDecimal projectedNetAnnual) {
    
    this.projectedNetAnnual = projectedNetAnnual;
    return this;
  }

   /**
   * Projected net income over the next 12 months, across all income streams, based on &#x60;netAnnualIncome&#x60;
   * @return projectedNetAnnual
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROJECTED_NET_ANNUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getProjectedNetAnnual() {
    return projectedNetAnnual;
  }


  @JsonProperty(JSON_PROPERTY_PROJECTED_NET_ANNUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProjectedNetAnnual(BigDecimal projectedNetAnnual) {
    this.projectedNetAnnual = projectedNetAnnual;
  }


  public ReportIncomeEstimate estimatedGrossAnnual(BigDecimal estimatedGrossAnnual) {
    
    this.estimatedGrossAnnual = estimatedGrossAnnual;
    return this;
  }

   /**
   * Before-tax gross annual income (estimated from &#x60;netAnnual&#x60;) across all income stream in the past 12 months
   * @return estimatedGrossAnnual
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ESTIMATED_GROSS_ANNUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getEstimatedGrossAnnual() {
    return estimatedGrossAnnual;
  }


  @JsonProperty(JSON_PROPERTY_ESTIMATED_GROSS_ANNUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEstimatedGrossAnnual(BigDecimal estimatedGrossAnnual) {
    this.estimatedGrossAnnual = estimatedGrossAnnual;
  }


  public ReportIncomeEstimate projectedGrossAnnual(BigDecimal projectedGrossAnnual) {
    
    this.projectedGrossAnnual = projectedGrossAnnual;
    return this;
  }

   /**
   * Projected gross income over the next 12 months, across all active income streams, based on &#x60;projectedNetAnnual&#x60;
   * @return projectedGrossAnnual
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROJECTED_GROSS_ANNUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getProjectedGrossAnnual() {
    return projectedGrossAnnual;
  }


  @JsonProperty(JSON_PROPERTY_PROJECTED_GROSS_ANNUAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProjectedGrossAnnual(BigDecimal projectedGrossAnnual) {
    this.projectedGrossAnnual = projectedGrossAnnual;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportIncomeEstimate reportIncomeEstimate = (ReportIncomeEstimate) o;
    return Objects.equals(this.netAnnual, reportIncomeEstimate.netAnnual) &&
        Objects.equals(this.projectedNetAnnual, reportIncomeEstimate.projectedNetAnnual) &&
        Objects.equals(this.estimatedGrossAnnual, reportIncomeEstimate.estimatedGrossAnnual) &&
        Objects.equals(this.projectedGrossAnnual, reportIncomeEstimate.projectedGrossAnnual);
  }

  @Override
  public int hashCode() {
    return Objects.hash(netAnnual, projectedNetAnnual, estimatedGrossAnnual, projectedGrossAnnual);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportIncomeEstimate {\n");
    sb.append("    netAnnual: ").append(toIndentedString(netAnnual)).append("\n");
    sb.append("    projectedNetAnnual: ").append(toIndentedString(projectedNetAnnual)).append("\n");
    sb.append("    estimatedGrossAnnual: ").append(toIndentedString(estimatedGrossAnnual)).append("\n");
    sb.append("    projectedGrossAnnual: ").append(toIndentedString(projectedGrossAnnual)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

