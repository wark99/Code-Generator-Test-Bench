/*
 * Proxy API Adapter
 * Convert standard OpenAPI requests to Internal API s**t show, respond with normalized data and messaging
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SearchRecordsRequestSearchFieldsInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SearchRecordsRequest
 */
@JsonPropertyOrder({
  SearchRecordsRequest.JSON_PROPERTY_PROFILE_ID,
  SearchRecordsRequest.JSON_PROPERTY_SEARCH_FIELDS
})
@JsonTypeName("search_records_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:17:03.349465965Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SearchRecordsRequest {
  public static final String JSON_PROPERTY_PROFILE_ID = "profile_id";
  private Object profileId = null;

  public static final String JSON_PROPERTY_SEARCH_FIELDS = "search_fields";
  private List<SearchRecordsRequestSearchFieldsInner> searchFields = new ArrayList<>();

  public SearchRecordsRequest() {
  }

  public SearchRecordsRequest profileId(Object profileId) {
    
    this.profileId = profileId;
    return this;
  }

   /**
   * Get profileId
   * @return profileId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getProfileId() {
    return profileId;
  }


  @JsonProperty(JSON_PROPERTY_PROFILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProfileId(Object profileId) {
    this.profileId = profileId;
  }


  public SearchRecordsRequest searchFields(List<SearchRecordsRequestSearchFieldsInner> searchFields) {
    
    this.searchFields = searchFields;
    return this;
  }

  public SearchRecordsRequest addSearchFieldsItem(SearchRecordsRequestSearchFieldsInner searchFieldsItem) {
    if (this.searchFields == null) {
      this.searchFields = new ArrayList<>();
    }
    this.searchFields.add(searchFieldsItem);
    return this;
  }

   /**
   * Get searchFields
   * @return searchFields
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEARCH_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<SearchRecordsRequestSearchFieldsInner> getSearchFields() {
    return searchFields;
  }


  @JsonProperty(JSON_PROPERTY_SEARCH_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSearchFields(List<SearchRecordsRequestSearchFieldsInner> searchFields) {
    this.searchFields = searchFields;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchRecordsRequest searchRecordsRequest = (SearchRecordsRequest) o;
    return Objects.equals(this.profileId, searchRecordsRequest.profileId) &&
        Objects.equals(this.searchFields, searchRecordsRequest.searchFields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(profileId, searchFields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchRecordsRequest {\n");
    sb.append("    profileId: ").append(toIndentedString(profileId)).append("\n");
    sb.append("    searchFields: ").append(toIndentedString(searchFields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

