/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DirectDeposit;
import org.openapitools.client.model.Employee;
import org.openapitools.client.model.Employer;
import org.openapitools.client.model.PayStat;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PayStatementForVoie
 */
@JsonPropertyOrder({
  PayStatementForVoie.JSON_PROPERTY_PAY_PERIOD,
  PayStatementForVoie.JSON_PROPERTY_BILLABLE,
  PayStatementForVoie.JSON_PROPERTY_ASSET_ID,
  PayStatementForVoie.JSON_PROPERTY_PAY_DATE,
  PayStatementForVoie.JSON_PROPERTY_START_DATE,
  PayStatementForVoie.JSON_PROPERTY_END_DATE,
  PayStatementForVoie.JSON_PROPERTY_NET_PAY_CURRENT,
  PayStatementForVoie.JSON_PROPERTY_NET_PAY_Y_T_D,
  PayStatementForVoie.JSON_PROPERTY_GROSS_PAY_CURRENT,
  PayStatementForVoie.JSON_PROPERTY_GROSS_PAY_Y_T_D,
  PayStatementForVoie.JSON_PROPERTY_PAYROLL_PROVIDER,
  PayStatementForVoie.JSON_PROPERTY_EMPLOYER,
  PayStatementForVoie.JSON_PROPERTY_EMPLOYEE,
  PayStatementForVoie.JSON_PROPERTY_PAY_STAT,
  PayStatementForVoie.JSON_PROPERTY_DIRECT_DEPOSITS,
  PayStatementForVoie.JSON_PROPERTY_INSTITUTIONS,
  PayStatementForVoie.JSON_PROPERTY_ERROR_CODE,
  PayStatementForVoie.JSON_PROPERTY_ERROR_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:05:06.990716937Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PayStatementForVoie {
  public static final String JSON_PROPERTY_PAY_PERIOD = "payPeriod";
  private String payPeriod;

  public static final String JSON_PROPERTY_BILLABLE = "billable";
  private Boolean billable;

  public static final String JSON_PROPERTY_ASSET_ID = "assetId";
  private String assetId;

  public static final String JSON_PROPERTY_PAY_DATE = "payDate";
  private Long payDate;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  private Long startDate;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private Long endDate;

  public static final String JSON_PROPERTY_NET_PAY_CURRENT = "netPayCurrent";
  private BigDecimal netPayCurrent;

  public static final String JSON_PROPERTY_NET_PAY_Y_T_D = "netPayYTD";
  private BigDecimal netPayYTD;

  public static final String JSON_PROPERTY_GROSS_PAY_CURRENT = "grossPayCurrent";
  private BigDecimal grossPayCurrent;

  public static final String JSON_PROPERTY_GROSS_PAY_Y_T_D = "grossPayYTD";
  private BigDecimal grossPayYTD;

  public static final String JSON_PROPERTY_PAYROLL_PROVIDER = "payrollProvider";
  private String payrollProvider;

  public static final String JSON_PROPERTY_EMPLOYER = "employer";
  private Employer employer;

  public static final String JSON_PROPERTY_EMPLOYEE = "employee";
  private Employee employee;

  public static final String JSON_PROPERTY_PAY_STAT = "payStat";
  private List<PayStat> payStat = new ArrayList<>();

  public static final String JSON_PROPERTY_DIRECT_DEPOSITS = "directDeposits";
  private List<DirectDeposit> directDeposits;

  public static final String JSON_PROPERTY_INSTITUTIONS = "institutions";
  private List<String> institutions = new ArrayList<>();

  public static final String JSON_PROPERTY_ERROR_CODE = "errorCode";
  private Integer errorCode;

  public static final String JSON_PROPERTY_ERROR_MESSAGE = "errorMessage";
  private String errorMessage;

  public PayStatementForVoie() {
  }

  public PayStatementForVoie payPeriod(String payPeriod) {
    
    this.payPeriod = payPeriod;
    return this;
  }

   /**
   * The pay period of the pay statement
   * @return payPeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAY_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPayPeriod() {
    return payPeriod;
  }


  @JsonProperty(JSON_PROPERTY_PAY_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayPeriod(String payPeriod) {
    this.payPeriod = payPeriod;
  }


  public PayStatementForVoie billable(Boolean billable) {
    
    this.billable = billable;
    return this;
  }

   /**
   * This will display true if the pay statement is billable. If a pay statement has been digitized previously, this will display as false as it will not be billable.
   * @return billable
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BILLABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getBillable() {
    return billable;
  }


  @JsonProperty(JSON_PROPERTY_BILLABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBillable(Boolean billable) {
    this.billable = billable;
  }


  public PayStatementForVoie assetId(String assetId) {
    
    this.assetId = assetId;
    return this;
  }

   /**
   * The asset ID of the stored pay statement
   * @return assetId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ASSET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAssetId() {
    return assetId;
  }


  @JsonProperty(JSON_PROPERTY_ASSET_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAssetId(String assetId) {
    this.assetId = assetId;
  }


  public PayStatementForVoie payDate(Long payDate) {
    
    this.payDate = payDate;
    return this;
  }

   /**
   * The listed pay date for the pay statement
   * @return payDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getPayDate() {
    return payDate;
  }


  @JsonProperty(JSON_PROPERTY_PAY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayDate(Long payDate) {
    this.payDate = payDate;
  }


  public PayStatementForVoie startDate(Long startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The beginning of the pay period
   * @return startDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartDate(Long startDate) {
    this.startDate = startDate;
  }


  public PayStatementForVoie endDate(Long endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * The end of the pay period
   * @return endDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndDate(Long endDate) {
    this.endDate = endDate;
  }


  public PayStatementForVoie netPayCurrent(BigDecimal netPayCurrent) {
    
    this.netPayCurrent = netPayCurrent;
    return this;
  }

   /**
   * The total pay after deductions for the employee for the current pay period
   * @return netPayCurrent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_PAY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNetPayCurrent() {
    return netPayCurrent;
  }


  @JsonProperty(JSON_PROPERTY_NET_PAY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetPayCurrent(BigDecimal netPayCurrent) {
    this.netPayCurrent = netPayCurrent;
  }


  public PayStatementForVoie netPayYTD(BigDecimal netPayYTD) {
    
    this.netPayYTD = netPayYTD;
    return this;
  }

   /**
   * The total accumulation of pay after deductions for the employee for the current pay year
   * @return netPayYTD
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_PAY_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNetPayYTD() {
    return netPayYTD;
  }


  @JsonProperty(JSON_PROPERTY_NET_PAY_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetPayYTD(BigDecimal netPayYTD) {
    this.netPayYTD = netPayYTD;
  }


  public PayStatementForVoie grossPayCurrent(BigDecimal grossPayCurrent) {
    
    this.grossPayCurrent = grossPayCurrent;
    return this;
  }

   /**
   * The total pay before deductions for the employee for the current pay period
   * @return grossPayCurrent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROSS_PAY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGrossPayCurrent() {
    return grossPayCurrent;
  }


  @JsonProperty(JSON_PROPERTY_GROSS_PAY_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGrossPayCurrent(BigDecimal grossPayCurrent) {
    this.grossPayCurrent = grossPayCurrent;
  }


  public PayStatementForVoie grossPayYTD(BigDecimal grossPayYTD) {
    
    this.grossPayYTD = grossPayYTD;
    return this;
  }

   /**
   * The total accumulation of pay before deductions for the employee for the current pay year
   * @return grossPayYTD
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GROSS_PAY_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getGrossPayYTD() {
    return grossPayYTD;
  }


  @JsonProperty(JSON_PROPERTY_GROSS_PAY_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGrossPayYTD(BigDecimal grossPayYTD) {
    this.grossPayYTD = grossPayYTD;
  }


  public PayStatementForVoie payrollProvider(String payrollProvider) {
    
    this.payrollProvider = payrollProvider;
    return this;
  }

   /**
   * The payroll provider extracted from the pay statement
   * @return payrollProvider
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYROLL_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPayrollProvider() {
    return payrollProvider;
  }


  @JsonProperty(JSON_PROPERTY_PAYROLL_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayrollProvider(String payrollProvider) {
    this.payrollProvider = payrollProvider;
  }


  public PayStatementForVoie employer(Employer employer) {
    
    this.employer = employer;
    return this;
  }

   /**
   * Get employer
   * @return employer
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMPLOYER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Employer getEmployer() {
    return employer;
  }


  @JsonProperty(JSON_PROPERTY_EMPLOYER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmployer(Employer employer) {
    this.employer = employer;
  }


  public PayStatementForVoie employee(Employee employee) {
    
    this.employee = employee;
    return this;
  }

   /**
   * Get employee
   * @return employee
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMPLOYEE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Employee getEmployee() {
    return employee;
  }


  @JsonProperty(JSON_PROPERTY_EMPLOYEE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmployee(Employee employee) {
    this.employee = employee;
  }


  public PayStatementForVoie payStat(List<PayStat> payStat) {
    
    this.payStat = payStat;
    return this;
  }

  public PayStatementForVoie addPayStatItem(PayStat payStatItem) {
    if (this.payStat == null) {
      this.payStat = new ArrayList<>();
    }
    this.payStat.add(payStatItem);
    return this;
  }

   /**
   * Information pertaining to the earnings on the pay statement
   * @return payStat
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAY_STAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<PayStat> getPayStat() {
    return payStat;
  }


  @JsonProperty(JSON_PROPERTY_PAY_STAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayStat(List<PayStat> payStat) {
    this.payStat = payStat;
  }


  public PayStatementForVoie directDeposits(List<DirectDeposit> directDeposits) {
    
    this.directDeposits = directDeposits;
    return this;
  }

  public PayStatementForVoie addDirectDepositsItem(DirectDeposit directDepositsItem) {
    if (this.directDeposits == null) {
      this.directDeposits = new ArrayList<>();
    }
    this.directDeposits.add(directDepositsItem);
    return this;
  }

   /**
   * Information pertaining to the direct deposits on the pay statement
   * @return directDeposits
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DIRECT_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<DirectDeposit> getDirectDeposits() {
    return directDeposits;
  }


  @JsonProperty(JSON_PROPERTY_DIRECT_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirectDeposits(List<DirectDeposit> directDeposits) {
    this.directDeposits = directDeposits;
  }


  public PayStatementForVoie institutions(List<String> institutions) {
    
    this.institutions = institutions;
    return this;
  }

  public PayStatementForVoie addInstitutionsItem(String institutionsItem) {
    if (this.institutions == null) {
      this.institutions = new ArrayList<>();
    }
    this.institutions.add(institutionsItem);
    return this;
  }

   /**
   * Not populated for the voieWithStatement style of paystub report. For the VOIE - Paystub (with TXVerify) reports this would include details of the financial institution accounts and income streams with matching transactions to the pay statement.
   * @return institutions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INSTITUTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getInstitutions() {
    return institutions;
  }


  @JsonProperty(JSON_PROPERTY_INSTITUTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstitutions(List<String> institutions) {
    this.institutions = institutions;
  }


  public PayStatementForVoie errorCode(Integer errorCode) {
    
    this.errorCode = errorCode;
    return this;
  }

   /**
   * Error code for the asset
   * @return errorCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getErrorCode() {
    return errorCode;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorCode(Integer errorCode) {
    this.errorCode = errorCode;
  }


  public PayStatementForVoie errorMessage(String errorMessage) {
    
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Error message for the asset
   * @return errorMessage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorMessage() {
    return errorMessage;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayStatementForVoie payStatementForVoie = (PayStatementForVoie) o;
    return Objects.equals(this.payPeriod, payStatementForVoie.payPeriod) &&
        Objects.equals(this.billable, payStatementForVoie.billable) &&
        Objects.equals(this.assetId, payStatementForVoie.assetId) &&
        Objects.equals(this.payDate, payStatementForVoie.payDate) &&
        Objects.equals(this.startDate, payStatementForVoie.startDate) &&
        Objects.equals(this.endDate, payStatementForVoie.endDate) &&
        Objects.equals(this.netPayCurrent, payStatementForVoie.netPayCurrent) &&
        Objects.equals(this.netPayYTD, payStatementForVoie.netPayYTD) &&
        Objects.equals(this.grossPayCurrent, payStatementForVoie.grossPayCurrent) &&
        Objects.equals(this.grossPayYTD, payStatementForVoie.grossPayYTD) &&
        Objects.equals(this.payrollProvider, payStatementForVoie.payrollProvider) &&
        Objects.equals(this.employer, payStatementForVoie.employer) &&
        Objects.equals(this.employee, payStatementForVoie.employee) &&
        Objects.equals(this.payStat, payStatementForVoie.payStat) &&
        Objects.equals(this.directDeposits, payStatementForVoie.directDeposits) &&
        Objects.equals(this.institutions, payStatementForVoie.institutions) &&
        Objects.equals(this.errorCode, payStatementForVoie.errorCode) &&
        Objects.equals(this.errorMessage, payStatementForVoie.errorMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payPeriod, billable, assetId, payDate, startDate, endDate, netPayCurrent, netPayYTD, grossPayCurrent, grossPayYTD, payrollProvider, employer, employee, payStat, directDeposits, institutions, errorCode, errorMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayStatementForVoie {\n");
    sb.append("    payPeriod: ").append(toIndentedString(payPeriod)).append("\n");
    sb.append("    billable: ").append(toIndentedString(billable)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    payDate: ").append(toIndentedString(payDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    netPayCurrent: ").append(toIndentedString(netPayCurrent)).append("\n");
    sb.append("    netPayYTD: ").append(toIndentedString(netPayYTD)).append("\n");
    sb.append("    grossPayCurrent: ").append(toIndentedString(grossPayCurrent)).append("\n");
    sb.append("    grossPayYTD: ").append(toIndentedString(grossPayYTD)).append("\n");
    sb.append("    payrollProvider: ").append(toIndentedString(payrollProvider)).append("\n");
    sb.append("    employer: ").append(toIndentedString(employer)).append("\n");
    sb.append("    employee: ").append(toIndentedString(employee)).append("\n");
    sb.append("    payStat: ").append(toIndentedString(payStat)).append("\n");
    sb.append("    directDeposits: ").append(toIndentedString(directDeposits)).append("\n");
    sb.append("    institutions: ").append(toIndentedString(institutions)).append("\n");
    sb.append("    errorCode: ").append(toIndentedString(errorCode)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

