/*
 * Optima Solutions - Asteo Ticketing
 * Remote API to interact between Freshdesk accounts and MasMovil application.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * An attachment.
 */
@JsonPropertyOrder({
  TicketAllOfAttachmentsInner.JSON_PROPERTY_CONTENT,
  TicketAllOfAttachmentsInner.JSON_PROPERTY_MIME_TYPE,
  TicketAllOfAttachmentsInner.JSON_PROPERTY_NAME
})
@JsonTypeName("ticket_allOf_attachments_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:23:28.900088471Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class TicketAllOfAttachmentsInner {
  public static final String JSON_PROPERTY_CONTENT = "content";
  private String content;

  public static final String JSON_PROPERTY_MIME_TYPE = "mimeType";
  private String mimeType;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public TicketAllOfAttachmentsInner() {
  }

  public TicketAllOfAttachmentsInner content(String content) {
    
    this.content = content;
    return this;
  }

   /**
   * The actual contents of the attachment object, if embedded, encoded as base64.
   * @return content
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getContent() {
    return content;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContent(String content) {
    this.content = content;
  }


  public TicketAllOfAttachmentsInner mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * Attachment mime type such as extension file for video, picture and document.
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMimeType() {
    return mimeType;
  }


  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public TicketAllOfAttachmentsInner name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the attachment.
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TicketAllOfAttachmentsInner ticketAllOfAttachmentsInner = (TicketAllOfAttachmentsInner) o;
    return Objects.equals(this.content, ticketAllOfAttachmentsInner.content) &&
        Objects.equals(this.mimeType, ticketAllOfAttachmentsInner.mimeType) &&
        Objects.equals(this.name, ticketAllOfAttachmentsInner.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, mimeType, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TicketAllOfAttachmentsInner {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

