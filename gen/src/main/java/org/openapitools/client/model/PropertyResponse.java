/*
 * SME Professional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.15.0-oas3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InspectionAppointmentResponseType;
import org.openapitools.client.model.LinkedOwnerResponse;
import org.openapitools.client.model.LinkedTenantResponse;
import org.openapitools.client.model.MaintenancePost200ResponseValueCreatedDate;
import org.openapitools.client.model.PropertyAddressResponse;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PropertyResponse
 */
@JsonPropertyOrder({
  PropertyResponse.JSON_PROPERTY_ID,
  PropertyResponse.JSON_PROPERTY_MANAGEMENT_TYPE,
  PropertyResponse.JSON_PROPERTY_PRIMARY_STATUS,
  PropertyResponse.JSON_PROPERTY_SECONDARY_STATUS,
  PropertyResponse.JSON_PROPERTY_ADDRESS,
  PropertyResponse.JSON_PROPERTY_INSPECTION_ROUTE,
  PropertyResponse.JSON_PROPERTY_ACCOMMODATION_TYPE,
  PropertyResponse.JSON_PROPERTY_SITUATE,
  PropertyResponse.JSON_PROPERTY_TYPE_OF_LET,
  PropertyResponse.JSON_PROPERTY_AVAILABILITY_DATE,
  PropertyResponse.JSON_PROPERTY_KEY_FOB_REFERENCE,
  PropertyResponse.JSON_PROPERTY_KEY_HOOK_NUMBER,
  PropertyResponse.JSON_PROPERTY_BEDROOMS,
  PropertyResponse.JSON_PROPERTY_BATHROOMS,
  PropertyResponse.JSON_PROPERTY_TENANTS,
  PropertyResponse.JSON_PROPERTY_OWNERS,
  PropertyResponse.JSON_PROPERTY_CREATED,
  PropertyResponse.JSON_PROPERTY_UPDATED,
  PropertyResponse.JSON_PROPERTY_INSTRUCTED_DATE,
  PropertyResponse.JSON_PROPERTY_ADVERTISED_RENT,
  PropertyResponse.JSON_PROPERTY_LEAD_TENANT,
  PropertyResponse.JSON_PROPERTY_SALE_PRICE,
  PropertyResponse.JSON_PROPERTY_INTERNAL_REFERENCE,
  PropertyResponse.JSON_PROPERTY_BRANCH,
  PropertyResponse.JSON_PROPERTY_AUTHORISATION_LIMIT,
  PropertyResponse.JSON_PROPERTY_ACTUAL_EXCHANGE_DATE,
  PropertyResponse.JSON_PROPERTY_ACTUAL_COMPLETION_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:30.009582082Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PropertyResponse {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  /**
   * 1 &#x3D; Managed let, 2 &#x3D; Let only, 3 &#x3D; Estate agency, 4 &#x3D; Short term let, 5 &#x3D; STL advertising, 6 &#x3D; Booking only, 7 &#x3D; STL Key holding, 9 &#x3D; Rental potential purchase, 10 &#x3D; Advertising only, 11 &#x3D; Lease only, 12 &#x3D; Rent collection, 13 &#x3D; Key holding, 15 &#x3D; Inspection only, 20 &#x3D; Block management, 30 &#x3D; Guaranteed rent
   */
  public enum ManagementTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_15(15),
    
    NUMBER_20(20),
    
    NUMBER_30(30);

    private Integer value;

    ManagementTypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ManagementTypeEnum fromValue(Integer value) {
      for (ManagementTypeEnum b : ManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MANAGEMENT_TYPE = "management_type";
  private ManagementTypeEnum managementType;

  /**
   * If management_type is not 3:  1 &#x3D; Void: general, 2 &#x3D; Unoccupied on market, 3 &#x3D; Occupied on market, 4 &#x3D; Tenant check period, 5 &#x3D; Await tenant move in, 6 &#x3D; Occupied, 7 &#x3D; Past property, 8 &#x3D; Notice given: not on market, 10 &#x3D; Eviction, 11 &#x3D; Pending: new property, 20 &#x3D; Occupied: pre let, 21 &#x3D; Occupied: on hold, 22 &#x3D; Occupied: pending withdrawal, 30 &#x3D; Unoccupied: pre let, 31 &#x3D; Unoccupied: on hold, 32 &#x3D; Unoccupied: pending withdrawal, 40 &#x3D; Void: in development, 41 &#x3D; Void: in refurbishment, 42 &#x3D; Void: in maintenance, 43 &#x3D; Awaiting tenant checks, 44 &#x3D; Awaiting lease.\\If management_type is 3:  0 &#x3D; Occupied on market, 1 &#x3D; Sold STC, 2 &#x3D; Sold STCM, 3 &#x3D; Under offer, 4 &#x3D; Reserved, 7 &#x3D; Past property, 8 &#x3D; Pending, 12 &#x3D; Viewings on hold, 20 &#x3D; Enquiry, 21 &#x3D; Exchanged, 22 &#x3D; Unoccupied on market, 23 &#x3D; Unoccupied off-market sale, 24 &#x3D; Occupied off-market sale.
   */
  public enum PrimaryStatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44);

    private Integer value;

    PrimaryStatusEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrimaryStatusEnum fromValue(Integer value) {
      for (PrimaryStatusEnum b : PrimaryStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PRIMARY_STATUS = "primary_status";
  private PrimaryStatusEnum primaryStatus;

  public static final String JSON_PROPERTY_SECONDARY_STATUS = "secondary_status";
  private Integer secondaryStatus;

  public static final String JSON_PROPERTY_ADDRESS = "address";
  private PropertyAddressResponse address;

  public static final String JSON_PROPERTY_INSPECTION_ROUTE = "inspection_route";
  private Integer inspectionRoute;

  /**
   * F &#x3D; Flat/Apartment, S &#x3D; Studio, H &#x3D; Detached House, SH &#x3D; Semi Detached House, TH &#x3D; Terraced House, T &#x3D; Town House, M &#x3D; Mews, B &#x3D; Bungalow, P &#x3D; Penthouse, SA &#x3D; Serviced Apartment, D &#x3D; Double Upper, I &#x3D; Single Room, J &#x3D; Double Room, V &#x3D; Villa, C &#x3D; Cottage, G &#x3D; Garage, Q &#x3D; Parking Space, CA1 &#x3D; Commercial 1, CA2 &#x3D; Commercial 2, CA3 &#x3D; Commercial 3, CA4 &#x3D; Commercial 4, CA5 &#x3D; Commercial 5, CA6 &#x3D; Commercial 6, CA7 &#x3D; Commercial 7, CA8 &#x3D; Commercial 8, CA9 &#x3D; Commercial 9, CA10 &#x3D; Commercial 10, CA11 &#x3D; Commercial 11, COT &#x3D; Commercial other, Land &#x3D; Land, N &#x3D; Unknown, ETH &#x3D; End of Terrace, GM &#x3D; Grand Maisonette, MA &#x3D; Maisonette, TB &#x3D; Terraced Bungalow, MH &#x3D; Mobile Home, BC &#x3D; Barn Conversion, SHH &#x3D; Sheltered Housing, RP &#x3D; Retirement Property, FH &#x3D; Farm House, BN &#x3D; Barn, HB &#x3D; House Boat, BF &#x3D; Block of flats
   */
  public enum AccommodationTypeEnum {
    F("F"),
    
    S("S"),
    
    H("H"),
    
    SH("SH"),
    
    TH("TH"),
    
    T("T"),
    
    M("M"),
    
    B("B"),
    
    P("P"),
    
    SA("SA"),
    
    D("D"),
    
    I("I"),
    
    J("J"),
    
    V("V"),
    
    C("C"),
    
    G("G"),
    
    Q("Q"),
    
    CA1("CA1"),
    
    CA2("CA2"),
    
    CA3("CA3"),
    
    CA4("CA4"),
    
    CA5("CA5"),
    
    CA6("CA6"),
    
    CA7("CA7"),
    
    CA8("CA8"),
    
    CA9("CA9"),
    
    CA10("CA10"),
    
    CA11("CA11"),
    
    COT("COT"),
    
    LAND("Land"),
    
    N("N"),
    
    ETH("ETH"),
    
    GM("GM"),
    
    MA("MA"),
    
    TB("TB"),
    
    MH("MH"),
    
    BC("BC"),
    
    SHH("SHH"),
    
    RP("RP"),
    
    FH("FH"),
    
    BN("BN"),
    
    HB("HB"),
    
    BF("BF");

    private String value;

    AccommodationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AccommodationTypeEnum fromValue(String value) {
      for (AccommodationTypeEnum b : AccommodationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACCOMMODATION_TYPE = "accommodation_type";
  private AccommodationTypeEnum accommodationType;

  /**
   * lower basement &#x3D; Lower basement, basement &#x3D; Basement, ground floor &#x3D; Ground floor, main door &#x3D; Main door, 1st-floor &#x3D; 1st-floor, 2nd-floor &#x3D; 2nd-floor, 3rd-floor &#x3D; 3rd-floor, 4th-floor &#x3D; 4th-floor, 5th-floor &#x3D; 5th-floor, 6th-floor &#x3D; 6th-floor, 7th-floor &#x3D; 7th-floor, 8th-floor &#x3D; 8th-floor, 9th-floor &#x3D; 9th-floor, 10th-floor &#x3D; 10th-floor, 11th-floor &#x3D; 11th-floor, 12th-floor &#x3D; 12th-floor, 13th-floor &#x3D; 13th-floor, 14th-floor &#x3D; 14th-floor, 15th-floor &#x3D; 15th-floor, 16th-floor &#x3D; 16th-floor, 17th-floor &#x3D; 17th-floor, 18th-floor &#x3D; 18th-floor, 19th-floor &#x3D; 19th-floor, 20th-floor &#x3D; 20th-floor, 21st-floor &#x3D; 21st-floor, 22nd-floor &#x3D; 22st-floor, 23rd-floor &#x3D; 23rd-floor, 24th-floor &#x3D; 24th-floor, 25th-floor &#x3D; 25th-floor, 26th-floor &#x3D; 26th-floor, 27th-floor &#x3D; 27th-floor, 28th-floor &#x3D; 28th-floor, 29th-floor &#x3D; 29th-floor, 30th-floor &#x3D; 30th-floor, Top-floor &#x3D; Top-floor, N/A &#x3D; N/A
   */
  public enum SituateEnum {
    LOWER_BASEMENT("lower basement"),
    
    BASEMENT("basement"),
    
    GROUND_FLOOR("ground floor"),
    
    MAIN_DOOR("main door"),
    
    _1ST_FLOOR("1st-floor"),
    
    _2ND_FLOOR("2nd-floor"),
    
    _3RD_FLOOR("3rd-floor"),
    
    _4TH_FLOOR("4th-floor"),
    
    _5TH_FLOOR("5th-floor"),
    
    _6TH_FLOOR("6th-floor"),
    
    _7TH_FLOOR("7th-floor"),
    
    _8TH_FLOOR("8th-floor"),
    
    _9TH_FLOOR("9th-floor"),
    
    _10TH_FLOOR("10th-floor"),
    
    _11TH_FLOOR("11th-floor"),
    
    _12TH_FLOOR("12th-floor"),
    
    _13TH_FLOOR("13th-floor"),
    
    _14TH_FLOOR("14th-floor"),
    
    _15TH_FLOOR("15th-floor"),
    
    _16TH_FLOOR("16th-floor"),
    
    _17TH_FLOOR("17th-floor"),
    
    _18TH_FLOOR("18th-floor"),
    
    _19TH_FLOOR("19th-floor"),
    
    _20TH_FLOOR("20th-floor"),
    
    _21ST_FLOOR("21st-floor"),
    
    _22ND_FLOOR("22nd-floor"),
    
    _23RD_FLOOR("23rd-floor"),
    
    _24TH_FLOOR("24th-floor"),
    
    _25TH_FLOOR("25th-floor"),
    
    _26TH_FLOOR("26th-floor"),
    
    _27TH_FLOOR("27th-floor"),
    
    _28TH_FLOOR("28th-floor"),
    
    _29TH_FLOOR("29th-floor"),
    
    _30TH_FLOOR("30th-floor"),
    
    TOP_FLOOR("Top-floor"),
    
    N_A("N/A");

    private String value;

    SituateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SituateEnum fromValue(String value) {
      for (SituateEnum b : SituateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SITUATE = "situate";
  private SituateEnum situate;

  /**
   * L &#x3D; Long term, S &#x3D; Short term &lt; 6 months, B &#x3D; Long or short term, F &#x3D; Edinburgh festival
   */
  public enum TypeOfLetEnum {
    L("L"),
    
    S("S"),
    
    B("B"),
    
    F("F");

    private String value;

    TypeOfLetEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeOfLetEnum fromValue(String value) {
      for (TypeOfLetEnum b : TypeOfLetEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE_OF_LET = "type_of_let";
  private TypeOfLetEnum typeOfLet;

  public static final String JSON_PROPERTY_AVAILABILITY_DATE = "availability_date";
  private MaintenancePost200ResponseValueCreatedDate availabilityDate;

  public static final String JSON_PROPERTY_KEY_FOB_REFERENCE = "key_fob_reference";
  private String keyFobReference;

  public static final String JSON_PROPERTY_KEY_HOOK_NUMBER = "key_hook_number";
  private Integer keyHookNumber;

  public static final String JSON_PROPERTY_BEDROOMS = "bedrooms";
  private Integer bedrooms;

  public static final String JSON_PROPERTY_BATHROOMS = "bathrooms";
  private Integer bathrooms;

  public static final String JSON_PROPERTY_TENANTS = "tenants";
  private List<LinkedTenantResponse> tenants;

  public static final String JSON_PROPERTY_OWNERS = "owners";
  private List<LinkedOwnerResponse> owners;

  public static final String JSON_PROPERTY_CREATED = "created";
  private MaintenancePost200ResponseValueCreatedDate created;

  public static final String JSON_PROPERTY_UPDATED = "updated";
  private MaintenancePost200ResponseValueCreatedDate updated;

  public static final String JSON_PROPERTY_INSTRUCTED_DATE = "instructed_date";
  private MaintenancePost200ResponseValueCreatedDate instructedDate;

  public static final String JSON_PROPERTY_ADVERTISED_RENT = "advertised_rent";
  private Double advertisedRent;

  public static final String JSON_PROPERTY_LEAD_TENANT = "lead_tenant";
  private String leadTenant;

  public static final String JSON_PROPERTY_SALE_PRICE = "sale_price";
  private Double salePrice;

  public static final String JSON_PROPERTY_INTERNAL_REFERENCE = "internal_reference";
  private String internalReference;

  public static final String JSON_PROPERTY_BRANCH = "branch";
  private InspectionAppointmentResponseType branch;

  public static final String JSON_PROPERTY_AUTHORISATION_LIMIT = "authorisation_limit";
  private Double authorisationLimit;

  public static final String JSON_PROPERTY_ACTUAL_EXCHANGE_DATE = "actual_exchange_date";
  private MaintenancePost200ResponseValueCreatedDate actualExchangeDate;

  public static final String JSON_PROPERTY_ACTUAL_COMPLETION_DATE = "actual_completion_date";
  private MaintenancePost200ResponseValueCreatedDate actualCompletionDate;

  public PropertyResponse() {
  }

  public PropertyResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public PropertyResponse managementType(ManagementTypeEnum managementType) {
    
    this.managementType = managementType;
    return this;
  }

   /**
   * 1 &#x3D; Managed let, 2 &#x3D; Let only, 3 &#x3D; Estate agency, 4 &#x3D; Short term let, 5 &#x3D; STL advertising, 6 &#x3D; Booking only, 7 &#x3D; STL Key holding, 9 &#x3D; Rental potential purchase, 10 &#x3D; Advertising only, 11 &#x3D; Lease only, 12 &#x3D; Rent collection, 13 &#x3D; Key holding, 15 &#x3D; Inspection only, 20 &#x3D; Block management, 30 &#x3D; Guaranteed rent
   * @return managementType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANAGEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ManagementTypeEnum getManagementType() {
    return managementType;
  }


  @JsonProperty(JSON_PROPERTY_MANAGEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManagementType(ManagementTypeEnum managementType) {
    this.managementType = managementType;
  }


  public PropertyResponse primaryStatus(PrimaryStatusEnum primaryStatus) {
    
    this.primaryStatus = primaryStatus;
    return this;
  }

   /**
   * If management_type is not 3:  1 &#x3D; Void: general, 2 &#x3D; Unoccupied on market, 3 &#x3D; Occupied on market, 4 &#x3D; Tenant check period, 5 &#x3D; Await tenant move in, 6 &#x3D; Occupied, 7 &#x3D; Past property, 8 &#x3D; Notice given: not on market, 10 &#x3D; Eviction, 11 &#x3D; Pending: new property, 20 &#x3D; Occupied: pre let, 21 &#x3D; Occupied: on hold, 22 &#x3D; Occupied: pending withdrawal, 30 &#x3D; Unoccupied: pre let, 31 &#x3D; Unoccupied: on hold, 32 &#x3D; Unoccupied: pending withdrawal, 40 &#x3D; Void: in development, 41 &#x3D; Void: in refurbishment, 42 &#x3D; Void: in maintenance, 43 &#x3D; Awaiting tenant checks, 44 &#x3D; Awaiting lease.\\If management_type is 3:  0 &#x3D; Occupied on market, 1 &#x3D; Sold STC, 2 &#x3D; Sold STCM, 3 &#x3D; Under offer, 4 &#x3D; Reserved, 7 &#x3D; Past property, 8 &#x3D; Pending, 12 &#x3D; Viewings on hold, 20 &#x3D; Enquiry, 21 &#x3D; Exchanged, 22 &#x3D; Unoccupied on market, 23 &#x3D; Unoccupied off-market sale, 24 &#x3D; Occupied off-market sale.
   * @return primaryStatus
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIMARY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrimaryStatusEnum getPrimaryStatus() {
    return primaryStatus;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryStatus(PrimaryStatusEnum primaryStatus) {
    this.primaryStatus = primaryStatus;
  }


  public PropertyResponse secondaryStatus(Integer secondaryStatus) {
    
    this.secondaryStatus = secondaryStatus;
    return this;
  }

   /**
   * Get secondaryStatus
   * @return secondaryStatus
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECONDARY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSecondaryStatus() {
    return secondaryStatus;
  }


  @JsonProperty(JSON_PROPERTY_SECONDARY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecondaryStatus(Integer secondaryStatus) {
    this.secondaryStatus = secondaryStatus;
  }


  public PropertyResponse address(PropertyAddressResponse address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyAddressResponse getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress(PropertyAddressResponse address) {
    this.address = address;
  }


  public PropertyResponse inspectionRoute(Integer inspectionRoute) {
    
    this.inspectionRoute = inspectionRoute;
    return this;
  }

   /**
   * Get inspectionRoute
   * @return inspectionRoute
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSPECTION_ROUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInspectionRoute() {
    return inspectionRoute;
  }


  @JsonProperty(JSON_PROPERTY_INSPECTION_ROUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInspectionRoute(Integer inspectionRoute) {
    this.inspectionRoute = inspectionRoute;
  }


  public PropertyResponse accommodationType(AccommodationTypeEnum accommodationType) {
    
    this.accommodationType = accommodationType;
    return this;
  }

   /**
   * F &#x3D; Flat/Apartment, S &#x3D; Studio, H &#x3D; Detached House, SH &#x3D; Semi Detached House, TH &#x3D; Terraced House, T &#x3D; Town House, M &#x3D; Mews, B &#x3D; Bungalow, P &#x3D; Penthouse, SA &#x3D; Serviced Apartment, D &#x3D; Double Upper, I &#x3D; Single Room, J &#x3D; Double Room, V &#x3D; Villa, C &#x3D; Cottage, G &#x3D; Garage, Q &#x3D; Parking Space, CA1 &#x3D; Commercial 1, CA2 &#x3D; Commercial 2, CA3 &#x3D; Commercial 3, CA4 &#x3D; Commercial 4, CA5 &#x3D; Commercial 5, CA6 &#x3D; Commercial 6, CA7 &#x3D; Commercial 7, CA8 &#x3D; Commercial 8, CA9 &#x3D; Commercial 9, CA10 &#x3D; Commercial 10, CA11 &#x3D; Commercial 11, COT &#x3D; Commercial other, Land &#x3D; Land, N &#x3D; Unknown, ETH &#x3D; End of Terrace, GM &#x3D; Grand Maisonette, MA &#x3D; Maisonette, TB &#x3D; Terraced Bungalow, MH &#x3D; Mobile Home, BC &#x3D; Barn Conversion, SHH &#x3D; Sheltered Housing, RP &#x3D; Retirement Property, FH &#x3D; Farm House, BN &#x3D; Barn, HB &#x3D; House Boat, BF &#x3D; Block of flats
   * @return accommodationType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOMMODATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AccommodationTypeEnum getAccommodationType() {
    return accommodationType;
  }


  @JsonProperty(JSON_PROPERTY_ACCOMMODATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccommodationType(AccommodationTypeEnum accommodationType) {
    this.accommodationType = accommodationType;
  }


  public PropertyResponse situate(SituateEnum situate) {
    
    this.situate = situate;
    return this;
  }

   /**
   * lower basement &#x3D; Lower basement, basement &#x3D; Basement, ground floor &#x3D; Ground floor, main door &#x3D; Main door, 1st-floor &#x3D; 1st-floor, 2nd-floor &#x3D; 2nd-floor, 3rd-floor &#x3D; 3rd-floor, 4th-floor &#x3D; 4th-floor, 5th-floor &#x3D; 5th-floor, 6th-floor &#x3D; 6th-floor, 7th-floor &#x3D; 7th-floor, 8th-floor &#x3D; 8th-floor, 9th-floor &#x3D; 9th-floor, 10th-floor &#x3D; 10th-floor, 11th-floor &#x3D; 11th-floor, 12th-floor &#x3D; 12th-floor, 13th-floor &#x3D; 13th-floor, 14th-floor &#x3D; 14th-floor, 15th-floor &#x3D; 15th-floor, 16th-floor &#x3D; 16th-floor, 17th-floor &#x3D; 17th-floor, 18th-floor &#x3D; 18th-floor, 19th-floor &#x3D; 19th-floor, 20th-floor &#x3D; 20th-floor, 21st-floor &#x3D; 21st-floor, 22nd-floor &#x3D; 22st-floor, 23rd-floor &#x3D; 23rd-floor, 24th-floor &#x3D; 24th-floor, 25th-floor &#x3D; 25th-floor, 26th-floor &#x3D; 26th-floor, 27th-floor &#x3D; 27th-floor, 28th-floor &#x3D; 28th-floor, 29th-floor &#x3D; 29th-floor, 30th-floor &#x3D; 30th-floor, Top-floor &#x3D; Top-floor, N/A &#x3D; N/A
   * @return situate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SITUATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SituateEnum getSituate() {
    return situate;
  }


  @JsonProperty(JSON_PROPERTY_SITUATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSituate(SituateEnum situate) {
    this.situate = situate;
  }


  public PropertyResponse typeOfLet(TypeOfLetEnum typeOfLet) {
    
    this.typeOfLet = typeOfLet;
    return this;
  }

   /**
   * L &#x3D; Long term, S &#x3D; Short term &lt; 6 months, B &#x3D; Long or short term, F &#x3D; Edinburgh festival
   * @return typeOfLet
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_OF_LET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeOfLetEnum getTypeOfLet() {
    return typeOfLet;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_OF_LET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeOfLet(TypeOfLetEnum typeOfLet) {
    this.typeOfLet = typeOfLet;
  }


  public PropertyResponse availabilityDate(MaintenancePost200ResponseValueCreatedDate availabilityDate) {
    
    this.availabilityDate = availabilityDate;
    return this;
  }

   /**
   * Get availabilityDate
   * @return availabilityDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABILITY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getAvailabilityDate() {
    return availabilityDate;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABILITY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailabilityDate(MaintenancePost200ResponseValueCreatedDate availabilityDate) {
    this.availabilityDate = availabilityDate;
  }


  public PropertyResponse keyFobReference(String keyFobReference) {
    
    this.keyFobReference = keyFobReference;
    return this;
  }

   /**
   * Get keyFobReference
   * @return keyFobReference
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY_FOB_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getKeyFobReference() {
    return keyFobReference;
  }


  @JsonProperty(JSON_PROPERTY_KEY_FOB_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeyFobReference(String keyFobReference) {
    this.keyFobReference = keyFobReference;
  }


  public PropertyResponse keyHookNumber(Integer keyHookNumber) {
    
    this.keyHookNumber = keyHookNumber;
    return this;
  }

   /**
   * Get keyHookNumber
   * @return keyHookNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY_HOOK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getKeyHookNumber() {
    return keyHookNumber;
  }


  @JsonProperty(JSON_PROPERTY_KEY_HOOK_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeyHookNumber(Integer keyHookNumber) {
    this.keyHookNumber = keyHookNumber;
  }


  public PropertyResponse bedrooms(Integer bedrooms) {
    
    this.bedrooms = bedrooms;
    return this;
  }

   /**
   * Get bedrooms
   * @return bedrooms
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEDROOMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBedrooms() {
    return bedrooms;
  }


  @JsonProperty(JSON_PROPERTY_BEDROOMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBedrooms(Integer bedrooms) {
    this.bedrooms = bedrooms;
  }


  public PropertyResponse bathrooms(Integer bathrooms) {
    
    this.bathrooms = bathrooms;
    return this;
  }

   /**
   * Get bathrooms
   * @return bathrooms
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BATHROOMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getBathrooms() {
    return bathrooms;
  }


  @JsonProperty(JSON_PROPERTY_BATHROOMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBathrooms(Integer bathrooms) {
    this.bathrooms = bathrooms;
  }


  public PropertyResponse tenants(List<LinkedTenantResponse> tenants) {
    
    this.tenants = tenants;
    return this;
  }

  public PropertyResponse addTenantsItem(LinkedTenantResponse tenantsItem) {
    if (this.tenants == null) {
      this.tenants = new ArrayList<>();
    }
    this.tenants.add(tenantsItem);
    return this;
  }

   /**
   * Get tenants
   * @return tenants
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LinkedTenantResponse> getTenants() {
    return tenants;
  }


  @JsonProperty(JSON_PROPERTY_TENANTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTenants(List<LinkedTenantResponse> tenants) {
    this.tenants = tenants;
  }


  public PropertyResponse owners(List<LinkedOwnerResponse> owners) {
    
    this.owners = owners;
    return this;
  }

  public PropertyResponse addOwnersItem(LinkedOwnerResponse ownersItem) {
    if (this.owners == null) {
      this.owners = new ArrayList<>();
    }
    this.owners.add(ownersItem);
    return this;
  }

   /**
   * Get owners
   * @return owners
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OWNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<LinkedOwnerResponse> getOwners() {
    return owners;
  }


  @JsonProperty(JSON_PROPERTY_OWNERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOwners(List<LinkedOwnerResponse> owners) {
    this.owners = owners;
  }


  public PropertyResponse created(MaintenancePost200ResponseValueCreatedDate created) {
    
    this.created = created;
    return this;
  }

   /**
   * Get created
   * @return created
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getCreated() {
    return created;
  }


  @JsonProperty(JSON_PROPERTY_CREATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreated(MaintenancePost200ResponseValueCreatedDate created) {
    this.created = created;
  }


  public PropertyResponse updated(MaintenancePost200ResponseValueCreatedDate updated) {
    
    this.updated = updated;
    return this;
  }

   /**
   * Get updated
   * @return updated
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getUpdated() {
    return updated;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdated(MaintenancePost200ResponseValueCreatedDate updated) {
    this.updated = updated;
  }


  public PropertyResponse instructedDate(MaintenancePost200ResponseValueCreatedDate instructedDate) {
    
    this.instructedDate = instructedDate;
    return this;
  }

   /**
   * Get instructedDate
   * @return instructedDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSTRUCTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getInstructedDate() {
    return instructedDate;
  }


  @JsonProperty(JSON_PROPERTY_INSTRUCTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstructedDate(MaintenancePost200ResponseValueCreatedDate instructedDate) {
    this.instructedDate = instructedDate;
  }


  public PropertyResponse advertisedRent(Double advertisedRent) {
    
    this.advertisedRent = advertisedRent;
    return this;
  }

   /**
   * Get advertisedRent
   * @return advertisedRent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADVERTISED_RENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAdvertisedRent() {
    return advertisedRent;
  }


  @JsonProperty(JSON_PROPERTY_ADVERTISED_RENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdvertisedRent(Double advertisedRent) {
    this.advertisedRent = advertisedRent;
  }


  public PropertyResponse leadTenant(String leadTenant) {
    
    this.leadTenant = leadTenant;
    return this;
  }

   /**
   * Get leadTenant
   * @return leadTenant
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LEAD_TENANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLeadTenant() {
    return leadTenant;
  }


  @JsonProperty(JSON_PROPERTY_LEAD_TENANT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLeadTenant(String leadTenant) {
    this.leadTenant = leadTenant;
  }


  public PropertyResponse salePrice(Double salePrice) {
    
    this.salePrice = salePrice;
    return this;
  }

   /**
   * Get salePrice
   * @return salePrice
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SALE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getSalePrice() {
    return salePrice;
  }


  @JsonProperty(JSON_PROPERTY_SALE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSalePrice(Double salePrice) {
    this.salePrice = salePrice;
  }


  public PropertyResponse internalReference(String internalReference) {
    
    this.internalReference = internalReference;
    return this;
  }

   /**
   * Get internalReference
   * @return internalReference
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInternalReference() {
    return internalReference;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalReference(String internalReference) {
    this.internalReference = internalReference;
  }


  public PropertyResponse branch(InspectionAppointmentResponseType branch) {
    
    this.branch = branch;
    return this;
  }

   /**
   * Get branch
   * @return branch
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InspectionAppointmentResponseType getBranch() {
    return branch;
  }


  @JsonProperty(JSON_PROPERTY_BRANCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBranch(InspectionAppointmentResponseType branch) {
    this.branch = branch;
  }


  public PropertyResponse authorisationLimit(Double authorisationLimit) {
    
    this.authorisationLimit = authorisationLimit;
    return this;
  }

   /**
   * Get authorisationLimit
   * @return authorisationLimit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTHORISATION_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAuthorisationLimit() {
    return authorisationLimit;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORISATION_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAuthorisationLimit(Double authorisationLimit) {
    this.authorisationLimit = authorisationLimit;
  }


  public PropertyResponse actualExchangeDate(MaintenancePost200ResponseValueCreatedDate actualExchangeDate) {
    
    this.actualExchangeDate = actualExchangeDate;
    return this;
  }

   /**
   * Get actualExchangeDate
   * @return actualExchangeDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTUAL_EXCHANGE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getActualExchangeDate() {
    return actualExchangeDate;
  }


  @JsonProperty(JSON_PROPERTY_ACTUAL_EXCHANGE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActualExchangeDate(MaintenancePost200ResponseValueCreatedDate actualExchangeDate) {
    this.actualExchangeDate = actualExchangeDate;
  }


  public PropertyResponse actualCompletionDate(MaintenancePost200ResponseValueCreatedDate actualCompletionDate) {
    
    this.actualCompletionDate = actualCompletionDate;
    return this;
  }

   /**
   * Get actualCompletionDate
   * @return actualCompletionDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTUAL_COMPLETION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getActualCompletionDate() {
    return actualCompletionDate;
  }


  @JsonProperty(JSON_PROPERTY_ACTUAL_COMPLETION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActualCompletionDate(MaintenancePost200ResponseValueCreatedDate actualCompletionDate) {
    this.actualCompletionDate = actualCompletionDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyResponse propertyResponse = (PropertyResponse) o;
    return Objects.equals(this.id, propertyResponse.id) &&
        Objects.equals(this.managementType, propertyResponse.managementType) &&
        Objects.equals(this.primaryStatus, propertyResponse.primaryStatus) &&
        Objects.equals(this.secondaryStatus, propertyResponse.secondaryStatus) &&
        Objects.equals(this.address, propertyResponse.address) &&
        Objects.equals(this.inspectionRoute, propertyResponse.inspectionRoute) &&
        Objects.equals(this.accommodationType, propertyResponse.accommodationType) &&
        Objects.equals(this.situate, propertyResponse.situate) &&
        Objects.equals(this.typeOfLet, propertyResponse.typeOfLet) &&
        Objects.equals(this.availabilityDate, propertyResponse.availabilityDate) &&
        Objects.equals(this.keyFobReference, propertyResponse.keyFobReference) &&
        Objects.equals(this.keyHookNumber, propertyResponse.keyHookNumber) &&
        Objects.equals(this.bedrooms, propertyResponse.bedrooms) &&
        Objects.equals(this.bathrooms, propertyResponse.bathrooms) &&
        Objects.equals(this.tenants, propertyResponse.tenants) &&
        Objects.equals(this.owners, propertyResponse.owners) &&
        Objects.equals(this.created, propertyResponse.created) &&
        Objects.equals(this.updated, propertyResponse.updated) &&
        Objects.equals(this.instructedDate, propertyResponse.instructedDate) &&
        Objects.equals(this.advertisedRent, propertyResponse.advertisedRent) &&
        Objects.equals(this.leadTenant, propertyResponse.leadTenant) &&
        Objects.equals(this.salePrice, propertyResponse.salePrice) &&
        Objects.equals(this.internalReference, propertyResponse.internalReference) &&
        Objects.equals(this.branch, propertyResponse.branch) &&
        Objects.equals(this.authorisationLimit, propertyResponse.authorisationLimit) &&
        Objects.equals(this.actualExchangeDate, propertyResponse.actualExchangeDate) &&
        Objects.equals(this.actualCompletionDate, propertyResponse.actualCompletionDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, managementType, primaryStatus, secondaryStatus, address, inspectionRoute, accommodationType, situate, typeOfLet, availabilityDate, keyFobReference, keyHookNumber, bedrooms, bathrooms, tenants, owners, created, updated, instructedDate, advertisedRent, leadTenant, salePrice, internalReference, branch, authorisationLimit, actualExchangeDate, actualCompletionDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    managementType: ").append(toIndentedString(managementType)).append("\n");
    sb.append("    primaryStatus: ").append(toIndentedString(primaryStatus)).append("\n");
    sb.append("    secondaryStatus: ").append(toIndentedString(secondaryStatus)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    inspectionRoute: ").append(toIndentedString(inspectionRoute)).append("\n");
    sb.append("    accommodationType: ").append(toIndentedString(accommodationType)).append("\n");
    sb.append("    situate: ").append(toIndentedString(situate)).append("\n");
    sb.append("    typeOfLet: ").append(toIndentedString(typeOfLet)).append("\n");
    sb.append("    availabilityDate: ").append(toIndentedString(availabilityDate)).append("\n");
    sb.append("    keyFobReference: ").append(toIndentedString(keyFobReference)).append("\n");
    sb.append("    keyHookNumber: ").append(toIndentedString(keyHookNumber)).append("\n");
    sb.append("    bedrooms: ").append(toIndentedString(bedrooms)).append("\n");
    sb.append("    bathrooms: ").append(toIndentedString(bathrooms)).append("\n");
    sb.append("    tenants: ").append(toIndentedString(tenants)).append("\n");
    sb.append("    owners: ").append(toIndentedString(owners)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("    instructedDate: ").append(toIndentedString(instructedDate)).append("\n");
    sb.append("    advertisedRent: ").append(toIndentedString(advertisedRent)).append("\n");
    sb.append("    leadTenant: ").append(toIndentedString(leadTenant)).append("\n");
    sb.append("    salePrice: ").append(toIndentedString(salePrice)).append("\n");
    sb.append("    internalReference: ").append(toIndentedString(internalReference)).append("\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    authorisationLimit: ").append(toIndentedString(authorisationLimit)).append("\n");
    sb.append("    actualExchangeDate: ").append(toIndentedString(actualExchangeDate)).append("\n");
    sb.append("    actualCompletionDate: ").append(toIndentedString(actualCompletionDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

