/*
 * LiveFree Health Measurements API
 * The Health Measurements API enables partners to access data from the LiveFree Health Portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@lifebeacon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MeasurementEventType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MeasurementWebhookBase
 */
@JsonPropertyOrder({
  MeasurementWebhookBase.JSON_PROPERTY_URL,
  MeasurementWebhookBase.JSON_PROPERTY_ACTIVE,
  MeasurementWebhookBase.JSON_PROPERTY_MIN_SECONDS_PER_CALL,
  MeasurementWebhookBase.JSON_PROPERTY_EVENT_TYPES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:30.476705269Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class MeasurementWebhookBase {
  public static final String JSON_PROPERTY_URL = "url";
  private URI url;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active = false;

  public static final String JSON_PROPERTY_MIN_SECONDS_PER_CALL = "minSecondsPerCall";
  private Integer minSecondsPerCall = 0;

  public static final String JSON_PROPERTY_EVENT_TYPES = "eventTypes";
  private List<MeasurementEventType> eventTypes = new ArrayList<>(Arrays.asList());

  public MeasurementWebhookBase() {
  }

  public MeasurementWebhookBase url(URI url) {
    
    this.url = url;
    return this;
  }

   /**
   * The URL where notifications will be sent.
   * @return url
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(URI url) {
    this.url = url;
  }


  public MeasurementWebhookBase active(Boolean active) {
    
    this.active = active;
    return this;
  }

   /**
   * Indicates whether notifications are enabled for this webhook.
   * @return active
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public MeasurementWebhookBase minSecondsPerCall(Integer minSecondsPerCall) {
    
    this.minSecondsPerCall = minSecondsPerCall;
    return this;
  }

   /**
   * The number of seconds to wait between notifications, or zero to trigger a notification on every event.
   * @return minSecondsPerCall
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN_SECONDS_PER_CALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getMinSecondsPerCall() {
    return minSecondsPerCall;
  }


  @JsonProperty(JSON_PROPERTY_MIN_SECONDS_PER_CALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinSecondsPerCall(Integer minSecondsPerCall) {
    this.minSecondsPerCall = minSecondsPerCall;
  }


  public MeasurementWebhookBase eventTypes(List<MeasurementEventType> eventTypes) {
    
    this.eventTypes = eventTypes;
    return this;
  }

  public MeasurementWebhookBase addEventTypesItem(MeasurementEventType eventTypesItem) {
    if (this.eventTypes == null) {
      this.eventTypes = new ArrayList<>(Arrays.asList());
    }
    this.eventTypes.add(eventTypesItem);
    return this;
  }

   /**
   * An optional array of measurement event types to limit which event types will trigger a notification. If no event types are specified then all events will trigger a notification.
   * @return eventTypes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MeasurementEventType> getEventTypes() {
    return eventTypes;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventTypes(List<MeasurementEventType> eventTypes) {
    this.eventTypes = eventTypes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeasurementWebhookBase measurementWebhookBase = (MeasurementWebhookBase) o;
    return Objects.equals(this.url, measurementWebhookBase.url) &&
        Objects.equals(this.active, measurementWebhookBase.active) &&
        Objects.equals(this.minSecondsPerCall, measurementWebhookBase.minSecondsPerCall) &&
        Objects.equals(this.eventTypes, measurementWebhookBase.eventTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, active, minSecondsPerCall, eventTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeasurementWebhookBase {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    minSecondsPerCall: ").append(toIndentedString(minSecondsPerCall)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

