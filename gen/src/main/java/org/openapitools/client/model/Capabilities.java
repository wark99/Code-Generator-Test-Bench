/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Capabilities
 */
@JsonPropertyOrder({
  Capabilities.JSON_PROPERTY_USE_VERSIONING,
  Capabilities.JSON_PROPERTY_USE_UPLOAD_COMPRESSION,
  Capabilities.JSON_PROPERTY_USE_TEAM_SPACE,
  Capabilities.JSON_PROPERTY_CAN_ADD_USER,
  Capabilities.JSON_PROPERTY_CAN_SEE_STATS,
  Capabilities.JSON_PROPERTY_CAN_UPGRADE_TO_KSUITE,
  Capabilities.JSON_PROPERTY_CAN_REWIND
})
@JsonTypeName("capabilities")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Capabilities {
  public static final String JSON_PROPERTY_USE_VERSIONING = "use_versioning";
  private Boolean useVersioning;

  public static final String JSON_PROPERTY_USE_UPLOAD_COMPRESSION = "use_upload_compression";
  private Boolean useUploadCompression;

  public static final String JSON_PROPERTY_USE_TEAM_SPACE = "use_team_space";
  private Boolean useTeamSpace;

  public static final String JSON_PROPERTY_CAN_ADD_USER = "can_add_user";
  private Boolean canAddUser;

  public static final String JSON_PROPERTY_CAN_SEE_STATS = "can_see_stats";
  private Boolean canSeeStats;

  public static final String JSON_PROPERTY_CAN_UPGRADE_TO_KSUITE = "can_upgrade_to_ksuite";
  private Boolean canUpgradeToKsuite;

  public static final String JSON_PROPERTY_CAN_REWIND = "can_rewind";
  private Boolean canRewind;

  public Capabilities() {
  }

  public Capabilities useVersioning(Boolean useVersioning) {
    
    this.useVersioning = useVersioning;
    return this;
  }

   /**
   * Is versioning activated
   * @return useVersioning
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_VERSIONING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseVersioning() {
    return useVersioning;
  }


  @JsonProperty(JSON_PROPERTY_USE_VERSIONING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseVersioning(Boolean useVersioning) {
    this.useVersioning = useVersioning;
  }


  public Capabilities useUploadCompression(Boolean useUploadCompression) {
    
    this.useUploadCompression = useUploadCompression;
    return this;
  }

   /**
   * During upload compression is allowed
   * @return useUploadCompression
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_UPLOAD_COMPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseUploadCompression() {
    return useUploadCompression;
  }


  @JsonProperty(JSON_PROPERTY_USE_UPLOAD_COMPRESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseUploadCompression(Boolean useUploadCompression) {
    this.useUploadCompression = useUploadCompression;
  }


  public Capabilities useTeamSpace(Boolean useTeamSpace) {
    
    this.useTeamSpace = useTeamSpace;
    return this;
  }

   /**
   * Shared/Team directory feature
   * @return useTeamSpace
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_TEAM_SPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseTeamSpace() {
    return useTeamSpace;
  }


  @JsonProperty(JSON_PROPERTY_USE_TEAM_SPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseTeamSpace(Boolean useTeamSpace) {
    this.useTeamSpace = useTeamSpace;
  }


  public Capabilities canAddUser(Boolean canAddUser) {
    
    this.canAddUser = canAddUser;
    return this;
  }

   /**
   * Can add an user in the kDrive
   * @return canAddUser
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_ADD_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanAddUser() {
    return canAddUser;
  }


  @JsonProperty(JSON_PROPERTY_CAN_ADD_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanAddUser(Boolean canAddUser) {
    this.canAddUser = canAddUser;
  }


  public Capabilities canSeeStats(Boolean canSeeStats) {
    
    this.canSeeStats = canSeeStats;
    return this;
  }

   /**
   * Can see stats of the kDrive
   * @return canSeeStats
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_SEE_STATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanSeeStats() {
    return canSeeStats;
  }


  @JsonProperty(JSON_PROPERTY_CAN_SEE_STATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanSeeStats(Boolean canSeeStats) {
    this.canSeeStats = canSeeStats;
  }


  public Capabilities canUpgradeToKsuite(Boolean canUpgradeToKsuite) {
    
    this.canUpgradeToKsuite = canUpgradeToKsuite;
    return this;
  }

   /**
   * Can the drive be upgraded to a kSuite
   * @return canUpgradeToKsuite
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_UPGRADE_TO_KSUITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanUpgradeToKsuite() {
    return canUpgradeToKsuite;
  }


  @JsonProperty(JSON_PROPERTY_CAN_UPGRADE_TO_KSUITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanUpgradeToKsuite(Boolean canUpgradeToKsuite) {
    this.canUpgradeToKsuite = canUpgradeToKsuite;
  }


  public Capabilities canRewind(Boolean canRewind) {
    
    this.canRewind = canRewind;
    return this;
  }

   /**
   * Can rewind the kDrive
   * @return canRewind
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAN_REWIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCanRewind() {
    return canRewind;
  }


  @JsonProperty(JSON_PROPERTY_CAN_REWIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanRewind(Boolean canRewind) {
    this.canRewind = canRewind;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Capabilities capabilities = (Capabilities) o;
    return Objects.equals(this.useVersioning, capabilities.useVersioning) &&
        Objects.equals(this.useUploadCompression, capabilities.useUploadCompression) &&
        Objects.equals(this.useTeamSpace, capabilities.useTeamSpace) &&
        Objects.equals(this.canAddUser, capabilities.canAddUser) &&
        Objects.equals(this.canSeeStats, capabilities.canSeeStats) &&
        Objects.equals(this.canUpgradeToKsuite, capabilities.canUpgradeToKsuite) &&
        Objects.equals(this.canRewind, capabilities.canRewind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(useVersioning, useUploadCompression, useTeamSpace, canAddUser, canSeeStats, canUpgradeToKsuite, canRewind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Capabilities {\n");
    sb.append("    useVersioning: ").append(toIndentedString(useVersioning)).append("\n");
    sb.append("    useUploadCompression: ").append(toIndentedString(useUploadCompression)).append("\n");
    sb.append("    useTeamSpace: ").append(toIndentedString(useTeamSpace)).append("\n");
    sb.append("    canAddUser: ").append(toIndentedString(canAddUser)).append("\n");
    sb.append("    canSeeStats: ").append(toIndentedString(canSeeStats)).append("\n");
    sb.append("    canUpgradeToKsuite: ").append(toIndentedString(canUpgradeToKsuite)).append("\n");
    sb.append("    canRewind: ").append(toIndentedString(canRewind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

