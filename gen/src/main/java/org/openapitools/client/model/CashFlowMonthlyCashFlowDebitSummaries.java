/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CashFlowMonthlyCashFlowDebitSummaries
 */
@JsonPropertyOrder({
  CashFlowMonthlyCashFlowDebitSummaries.JSON_PROPERTY_MONTH,
  CashFlowMonthlyCashFlowDebitSummaries.JSON_PROPERTY_NUMBER_OF_DEBITS,
  CashFlowMonthlyCashFlowDebitSummaries.JSON_PROPERTY_TOTAL_DEBITS_AMOUNT,
  CashFlowMonthlyCashFlowDebitSummaries.JSON_PROPERTY_LARGEST_DEBIT,
  CashFlowMonthlyCashFlowDebitSummaries.JSON_PROPERTY_NUMBER_OF_DEBITS_LESS_TRANSFERS,
  CashFlowMonthlyCashFlowDebitSummaries.JSON_PROPERTY_TOTAL_DEBITS_AMOUNT_LESS_TRANSFERS,
  CashFlowMonthlyCashFlowDebitSummaries.JSON_PROPERTY_AVERAGE_DEBIT_AMOUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T12:50:32.834459740Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CashFlowMonthlyCashFlowDebitSummaries {
  public static final String JSON_PROPERTY_MONTH = "month";
  private Long month;

  public static final String JSON_PROPERTY_NUMBER_OF_DEBITS = "numberOfDebits";
  private String numberOfDebits;

  public static final String JSON_PROPERTY_TOTAL_DEBITS_AMOUNT = "totalDebitsAmount";
  private BigDecimal totalDebitsAmount;

  public static final String JSON_PROPERTY_LARGEST_DEBIT = "largestDebit";
  private BigDecimal largestDebit;

  public static final String JSON_PROPERTY_NUMBER_OF_DEBITS_LESS_TRANSFERS = "numberOfDebitsLessTransfers";
  private String numberOfDebitsLessTransfers;

  public static final String JSON_PROPERTY_TOTAL_DEBITS_AMOUNT_LESS_TRANSFERS = "totalDebitsAmountLessTransfers";
  private BigDecimal totalDebitsAmountLessTransfers;

  public static final String JSON_PROPERTY_AVERAGE_DEBIT_AMOUNT = "averageDebitAmount";
  private BigDecimal averageDebitAmount;

  public CashFlowMonthlyCashFlowDebitSummaries() {
  }

  public CashFlowMonthlyCashFlowDebitSummaries month(Long month) {
    
    this.month = month;
    return this;
  }

   /**
   * One instance for each complete calendar month in the report
   * @return month
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getMonth() {
    return month;
  }


  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMonth(Long month) {
    this.month = month;
  }


  public CashFlowMonthlyCashFlowDebitSummaries numberOfDebits(String numberOfDebits) {
    
    this.numberOfDebits = numberOfDebits;
    return this;
  }

   /**
   * Number of Debits by month across all accounts
   * @return numberOfDebits
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_DEBITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNumberOfDebits() {
    return numberOfDebits;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_DEBITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumberOfDebits(String numberOfDebits) {
    this.numberOfDebits = numberOfDebits;
  }


  public CashFlowMonthlyCashFlowDebitSummaries totalDebitsAmount(BigDecimal totalDebitsAmount) {
    
    this.totalDebitsAmount = totalDebitsAmount;
    return this;
  }

   /**
   * Total Amount of Debits by month across all accounts
   * @return totalDebitsAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_DEBITS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getTotalDebitsAmount() {
    return totalDebitsAmount;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_DEBITS_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalDebitsAmount(BigDecimal totalDebitsAmount) {
    this.totalDebitsAmount = totalDebitsAmount;
  }


  public CashFlowMonthlyCashFlowDebitSummaries largestDebit(BigDecimal largestDebit) {
    
    this.largestDebit = largestDebit;
    return this;
  }

   /**
   * Largest Debit by month
   * @return largestDebit
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LARGEST_DEBIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getLargestDebit() {
    return largestDebit;
  }


  @JsonProperty(JSON_PROPERTY_LARGEST_DEBIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLargestDebit(BigDecimal largestDebit) {
    this.largestDebit = largestDebit;
  }


  public CashFlowMonthlyCashFlowDebitSummaries numberOfDebitsLessTransfers(String numberOfDebitsLessTransfers) {
    
    this.numberOfDebitsLessTransfers = numberOfDebitsLessTransfers;
    return this;
  }

   /**
   * Number of Debits by month (less transfers)
   * @return numberOfDebitsLessTransfers
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_DEBITS_LESS_TRANSFERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNumberOfDebitsLessTransfers() {
    return numberOfDebitsLessTransfers;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER_OF_DEBITS_LESS_TRANSFERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumberOfDebitsLessTransfers(String numberOfDebitsLessTransfers) {
    this.numberOfDebitsLessTransfers = numberOfDebitsLessTransfers;
  }


  public CashFlowMonthlyCashFlowDebitSummaries totalDebitsAmountLessTransfers(BigDecimal totalDebitsAmountLessTransfers) {
    
    this.totalDebitsAmountLessTransfers = totalDebitsAmountLessTransfers;
    return this;
  }

   /**
   * Total amount of debits by month (less transfers)
   * @return totalDebitsAmountLessTransfers
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_DEBITS_AMOUNT_LESS_TRANSFERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getTotalDebitsAmountLessTransfers() {
    return totalDebitsAmountLessTransfers;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_DEBITS_AMOUNT_LESS_TRANSFERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalDebitsAmountLessTransfers(BigDecimal totalDebitsAmountLessTransfers) {
    this.totalDebitsAmountLessTransfers = totalDebitsAmountLessTransfers;
  }


  public CashFlowMonthlyCashFlowDebitSummaries averageDebitAmount(BigDecimal averageDebitAmount) {
    
    this.averageDebitAmount = averageDebitAmount;
    return this;
  }

   /**
   * The average debit amount
   * @return averageDebitAmount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_DEBIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageDebitAmount() {
    return averageDebitAmount;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_DEBIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageDebitAmount(BigDecimal averageDebitAmount) {
    this.averageDebitAmount = averageDebitAmount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowMonthlyCashFlowDebitSummaries cashFlowMonthlyCashFlowDebitSummaries = (CashFlowMonthlyCashFlowDebitSummaries) o;
    return Objects.equals(this.month, cashFlowMonthlyCashFlowDebitSummaries.month) &&
        Objects.equals(this.numberOfDebits, cashFlowMonthlyCashFlowDebitSummaries.numberOfDebits) &&
        Objects.equals(this.totalDebitsAmount, cashFlowMonthlyCashFlowDebitSummaries.totalDebitsAmount) &&
        Objects.equals(this.largestDebit, cashFlowMonthlyCashFlowDebitSummaries.largestDebit) &&
        Objects.equals(this.numberOfDebitsLessTransfers, cashFlowMonthlyCashFlowDebitSummaries.numberOfDebitsLessTransfers) &&
        Objects.equals(this.totalDebitsAmountLessTransfers, cashFlowMonthlyCashFlowDebitSummaries.totalDebitsAmountLessTransfers) &&
        Objects.equals(this.averageDebitAmount, cashFlowMonthlyCashFlowDebitSummaries.averageDebitAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(month, numberOfDebits, totalDebitsAmount, largestDebit, numberOfDebitsLessTransfers, totalDebitsAmountLessTransfers, averageDebitAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowMonthlyCashFlowDebitSummaries {\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    numberOfDebits: ").append(toIndentedString(numberOfDebits)).append("\n");
    sb.append("    totalDebitsAmount: ").append(toIndentedString(totalDebitsAmount)).append("\n");
    sb.append("    largestDebit: ").append(toIndentedString(largestDebit)).append("\n");
    sb.append("    numberOfDebitsLessTransfers: ").append(toIndentedString(numberOfDebitsLessTransfers)).append("\n");
    sb.append("    totalDebitsAmountLessTransfers: ").append(toIndentedString(totalDebitsAmountLessTransfers)).append("\n");
    sb.append("    averageDebitAmount: ").append(toIndentedString(averageDebitAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

