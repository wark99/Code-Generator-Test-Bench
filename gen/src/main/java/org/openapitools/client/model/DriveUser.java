/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Capabilities5;
import org.openapitools.client.model.Drive;
import org.openapitools.client.model.Preference;
import org.openapitools.client.model.Security2;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DriveUser
 */
@JsonPropertyOrder({
  DriveUser.JSON_PROPERTY_ID,
  DriveUser.JSON_PROPERTY_DISPLAY_NAME,
  DriveUser.JSON_PROPERTY_FIRST_NAME,
  DriveUser.JSON_PROPERTY_LAST_NAME,
  DriveUser.JSON_PROPERTY_EMAIL,
  DriveUser.JSON_PROPERTY_AVATAR,
  DriveUser.JSON_PROPERTY_TYPE,
  DriveUser.JSON_PROPERTY_DELETED_AT,
  DriveUser.JSON_PROPERTY_TEAMS,
  DriveUser.JSON_PROPERTY_SECURITY,
  DriveUser.JSON_PROPERTY_DRIVE_ID,
  DriveUser.JSON_PROPERTY_DRIVE,
  DriveUser.JSON_PROPERTY_DRIVE_NAME,
  DriveUser.JSON_PROPERTY_ACCOUNT_ID,
  DriveUser.JSON_PROPERTY_CREATED_AT,
  DriveUser.JSON_PROPERTY_UPDATED_AT,
  DriveUser.JSON_PROPERTY_LAST_CONNECTION_AT,
  DriveUser.JSON_PROPERTY_PRODUCT_ID,
  DriveUser.JSON_PROPERTY_STATUS,
  DriveUser.JSON_PROPERTY_ROLE,
  DriveUser.JSON_PROPERTY_PREFERENCE,
  DriveUser.JSON_PROPERTY_CATEGORIES_PERMISSIONS,
  DriveUser.JSON_PROPERTY_CAPABILITIES,
  DriveUser.JSON_PROPERTY_PRIVATE_STORAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class DriveUser {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "display_name";
  private String displayName;

  public static final String JSON_PROPERTY_FIRST_NAME = "first_name";
  private String firstName;

  public static final String JSON_PROPERTY_LAST_NAME = "last_name";
  private String lastName;

  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_AVATAR = "avatar";
  private String avatar;

  /**
   * Type of the access; this field is no longer used and has been replaced by an additional role property &#x60;external&#x60;.&lt;note&gt;&lt;strong&gt;main&lt;/strong&gt;: User has access to the drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;shared&lt;/strong&gt;: User has access to a shared file / directory only.&lt;/note&gt;
   */
  public enum TypeEnum {
    MAIN("main"),
    
    SHARED("shared");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_DELETED_AT = "deleted_at";
  private Integer deletedAt;

  public static final String JSON_PROPERTY_TEAMS = "teams";
  private List<Integer> teams;

  public static final String JSON_PROPERTY_SECURITY = "security";
  private Security2 security;

  public static final String JSON_PROPERTY_DRIVE_ID = "drive_id";
  private Integer driveId;

  public static final String JSON_PROPERTY_DRIVE = "drive";
  private Drive drive;

  public static final String JSON_PROPERTY_DRIVE_NAME = "drive_name";
  private String driveName;

  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  private Integer accountId;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private Integer updatedAt;

  public static final String JSON_PROPERTY_LAST_CONNECTION_AT = "last_connection_at";
  private Integer lastConnectionAt;

  public static final String JSON_PROPERTY_PRODUCT_ID = "product_id";
  private Integer productId;

  /**
   * Current access status of the user in the drive.&lt;note&gt;&lt;strong&gt;active&lt;/strong&gt;: User has access to the Drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;deleted_kept&lt;/strong&gt;: User has been removed but his data remain in the drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;deleted_removed&lt;/strong&gt;: User has been removed.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;deleted_transferred&lt;/strong&gt;: User has been removed and his data has been transferred to another user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;deleted_transferring&lt;/strong&gt;: User has been removed and is being transferred to another user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;locked&lt;/strong&gt;: User has been locked, user can no longer access to the drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;pending&lt;/strong&gt;: User has not accepted the invitation request.&lt;/note&gt;
   */
  public enum StatusEnum {
    ACTIVE("active"),
    
    DELETED_KEPT("deleted_kept"),
    
    DELETED_REMOVED("deleted_removed"),
    
    DELETED_TRANSFERRED("deleted_transferred"),
    
    DELETED_TRANSFERRING("deleted_transferring"),
    
    LOCKED("locked"),
    
    PENDING("pending");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * Administration level of the user.&lt;note&gt;&lt;strong&gt;admin&lt;/strong&gt;: Administrator of the drive, can manage the drive (settings, invitations and users) and the files.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;external&lt;/strong&gt;: External user can only access the files given by the others roles.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;user&lt;/strong&gt;: Internal user can invite user and manage the files of his private directory and other directories with manage file access.&lt;/note&gt;
   */
  public enum RoleEnum {
    ADMIN("admin"),
    
    EXTERNAL("external"),
    
    USER("user");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ROLE = "role";
  private RoleEnum role;

  public static final String JSON_PROPERTY_PREFERENCE = "preference";
  private Preference preference;

  public static final String JSON_PROPERTY_CATEGORIES_PERMISSIONS = "categories_permissions";
  private String categoriesPermissions;

  public static final String JSON_PROPERTY_CAPABILITIES = "capabilities";
  private Capabilities5 capabilities;

  public static final String JSON_PROPERTY_PRIVATE_STORAGE = "private_storage";
  private Integer privateStorage;

  public DriveUser() {
  }

  public DriveUser id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;Drive User&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public DriveUser displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Display name
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public DriveUser firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * First name
   * @return firstName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FIRST_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFirstName() {
    return firstName;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public DriveUser lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Last name
   * @return lastName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAST_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLastName() {
    return lastName;
  }


  @JsonProperty(JSON_PROPERTY_LAST_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public DriveUser email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email
   * @return email
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(String email) {
    this.email = email;
  }


  public DriveUser avatar(String avatar) {
    
    this.avatar = avatar;
    return this;
  }

   /**
   * Avatar
   * @return avatar
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVATAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAvatar() {
    return avatar;
  }


  @JsonProperty(JSON_PROPERTY_AVATAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public DriveUser type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of the access; this field is no longer used and has been replaced by an additional role property &#x60;external&#x60;.&lt;note&gt;&lt;strong&gt;main&lt;/strong&gt;: User has access to the drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;shared&lt;/strong&gt;: User has access to a shared file / directory only.&lt;/note&gt;
   * @return type
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DriveUser deletedAt(Integer deletedAt) {
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Timestamp &#x60;Drive User&#x60; was deleted at
   * @return deletedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDeletedAt() {
    return deletedAt;
  }


  @JsonProperty(JSON_PROPERTY_DELETED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeletedAt(Integer deletedAt) {
    this.deletedAt = deletedAt;
  }


  public DriveUser teams(List<Integer> teams) {
    
    this.teams = teams;
    return this;
  }

  public DriveUser addTeamsItem(Integer teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

   /**
   * List of Team identifiers
   * @return teams
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getTeams() {
    return teams;
  }


  @JsonProperty(JSON_PROPERTY_TEAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTeams(List<Integer> teams) {
    this.teams = teams;
  }


  public DriveUser security(Security2 security) {
    
    this.security = security;
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Security2 getSecurity() {
    return security;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurity(Security2 security) {
    this.security = security;
  }


  public DriveUser driveId(Integer driveId) {
    
    this.driveId = driveId;
    return this;
  }

   /**
   * Drive identifier
   * @return driveId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DRIVE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDriveId() {
    return driveId;
  }


  @JsonProperty(JSON_PROPERTY_DRIVE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDriveId(Integer driveId) {
    this.driveId = driveId;
  }


  public DriveUser drive(Drive drive) {
    
    this.drive = drive;
    return this;
  }

   /**
   * Get drive
   * @return drive
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DRIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Drive getDrive() {
    return drive;
  }


  @JsonProperty(JSON_PROPERTY_DRIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDrive(Drive drive) {
    this.drive = drive;
  }


  public DriveUser driveName(String driveName) {
    
    this.driveName = driveName;
    return this;
  }

   /**
   * Get driveName
   * @return driveName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DRIVE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDriveName() {
    return driveName;
  }


  @JsonProperty(JSON_PROPERTY_DRIVE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDriveName(String driveName) {
    this.driveName = driveName;
  }


  public DriveUser accountId(Integer accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Account identifier of resource &#x60;Drive User&#x60;
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public DriveUser createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp &#x60;Drive User&#x60; was created at
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public DriveUser updatedAt(Integer updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Timestamp &#x60;Drive User&#x60; was updated at
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(Integer updatedAt) {
    this.updatedAt = updatedAt;
  }


  public DriveUser lastConnectionAt(Integer lastConnectionAt) {
    
    this.lastConnectionAt = lastConnectionAt;
    return this;
  }

   /**
   * Timestamp &#x60;User&#x60; was last connected at
   * @return lastConnectionAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAST_CONNECTION_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLastConnectionAt() {
    return lastConnectionAt;
  }


  @JsonProperty(JSON_PROPERTY_LAST_CONNECTION_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastConnectionAt(Integer lastConnectionAt) {
    this.lastConnectionAt = lastConnectionAt;
  }


  public DriveUser productId(Integer productId) {
    
    this.productId = productId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;product&#x60; that is related to the resource &#x60;Drive User&#x60;
   * @return productId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getProductId() {
    return productId;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProductId(Integer productId) {
    this.productId = productId;
  }


  public DriveUser status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Current access status of the user in the drive.&lt;note&gt;&lt;strong&gt;active&lt;/strong&gt;: User has access to the Drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;deleted_kept&lt;/strong&gt;: User has been removed but his data remain in the drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;deleted_removed&lt;/strong&gt;: User has been removed.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;deleted_transferred&lt;/strong&gt;: User has been removed and his data has been transferred to another user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;deleted_transferring&lt;/strong&gt;: User has been removed and is being transferred to another user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;locked&lt;/strong&gt;: User has been locked, user can no longer access to the drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;pending&lt;/strong&gt;: User has not accepted the invitation request.&lt;/note&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DriveUser role(RoleEnum role) {
    
    this.role = role;
    return this;
  }

   /**
   * Administration level of the user.&lt;note&gt;&lt;strong&gt;admin&lt;/strong&gt;: Administrator of the drive, can manage the drive (settings, invitations and users) and the files.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;external&lt;/strong&gt;: External user can only access the files given by the others roles.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;user&lt;/strong&gt;: Internal user can invite user and manage the files of his private directory and other directories with manage file access.&lt;/note&gt;
   * @return role
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public RoleEnum getRole() {
    return role;
  }


  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRole(RoleEnum role) {
    this.role = role;
  }


  public DriveUser preference(Preference preference) {
    
    this.preference = preference;
    return this;
  }

   /**
   * Get preference
   * @return preference
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PREFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Preference getPreference() {
    return preference;
  }


  @JsonProperty(JSON_PROPERTY_PREFERENCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreference(Preference preference) {
    this.preference = preference;
  }


  public DriveUser categoriesPermissions(String categoriesPermissions) {
    
    this.categoriesPermissions = categoriesPermissions;
    return this;
  }

   /**
   * Get user permissions on categories
   * @return categoriesPermissions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORIES_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategoriesPermissions() {
    return categoriesPermissions;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategoriesPermissions(String categoriesPermissions) {
    this.categoriesPermissions = categoriesPermissions;
  }


  public DriveUser capabilities(Capabilities5 capabilities) {
    
    this.capabilities = capabilities;
    return this;
  }

   /**
   * Get capabilities
   * @return capabilities
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAPABILITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Capabilities5 getCapabilities() {
    return capabilities;
  }


  @JsonProperty(JSON_PROPERTY_CAPABILITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapabilities(Capabilities5 capabilities) {
    this.capabilities = capabilities;
  }


  public DriveUser privateStorage(Integer privateStorage) {
    
    this.privateStorage = privateStorage;
    return this;
  }

   /**
   * Storage size of private files (bytes)
   * @return privateStorage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIVATE_STORAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPrivateStorage() {
    return privateStorage;
  }


  @JsonProperty(JSON_PROPERTY_PRIVATE_STORAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrivateStorage(Integer privateStorage) {
    this.privateStorage = privateStorage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveUser driveUser = (DriveUser) o;
    return Objects.equals(this.id, driveUser.id) &&
        Objects.equals(this.displayName, driveUser.displayName) &&
        Objects.equals(this.firstName, driveUser.firstName) &&
        Objects.equals(this.lastName, driveUser.lastName) &&
        Objects.equals(this.email, driveUser.email) &&
        Objects.equals(this.avatar, driveUser.avatar) &&
        Objects.equals(this.type, driveUser.type) &&
        Objects.equals(this.deletedAt, driveUser.deletedAt) &&
        Objects.equals(this.teams, driveUser.teams) &&
        Objects.equals(this.security, driveUser.security) &&
        Objects.equals(this.driveId, driveUser.driveId) &&
        Objects.equals(this.drive, driveUser.drive) &&
        Objects.equals(this.driveName, driveUser.driveName) &&
        Objects.equals(this.accountId, driveUser.accountId) &&
        Objects.equals(this.createdAt, driveUser.createdAt) &&
        Objects.equals(this.updatedAt, driveUser.updatedAt) &&
        Objects.equals(this.lastConnectionAt, driveUser.lastConnectionAt) &&
        Objects.equals(this.productId, driveUser.productId) &&
        Objects.equals(this.status, driveUser.status) &&
        Objects.equals(this.role, driveUser.role) &&
        Objects.equals(this.preference, driveUser.preference) &&
        Objects.equals(this.categoriesPermissions, driveUser.categoriesPermissions) &&
        Objects.equals(this.capabilities, driveUser.capabilities) &&
        Objects.equals(this.privateStorage, driveUser.privateStorage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, displayName, firstName, lastName, email, avatar, type, deletedAt, teams, security, driveId, drive, driveName, accountId, createdAt, updatedAt, lastConnectionAt, productId, status, role, preference, categoriesPermissions, capabilities, privateStorage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveUser {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    driveId: ").append(toIndentedString(driveId)).append("\n");
    sb.append("    drive: ").append(toIndentedString(drive)).append("\n");
    sb.append("    driveName: ").append(toIndentedString(driveName)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    lastConnectionAt: ").append(toIndentedString(lastConnectionAt)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    preference: ").append(toIndentedString(preference)).append("\n");
    sb.append("    categoriesPermissions: ").append(toIndentedString(categoriesPermissions)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    privateStorage: ").append(toIndentedString(privateStorage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

