/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The available ways to convert the file
 */
@JsonPropertyOrder({
  ConversionCapabilities.JSON_PROPERTY_WHEN_DOWNLOADING,
  ConversionCapabilities.JSON_PROPERTY_DOWNLOAD_EXTENSIONS,
  ConversionCapabilities.JSON_PROPERTY_WHEN_ONLYOFFICE_OPENING,
  ConversionCapabilities.JSON_PROPERTY_ONLYOFFICE_EXTENSION
})
@JsonTypeName("conversion_capabilities")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ConversionCapabilities {
  public static final String JSON_PROPERTY_WHEN_DOWNLOADING = "when_downloading";
  private Boolean whenDownloading;

  public static final String JSON_PROPERTY_DOWNLOAD_EXTENSIONS = "download_extensions";
  private List<String> downloadExtensions;

  public static final String JSON_PROPERTY_WHEN_ONLYOFFICE_OPENING = "when_onlyoffice_opening";
  private Boolean whenOnlyofficeOpening;

  public static final String JSON_PROPERTY_ONLYOFFICE_EXTENSION = "onlyoffice_extension";
  private String onlyofficeExtension;

  public ConversionCapabilities() {
  }

  public ConversionCapabilities whenDownloading(Boolean whenDownloading) {
    
    this.whenDownloading = whenDownloading;
    return this;
  }

   /**
   * Whether the file may be converted upon download
   * @return whenDownloading
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WHEN_DOWNLOADING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getWhenDownloading() {
    return whenDownloading;
  }


  @JsonProperty(JSON_PROPERTY_WHEN_DOWNLOADING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWhenDownloading(Boolean whenDownloading) {
    this.whenDownloading = whenDownloading;
  }


  public ConversionCapabilities downloadExtensions(List<String> downloadExtensions) {
    
    this.downloadExtensions = downloadExtensions;
    return this;
  }

  public ConversionCapabilities addDownloadExtensionsItem(String downloadExtensionsItem) {
    if (this.downloadExtensions == null) {
      this.downloadExtensions = new ArrayList<>();
    }
    this.downloadExtensions.add(downloadExtensionsItem);
    return this;
  }

   /**
   * Available extensions to which the file may be converted upon download, if possible
   * @return downloadExtensions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOWNLOAD_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDownloadExtensions() {
    return downloadExtensions;
  }


  @JsonProperty(JSON_PROPERTY_DOWNLOAD_EXTENSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDownloadExtensions(List<String> downloadExtensions) {
    this.downloadExtensions = downloadExtensions;
  }


  public ConversionCapabilities whenOnlyofficeOpening(Boolean whenOnlyofficeOpening) {
    
    this.whenOnlyofficeOpening = whenOnlyofficeOpening;
    return this;
  }

   /**
   * Whether the file may be converted for live edition with OnlyOffice
   * @return whenOnlyofficeOpening
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WHEN_ONLYOFFICE_OPENING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getWhenOnlyofficeOpening() {
    return whenOnlyofficeOpening;
  }


  @JsonProperty(JSON_PROPERTY_WHEN_ONLYOFFICE_OPENING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWhenOnlyofficeOpening(Boolean whenOnlyofficeOpening) {
    this.whenOnlyofficeOpening = whenOnlyofficeOpening;
  }


  public ConversionCapabilities onlyofficeExtension(String onlyofficeExtension) {
    
    this.onlyofficeExtension = onlyofficeExtension;
    return this;
  }

   /**
   * Available extension to which the file may be converted by OnlyOffice, if possible
   * @return onlyofficeExtension
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ONLYOFFICE_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOnlyofficeExtension() {
    return onlyofficeExtension;
  }


  @JsonProperty(JSON_PROPERTY_ONLYOFFICE_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnlyofficeExtension(String onlyofficeExtension) {
    this.onlyofficeExtension = onlyofficeExtension;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversionCapabilities conversionCapabilities = (ConversionCapabilities) o;
    return Objects.equals(this.whenDownloading, conversionCapabilities.whenDownloading) &&
        Objects.equals(this.downloadExtensions, conversionCapabilities.downloadExtensions) &&
        Objects.equals(this.whenOnlyofficeOpening, conversionCapabilities.whenOnlyofficeOpening) &&
        Objects.equals(this.onlyofficeExtension, conversionCapabilities.onlyofficeExtension);
  }

  @Override
  public int hashCode() {
    return Objects.hash(whenDownloading, downloadExtensions, whenOnlyofficeOpening, onlyofficeExtension);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversionCapabilities {\n");
    sb.append("    whenDownloading: ").append(toIndentedString(whenDownloading)).append("\n");
    sb.append("    downloadExtensions: ").append(toIndentedString(downloadExtensions)).append("\n");
    sb.append("    whenOnlyofficeOpening: ").append(toIndentedString(whenOnlyofficeOpening)).append("\n");
    sb.append("    onlyofficeExtension: ").append(toIndentedString(onlyofficeExtension)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

