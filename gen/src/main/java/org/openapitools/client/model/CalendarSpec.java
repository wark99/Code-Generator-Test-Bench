/*
 * Communication API
 * Communication API
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ScheduledRange;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CalendarSpec
 */
@JsonPropertyOrder({
  CalendarSpec.JSON_PROPERTY_SECONDS,
  CalendarSpec.JSON_PROPERTY_MINUTES,
  CalendarSpec.JSON_PROPERTY_HOUR,
  CalendarSpec.JSON_PROPERTY_DAY_OF_MONTH,
  CalendarSpec.JSON_PROPERTY_MONTH,
  CalendarSpec.JSON_PROPERTY_YEAR,
  CalendarSpec.JSON_PROPERTY_DAY_OF_WEEK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:15:04.742654231Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CalendarSpec {
  public static final String JSON_PROPERTY_SECONDS = "seconds";
  private List<ScheduledRange> seconds;

  public static final String JSON_PROPERTY_MINUTES = "minutes";
  private JsonNullable<Object> minutes = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_HOUR = "hour";
  private JsonNullable<Object> hour = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_DAY_OF_MONTH = "dayOfMonth";
  private JsonNullable<Object> dayOfMonth = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MONTH = "month";
  private ScheduledRange month;

  public static final String JSON_PROPERTY_YEAR = "year";
  private JsonNullable<Object> year = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_DAY_OF_WEEK = "dayOfWeek";
  private JsonNullable<Object> dayOfWeek = JsonNullable.<Object>of(null);

  public CalendarSpec() {
  }

  public CalendarSpec seconds(List<ScheduledRange> seconds) {
    
    this.seconds = seconds;
    return this;
  }

  public CalendarSpec addSecondsItem(ScheduledRange secondsItem) {
    if (this.seconds == null) {
      this.seconds = new ArrayList<>();
    }
    this.seconds.add(secondsItem);
    return this;
  }

   /**
   * Get seconds
   * @return seconds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ScheduledRange> getSeconds() {
    return seconds;
  }


  @JsonProperty(JSON_PROPERTY_SECONDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSeconds(List<ScheduledRange> seconds) {
    this.seconds = seconds;
  }


  public CalendarSpec minutes(Object minutes) {
    this.minutes = JsonNullable.<Object>of(minutes);
    
    return this;
  }

   /**
   * Get minutes
   * @return minutes
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinutes() {
        return minutes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MINUTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinutes_JsonNullable() {
    return minutes;
  }
  
  @JsonProperty(JSON_PROPERTY_MINUTES)
  public void setMinutes_JsonNullable(JsonNullable<Object> minutes) {
    this.minutes = minutes;
  }

  public void setMinutes(Object minutes) {
    this.minutes = JsonNullable.<Object>of(minutes);
  }


  public CalendarSpec hour(Object hour) {
    this.hour = JsonNullable.<Object>of(hour);
    
    return this;
  }

   /**
   * Get hour
   * @return hour
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getHour() {
        return hour.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HOUR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getHour_JsonNullable() {
    return hour;
  }
  
  @JsonProperty(JSON_PROPERTY_HOUR)
  public void setHour_JsonNullable(JsonNullable<Object> hour) {
    this.hour = hour;
  }

  public void setHour(Object hour) {
    this.hour = JsonNullable.<Object>of(hour);
  }


  public CalendarSpec dayOfMonth(Object dayOfMonth) {
    this.dayOfMonth = JsonNullable.<Object>of(dayOfMonth);
    
    return this;
  }

   /**
   * Get dayOfMonth
   * @return dayOfMonth
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getDayOfMonth() {
        return dayOfMonth.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DAY_OF_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getDayOfMonth_JsonNullable() {
    return dayOfMonth;
  }
  
  @JsonProperty(JSON_PROPERTY_DAY_OF_MONTH)
  public void setDayOfMonth_JsonNullable(JsonNullable<Object> dayOfMonth) {
    this.dayOfMonth = dayOfMonth;
  }

  public void setDayOfMonth(Object dayOfMonth) {
    this.dayOfMonth = JsonNullable.<Object>of(dayOfMonth);
  }


  public CalendarSpec month(ScheduledRange month) {
    
    this.month = month;
    return this;
  }

   /**
   * Get month
   * @return month
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ScheduledRange getMonth() {
    return month;
  }


  @JsonProperty(JSON_PROPERTY_MONTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMonth(ScheduledRange month) {
    this.month = month;
  }


  public CalendarSpec year(Object year) {
    this.year = JsonNullable.<Object>of(year);
    
    return this;
  }

   /**
   * Get year
   * @return year
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getYear() {
        return year.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_YEAR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getYear_JsonNullable() {
    return year;
  }
  
  @JsonProperty(JSON_PROPERTY_YEAR)
  public void setYear_JsonNullable(JsonNullable<Object> year) {
    this.year = year;
  }

  public void setYear(Object year) {
    this.year = JsonNullable.<Object>of(year);
  }


  public CalendarSpec dayOfWeek(Object dayOfWeek) {
    this.dayOfWeek = JsonNullable.<Object>of(dayOfWeek);
    
    return this;
  }

   /**
   * Get dayOfWeek
   * @return dayOfWeek
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getDayOfWeek() {
        return dayOfWeek.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DAY_OF_WEEK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getDayOfWeek_JsonNullable() {
    return dayOfWeek;
  }
  
  @JsonProperty(JSON_PROPERTY_DAY_OF_WEEK)
  public void setDayOfWeek_JsonNullable(JsonNullable<Object> dayOfWeek) {
    this.dayOfWeek = dayOfWeek;
  }

  public void setDayOfWeek(Object dayOfWeek) {
    this.dayOfWeek = JsonNullable.<Object>of(dayOfWeek);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalendarSpec calendarSpec = (CalendarSpec) o;
    return Objects.equals(this.seconds, calendarSpec.seconds) &&
        equalsNullable(this.minutes, calendarSpec.minutes) &&
        equalsNullable(this.hour, calendarSpec.hour) &&
        equalsNullable(this.dayOfMonth, calendarSpec.dayOfMonth) &&
        Objects.equals(this.month, calendarSpec.month) &&
        equalsNullable(this.year, calendarSpec.year) &&
        equalsNullable(this.dayOfWeek, calendarSpec.dayOfWeek);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seconds, hashCodeNullable(minutes), hashCodeNullable(hour), hashCodeNullable(dayOfMonth), month, hashCodeNullable(year), hashCodeNullable(dayOfWeek));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalendarSpec {\n");
    sb.append("    seconds: ").append(toIndentedString(seconds)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("    hour: ").append(toIndentedString(hour)).append("\n");
    sb.append("    dayOfMonth: ").append(toIndentedString(dayOfMonth)).append("\n");
    sb.append("    month: ").append(toIndentedString(month)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    dayOfWeek: ").append(toIndentedString(dayOfWeek)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

