/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TeamMember
 */
@JsonPropertyOrder({
  TeamMember.JSON_PROPERTY_TEAM_ID,
  TeamMember.JSON_PROPERTY_USER_ID,
  TeamMember.JSON_PROPERTY_ROLES,
  TeamMember.JSON_PROPERTY_DELETE_AT,
  TeamMember.JSON_PROPERTY_SCHEME_USER,
  TeamMember.JSON_PROPERTY_SCHEME_ADMIN,
  TeamMember.JSON_PROPERTY_EXPLICIT_ROLES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class TeamMember {
  public static final String JSON_PROPERTY_TEAM_ID = "team_id";
  private String teamId;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private String userId;

  public static final String JSON_PROPERTY_ROLES = "roles";
  private String roles;

  public static final String JSON_PROPERTY_DELETE_AT = "delete_at";
  private Integer deleteAt;

  public static final String JSON_PROPERTY_SCHEME_USER = "scheme_user";
  private Boolean schemeUser;

  public static final String JSON_PROPERTY_SCHEME_ADMIN = "scheme_admin";
  private Boolean schemeAdmin;

  public static final String JSON_PROPERTY_EXPLICIT_ROLES = "explicit_roles";
  private String explicitRoles;

  public TeamMember() {
  }

  public TeamMember teamId(String teamId) {
    
    this.teamId = teamId;
    return this;
  }

   /**
   * The ID of the team this member belongs to.
   * @return teamId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEAM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTeamId() {
    return teamId;
  }


  @JsonProperty(JSON_PROPERTY_TEAM_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTeamId(String teamId) {
    this.teamId = teamId;
  }


  public TeamMember userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The ID of the user this member relates to.
   * @return userId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(String userId) {
    this.userId = userId;
  }


  public TeamMember roles(String roles) {
    
    this.roles = roles;
    return this;
  }

   /**
   * The complete list of roles assigned to this team member, as a space-separated list of role names, including any roles granted implicitly through permissions schemes.
   * @return roles
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRoles() {
    return roles;
  }


  @JsonProperty(JSON_PROPERTY_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRoles(String roles) {
    this.roles = roles;
  }


  public TeamMember deleteAt(Integer deleteAt) {
    
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * The time in milliseconds that this team member was deleted.
   * @return deleteAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDeleteAt() {
    return deleteAt;
  }


  @JsonProperty(JSON_PROPERTY_DELETE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeleteAt(Integer deleteAt) {
    this.deleteAt = deleteAt;
  }


  public TeamMember schemeUser(Boolean schemeUser) {
    
    this.schemeUser = schemeUser;
    return this;
  }

   /**
   * Whether this team member holds the default user role defined by the team&#39;s permissions scheme.
   * @return schemeUser
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEME_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSchemeUser() {
    return schemeUser;
  }


  @JsonProperty(JSON_PROPERTY_SCHEME_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemeUser(Boolean schemeUser) {
    this.schemeUser = schemeUser;
  }


  public TeamMember schemeAdmin(Boolean schemeAdmin) {
    
    this.schemeAdmin = schemeAdmin;
    return this;
  }

   /**
   * Whether this team member holds the default admin role defined by the team&#39;s permissions scheme.
   * @return schemeAdmin
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCHEME_ADMIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSchemeAdmin() {
    return schemeAdmin;
  }


  @JsonProperty(JSON_PROPERTY_SCHEME_ADMIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSchemeAdmin(Boolean schemeAdmin) {
    this.schemeAdmin = schemeAdmin;
  }


  public TeamMember explicitRoles(String explicitRoles) {
    
    this.explicitRoles = explicitRoles;
    return this;
  }

   /**
   * The list of roles explicitly assigned to this team member, as a space separated list of role names. This list does *not* include any roles granted implicitly through permissions schemes.
   * @return explicitRoles
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPLICIT_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExplicitRoles() {
    return explicitRoles;
  }


  @JsonProperty(JSON_PROPERTY_EXPLICIT_ROLES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExplicitRoles(String explicitRoles) {
    this.explicitRoles = explicitRoles;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TeamMember teamMember = (TeamMember) o;
    return Objects.equals(this.teamId, teamMember.teamId) &&
        Objects.equals(this.userId, teamMember.userId) &&
        Objects.equals(this.roles, teamMember.roles) &&
        Objects.equals(this.deleteAt, teamMember.deleteAt) &&
        Objects.equals(this.schemeUser, teamMember.schemeUser) &&
        Objects.equals(this.schemeAdmin, teamMember.schemeAdmin) &&
        Objects.equals(this.explicitRoles, teamMember.explicitRoles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(teamId, userId, roles, deleteAt, schemeUser, schemeAdmin, explicitRoles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TeamMember {\n");
    sb.append("    teamId: ").append(toIndentedString(teamId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("    schemeUser: ").append(toIndentedString(schemeUser)).append("\n");
    sb.append("    schemeAdmin: ").append(toIndentedString(schemeAdmin)).append("\n");
    sb.append("    explicitRoles: ").append(toIndentedString(explicitRoles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

