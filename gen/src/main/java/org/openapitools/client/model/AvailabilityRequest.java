/*
 * NSA Client API
 * This is the official Client API To interact with National Service Alliance (NSA)  # Dates All dates are in the ISO 8601 format - YYYY-MM-DD - ex. 2021-12-31  See this article for more information: [ISO 8601 article](https://en.wikipedia.org/wiki/ISO_8601)  # Authenication Authenication is handled via basic authentication.   Dev and Production credentials will be provided during the implimentation process  See this article for more information: [basic auth article](https://en.wikipedia.org/wiki/Basic_access_authentication) 
 *
 * The version of the OpenAPI document: 1.0.17
 * Contact: rj.whitehead@nationalservicealliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AvailabilityRequest
 */
@JsonPropertyOrder({
  AvailabilityRequest.JSON_PROPERTY_BRAND,
  AvailabilityRequest.JSON_PROPERTY_PRODUCT_CATEGORY,
  AvailabilityRequest.JSON_PROPERTY_ZIP_CODE,
  AvailabilityRequest.JSON_PROPERTY_SERIAL_NUMBER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:53.009381485Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AvailabilityRequest {
  public static final String JSON_PROPERTY_BRAND = "brand";
  private String brand;

  /**
   * Gets or Sets productCategory
   */
  public enum ProductCategoryEnum {
    ADJUSTABLE_BED_BASE("ADJUSTABLE BED BASE"),
    
    AIR_CONDITIONER("AIR CONDITIONER"),
    
    AIR_HANDLER("AIR HANDLER"),
    
    AIR_PURIFIER("AIR PURIFIER"),
    
    ANTENNA("ANTENNA"),
    
    AUDIO("AUDIO"),
    
    BASEBOARD_HEATER("BASEBOARD HEATER"),
    
    BOILER("BOILER"),
    
    BUILT_IN_GRILL("BUILT-IN GRILL"),
    
    BUSINESS_SERVER_CHASSIS("BUSINESS SERVER CHASSIS"),
    
    CAMERA_SYSTEM("CAMERA SYSTEM"),
    
    CELL_PHONE("CELL PHONE"),
    
    CHAIR("CHAIR"),
    
    CLOTHES_DRYER_ELECTRIC("CLOTHES DRYER - ELECTRIC"),
    
    CLOTHES_DRYER_GAS("CLOTHES DRYER - GAS"),
    
    CLOTHES_WASHER("CLOTHES WASHER"),
    
    COOKTOP_ELECTRIC("COOKTOP - ELECTRIC"),
    
    COOKTOP_GAS("COOKTOP - GAS"),
    
    DEHUMIDIFER("DEHUMIDIFER"),
    
    DESKTOP("DESKTOP"),
    
    DISHWASHER("DISHWASHER"),
    
    DUCTWORK("DUCTWORK"),
    
    ELECTRICAL_BATTERIES("ELECTRICAL - BATTERIES"),
    
    ELECTRICAL_DOORBELL("ELECTRICAL - DOORBELL"),
    
    ELECTRICAL_INDOORS("ELECTRICAL - INDOORS"),
    
    ELECTRICAL_OUTDOORS("ELECTRICAL - OUTDOORS"),
    
    EVAPORATOR_COIL("EVAPORATOR COIL"),
    
    EXHAUST_HOOD("EXHAUST - HOOD"),
    
    EXHAUST_TELESCOPING("EXHAUST - TELESCOPING"),
    
    FIREPLACE("FIREPLACE"),
    
    FURNACE("FURNACE"),
    
    GARAGE_DOOR_MECHANICAL("GARAGE DOOR MECHANICAL"),
    
    GARAGE_DOOR_OPENER("GARAGE DOOR OPENER"),
    
    GLYCOL_BOILER("GLYCOL BOILER"),
    
    HEAT_PUMP("HEAT PUMP"),
    
    HEAT_PUMP_GEOTHERMAL("HEAT PUMP GEOTHERMAL"),
    
    HUMIDIFER("HUMIDIFER"),
    
    HVAC("HVAC"),
    
    LAPTOP("LAPTOP"),
    
    MAJOR_APPLIANCE("MAJOR APPLIANCE"),
    
    MICROWAVE("MICROWAVE"),
    
    MINI_SPLIT_AC("MINI SPLIT AC"),
    
    MINI_SPLIT_AIR_HANDLER("MINI SPLIT AIR HANDLER"),
    
    MINI_SPLIT_HP("MINI SPLIT HP"),
    
    NETWORKING_CABLE("NETWORKING CABLE"),
    
    OTHER("OTHER"),
    
    PACKAGE_AC("PACKAGE AC"),
    
    PACKAGE_GE_GAS_ELECTRIC_("PACKAGE GE (GAS ELECTRIC)"),
    
    PACKAGE_HP_HEAT_PUMP_("PACKAGE HP (HEAT PUMP)"),
    
    PHONE("PHONE"),
    
    PLUMBING_EXTERNAL_SEWER_LINES("PLUMBING - EXTERNAL SEWER LINES"),
    
    PLUMBING_INDOOR_LEAK("PLUMBING - INDOOR LEAK"),
    
    PLUMBING_INDOOR_WATER_LINES("PLUMBING - INDOOR WATER LINES"),
    
    PLUMBING_OUTDOOR_WATER_LINES("PLUMBING - OUTDOOR WATER LINES"),
    
    PLUMBING_STOPPAGE("PLUMBING - STOPPAGE"),
    
    PLUMBING_SUMP_PUMP("PLUMBING - SUMP PUMP"),
    
    PLUMBING_WATER_FILTER("PLUMBING - WATER FILTER"),
    
    PLUMBING_WATER_HEATER("PLUMBING - WATER HEATER"),
    
    PLUMBING_WELL_PUMP("PLUMBING - WELL PUMP"),
    
    POOL("POOL"),
    
    POOL_HOTTUB_COMBO("POOL HOTTUB COMBO"),
    
    POOL_VENTS("POOL VENTS"),
    
    POWER_ACCESSORIES("POWER ACCESSORIES"),
    
    PTAC("PTAC"),
    
    PTAC_EXCHANGE("PTAC - EXCHANGE"),
    
    PTAC_SEALED_SYSTEM("PTAC - SEALED SYSTEM"),
    
    RANGE_ELECTRIC("RANGE - ELECTRIC"),
    
    RANGE_GAS("RANGE - GAS"),
    
    REFRIGERATOR("REFRIGERATOR"),
    
    REFRIGERATOR_SEALED_SYSTEM("REFRIGERATOR - SEALED SYSTEM"),
    
    REFRIGERATOR_SEALED_SYSTEM_R134A("REFRIGERATOR - SEALED SYSTEM - R134A"),
    
    REFRIGERATOR_SEALED_SYSTEM_R600("REFRIGERATOR - SEALED SYSTEM/R600"),
    
    REFRIGERATORRV("REFRIGERATORRV"),
    
    SPA_HOTTUB("SPA-HOTTUB"),
    
    STAND_ALONE_FREEZER("STAND ALONE FREEZER"),
    
    TABLET("TABLET"),
    
    THERMOSTAT("THERMOSTAT"),
    
    TRASH_COMPACTOR("TRASH COMPACTOR"),
    
    TV("TV"),
    
    WALL_OVEN_ELECTRIC("WALL OVEN - ELECTRIC"),
    
    WALL_OVEN_GAS("WALL OVEN - GAS"),
    
    WINECOOLER("WINECOOLER"),
    
    WOOD_STOVE("WOOD STOVE");

    private String value;

    ProductCategoryEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ProductCategoryEnum fromValue(String value) {
      for (ProductCategoryEnum b : ProductCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PRODUCT_CATEGORY = "productCategory";
  private ProductCategoryEnum productCategory;

  public static final String JSON_PROPERTY_ZIP_CODE = "zipCode";
  private String zipCode;

  public static final String JSON_PROPERTY_SERIAL_NUMBER = "serialNumber";
  private String serialNumber;

  public AvailabilityRequest() {
  }

  public AvailabilityRequest brand(String brand) {
    
    this.brand = brand;
    return this;
  }

   /**
   * Get brand
   * @return brand
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BRAND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBrand() {
    return brand;
  }


  @JsonProperty(JSON_PROPERTY_BRAND)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBrand(String brand) {
    this.brand = brand;
  }


  public AvailabilityRequest productCategory(ProductCategoryEnum productCategory) {
    
    this.productCategory = productCategory;
    return this;
  }

   /**
   * Get productCategory
   * @return productCategory
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRODUCT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ProductCategoryEnum getProductCategory() {
    return productCategory;
  }


  @JsonProperty(JSON_PROPERTY_PRODUCT_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProductCategory(ProductCategoryEnum productCategory) {
    this.productCategory = productCategory;
  }


  public AvailabilityRequest zipCode(String zipCode) {
    
    this.zipCode = zipCode;
    return this;
  }

   /**
   * Get zipCode
   * @return zipCode
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ZIP_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getZipCode() {
    return zipCode;
  }


  @JsonProperty(JSON_PROPERTY_ZIP_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }


  public AvailabilityRequest serialNumber(String serialNumber) {
    
    this.serialNumber = serialNumber;
    return this;
  }

   /**
   * Populating serialNumber is optional. If present, it will allow for better servicer selection. We attempt to reassign the same unit to the same servicer that previously serviced it, if possible.
   * @return serialNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSerialNumber() {
    return serialNumber;
  }


  @JsonProperty(JSON_PROPERTY_SERIAL_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSerialNumber(String serialNumber) {
    this.serialNumber = serialNumber;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityRequest availabilityRequest = (AvailabilityRequest) o;
    return Objects.equals(this.brand, availabilityRequest.brand) &&
        Objects.equals(this.productCategory, availabilityRequest.productCategory) &&
        Objects.equals(this.zipCode, availabilityRequest.zipCode) &&
        Objects.equals(this.serialNumber, availabilityRequest.serialNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(brand, productCategory, zipCode, serialNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityRequest {\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    productCategory: ").append(toIndentedString(productCategory)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("    serialNumber: ").append(toIndentedString(serialNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

