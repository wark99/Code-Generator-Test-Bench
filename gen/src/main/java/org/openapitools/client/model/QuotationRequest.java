/*
 * API SDDO - Seguros
 * Contrato de API referente aos recursos de gest√£o de sinistros e seguros que atendem como fonte de dados para o SDDO.
 *
 * The version of the OpenAPI document: 0.0.8
 * Contact: filipe.xavier@sennatech.com.br
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.CoverageId;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * QuotationRequest
 */
@JsonPropertyOrder({
  QuotationRequest.JSON_PROPERTY_COVERAGES,
  QuotationRequest.JSON_PROPERTY_INSURED_ADDRESS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:09.376695343Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class QuotationRequest {
  public static final String JSON_PROPERTY_COVERAGES = "coverages";
  private List<CoverageId> coverages;

  public static final String JSON_PROPERTY_INSURED_ADDRESS = "insuredAddress";
  private Address insuredAddress;

  public QuotationRequest() {
  }

  public QuotationRequest coverages(List<CoverageId> coverages) {
    
    this.coverages = coverages;
    return this;
  }

  public QuotationRequest addCoveragesItem(CoverageId coveragesItem) {
    if (this.coverages == null) {
      this.coverages = new ArrayList<>();
    }
    this.coverages.add(coveragesItem);
    return this;
  }

   /**
   * Get coverages
   * @return coverages
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COVERAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CoverageId> getCoverages() {
    return coverages;
  }


  @JsonProperty(JSON_PROPERTY_COVERAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCoverages(List<CoverageId> coverages) {
    this.coverages = coverages;
  }


  public QuotationRequest insuredAddress(Address insuredAddress) {
    
    this.insuredAddress = insuredAddress;
    return this;
  }

   /**
   * Get insuredAddress
   * @return insuredAddress
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INSURED_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Address getInsuredAddress() {
    return insuredAddress;
  }


  @JsonProperty(JSON_PROPERTY_INSURED_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInsuredAddress(Address insuredAddress) {
    this.insuredAddress = insuredAddress;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuotationRequest quotationRequest = (QuotationRequest) o;
    return Objects.equals(this.coverages, quotationRequest.coverages) &&
        Objects.equals(this.insuredAddress, quotationRequest.insuredAddress);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coverages, insuredAddress);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuotationRequest {\n");
    sb.append("    coverages: ").append(toIndentedString(coverages)).append("\n");
    sb.append("    insuredAddress: ").append(toIndentedString(insuredAddress)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

