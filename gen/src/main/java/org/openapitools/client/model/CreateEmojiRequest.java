/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.io.File;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateEmojiRequest
 */
@JsonPropertyOrder({
  CreateEmojiRequest.JSON_PROPERTY_IMAGE,
  CreateEmojiRequest.JSON_PROPERTY_EMOJI
})
@JsonTypeName("CreateEmoji_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CreateEmojiRequest {
  public static final String JSON_PROPERTY_IMAGE = "image";
  private File image;

  public static final String JSON_PROPERTY_EMOJI = "emoji";
  private String emoji;

  public CreateEmojiRequest() {
  }

  public CreateEmojiRequest image(File image) {
    
    this.image = image;
    return this;
  }

   /**
   * A file to be uploaded
   * @return image
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public File getImage() {
    return image;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImage(File image) {
    this.image = image;
  }


  public CreateEmojiRequest emoji(String emoji) {
    
    this.emoji = emoji;
    return this;
  }

   /**
   * A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.
   * @return emoji
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMOJI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmoji() {
    return emoji;
  }


  @JsonProperty(JSON_PROPERTY_EMOJI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmoji(String emoji) {
    this.emoji = emoji;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEmojiRequest createEmojiRequest = (CreateEmojiRequest) o;
    return Objects.equals(this.image, createEmojiRequest.image) &&
        Objects.equals(this.emoji, createEmojiRequest.emoji);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, emoji);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEmojiRequest {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    emoji: ").append(toIndentedString(emoji)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

