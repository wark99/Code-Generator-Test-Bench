/*
 * AIRBIT IoT Workspace REST API
 * This API is intended to work with the application **AIRBIT IoT Workspace** .
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Pagination
 */
@JsonPropertyOrder({
  Pagination.JSON_PROPERTY_TOTAL,
  Pagination.JSON_PROPERTY_PAGES,
  Pagination.JSON_PROPERTY_HAS_PREV,
  Pagination.JSON_PROPERTY_HAS_HEXT,
  Pagination.JSON_PROPERTY_PAGE,
  Pagination.JSON_PROPERTY_PREV_NUM,
  Pagination.JSON_PROPERTY_NEXT_NUM,
  Pagination.JSON_PROPERTY_PER_PAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:23:05.417254227Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Pagination {
  public static final String JSON_PROPERTY_TOTAL = "total";
  private Integer total;

  public static final String JSON_PROPERTY_PAGES = "pages";
  private Integer pages;

  public static final String JSON_PROPERTY_HAS_PREV = "has_prev";
  private Boolean hasPrev = true;

  public static final String JSON_PROPERTY_HAS_HEXT = "has_hext";
  private Boolean hasHext = true;

  public static final String JSON_PROPERTY_PAGE = "page";
  private Integer page;

  public static final String JSON_PROPERTY_PREV_NUM = "prev_num";
  private Integer prevNum;

  public static final String JSON_PROPERTY_NEXT_NUM = "next_num";
  private Integer nextNum;

  public static final String JSON_PROPERTY_PER_PAGE = "per_page";
  private Integer perPage;

  public Pagination() {
  }

  public Pagination total(Integer total) {
    
    this.total = total;
    return this;
  }

   /**
   * total items
   * @return total
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(Integer total) {
    this.total = total;
  }


  public Pagination pages(Integer pages) {
    
    this.pages = pages;
    return this;
  }

   /**
   * total pages
   * @return pages
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPages() {
    return pages;
  }


  @JsonProperty(JSON_PROPERTY_PAGES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPages(Integer pages) {
    this.pages = pages;
  }


  public Pagination hasPrev(Boolean hasPrev) {
    
    this.hasPrev = hasPrev;
    return this;
  }

   /**
   * indicates whether there is a previous page
   * @return hasPrev
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_PREV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHasPrev() {
    return hasPrev;
  }


  @JsonProperty(JSON_PROPERTY_HAS_PREV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasPrev(Boolean hasPrev) {
    this.hasPrev = hasPrev;
  }


  public Pagination hasHext(Boolean hasHext) {
    
    this.hasHext = hasHext;
    return this;
  }

   /**
   * indicates whether there is a next page
   * @return hasHext
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_HEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getHasHext() {
    return hasHext;
  }


  @JsonProperty(JSON_PROPERTY_HAS_HEXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasHext(Boolean hasHext) {
    this.hasHext = hasHext;
  }


  public Pagination page(Integer page) {
    
    this.page = page;
    return this;
  }

   /**
   * current page number
   * @return page
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPage() {
    return page;
  }


  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPage(Integer page) {
    this.page = page;
  }


  public Pagination prevNum(Integer prevNum) {
    
    this.prevNum = prevNum;
    return this;
  }

   /**
   * previous page number
   * @return prevNum
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PREV_NUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPrevNum() {
    return prevNum;
  }


  @JsonProperty(JSON_PROPERTY_PREV_NUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPrevNum(Integer prevNum) {
    this.prevNum = prevNum;
  }


  public Pagination nextNum(Integer nextNum) {
    
    this.nextNum = nextNum;
    return this;
  }

   /**
   * next page number
   * @return nextNum
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NEXT_NUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNextNum() {
    return nextNum;
  }


  @JsonProperty(JSON_PROPERTY_NEXT_NUM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNextNum(Integer nextNum) {
    this.nextNum = nextNum;
  }


  public Pagination perPage(Integer perPage) {
    
    this.perPage = perPage;
    return this;
  }

   /**
   * number of items per page
   * @return perPage
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PER_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPerPage() {
    return perPage;
  }


  @JsonProperty(JSON_PROPERTY_PER_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPerPage(Integer perPage) {
    this.perPage = perPage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Pagination pagination = (Pagination) o;
    return Objects.equals(this.total, pagination.total) &&
        Objects.equals(this.pages, pagination.pages) &&
        Objects.equals(this.hasPrev, pagination.hasPrev) &&
        Objects.equals(this.hasHext, pagination.hasHext) &&
        Objects.equals(this.page, pagination.page) &&
        Objects.equals(this.prevNum, pagination.prevNum) &&
        Objects.equals(this.nextNum, pagination.nextNum) &&
        Objects.equals(this.perPage, pagination.perPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(total, pages, hasPrev, hasHext, page, prevNum, nextNum, perPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Pagination {\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    pages: ").append(toIndentedString(pages)).append("\n");
    sb.append("    hasPrev: ").append(toIndentedString(hasPrev)).append("\n");
    sb.append("    hasHext: ").append(toIndentedString(hasHext)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    prevNum: ").append(toIndentedString(prevNum)).append("\n");
    sb.append("    nextNum: ").append(toIndentedString(nextNum)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

