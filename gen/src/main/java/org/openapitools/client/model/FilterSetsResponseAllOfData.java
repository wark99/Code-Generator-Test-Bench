/*
 * Perch API
 * Perch API for accessing data from Perch. See our [API Guide](https://docs.google.com/document/d/1ms6LFNwFN4C4WkrfWs8Hlu5igFBpNLhNr7uLEkGmvJA) for guidance on best practices. <br/> <br/> Find out more about Perch at [https://perch.fit](https://perch.fit) or by contacting us at [support@perch.fit](mailto:support@perch.fit).
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@perch.fit
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.Set;
import org.openapitools.client.model.LimbPattern;
import org.openapitools.client.model.SetError;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FilterSetsResponseAllOfData
 */
@JsonPropertyOrder({
  FilterSetsResponseAllOfData.JSON_PROPERTY_ID,
  FilterSetsResponseAllOfData.JSON_PROPERTY_CREATED_AT,
  FilterSetsResponseAllOfData.JSON_PROPERTY_USER_ID,
  FilterSetsResponseAllOfData.JSON_PROPERTY_ORG_ID,
  FilterSetsResponseAllOfData.JSON_PROPERTY_EXERCISE_ID,
  FilterSetsResponseAllOfData.JSON_PROPERTY_WEIGHT,
  FilterSetsResponseAllOfData.JSON_PROPERTY_PCT1RM,
  FilterSetsResponseAllOfData.JSON_PROPERTY_TRACKED,
  FilterSetsResponseAllOfData.JSON_PROPERTY_BANDS_USED,
  FilterSetsResponseAllOfData.JSON_PROPERTY_CHAINS_USED,
  FilterSetsResponseAllOfData.JSON_PROPERTY_START_TIME,
  FilterSetsResponseAllOfData.JSON_PROPERTY_END_TIME,
  FilterSetsResponseAllOfData.JSON_PROPERTY_ERROR,
  FilterSetsResponseAllOfData.JSON_PROPERTY_REPS,
  FilterSetsResponseAllOfData.JSON_PROPERTY_NUM_REPS,
  FilterSetsResponseAllOfData.JSON_PROPERTY_NUM_TRACKED_REPS,
  FilterSetsResponseAllOfData.JSON_PROPERTY_FIRST_LIMB,
  FilterSetsResponseAllOfData.JSON_PROPERTY_LIMB_PATTERN,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_MEAN_POWER,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_MEAN_POWER,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_MEAN_POWER,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_MEAN_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_MEAN_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_MEAN_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_ECC_MEAN_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_ECC_MEAN_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_ECC_MEAN_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_PEAK_POWER,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_PEAK_POWER,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_PEAK_POWER,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_ECC_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_ECC_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_ECC_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_ECC_TIME,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_ECC_TIME,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_ECC_TIME,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_VELOCITY_AT100_MS,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_VELOCITY_AT100_MS,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_VELOCITY_AT100_MS,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_TIME_TO_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_TIME_TO_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_TIME_TO_PEAK_VELOCITY,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MAX_TIME_TO_PEAK_POWER,
  FilterSetsResponseAllOfData.JSON_PROPERTY_AVG_TIME_TO_PEAK_POWER,
  FilterSetsResponseAllOfData.JSON_PROPERTY_MIN_TIME_TO_PEAK_POWER
})
@JsonTypeName("FilterSetsResponse_allOf_data")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:20:41.221792118Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class FilterSetsResponseAllOfData {
  public static final String JSON_PROPERTY_ID = "id";
  private Object id = null;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Object createdAt = null;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private Object userId = null;

  public static final String JSON_PROPERTY_ORG_ID = "org_id";
  private Object orgId = null;

  public static final String JSON_PROPERTY_EXERCISE_ID = "exercise_id";
  private Object exerciseId = null;

  public static final String JSON_PROPERTY_WEIGHT = "weight";
  private Object weight = null;

  public static final String JSON_PROPERTY_PCT1RM = "pct_1rm";
  private JsonNullable<Object> pct1rm = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_TRACKED = "tracked";
  private Object tracked = null;

  public static final String JSON_PROPERTY_BANDS_USED = "bands_used";
  private JsonNullable<Object> bandsUsed = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_CHAINS_USED = "chains_used";
  private JsonNullable<Object> chainsUsed = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_START_TIME = "start_time";
  private BigDecimal startTime;

  public static final String JSON_PROPERTY_END_TIME = "end_time";
  private BigDecimal endTime;

  public static final String JSON_PROPERTY_ERROR = "error";
  private SetError error;

  public static final String JSON_PROPERTY_REPS = "reps";
  private JsonNullable<Object> reps = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_NUM_REPS = "num_reps";
  private JsonNullable<Object> numReps = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_NUM_TRACKED_REPS = "num_tracked_reps";
  private JsonNullable<Object> numTrackedReps = JsonNullable.<Object>of(null);

  /**
   * In a unilateral exercise, this is the limb with which the athlete began their reps.
   */
  public enum FirstLimbEnum {
    RIGHT("RIGHT"),
    
    LEFT("LEFT");

    private Object value;

    FirstLimbEnum(Object value) {
      this.value = value;
    }

    @JsonValue
    public Object getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FirstLimbEnum fromValue(Object value) {
      for (FirstLimbEnum b : FirstLimbEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_FIRST_LIMB = "first_limb";
  private JsonNullable<FirstLimbEnum> firstLimb = JsonNullable.<FirstLimbEnum>of(null);

  public static final String JSON_PROPERTY_LIMB_PATTERN = "limb_pattern";
  private LimbPattern limbPattern;

  public static final String JSON_PROPERTY_MIN_MEAN_POWER = "min_mean_power";
  private JsonNullable<Object> minMeanPower = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_MEAN_POWER = "avg_mean_power";
  private JsonNullable<Object> avgMeanPower = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_MEAN_POWER = "max_mean_power";
  private JsonNullable<Object> maxMeanPower = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_MEAN_VELOCITY = "min_mean_velocity";
  private JsonNullable<Object> minMeanVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_MEAN_VELOCITY = "avg_mean_velocity";
  private JsonNullable<Object> avgMeanVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_MEAN_VELOCITY = "max_mean_velocity";
  private JsonNullable<Object> maxMeanVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_ECC_MEAN_VELOCITY = "avg_ecc_mean_velocity";
  private JsonNullable<Object> avgEccMeanVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_ECC_MEAN_VELOCITY = "max_ecc_mean_velocity";
  private JsonNullable<Object> maxEccMeanVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_ECC_MEAN_VELOCITY = "min_ecc_mean_velocity";
  private JsonNullable<Object> minEccMeanVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_PEAK_POWER = "min_peak_power";
  private JsonNullable<Object> minPeakPower = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_PEAK_POWER = "avg_peak_power";
  private JsonNullable<Object> avgPeakPower = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_PEAK_POWER = "max_peak_power";
  private JsonNullable<Object> maxPeakPower = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_PEAK_VELOCITY = "min_peak_velocity";
  private JsonNullable<Object> minPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_PEAK_VELOCITY = "avg_peak_velocity";
  private JsonNullable<Object> avgPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_PEAK_VELOCITY = "max_peak_velocity";
  private JsonNullable<Object> maxPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_ECC_PEAK_VELOCITY = "avg_ecc_peak_velocity";
  private JsonNullable<Object> avgEccPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_ECC_PEAK_VELOCITY = "max_ecc_peak_velocity";
  private JsonNullable<Object> maxEccPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_ECC_PEAK_VELOCITY = "min_ecc_peak_velocity";
  private JsonNullable<Object> minEccPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_ECC_TIME = "avg_ecc_time";
  private JsonNullable<Object> avgEccTime = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_ECC_TIME = "max_ecc_time";
  private JsonNullable<Object> maxEccTime = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_ECC_TIME = "min_ecc_time";
  private JsonNullable<Object> minEccTime = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_VELOCITY_AT100_MS = "max_velocity_at_100_ms";
  private JsonNullable<Object> maxVelocityAt100Ms = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_VELOCITY_AT100_MS = "avg_velocity_at_100_ms";
  private JsonNullable<Object> avgVelocityAt100Ms = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_VELOCITY_AT100_MS = "min_velocity_at_100_ms";
  private JsonNullable<Object> minVelocityAt100Ms = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_TIME_TO_PEAK_VELOCITY = "max_time_to_peak_velocity";
  private JsonNullable<Object> maxTimeToPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_TIME_TO_PEAK_VELOCITY = "avg_time_to_peak_velocity";
  private JsonNullable<Object> avgTimeToPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_TIME_TO_PEAK_VELOCITY = "min_time_to_peak_velocity";
  private JsonNullable<Object> minTimeToPeakVelocity = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MAX_TIME_TO_PEAK_POWER = "max_time_to_peak_power";
  private JsonNullable<Object> maxTimeToPeakPower = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_AVG_TIME_TO_PEAK_POWER = "avg_time_to_peak_power";
  private JsonNullable<Object> avgTimeToPeakPower = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_MIN_TIME_TO_PEAK_POWER = "min_time_to_peak_power";
  private JsonNullable<Object> minTimeToPeakPower = JsonNullable.<Object>of(null);

  public FilterSetsResponseAllOfData() {
  }

  public FilterSetsResponseAllOfData id(Object id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique id for the set
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Object id) {
    this.id = id;
  }


  public FilterSetsResponseAllOfData createdAt(Object createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Object createdAt) {
    this.createdAt = createdAt;
  }


  public FilterSetsResponseAllOfData userId(Object userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(Object userId) {
    this.userId = userId;
  }


  public FilterSetsResponseAllOfData orgId(Object orgId) {
    
    this.orgId = orgId;
    return this;
  }

   /**
   * The ID of the organization the user who performed the set belongs to.
   * @return orgId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getOrgId() {
    return orgId;
  }


  @JsonProperty(JSON_PROPERTY_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOrgId(Object orgId) {
    this.orgId = orgId;
  }


  public FilterSetsResponseAllOfData exerciseId(Object exerciseId) {
    
    this.exerciseId = exerciseId;
    return this;
  }

   /**
   * Get exerciseId
   * @return exerciseId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXERCISE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getExerciseId() {
    return exerciseId;
  }


  @JsonProperty(JSON_PROPERTY_EXERCISE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExerciseId(Object exerciseId) {
    this.exerciseId = exerciseId;
  }


  public FilterSetsResponseAllOfData weight(Object weight) {
    
    this.weight = weight;
    return this;
  }

   /**
   * The weight the lift was performed with.
   * @return weight
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getWeight() {
    return weight;
  }


  @JsonProperty(JSON_PROPERTY_WEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWeight(Object weight) {
    this.weight = weight;
  }


  public FilterSetsResponseAllOfData pct1rm(Object pct1rm) {
    this.pct1rm = JsonNullable.<Object>of(pct1rm);
    
    return this;
  }

   /**
   * The percentage [0.0 - 1.0] this set\&quot;s weight is of the user\&quot;s One Rep Max (1RM) for this exercise.
   * @return pct1rm
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getPct1rm() {
        return pct1rm.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_PCT1RM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getPct1rm_JsonNullable() {
    return pct1rm;
  }
  
  @JsonProperty(JSON_PROPERTY_PCT1RM)
  public void setPct1rm_JsonNullable(JsonNullable<Object> pct1rm) {
    this.pct1rm = pct1rm;
  }

  public void setPct1rm(Object pct1rm) {
    this.pct1rm = JsonNullable.<Object>of(pct1rm);
  }


  public FilterSetsResponseAllOfData tracked(Object tracked) {
    
    this.tracked = tracked;
    return this;
  }

   /**
   * Delineates whether this set was tracked by a Perch camera (&#x60;true&#x60;) or manually entered into Perch.
   * @return tracked
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRACKED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getTracked() {
    return tracked;
  }


  @JsonProperty(JSON_PROPERTY_TRACKED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTracked(Object tracked) {
    this.tracked = tracked;
  }


  public FilterSetsResponseAllOfData bandsUsed(Object bandsUsed) {
    this.bandsUsed = JsonNullable.<Object>of(bandsUsed);
    
    return this;
  }

   /**
   * Whether bands were used for this set.
   * @return bandsUsed
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getBandsUsed() {
        return bandsUsed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_BANDS_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getBandsUsed_JsonNullable() {
    return bandsUsed;
  }
  
  @JsonProperty(JSON_PROPERTY_BANDS_USED)
  public void setBandsUsed_JsonNullable(JsonNullable<Object> bandsUsed) {
    this.bandsUsed = bandsUsed;
  }

  public void setBandsUsed(Object bandsUsed) {
    this.bandsUsed = JsonNullable.<Object>of(bandsUsed);
  }


  public FilterSetsResponseAllOfData chainsUsed(Object chainsUsed) {
    this.chainsUsed = JsonNullable.<Object>of(chainsUsed);
    
    return this;
  }

   /**
   * Whether chains were used for this set.
   * @return chainsUsed
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getChainsUsed() {
        return chainsUsed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CHAINS_USED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getChainsUsed_JsonNullable() {
    return chainsUsed;
  }
  
  @JsonProperty(JSON_PROPERTY_CHAINS_USED)
  public void setChainsUsed_JsonNullable(JsonNullable<Object> chainsUsed) {
    this.chainsUsed = chainsUsed;
  }

  public void setChainsUsed(Object chainsUsed) {
    this.chainsUsed = JsonNullable.<Object>of(chainsUsed);
  }


  public FilterSetsResponseAllOfData startTime(BigDecimal startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * Get startTime
   * @return startTime
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(BigDecimal startTime) {
    this.startTime = startTime;
  }


  public FilterSetsResponseAllOfData endTime(BigDecimal endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * Get endTime
   * @return endTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndTime(BigDecimal endTime) {
    this.endTime = endTime;
  }


  public FilterSetsResponseAllOfData error(SetError error) {
    
    this.error = error;
    return this;
  }

   /**
   * Get error
   * @return error
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SetError getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setError(SetError error) {
    this.error = error;
  }


  public FilterSetsResponseAllOfData reps(Object reps) {
    this.reps = JsonNullable.<Object>of(reps);
    
    return this;
  }

   /**
   * Contains all reps the Perch device tracked. &#x60;Set.error.ghost_rep_indices&#x60; optionally contains indices into this array that were marked by the user as erroneous and should be ignored.
   * @return reps
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getReps() {
        return reps.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getReps_JsonNullable() {
    return reps;
  }
  
  @JsonProperty(JSON_PROPERTY_REPS)
  public void setReps_JsonNullable(JsonNullable<Object> reps) {
    this.reps = reps;
  }

  public void setReps(Object reps) {
    this.reps = JsonNullable.<Object>of(reps);
  }


  public FilterSetsResponseAllOfData numReps(Object numReps) {
    this.numReps = JsonNullable.<Object>of(numReps);
    
    return this;
  }

   /**
   * The number of VALID reps on this set. This is the same as then length of the Reps array, unless the user marked an error and removed ghost reps. In that case, this count of reps reflects the removal of those ghost reps.
   * @return numReps
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getNumReps() {
        return numReps.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NUM_REPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getNumReps_JsonNullable() {
    return numReps;
  }
  
  @JsonProperty(JSON_PROPERTY_NUM_REPS)
  public void setNumReps_JsonNullable(JsonNullable<Object> numReps) {
    this.numReps = numReps;
  }

  public void setNumReps(Object numReps) {
    this.numReps = JsonNullable.<Object>of(numReps);
  }


  public FilterSetsResponseAllOfData numTrackedReps(Object numTrackedReps) {
    this.numTrackedReps = JsonNullable.<Object>of(numTrackedReps);
    
    return this;
  }

   /**
   * The number of reps the Perch camera tracked for this set. This will always be exactly the length of the Reps array.
   * @return numTrackedReps
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getNumTrackedReps() {
        return numTrackedReps.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_NUM_TRACKED_REPS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getNumTrackedReps_JsonNullable() {
    return numTrackedReps;
  }
  
  @JsonProperty(JSON_PROPERTY_NUM_TRACKED_REPS)
  public void setNumTrackedReps_JsonNullable(JsonNullable<Object> numTrackedReps) {
    this.numTrackedReps = numTrackedReps;
  }

  public void setNumTrackedReps(Object numTrackedReps) {
    this.numTrackedReps = JsonNullable.<Object>of(numTrackedReps);
  }


  public FilterSetsResponseAllOfData firstLimb(FirstLimbEnum firstLimb) {
    this.firstLimb = JsonNullable.<FirstLimbEnum>of(firstLimb);
    
    return this;
  }

   /**
   * In a unilateral exercise, this is the limb with which the athlete began their reps.
   * @return firstLimb
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public FirstLimbEnum getFirstLimb() {
        return firstLimb.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_FIRST_LIMB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<FirstLimbEnum> getFirstLimb_JsonNullable() {
    return firstLimb;
  }
  
  @JsonProperty(JSON_PROPERTY_FIRST_LIMB)
  public void setFirstLimb_JsonNullable(JsonNullable<FirstLimbEnum> firstLimb) {
    this.firstLimb = firstLimb;
  }

  public void setFirstLimb(FirstLimbEnum firstLimb) {
    this.firstLimb = JsonNullable.<FirstLimbEnum>of(firstLimb);
  }


  public FilterSetsResponseAllOfData limbPattern(LimbPattern limbPattern) {
    
    this.limbPattern = limbPattern;
    return this;
  }

   /**
   * Get limbPattern
   * @return limbPattern
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMB_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LimbPattern getLimbPattern() {
    return limbPattern;
  }


  @JsonProperty(JSON_PROPERTY_LIMB_PATTERN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLimbPattern(LimbPattern limbPattern) {
    this.limbPattern = limbPattern;
  }


  public FilterSetsResponseAllOfData minMeanPower(Object minMeanPower) {
    this.minMeanPower = JsonNullable.<Object>of(minMeanPower);
    
    return this;
  }

   /**
   * The minimum of &#x60;Rep.concentric_mean_velocity_z * Set.weight&#x60; across all reps. Convert to watts: &#x60;m/in * N/lbs * min_mean_power&#x60;
   * @return minMeanPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinMeanPower() {
        return minMeanPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_MEAN_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinMeanPower_JsonNullable() {
    return minMeanPower;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_MEAN_POWER)
  public void setMinMeanPower_JsonNullable(JsonNullable<Object> minMeanPower) {
    this.minMeanPower = minMeanPower;
  }

  public void setMinMeanPower(Object minMeanPower) {
    this.minMeanPower = JsonNullable.<Object>of(minMeanPower);
  }


  public FilterSetsResponseAllOfData avgMeanPower(Object avgMeanPower) {
    this.avgMeanPower = JsonNullable.<Object>of(avgMeanPower);
    
    return this;
  }

   /**
   * The mean of &#x60;Rep.concentric_mean_velocity_z * Set.weight&#x60; across all reps. Convert to watts: &#x60;m/in * N/lbs * avg_mean_power&#x60;
   * @return avgMeanPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgMeanPower() {
        return avgMeanPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_MEAN_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgMeanPower_JsonNullable() {
    return avgMeanPower;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_MEAN_POWER)
  public void setAvgMeanPower_JsonNullable(JsonNullable<Object> avgMeanPower) {
    this.avgMeanPower = avgMeanPower;
  }

  public void setAvgMeanPower(Object avgMeanPower) {
    this.avgMeanPower = JsonNullable.<Object>of(avgMeanPower);
  }


  public FilterSetsResponseAllOfData maxMeanPower(Object maxMeanPower) {
    this.maxMeanPower = JsonNullable.<Object>of(maxMeanPower);
    
    return this;
  }

   /**
   * The max of &#x60;Rep.concentric_mean_velocity_z * Set.weight&#x60; across all reps. Convert to watts: &#x60;m/in * N/lbs * max_mean_power&#x60;
   * @return maxMeanPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxMeanPower() {
        return maxMeanPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_MEAN_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxMeanPower_JsonNullable() {
    return maxMeanPower;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_MEAN_POWER)
  public void setMaxMeanPower_JsonNullable(JsonNullable<Object> maxMeanPower) {
    this.maxMeanPower = maxMeanPower;
  }

  public void setMaxMeanPower(Object maxMeanPower) {
    this.maxMeanPower = JsonNullable.<Object>of(maxMeanPower);
  }


  public FilterSetsResponseAllOfData minMeanVelocity(Object minMeanVelocity) {
    this.minMeanVelocity = JsonNullable.<Object>of(minMeanVelocity);
    
    return this;
  }

   /**
   * The minimum of &#x60;Rep.concentric_mean_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * min_mean_velocity&#x60;
   * @return minMeanVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinMeanVelocity() {
        return minMeanVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_MEAN_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinMeanVelocity_JsonNullable() {
    return minMeanVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_MEAN_VELOCITY)
  public void setMinMeanVelocity_JsonNullable(JsonNullable<Object> minMeanVelocity) {
    this.minMeanVelocity = minMeanVelocity;
  }

  public void setMinMeanVelocity(Object minMeanVelocity) {
    this.minMeanVelocity = JsonNullable.<Object>of(minMeanVelocity);
  }


  public FilterSetsResponseAllOfData avgMeanVelocity(Object avgMeanVelocity) {
    this.avgMeanVelocity = JsonNullable.<Object>of(avgMeanVelocity);
    
    return this;
  }

   /**
   * The mean of &#x60;Rep.concentric_mean_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * avg_mean_velocity&#x60;
   * @return avgMeanVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgMeanVelocity() {
        return avgMeanVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_MEAN_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgMeanVelocity_JsonNullable() {
    return avgMeanVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_MEAN_VELOCITY)
  public void setAvgMeanVelocity_JsonNullable(JsonNullable<Object> avgMeanVelocity) {
    this.avgMeanVelocity = avgMeanVelocity;
  }

  public void setAvgMeanVelocity(Object avgMeanVelocity) {
    this.avgMeanVelocity = JsonNullable.<Object>of(avgMeanVelocity);
  }


  public FilterSetsResponseAllOfData maxMeanVelocity(Object maxMeanVelocity) {
    this.maxMeanVelocity = JsonNullable.<Object>of(maxMeanVelocity);
    
    return this;
  }

   /**
   * The max of &#x60;Rep.concentric_mean_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * max_mean_velocity&#x60;
   * @return maxMeanVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxMeanVelocity() {
        return maxMeanVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_MEAN_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxMeanVelocity_JsonNullable() {
    return maxMeanVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_MEAN_VELOCITY)
  public void setMaxMeanVelocity_JsonNullable(JsonNullable<Object> maxMeanVelocity) {
    this.maxMeanVelocity = maxMeanVelocity;
  }

  public void setMaxMeanVelocity(Object maxMeanVelocity) {
    this.maxMeanVelocity = JsonNullable.<Object>of(maxMeanVelocity);
  }


  public FilterSetsResponseAllOfData avgEccMeanVelocity(Object avgEccMeanVelocity) {
    this.avgEccMeanVelocity = JsonNullable.<Object>of(avgEccMeanVelocity);
    
    return this;
  }

   /**
   * The mean of &#x60;Rep.eccentric_mean_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * avg_ecc_mean_velocity&#x60;
   * @return avgEccMeanVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgEccMeanVelocity() {
        return avgEccMeanVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_ECC_MEAN_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgEccMeanVelocity_JsonNullable() {
    return avgEccMeanVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_ECC_MEAN_VELOCITY)
  public void setAvgEccMeanVelocity_JsonNullable(JsonNullable<Object> avgEccMeanVelocity) {
    this.avgEccMeanVelocity = avgEccMeanVelocity;
  }

  public void setAvgEccMeanVelocity(Object avgEccMeanVelocity) {
    this.avgEccMeanVelocity = JsonNullable.<Object>of(avgEccMeanVelocity);
  }


  public FilterSetsResponseAllOfData maxEccMeanVelocity(Object maxEccMeanVelocity) {
    this.maxEccMeanVelocity = JsonNullable.<Object>of(maxEccMeanVelocity);
    
    return this;
  }

   /**
   * The max of &#x60;Rep.eccentric_mean_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * max_ecc_mean_velocity&#x60;
   * @return maxEccMeanVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxEccMeanVelocity() {
        return maxEccMeanVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_ECC_MEAN_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxEccMeanVelocity_JsonNullable() {
    return maxEccMeanVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_ECC_MEAN_VELOCITY)
  public void setMaxEccMeanVelocity_JsonNullable(JsonNullable<Object> maxEccMeanVelocity) {
    this.maxEccMeanVelocity = maxEccMeanVelocity;
  }

  public void setMaxEccMeanVelocity(Object maxEccMeanVelocity) {
    this.maxEccMeanVelocity = JsonNullable.<Object>of(maxEccMeanVelocity);
  }


  public FilterSetsResponseAllOfData minEccMeanVelocity(Object minEccMeanVelocity) {
    this.minEccMeanVelocity = JsonNullable.<Object>of(minEccMeanVelocity);
    
    return this;
  }

   /**
   * The min of &#x60;Rep.eccentric_mean_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * min_ecc_mean_velocity&#x60;
   * @return minEccMeanVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinEccMeanVelocity() {
        return minEccMeanVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_ECC_MEAN_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinEccMeanVelocity_JsonNullable() {
    return minEccMeanVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_ECC_MEAN_VELOCITY)
  public void setMinEccMeanVelocity_JsonNullable(JsonNullable<Object> minEccMeanVelocity) {
    this.minEccMeanVelocity = minEccMeanVelocity;
  }

  public void setMinEccMeanVelocity(Object minEccMeanVelocity) {
    this.minEccMeanVelocity = JsonNullable.<Object>of(minEccMeanVelocity);
  }


  public FilterSetsResponseAllOfData minPeakPower(Object minPeakPower) {
    this.minPeakPower = JsonNullable.<Object>of(minPeakPower);
    
    return this;
  }

   /**
   * The minimum of &#x60;Rep.concentric_peak_power_per_mass_z * Set.weight&#x60; across all reps. Convert to watts: &#x60;m/in * m/in * kg/lbs * min_peak_power&#x60;
   * @return minPeakPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinPeakPower() {
        return minPeakPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_PEAK_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinPeakPower_JsonNullable() {
    return minPeakPower;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_PEAK_POWER)
  public void setMinPeakPower_JsonNullable(JsonNullable<Object> minPeakPower) {
    this.minPeakPower = minPeakPower;
  }

  public void setMinPeakPower(Object minPeakPower) {
    this.minPeakPower = JsonNullable.<Object>of(minPeakPower);
  }


  public FilterSetsResponseAllOfData avgPeakPower(Object avgPeakPower) {
    this.avgPeakPower = JsonNullable.<Object>of(avgPeakPower);
    
    return this;
  }

   /**
   * The mean of &#x60;Rep.concentric_peak_power_per_mass_z * Set.weight&#x60; across all reps. Convert to watts: &#x60;m/in * m/in * kg/lbs * avg_peak_power&#x60;
   * @return avgPeakPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgPeakPower() {
        return avgPeakPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_PEAK_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgPeakPower_JsonNullable() {
    return avgPeakPower;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_PEAK_POWER)
  public void setAvgPeakPower_JsonNullable(JsonNullable<Object> avgPeakPower) {
    this.avgPeakPower = avgPeakPower;
  }

  public void setAvgPeakPower(Object avgPeakPower) {
    this.avgPeakPower = JsonNullable.<Object>of(avgPeakPower);
  }


  public FilterSetsResponseAllOfData maxPeakPower(Object maxPeakPower) {
    this.maxPeakPower = JsonNullable.<Object>of(maxPeakPower);
    
    return this;
  }

   /**
   * The max of &#x60;Rep.concentric_peak_power_per_mass_z * Set.weight&#x60; across all reps. Convert to watts: &#x60;m/in * m/in * kg/lbs * max_peak_power&#x60;
   * @return maxPeakPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxPeakPower() {
        return maxPeakPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_PEAK_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxPeakPower_JsonNullable() {
    return maxPeakPower;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_PEAK_POWER)
  public void setMaxPeakPower_JsonNullable(JsonNullable<Object> maxPeakPower) {
    this.maxPeakPower = maxPeakPower;
  }

  public void setMaxPeakPower(Object maxPeakPower) {
    this.maxPeakPower = JsonNullable.<Object>of(maxPeakPower);
  }


  public FilterSetsResponseAllOfData minPeakVelocity(Object minPeakVelocity) {
    this.minPeakVelocity = JsonNullable.<Object>of(minPeakVelocity);
    
    return this;
  }

   /**
   * The minimum of &#x60;Rep.concentric_peak_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * min_peak_velocity&#x60;
   * @return minPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinPeakVelocity() {
        return minPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinPeakVelocity_JsonNullable() {
    return minPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_PEAK_VELOCITY)
  public void setMinPeakVelocity_JsonNullable(JsonNullable<Object> minPeakVelocity) {
    this.minPeakVelocity = minPeakVelocity;
  }

  public void setMinPeakVelocity(Object minPeakVelocity) {
    this.minPeakVelocity = JsonNullable.<Object>of(minPeakVelocity);
  }


  public FilterSetsResponseAllOfData avgPeakVelocity(Object avgPeakVelocity) {
    this.avgPeakVelocity = JsonNullable.<Object>of(avgPeakVelocity);
    
    return this;
  }

   /**
   * The mean of &#x60;Rep.concentric_peak_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * avg_peak_velocity&#x60;
   * @return avgPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgPeakVelocity() {
        return avgPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgPeakVelocity_JsonNullable() {
    return avgPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_PEAK_VELOCITY)
  public void setAvgPeakVelocity_JsonNullable(JsonNullable<Object> avgPeakVelocity) {
    this.avgPeakVelocity = avgPeakVelocity;
  }

  public void setAvgPeakVelocity(Object avgPeakVelocity) {
    this.avgPeakVelocity = JsonNullable.<Object>of(avgPeakVelocity);
  }


  public FilterSetsResponseAllOfData maxPeakVelocity(Object maxPeakVelocity) {
    this.maxPeakVelocity = JsonNullable.<Object>of(maxPeakVelocity);
    
    return this;
  }

   /**
   * The max of &#x60;Rep.concentric_peak_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * max_peak_velocity&#x60;
   * @return maxPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxPeakVelocity() {
        return maxPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxPeakVelocity_JsonNullable() {
    return maxPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_PEAK_VELOCITY)
  public void setMaxPeakVelocity_JsonNullable(JsonNullable<Object> maxPeakVelocity) {
    this.maxPeakVelocity = maxPeakVelocity;
  }

  public void setMaxPeakVelocity(Object maxPeakVelocity) {
    this.maxPeakVelocity = JsonNullable.<Object>of(maxPeakVelocity);
  }


  public FilterSetsResponseAllOfData avgEccPeakVelocity(Object avgEccPeakVelocity) {
    this.avgEccPeakVelocity = JsonNullable.<Object>of(avgEccPeakVelocity);
    
    return this;
  }

   /**
   * The mean of &#x60;Rep.eccentric_peak_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * avg_ecc_peak_velocity&#x60;
   * @return avgEccPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgEccPeakVelocity() {
        return avgEccPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_ECC_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgEccPeakVelocity_JsonNullable() {
    return avgEccPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_ECC_PEAK_VELOCITY)
  public void setAvgEccPeakVelocity_JsonNullable(JsonNullable<Object> avgEccPeakVelocity) {
    this.avgEccPeakVelocity = avgEccPeakVelocity;
  }

  public void setAvgEccPeakVelocity(Object avgEccPeakVelocity) {
    this.avgEccPeakVelocity = JsonNullable.<Object>of(avgEccPeakVelocity);
  }


  public FilterSetsResponseAllOfData maxEccPeakVelocity(Object maxEccPeakVelocity) {
    this.maxEccPeakVelocity = JsonNullable.<Object>of(maxEccPeakVelocity);
    
    return this;
  }

   /**
   * The max of &#x60;Rep.eccentric_peak_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * max_ecc_peak_velocity&#x60;
   * @return maxEccPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxEccPeakVelocity() {
        return maxEccPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_ECC_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxEccPeakVelocity_JsonNullable() {
    return maxEccPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_ECC_PEAK_VELOCITY)
  public void setMaxEccPeakVelocity_JsonNullable(JsonNullable<Object> maxEccPeakVelocity) {
    this.maxEccPeakVelocity = maxEccPeakVelocity;
  }

  public void setMaxEccPeakVelocity(Object maxEccPeakVelocity) {
    this.maxEccPeakVelocity = JsonNullable.<Object>of(maxEccPeakVelocity);
  }


  public FilterSetsResponseAllOfData minEccPeakVelocity(Object minEccPeakVelocity) {
    this.minEccPeakVelocity = JsonNullable.<Object>of(minEccPeakVelocity);
    
    return this;
  }

   /**
   * The min of &#x60;Rep.eccentric_peak_velocity_z&#x60; across all reps. Convert to m/s: &#x60;m/in * min_ecc_peak_velocity&#x60;
   * @return minEccPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinEccPeakVelocity() {
        return minEccPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_ECC_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinEccPeakVelocity_JsonNullable() {
    return minEccPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_ECC_PEAK_VELOCITY)
  public void setMinEccPeakVelocity_JsonNullable(JsonNullable<Object> minEccPeakVelocity) {
    this.minEccPeakVelocity = minEccPeakVelocity;
  }

  public void setMinEccPeakVelocity(Object minEccPeakVelocity) {
    this.minEccPeakVelocity = JsonNullable.<Object>of(minEccPeakVelocity);
  }


  public FilterSetsResponseAllOfData avgEccTime(Object avgEccTime) {
    this.avgEccTime = JsonNullable.<Object>of(avgEccTime);
    
    return this;
  }

   /**
   * The mean of &#x60;(Rep.eccentric_end_time - Rep.eccentric_end_time)&#x60; across all reps. Convert to seconds: &#x60;us/s * avg_ecc_time&#x60;
   * @return avgEccTime
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgEccTime() {
        return avgEccTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_ECC_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgEccTime_JsonNullable() {
    return avgEccTime;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_ECC_TIME)
  public void setAvgEccTime_JsonNullable(JsonNullable<Object> avgEccTime) {
    this.avgEccTime = avgEccTime;
  }

  public void setAvgEccTime(Object avgEccTime) {
    this.avgEccTime = JsonNullable.<Object>of(avgEccTime);
  }


  public FilterSetsResponseAllOfData maxEccTime(Object maxEccTime) {
    this.maxEccTime = JsonNullable.<Object>of(maxEccTime);
    
    return this;
  }

   /**
   * The max of &#x60;(Rep.eccentric_end_time - Rep.eccentric_end_time)&#x60; across all reps. Convert to seconds: &#x60;us/s * max_ecc_time&#x60;
   * @return maxEccTime
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxEccTime() {
        return maxEccTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_ECC_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxEccTime_JsonNullable() {
    return maxEccTime;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_ECC_TIME)
  public void setMaxEccTime_JsonNullable(JsonNullable<Object> maxEccTime) {
    this.maxEccTime = maxEccTime;
  }

  public void setMaxEccTime(Object maxEccTime) {
    this.maxEccTime = JsonNullable.<Object>of(maxEccTime);
  }


  public FilterSetsResponseAllOfData minEccTime(Object minEccTime) {
    this.minEccTime = JsonNullable.<Object>of(minEccTime);
    
    return this;
  }

   /**
   * The min of &#x60;(Rep.eccentric_end_time - Rep.eccentric_end_time)&#x60; across all reps. Convert to seconds: &#x60;us/s * min_ecc_time&#x60;
   * @return minEccTime
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinEccTime() {
        return minEccTime.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_ECC_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinEccTime_JsonNullable() {
    return minEccTime;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_ECC_TIME)
  public void setMinEccTime_JsonNullable(JsonNullable<Object> minEccTime) {
    this.minEccTime = minEccTime;
  }

  public void setMinEccTime(Object minEccTime) {
    this.minEccTime = JsonNullable.<Object>of(minEccTime);
  }


  public FilterSetsResponseAllOfData maxVelocityAt100Ms(Object maxVelocityAt100Ms) {
    this.maxVelocityAt100Ms = JsonNullable.<Object>of(maxVelocityAt100Ms);
    
    return this;
  }

   /**
   * The maximum value of &#x60;Rep.concentric_velocity_at_100_ms&#x60; across all reps. Convert to m/s: &#x60;m/in * max_velocity_at_100_ms&#x60;
   * @return maxVelocityAt100Ms
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxVelocityAt100Ms() {
        return maxVelocityAt100Ms.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_VELOCITY_AT100_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxVelocityAt100Ms_JsonNullable() {
    return maxVelocityAt100Ms;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_VELOCITY_AT100_MS)
  public void setMaxVelocityAt100Ms_JsonNullable(JsonNullable<Object> maxVelocityAt100Ms) {
    this.maxVelocityAt100Ms = maxVelocityAt100Ms;
  }

  public void setMaxVelocityAt100Ms(Object maxVelocityAt100Ms) {
    this.maxVelocityAt100Ms = JsonNullable.<Object>of(maxVelocityAt100Ms);
  }


  public FilterSetsResponseAllOfData avgVelocityAt100Ms(Object avgVelocityAt100Ms) {
    this.avgVelocityAt100Ms = JsonNullable.<Object>of(avgVelocityAt100Ms);
    
    return this;
  }

   /**
   * The average value of &#x60;Rep.concentric_velocity_at_100_ms&#x60; across all reps. Convert to m/s: &#x60;m/in * avg_velocity_at_100_ms&#x60;
   * @return avgVelocityAt100Ms
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgVelocityAt100Ms() {
        return avgVelocityAt100Ms.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_VELOCITY_AT100_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgVelocityAt100Ms_JsonNullable() {
    return avgVelocityAt100Ms;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_VELOCITY_AT100_MS)
  public void setAvgVelocityAt100Ms_JsonNullable(JsonNullable<Object> avgVelocityAt100Ms) {
    this.avgVelocityAt100Ms = avgVelocityAt100Ms;
  }

  public void setAvgVelocityAt100Ms(Object avgVelocityAt100Ms) {
    this.avgVelocityAt100Ms = JsonNullable.<Object>of(avgVelocityAt100Ms);
  }


  public FilterSetsResponseAllOfData minVelocityAt100Ms(Object minVelocityAt100Ms) {
    this.minVelocityAt100Ms = JsonNullable.<Object>of(minVelocityAt100Ms);
    
    return this;
  }

   /**
   * The minimum value of &#x60;Rep.concentric_velocity_at_100_ms&#x60; across all reps. Convert to m/s: &#x60;m/in * min_velocity_at_100_ms&#x60;
   * @return minVelocityAt100Ms
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinVelocityAt100Ms() {
        return minVelocityAt100Ms.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_VELOCITY_AT100_MS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinVelocityAt100Ms_JsonNullable() {
    return minVelocityAt100Ms;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_VELOCITY_AT100_MS)
  public void setMinVelocityAt100Ms_JsonNullable(JsonNullable<Object> minVelocityAt100Ms) {
    this.minVelocityAt100Ms = minVelocityAt100Ms;
  }

  public void setMinVelocityAt100Ms(Object minVelocityAt100Ms) {
    this.minVelocityAt100Ms = JsonNullable.<Object>of(minVelocityAt100Ms);
  }


  public FilterSetsResponseAllOfData maxTimeToPeakVelocity(Object maxTimeToPeakVelocity) {
    this.maxTimeToPeakVelocity = JsonNullable.<Object>of(maxTimeToPeakVelocity);
    
    return this;
  }

   /**
   * The maximum value of &#x60;Rep.concentric_time_to_peak_velocity&#x60; across all reps.
   * @return maxTimeToPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxTimeToPeakVelocity() {
        return maxTimeToPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_TIME_TO_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxTimeToPeakVelocity_JsonNullable() {
    return maxTimeToPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_TIME_TO_PEAK_VELOCITY)
  public void setMaxTimeToPeakVelocity_JsonNullable(JsonNullable<Object> maxTimeToPeakVelocity) {
    this.maxTimeToPeakVelocity = maxTimeToPeakVelocity;
  }

  public void setMaxTimeToPeakVelocity(Object maxTimeToPeakVelocity) {
    this.maxTimeToPeakVelocity = JsonNullable.<Object>of(maxTimeToPeakVelocity);
  }


  public FilterSetsResponseAllOfData avgTimeToPeakVelocity(Object avgTimeToPeakVelocity) {
    this.avgTimeToPeakVelocity = JsonNullable.<Object>of(avgTimeToPeakVelocity);
    
    return this;
  }

   /**
   * The average value of &#x60;Rep.concentric_time_to_peak_velocity&#x60; across all reps.
   * @return avgTimeToPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgTimeToPeakVelocity() {
        return avgTimeToPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_TIME_TO_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgTimeToPeakVelocity_JsonNullable() {
    return avgTimeToPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_TIME_TO_PEAK_VELOCITY)
  public void setAvgTimeToPeakVelocity_JsonNullable(JsonNullable<Object> avgTimeToPeakVelocity) {
    this.avgTimeToPeakVelocity = avgTimeToPeakVelocity;
  }

  public void setAvgTimeToPeakVelocity(Object avgTimeToPeakVelocity) {
    this.avgTimeToPeakVelocity = JsonNullable.<Object>of(avgTimeToPeakVelocity);
  }


  public FilterSetsResponseAllOfData minTimeToPeakVelocity(Object minTimeToPeakVelocity) {
    this.minTimeToPeakVelocity = JsonNullable.<Object>of(minTimeToPeakVelocity);
    
    return this;
  }

   /**
   * The minimum value of &#x60;Rep.concentric_time_to_peak_velocity&#x60; across all reps.
   * @return minTimeToPeakVelocity
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinTimeToPeakVelocity() {
        return minTimeToPeakVelocity.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_TIME_TO_PEAK_VELOCITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinTimeToPeakVelocity_JsonNullable() {
    return minTimeToPeakVelocity;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_TIME_TO_PEAK_VELOCITY)
  public void setMinTimeToPeakVelocity_JsonNullable(JsonNullable<Object> minTimeToPeakVelocity) {
    this.minTimeToPeakVelocity = minTimeToPeakVelocity;
  }

  public void setMinTimeToPeakVelocity(Object minTimeToPeakVelocity) {
    this.minTimeToPeakVelocity = JsonNullable.<Object>of(minTimeToPeakVelocity);
  }


  public FilterSetsResponseAllOfData maxTimeToPeakPower(Object maxTimeToPeakPower) {
    this.maxTimeToPeakPower = JsonNullable.<Object>of(maxTimeToPeakPower);
    
    return this;
  }

   /**
   * The maximum value of &#x60;Rep.concentric_time_to_peak_power&#x60; across all reps.
   * @return maxTimeToPeakPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMaxTimeToPeakPower() {
        return maxTimeToPeakPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MAX_TIME_TO_PEAK_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMaxTimeToPeakPower_JsonNullable() {
    return maxTimeToPeakPower;
  }
  
  @JsonProperty(JSON_PROPERTY_MAX_TIME_TO_PEAK_POWER)
  public void setMaxTimeToPeakPower_JsonNullable(JsonNullable<Object> maxTimeToPeakPower) {
    this.maxTimeToPeakPower = maxTimeToPeakPower;
  }

  public void setMaxTimeToPeakPower(Object maxTimeToPeakPower) {
    this.maxTimeToPeakPower = JsonNullable.<Object>of(maxTimeToPeakPower);
  }


  public FilterSetsResponseAllOfData avgTimeToPeakPower(Object avgTimeToPeakPower) {
    this.avgTimeToPeakPower = JsonNullable.<Object>of(avgTimeToPeakPower);
    
    return this;
  }

   /**
   * The average value of &#x60;Rep.concentric_time_to_peak_power&#x60; across all reps.
   * @return avgTimeToPeakPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getAvgTimeToPeakPower() {
        return avgTimeToPeakPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AVG_TIME_TO_PEAK_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getAvgTimeToPeakPower_JsonNullable() {
    return avgTimeToPeakPower;
  }
  
  @JsonProperty(JSON_PROPERTY_AVG_TIME_TO_PEAK_POWER)
  public void setAvgTimeToPeakPower_JsonNullable(JsonNullable<Object> avgTimeToPeakPower) {
    this.avgTimeToPeakPower = avgTimeToPeakPower;
  }

  public void setAvgTimeToPeakPower(Object avgTimeToPeakPower) {
    this.avgTimeToPeakPower = JsonNullable.<Object>of(avgTimeToPeakPower);
  }


  public FilterSetsResponseAllOfData minTimeToPeakPower(Object minTimeToPeakPower) {
    this.minTimeToPeakPower = JsonNullable.<Object>of(minTimeToPeakPower);
    
    return this;
  }

   /**
   * The minimum value of &#x60;Rep.concentric_time_to_peak_power&#x60; across all reps.
   * @return minTimeToPeakPower
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinTimeToPeakPower() {
        return minTimeToPeakPower.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_TIME_TO_PEAK_POWER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinTimeToPeakPower_JsonNullable() {
    return minTimeToPeakPower;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_TIME_TO_PEAK_POWER)
  public void setMinTimeToPeakPower_JsonNullable(JsonNullable<Object> minTimeToPeakPower) {
    this.minTimeToPeakPower = minTimeToPeakPower;
  }

  public void setMinTimeToPeakPower(Object minTimeToPeakPower) {
    this.minTimeToPeakPower = JsonNullable.<Object>of(minTimeToPeakPower);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterSetsResponseAllOfData filterSetsResponseAllOfData = (FilterSetsResponseAllOfData) o;
    return Objects.equals(this.id, filterSetsResponseAllOfData.id) &&
        Objects.equals(this.createdAt, filterSetsResponseAllOfData.createdAt) &&
        Objects.equals(this.userId, filterSetsResponseAllOfData.userId) &&
        Objects.equals(this.orgId, filterSetsResponseAllOfData.orgId) &&
        Objects.equals(this.exerciseId, filterSetsResponseAllOfData.exerciseId) &&
        Objects.equals(this.weight, filterSetsResponseAllOfData.weight) &&
        equalsNullable(this.pct1rm, filterSetsResponseAllOfData.pct1rm) &&
        Objects.equals(this.tracked, filterSetsResponseAllOfData.tracked) &&
        equalsNullable(this.bandsUsed, filterSetsResponseAllOfData.bandsUsed) &&
        equalsNullable(this.chainsUsed, filterSetsResponseAllOfData.chainsUsed) &&
        Objects.equals(this.startTime, filterSetsResponseAllOfData.startTime) &&
        Objects.equals(this.endTime, filterSetsResponseAllOfData.endTime) &&
        Objects.equals(this.error, filterSetsResponseAllOfData.error) &&
        equalsNullable(this.reps, filterSetsResponseAllOfData.reps) &&
        equalsNullable(this.numReps, filterSetsResponseAllOfData.numReps) &&
        equalsNullable(this.numTrackedReps, filterSetsResponseAllOfData.numTrackedReps) &&
        equalsNullable(this.firstLimb, filterSetsResponseAllOfData.firstLimb) &&
        Objects.equals(this.limbPattern, filterSetsResponseAllOfData.limbPattern) &&
        equalsNullable(this.minMeanPower, filterSetsResponseAllOfData.minMeanPower) &&
        equalsNullable(this.avgMeanPower, filterSetsResponseAllOfData.avgMeanPower) &&
        equalsNullable(this.maxMeanPower, filterSetsResponseAllOfData.maxMeanPower) &&
        equalsNullable(this.minMeanVelocity, filterSetsResponseAllOfData.minMeanVelocity) &&
        equalsNullable(this.avgMeanVelocity, filterSetsResponseAllOfData.avgMeanVelocity) &&
        equalsNullable(this.maxMeanVelocity, filterSetsResponseAllOfData.maxMeanVelocity) &&
        equalsNullable(this.avgEccMeanVelocity, filterSetsResponseAllOfData.avgEccMeanVelocity) &&
        equalsNullable(this.maxEccMeanVelocity, filterSetsResponseAllOfData.maxEccMeanVelocity) &&
        equalsNullable(this.minEccMeanVelocity, filterSetsResponseAllOfData.minEccMeanVelocity) &&
        equalsNullable(this.minPeakPower, filterSetsResponseAllOfData.minPeakPower) &&
        equalsNullable(this.avgPeakPower, filterSetsResponseAllOfData.avgPeakPower) &&
        equalsNullable(this.maxPeakPower, filterSetsResponseAllOfData.maxPeakPower) &&
        equalsNullable(this.minPeakVelocity, filterSetsResponseAllOfData.minPeakVelocity) &&
        equalsNullable(this.avgPeakVelocity, filterSetsResponseAllOfData.avgPeakVelocity) &&
        equalsNullable(this.maxPeakVelocity, filterSetsResponseAllOfData.maxPeakVelocity) &&
        equalsNullable(this.avgEccPeakVelocity, filterSetsResponseAllOfData.avgEccPeakVelocity) &&
        equalsNullable(this.maxEccPeakVelocity, filterSetsResponseAllOfData.maxEccPeakVelocity) &&
        equalsNullable(this.minEccPeakVelocity, filterSetsResponseAllOfData.minEccPeakVelocity) &&
        equalsNullable(this.avgEccTime, filterSetsResponseAllOfData.avgEccTime) &&
        equalsNullable(this.maxEccTime, filterSetsResponseAllOfData.maxEccTime) &&
        equalsNullable(this.minEccTime, filterSetsResponseAllOfData.minEccTime) &&
        equalsNullable(this.maxVelocityAt100Ms, filterSetsResponseAllOfData.maxVelocityAt100Ms) &&
        equalsNullable(this.avgVelocityAt100Ms, filterSetsResponseAllOfData.avgVelocityAt100Ms) &&
        equalsNullable(this.minVelocityAt100Ms, filterSetsResponseAllOfData.minVelocityAt100Ms) &&
        equalsNullable(this.maxTimeToPeakVelocity, filterSetsResponseAllOfData.maxTimeToPeakVelocity) &&
        equalsNullable(this.avgTimeToPeakVelocity, filterSetsResponseAllOfData.avgTimeToPeakVelocity) &&
        equalsNullable(this.minTimeToPeakVelocity, filterSetsResponseAllOfData.minTimeToPeakVelocity) &&
        equalsNullable(this.maxTimeToPeakPower, filterSetsResponseAllOfData.maxTimeToPeakPower) &&
        equalsNullable(this.avgTimeToPeakPower, filterSetsResponseAllOfData.avgTimeToPeakPower) &&
        equalsNullable(this.minTimeToPeakPower, filterSetsResponseAllOfData.minTimeToPeakPower);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, userId, orgId, exerciseId, weight, hashCodeNullable(pct1rm), tracked, hashCodeNullable(bandsUsed), hashCodeNullable(chainsUsed), startTime, endTime, error, hashCodeNullable(reps), hashCodeNullable(numReps), hashCodeNullable(numTrackedReps), hashCodeNullable(firstLimb), limbPattern, hashCodeNullable(minMeanPower), hashCodeNullable(avgMeanPower), hashCodeNullable(maxMeanPower), hashCodeNullable(minMeanVelocity), hashCodeNullable(avgMeanVelocity), hashCodeNullable(maxMeanVelocity), hashCodeNullable(avgEccMeanVelocity), hashCodeNullable(maxEccMeanVelocity), hashCodeNullable(minEccMeanVelocity), hashCodeNullable(minPeakPower), hashCodeNullable(avgPeakPower), hashCodeNullable(maxPeakPower), hashCodeNullable(minPeakVelocity), hashCodeNullable(avgPeakVelocity), hashCodeNullable(maxPeakVelocity), hashCodeNullable(avgEccPeakVelocity), hashCodeNullable(maxEccPeakVelocity), hashCodeNullable(minEccPeakVelocity), hashCodeNullable(avgEccTime), hashCodeNullable(maxEccTime), hashCodeNullable(minEccTime), hashCodeNullable(maxVelocityAt100Ms), hashCodeNullable(avgVelocityAt100Ms), hashCodeNullable(minVelocityAt100Ms), hashCodeNullable(maxTimeToPeakVelocity), hashCodeNullable(avgTimeToPeakVelocity), hashCodeNullable(minTimeToPeakVelocity), hashCodeNullable(maxTimeToPeakPower), hashCodeNullable(avgTimeToPeakPower), hashCodeNullable(minTimeToPeakPower));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterSetsResponseAllOfData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    exerciseId: ").append(toIndentedString(exerciseId)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    pct1rm: ").append(toIndentedString(pct1rm)).append("\n");
    sb.append("    tracked: ").append(toIndentedString(tracked)).append("\n");
    sb.append("    bandsUsed: ").append(toIndentedString(bandsUsed)).append("\n");
    sb.append("    chainsUsed: ").append(toIndentedString(chainsUsed)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    reps: ").append(toIndentedString(reps)).append("\n");
    sb.append("    numReps: ").append(toIndentedString(numReps)).append("\n");
    sb.append("    numTrackedReps: ").append(toIndentedString(numTrackedReps)).append("\n");
    sb.append("    firstLimb: ").append(toIndentedString(firstLimb)).append("\n");
    sb.append("    limbPattern: ").append(toIndentedString(limbPattern)).append("\n");
    sb.append("    minMeanPower: ").append(toIndentedString(minMeanPower)).append("\n");
    sb.append("    avgMeanPower: ").append(toIndentedString(avgMeanPower)).append("\n");
    sb.append("    maxMeanPower: ").append(toIndentedString(maxMeanPower)).append("\n");
    sb.append("    minMeanVelocity: ").append(toIndentedString(minMeanVelocity)).append("\n");
    sb.append("    avgMeanVelocity: ").append(toIndentedString(avgMeanVelocity)).append("\n");
    sb.append("    maxMeanVelocity: ").append(toIndentedString(maxMeanVelocity)).append("\n");
    sb.append("    avgEccMeanVelocity: ").append(toIndentedString(avgEccMeanVelocity)).append("\n");
    sb.append("    maxEccMeanVelocity: ").append(toIndentedString(maxEccMeanVelocity)).append("\n");
    sb.append("    minEccMeanVelocity: ").append(toIndentedString(minEccMeanVelocity)).append("\n");
    sb.append("    minPeakPower: ").append(toIndentedString(minPeakPower)).append("\n");
    sb.append("    avgPeakPower: ").append(toIndentedString(avgPeakPower)).append("\n");
    sb.append("    maxPeakPower: ").append(toIndentedString(maxPeakPower)).append("\n");
    sb.append("    minPeakVelocity: ").append(toIndentedString(minPeakVelocity)).append("\n");
    sb.append("    avgPeakVelocity: ").append(toIndentedString(avgPeakVelocity)).append("\n");
    sb.append("    maxPeakVelocity: ").append(toIndentedString(maxPeakVelocity)).append("\n");
    sb.append("    avgEccPeakVelocity: ").append(toIndentedString(avgEccPeakVelocity)).append("\n");
    sb.append("    maxEccPeakVelocity: ").append(toIndentedString(maxEccPeakVelocity)).append("\n");
    sb.append("    minEccPeakVelocity: ").append(toIndentedString(minEccPeakVelocity)).append("\n");
    sb.append("    avgEccTime: ").append(toIndentedString(avgEccTime)).append("\n");
    sb.append("    maxEccTime: ").append(toIndentedString(maxEccTime)).append("\n");
    sb.append("    minEccTime: ").append(toIndentedString(minEccTime)).append("\n");
    sb.append("    maxVelocityAt100Ms: ").append(toIndentedString(maxVelocityAt100Ms)).append("\n");
    sb.append("    avgVelocityAt100Ms: ").append(toIndentedString(avgVelocityAt100Ms)).append("\n");
    sb.append("    minVelocityAt100Ms: ").append(toIndentedString(minVelocityAt100Ms)).append("\n");
    sb.append("    maxTimeToPeakVelocity: ").append(toIndentedString(maxTimeToPeakVelocity)).append("\n");
    sb.append("    avgTimeToPeakVelocity: ").append(toIndentedString(avgTimeToPeakVelocity)).append("\n");
    sb.append("    minTimeToPeakVelocity: ").append(toIndentedString(minTimeToPeakVelocity)).append("\n");
    sb.append("    maxTimeToPeakPower: ").append(toIndentedString(maxTimeToPeakPower)).append("\n");
    sb.append("    avgTimeToPeakPower: ").append(toIndentedString(avgTimeToPeakPower)).append("\n");
    sb.append("    minTimeToPeakPower: ").append(toIndentedString(minTimeToPeakPower)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

