/*
 * Reference
 * The DoDays API reference.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@dodays.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Plan;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Price
 */
@JsonPropertyOrder({
  Price.JSON_PROPERTY_ID,
  Price.JSON_PROPERTY_TYPE,
  Price.JSON_PROPERTY_PAYMENT_METHOD,
  Price.JSON_PROPERTY_FIXED_COST,
  Price.JSON_PROPERTY_SESSION_LIMIT,
  Price.JSON_PROPERTY_SESSION_SELECTION_TYPE,
  Price.JSON_PROPERTY_PLAN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:23:35.686627593Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Price {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    PERSESSION("perSession"),
    
    PERTRIAL("perTrial"),
    
    FIXEDCOST("fixedCost");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * Gets or Sets paymentMethod
   */
  public enum PaymentMethodEnum {
    CARD("card"),
    
    SUBSCRIPTION("subscription");

    private String value;

    PaymentMethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PaymentMethodEnum fromValue(String value) {
      for (PaymentMethodEnum b : PaymentMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PAYMENT_METHOD = "payment_method";
  private PaymentMethodEnum paymentMethod;

  public static final String JSON_PROPERTY_FIXED_COST = "fixed_cost";
  private Integer fixedCost;

  public static final String JSON_PROPERTY_SESSION_LIMIT = "session_limit";
  private Integer sessionLimit;

  /**
   * Gets or Sets sessionSelectionType
   */
  public enum SessionSelectionTypeEnum {
    FIXEDSTART("fixedStart"),
    
    FLEXISTART("flexiStart"),
    
    CHERRYPICK("cherryPick");

    private String value;

    SessionSelectionTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SessionSelectionTypeEnum fromValue(String value) {
      for (SessionSelectionTypeEnum b : SessionSelectionTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SESSION_SELECTION_TYPE = "session_selection_type";
  private SessionSelectionTypeEnum sessionSelectionType;

  public static final String JSON_PROPERTY_PLAN = "plan";
  private Plan plan;

  public Price() {
  }

  public Price id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public Price type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Price paymentMethod(PaymentMethodEnum paymentMethod) {
    
    this.paymentMethod = paymentMethod;
    return this;
  }

   /**
   * Get paymentMethod
   * @return paymentMethod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PaymentMethodEnum getPaymentMethod() {
    return paymentMethod;
  }


  @JsonProperty(JSON_PROPERTY_PAYMENT_METHOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPaymentMethod(PaymentMethodEnum paymentMethod) {
    this.paymentMethod = paymentMethod;
  }


  public Price fixedCost(Integer fixedCost) {
    
    this.fixedCost = fixedCost;
    return this;
  }

   /**
   * Get fixedCost
   * @return fixedCost
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIXED_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFixedCost() {
    return fixedCost;
  }


  @JsonProperty(JSON_PROPERTY_FIXED_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFixedCost(Integer fixedCost) {
    this.fixedCost = fixedCost;
  }


  public Price sessionLimit(Integer sessionLimit) {
    
    this.sessionLimit = sessionLimit;
    return this;
  }

   /**
   * Get sessionLimit
   * @return sessionLimit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SESSION_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSessionLimit() {
    return sessionLimit;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_LIMIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSessionLimit(Integer sessionLimit) {
    this.sessionLimit = sessionLimit;
  }


  public Price sessionSelectionType(SessionSelectionTypeEnum sessionSelectionType) {
    
    this.sessionSelectionType = sessionSelectionType;
    return this;
  }

   /**
   * Get sessionSelectionType
   * @return sessionSelectionType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SESSION_SELECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SessionSelectionTypeEnum getSessionSelectionType() {
    return sessionSelectionType;
  }


  @JsonProperty(JSON_PROPERTY_SESSION_SELECTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSessionSelectionType(SessionSelectionTypeEnum sessionSelectionType) {
    this.sessionSelectionType = sessionSelectionType;
  }


  public Price plan(Plan plan) {
    
    this.plan = plan;
    return this;
  }

   /**
   * Get plan
   * @return plan
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Plan getPlan() {
    return plan;
  }


  @JsonProperty(JSON_PROPERTY_PLAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPlan(Plan plan) {
    this.plan = plan;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Price price = (Price) o;
    return Objects.equals(this.id, price.id) &&
        Objects.equals(this.type, price.type) &&
        Objects.equals(this.paymentMethod, price.paymentMethod) &&
        Objects.equals(this.fixedCost, price.fixedCost) &&
        Objects.equals(this.sessionLimit, price.sessionLimit) &&
        Objects.equals(this.sessionSelectionType, price.sessionSelectionType) &&
        Objects.equals(this.plan, price.plan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, paymentMethod, fixedCost, sessionLimit, sessionSelectionType, plan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Price {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    paymentMethod: ").append(toIndentedString(paymentMethod)).append("\n");
    sb.append("    fixedCost: ").append(toIndentedString(fixedCost)).append("\n");
    sb.append("    sessionLimit: ").append(toIndentedString(sessionLimit)).append("\n");
    sb.append("    sessionSelectionType: ").append(toIndentedString(sessionSelectionType)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

