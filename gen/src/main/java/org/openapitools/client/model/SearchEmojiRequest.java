/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SearchEmojiRequest
 */
@JsonPropertyOrder({
  SearchEmojiRequest.JSON_PROPERTY_TERM,
  SearchEmojiRequest.JSON_PROPERTY_PREFIX_ONLY
})
@JsonTypeName("SearchEmoji_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SearchEmojiRequest {
  public static final String JSON_PROPERTY_TERM = "term";
  private String term;

  public static final String JSON_PROPERTY_PREFIX_ONLY = "prefix_only";
  private String prefixOnly;

  public SearchEmojiRequest() {
  }

  public SearchEmojiRequest term(String term) {
    
    this.term = term;
    return this;
  }

   /**
   * The term to match against the emoji name.
   * @return term
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TERM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTerm() {
    return term;
  }


  @JsonProperty(JSON_PROPERTY_TERM)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTerm(String term) {
    this.term = term;
  }


  public SearchEmojiRequest prefixOnly(String prefixOnly) {
    
    this.prefixOnly = prefixOnly;
    return this;
  }

   /**
   * Set to only search for names starting with the search term.
   * @return prefixOnly
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREFIX_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrefixOnly() {
    return prefixOnly;
  }


  @JsonProperty(JSON_PROPERTY_PREFIX_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrefixOnly(String prefixOnly) {
    this.prefixOnly = prefixOnly;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchEmojiRequest searchEmojiRequest = (SearchEmojiRequest) o;
    return Objects.equals(this.term, searchEmojiRequest.term) &&
        Objects.equals(this.prefixOnly, searchEmojiRequest.prefixOnly);
  }

  @Override
  public int hashCode() {
    return Objects.hash(term, prefixOnly);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchEmojiRequest {\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("    prefixOnly: ").append(toIndentedString(prefixOnly)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

