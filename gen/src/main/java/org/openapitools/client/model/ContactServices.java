/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContactScores;
import org.openapitools.client.model.DateOfExpiration;
import org.openapitools.client.model.Verification;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ContactServices
 */
@JsonPropertyOrder({
  ContactServices.JSON_PROPERTY_CONTACT_SCORES,
  ContactServices.JSON_PROPERTY_LISTING_DATE,
  ContactServices.JSON_PROPERTY_QUALIFIER,
  ContactServices.JSON_PROPERTY_VERIFICATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ContactServices {
  public static final String JSON_PROPERTY_CONTACT_SCORES = "contactScores";
  private List<ContactScores> contactScores;

  public static final String JSON_PROPERTY_LISTING_DATE = "listingDate";
  private DateOfExpiration listingDate;

  public static final String JSON_PROPERTY_QUALIFIER = "qualifier";
  private String qualifier;

  public static final String JSON_PROPERTY_VERIFICATION = "verification";
  private Verification verification;

  public ContactServices() {
  }

  public ContactServices contactScores(List<ContactScores> contactScores) {
    
    this.contactScores = contactScores;
    return this;
  }

  public ContactServices addContactScoresItem(ContactScores contactScoresItem) {
    if (this.contactScores == null) {
      this.contactScores = new ArrayList<>();
    }
    this.contactScores.add(contactScoresItem);
    return this;
  }

   /**
   * Get contactScores
   * @return contactScores
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTACT_SCORES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ContactScores> getContactScores() {
    return contactScores;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT_SCORES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactScores(List<ContactScores> contactScores) {
    this.contactScores = contactScores;
  }


  public ContactServices listingDate(DateOfExpiration listingDate) {
    
    this.listingDate = listingDate;
    return this;
  }

   /**
   * Get listingDate
   * @return listingDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LISTING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateOfExpiration getListingDate() {
    return listingDate;
  }


  @JsonProperty(JSON_PROPERTY_LISTING_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setListingDate(DateOfExpiration listingDate) {
    this.listingDate = listingDate;
  }


  public ContactServices qualifier(String qualifier) {
    
    this.qualifier = qualifier;
    return this;
  }

   /**
   * Get qualifier
   * @return qualifier
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUALIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQualifier() {
    return qualifier;
  }


  @JsonProperty(JSON_PROPERTY_QUALIFIER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQualifier(String qualifier) {
    this.qualifier = qualifier;
  }


  public ContactServices verification(Verification verification) {
    
    this.verification = verification;
    return this;
  }

   /**
   * Get verification
   * @return verification
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Verification getVerification() {
    return verification;
  }


  @JsonProperty(JSON_PROPERTY_VERIFICATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerification(Verification verification) {
    this.verification = verification;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactServices contactServices = (ContactServices) o;
    return Objects.equals(this.contactScores, contactServices.contactScores) &&
        Objects.equals(this.listingDate, contactServices.listingDate) &&
        Objects.equals(this.qualifier, contactServices.qualifier) &&
        Objects.equals(this.verification, contactServices.verification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactScores, listingDate, qualifier, verification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactServices {\n");
    sb.append("    contactScores: ").append(toIndentedString(contactScores)).append("\n");
    sb.append("    listingDate: ").append(toIndentedString(listingDate)).append("\n");
    sb.append("    qualifier: ").append(toIndentedString(qualifier)).append("\n");
    sb.append("    verification: ").append(toIndentedString(verification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

