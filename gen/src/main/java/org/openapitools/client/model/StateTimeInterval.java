/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StatePeriod;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * For a StateAttribute, describes a time interval type being reported and a list of periods generated according to that type.
 */
@JsonPropertyOrder({
  StateTimeInterval.JSON_PROPERTY_PERIODS,
  StateTimeInterval.JSON_PROPERTY_TIME_INTERVAL_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:21:08.417587988Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StateTimeInterval {
  public static final String JSON_PROPERTY_PERIODS = "periods";
  private List<StatePeriod> periods = new ArrayList<>();

  public static final String JSON_PROPERTY_TIME_INTERVAL_TYPE = "timeIntervalType";
  private String timeIntervalType = "MONTHLY_CALENDAR";

  public StateTimeInterval() {
  }

  public StateTimeInterval periods(List<StatePeriod> periods) {
    
    this.periods = periods;
    return this;
  }

  public StateTimeInterval addPeriodsItem(StatePeriod periodsItem) {
    if (this.periods == null) {
      this.periods = new ArrayList<>();
    }
    this.periods.add(periodsItem);
    return this;
  }

   /**
   * Periods of the specified time interval type, describing the attribute calculations
   * @return periods
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERIODS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<StatePeriod> getPeriods() {
    return periods;
  }


  @JsonProperty(JSON_PROPERTY_PERIODS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPeriods(List<StatePeriod> periods) {
    this.periods = periods;
  }


  public StateTimeInterval timeIntervalType(String timeIntervalType) {
    
    this.timeIntervalType = timeIntervalType;
    return this;
  }

   /**
   * Possible values for strategies in which attributes may be aggregated and reported across varying time intervals. Allowed Values - MONTHLY_CALENDAR - MONTHLY_ROLLING_30
   * @return timeIntervalType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIME_INTERVAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTimeIntervalType() {
    return timeIntervalType;
  }


  @JsonProperty(JSON_PROPERTY_TIME_INTERVAL_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimeIntervalType(String timeIntervalType) {
    this.timeIntervalType = timeIntervalType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StateTimeInterval stateTimeInterval = (StateTimeInterval) o;
    return Objects.equals(this.periods, stateTimeInterval.periods) &&
        Objects.equals(this.timeIntervalType, stateTimeInterval.timeIntervalType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(periods, timeIntervalType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StateTimeInterval {\n");
    sb.append("    periods: ").append(toIndentedString(periods)).append("\n");
    sb.append("    timeIntervalType: ").append(toIndentedString(timeIntervalType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

