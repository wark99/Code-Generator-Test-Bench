/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Information when file has multi-version
 */
@JsonPropertyOrder({
  Version.JSON_PROPERTY_IS_MULTIPLE,
  Version.JSON_PROPERTY_NUMBER,
  Version.JSON_PROPERTY_TOTAL_SIZE,
  Version.JSON_PROPERTY_KEEP_FOREVER
})
@JsonTypeName("version")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Version {
  public static final String JSON_PROPERTY_IS_MULTIPLE = "is_multiple";
  private Boolean isMultiple;

  public static final String JSON_PROPERTY_NUMBER = "number";
  private Integer number;

  public static final String JSON_PROPERTY_TOTAL_SIZE = "total_size";
  private Integer totalSize;

  public static final String JSON_PROPERTY_KEEP_FOREVER = "keep_forever";
  private Boolean keepForever;

  public Version() {
  }

  public Version isMultiple(Boolean isMultiple) {
    
    this.isMultiple = isMultiple;
    return this;
  }

   /**
   * File has multi-version
   * @return isMultiple
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_MULTIPLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsMultiple() {
    return isMultiple;
  }


  @JsonProperty(JSON_PROPERTY_IS_MULTIPLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsMultiple(Boolean isMultiple) {
    this.isMultiple = isMultiple;
  }


  public Version number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * Get number of version
   * @return number
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNumber() {
    return number;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumber(Integer number) {
    this.number = number;
  }


  public Version totalSize(Integer totalSize) {
    
    this.totalSize = totalSize;
    return this;
  }

   /**
   * Size of the file with all version  (byte unit)
   * @return totalSize
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTotalSize() {
    return totalSize;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalSize(Integer totalSize) {
    this.totalSize = totalSize;
  }


  public Version keepForever(Boolean keepForever) {
    
    this.keepForever = keepForever;
    return this;
  }

   /**
   * True if the current version of this file should be kept forever, otherwise false or empty
   * @return keepForever
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEEP_FOREVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getKeepForever() {
    return keepForever;
  }


  @JsonProperty(JSON_PROPERTY_KEEP_FOREVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeepForever(Boolean keepForever) {
    this.keepForever = keepForever;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Version version = (Version) o;
    return Objects.equals(this.isMultiple, version.isMultiple) &&
        Objects.equals(this.number, version.number) &&
        Objects.equals(this.totalSize, version.totalSize) &&
        Objects.equals(this.keepForever, version.keepForever);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isMultiple, number, totalSize, keepForever);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Version {\n");
    sb.append("    isMultiple: ").append(toIndentedString(isMultiple)).append("\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("    keepForever: ").append(toIndentedString(keepForever)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

