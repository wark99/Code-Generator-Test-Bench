/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Categorization Record
 */
@JsonPropertyOrder({
  Categorization.JSON_PROPERTY_NORMALIZED_PAYEE_NAME,
  Categorization.JSON_PROPERTY_CATEGORY,
  Categorization.JSON_PROPERTY_CITY,
  Categorization.JSON_PROPERTY_STATE,
  Categorization.JSON_PROPERTY_POSTAL_CODE,
  Categorization.JSON_PROPERTY_COUNTRY,
  Categorization.JSON_PROPERTY_BEST_REPRESENTATION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-30T11:16:07.490346735Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Categorization {
  public static final String JSON_PROPERTY_NORMALIZED_PAYEE_NAME = "normalizedPayeeName";
  private String normalizedPayeeName;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private String category;

  public static final String JSON_PROPERTY_CITY = "city";
  private String city;

  public static final String JSON_PROPERTY_STATE = "state";
  private String state;

  public static final String JSON_PROPERTY_POSTAL_CODE = "postalCode";
  private String postalCode;

  public static final String JSON_PROPERTY_COUNTRY = "country";
  private String country;

  public static final String JSON_PROPERTY_BEST_REPRESENTATION = "bestRepresentation";
  private String bestRepresentation;

  public Categorization() {
  }

  public Categorization normalizedPayeeName(String normalizedPayeeName) {
    
    this.normalizedPayeeName = normalizedPayeeName;
    return this;
  }

   /**
   * A normalized payee, derived from the transaction&#39;s description and memo fields
   * @return normalizedPayeeName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NORMALIZED_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNormalizedPayeeName() {
    return normalizedPayeeName;
  }


  @JsonProperty(JSON_PROPERTY_NORMALIZED_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNormalizedPayeeName(String normalizedPayeeName) {
    this.normalizedPayeeName = normalizedPayeeName;
  }


  public Categorization category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * The different categories for transactions. * \&quot;ATM Fee\&quot;  * \&quot;Advertising\&quot;  * \&quot;Air Travel\&quot;  * \&quot;Alcohol &amp; Bars\&quot;  * \&quot;Allowance\&quot;  * \&quot;Amusement\&quot;  * \&quot;Arts\&quot;  * \&quot;Auto &amp; Transport\&quot;  * \&quot;Auto Insurance\&quot;  * \&quot;Auto Payment\&quot;  * \&quot;Baby Supplies\&quot;  * \&quot;Babysitter &amp; Daycare\&quot;  * \&quot;Bank Fee\&quot;  * \&quot;Bills &amp; Utilities\&quot;  * \&quot;Bonus\&quot;  * \&quot;Books\&quot;  * \&quot;Books &amp; Supplies\&quot;  * \&quot;Business Services\&quot;  * \&quot;Buy\&quot;  * \&quot;Cash &amp; ATM\&quot;  * \&quot;Charity\&quot;  * \&quot;Check\&quot;  * \&quot;Child Support\&quot;  * \&quot;Clothing\&quot;  * \&quot;Coffee Shops\&quot;  * \&quot;Credit Card Payment\&quot;  * \&quot;Dentist\&quot;  * \&quot;Deposit\&quot;  * \&quot;Dividend &amp; Cap Gains\&quot;  * \&quot;Doctor\&quot;  * \&quot;Education\&quot;  * \&quot;Electronics &amp; Software\&quot;  * \&quot;Entertainment\&quot;  * \&quot;Eyecare\&quot;  * \&quot;Fast Food\&quot;  * \&quot;Federal Tax\&quot;  * \&quot;Fees &amp; Charges\&quot;  * \&quot;Finance Charge\&quot;  * \&quot;Financial\&quot;  * \&quot;Financial Advisor\&quot;  * \&quot;Food &amp; Dining\&quot;  * \&quot;Furnishings\&quot;  * \&quot;Gas &amp; Fuel\&quot;  * \&quot;Gift\&quot;  * \&quot;Gifts &amp; Donations\&quot;  * \&quot;Groceries\&quot;  * \&quot;Gym\&quot;  * \&quot;Hair\&quot;  * \&quot;Health &amp; Fitness\&quot;  * \&quot;Health Insurance\&quot;  * \&quot;Hobbies\&quot;  * \&quot;Home\&quot;  * \&quot;Home Improvement\&quot;  * \&quot;Home Insurance\&quot;  * \&quot;Home Phone\&quot;  * \&quot;Home Services\&quot;  * \&quot;Home Supplies\&quot;  * \&quot;Hotel\&quot;  * \&quot;Income\&quot;  * \&quot;Interest Income\&quot;  * \&quot;Internet\&quot;  * \&quot;Investments\&quot;  * \&quot;Kids\&quot;  * \&quot;Kids Activities\&quot;  * \&quot;Late Fee\&quot;  * \&quot;Laundry\&quot;  * \&quot;Lawn &amp; Garden\&quot;  * \&quot;Legal\&quot;  * \&quot;Life Insurance\&quot;  * \&quot;Loan Fees and Charges\&quot;  * \&quot;Loan Insurance\&quot;  * \&quot;Loan Interest\&quot;  * \&quot;Loan Payment\&quot;  * \&quot;Loan Principal\&quot;  * \&quot;Loans\&quot;  * \&quot;Local Tax\&quot;  * \&quot;Low Balance\&quot;  * \&quot;Mobile Phone\&quot;  * \&quot;Mortgage &amp; Rent\&quot;  * \&quot;Movies &amp; DVDs\&quot;  * \&quot;Music\&quot;  * \&quot;Newspapers &amp; Magazines\&quot;  * \&quot;Office Supplies\&quot;  * \&quot;Parking\&quot;  * \&quot;Paycheck\&quot;  * \&quot;Personal Care\&quot;  * \&quot;Pet Food &amp; Supplies\&quot;  * \&quot;Pet Grooming\&quot;  * \&quot;Pets\&quot;  * \&quot;Pharmacy\&quot;  * \&quot;Printing\&quot;  * \&quot;Property Tax\&quot;  * \&quot;Public Transportation\&quot;  * \&quot;Reimbursement\&quot;  * \&quot;Rental Car &amp; Taxi\&quot;  * \&quot;Restaurants\&quot;  * \&quot;Sales Tax\&quot;  * \&quot;Sell\&quot;  * \&quot;Service &amp; Parts\&quot;  * \&quot;Service Fee\&quot;  * \&quot;Shipping\&quot;  * \&quot;Shopping\&quot;  * \&quot;Spa &amp; Massage\&quot;  * \&quot;Sporting Goods\&quot;  * \&quot;Sports\&quot;  * \&quot;State Tax\&quot;  * \&quot;Streaming Services\&quot;  * \&quot;Student Loan\&quot;  * \&quot;Taxes\&quot;  * \&quot;Television\&quot;  * \&quot;Toys\&quot;  * \&quot;Trade Commissions\&quot;  * \&quot;Transfer\&quot;  * \&quot;Transfer for Cash Spending\&quot;  * \&quot;Travel\&quot;  * \&quot;Tuition\&quot;  * \&quot;Uncategorized\&quot;  * \&quot;Utilities\&quot;  * \&quot;Vacation\&quot;  * \&quot;Veterinary\&quot;  * \&quot;Internet / Broadband Charges\&quot;
   * @return category
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCategory(String category) {
    this.category = category;
  }


  public Categorization city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * City
   * @return city
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCity() {
    return city;
  }


  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCity(String city) {
    this.city = city;
  }


  public Categorization state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * State
   * @return state
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(String state) {
    this.state = state;
  }


  public Categorization postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * A ZIP code
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPostalCode() {
    return postalCode;
  }


  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public Categorization country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Country code is Iso3166-1 Alpha-2 code and Alpha 3 standard (max length 3).
   * @return country
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCountry() {
    return country;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountry(String country) {
    this.country = country;
  }


  public Categorization bestRepresentation(String bestRepresentation) {
    
    this.bestRepresentation = bestRepresentation;
    return this;
  }

   /**
   * Combines the &#x60;description&#x60; and &#x60;memo&#x60; data together, removing duplicated information and numbers and special characters
   * @return bestRepresentation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEST_REPRESENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBestRepresentation() {
    return bestRepresentation;
  }


  @JsonProperty(JSON_PROPERTY_BEST_REPRESENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBestRepresentation(String bestRepresentation) {
    this.bestRepresentation = bestRepresentation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Categorization categorization = (Categorization) o;
    return Objects.equals(this.normalizedPayeeName, categorization.normalizedPayeeName) &&
        Objects.equals(this.category, categorization.category) &&
        Objects.equals(this.city, categorization.city) &&
        Objects.equals(this.state, categorization.state) &&
        Objects.equals(this.postalCode, categorization.postalCode) &&
        Objects.equals(this.country, categorization.country) &&
        Objects.equals(this.bestRepresentation, categorization.bestRepresentation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(normalizedPayeeName, category, city, state, postalCode, country, bestRepresentation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Categorization {\n");
    sb.append("    normalizedPayeeName: ").append(toIndentedString(normalizedPayeeName)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    bestRepresentation: ").append(toIndentedString(bestRepresentation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

