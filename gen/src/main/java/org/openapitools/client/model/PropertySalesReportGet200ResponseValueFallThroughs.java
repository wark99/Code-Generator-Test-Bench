/*
 * SME Professional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.15.0-oas3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PropertySalesReportGet200ResponseValueFallThroughs
 */
@JsonPropertyOrder({
  PropertySalesReportGet200ResponseValueFallThroughs.JSON_PROPERTY_COUNT,
  PropertySalesReportGet200ResponseValueFallThroughs.JSON_PROPERTY_FALL_THROUGH_VALUE
})
@JsonTypeName("_property_sales_report_get_200_response_value_fall_throughs")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:30.009582082Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PropertySalesReportGet200ResponseValueFallThroughs {
  public static final String JSON_PROPERTY_COUNT = "count";
  private Integer count;

  public static final String JSON_PROPERTY_FALL_THROUGH_VALUE = "fall_through_value";
  private Double fallThroughValue;

  public PropertySalesReportGet200ResponseValueFallThroughs() {
  }

  public PropertySalesReportGet200ResponseValueFallThroughs count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Total number of fallthrough properties
   * @return count
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCount(Integer count) {
    this.count = count;
  }


  public PropertySalesReportGet200ResponseValueFallThroughs fallThroughValue(Double fallThroughValue) {
    
    this.fallThroughValue = fallThroughValue;
    return this;
  }

   /**
   * Total value of fallthrough properties
   * @return fallThroughValue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FALL_THROUGH_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getFallThroughValue() {
    return fallThroughValue;
  }


  @JsonProperty(JSON_PROPERTY_FALL_THROUGH_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFallThroughValue(Double fallThroughValue) {
    this.fallThroughValue = fallThroughValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertySalesReportGet200ResponseValueFallThroughs propertySalesReportGet200ResponseValueFallThroughs = (PropertySalesReportGet200ResponseValueFallThroughs) o;
    return Objects.equals(this.count, propertySalesReportGet200ResponseValueFallThroughs.count) &&
        Objects.equals(this.fallThroughValue, propertySalesReportGet200ResponseValueFallThroughs.fallThroughValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, fallThroughValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertySalesReportGet200ResponseValueFallThroughs {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    fallThroughValue: ").append(toIndentedString(fallThroughValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

