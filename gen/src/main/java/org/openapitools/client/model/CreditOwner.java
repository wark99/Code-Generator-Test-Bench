/*
 * VS4+ APIs
 * This file describes the VS4+ APIs using the swagger notation.
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreditOwnerAddress;
import org.openapitools.client.model.CreditOwnerName;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Owner of a credit report.
 */
@JsonPropertyOrder({
  CreditOwner.JSON_PROPERTY_NAMES,
  CreditOwner.JSON_PROPERTY_ADDRESSES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:38.356341300Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CreditOwner {
  public static final String JSON_PROPERTY_NAMES = "names";
  private List<CreditOwnerName> names = new ArrayList<>();

  public static final String JSON_PROPERTY_ADDRESSES = "addresses";
  private List<CreditOwnerAddress> addresses = new ArrayList<>();

  public CreditOwner() {
  }

  public CreditOwner names(List<CreditOwnerName> names) {
    
    this.names = names;
    return this;
  }

  public CreditOwner addNamesItem(CreditOwnerName namesItem) {
    if (this.names == null) {
      this.names = new ArrayList<>();
    }
    this.names.add(namesItem);
    return this;
  }

   /**
   * Name of a credit report owner.
   * @return names
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CreditOwnerName> getNames() {
    return names;
  }


  @JsonProperty(JSON_PROPERTY_NAMES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNames(List<CreditOwnerName> names) {
    this.names = names;
  }


  public CreditOwner addresses(List<CreditOwnerAddress> addresses) {
    
    this.addresses = addresses;
    return this;
  }

  public CreditOwner addAddressesItem(CreditOwnerAddress addressesItem) {
    if (this.addresses == null) {
      this.addresses = new ArrayList<>();
    }
    this.addresses.add(addressesItem);
    return this;
  }

   /**
   * List of addresses belonging to a credit report owner.
   * @return addresses
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CreditOwnerAddress> getAddresses() {
    return addresses;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAddresses(List<CreditOwnerAddress> addresses) {
    this.addresses = addresses;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreditOwner creditOwner = (CreditOwner) o;
    return Objects.equals(this.names, creditOwner.names) &&
        Objects.equals(this.addresses, creditOwner.addresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(names, addresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreditOwner {\n");
    sb.append("    names: ").append(toIndentedString(names)).append("\n");
    sb.append("    addresses: ").append(toIndentedString(addresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

