/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FileInfo
 */
@JsonPropertyOrder({
  FileInfo.JSON_PROPERTY_ID,
  FileInfo.JSON_PROPERTY_USER_ID,
  FileInfo.JSON_PROPERTY_POST_ID,
  FileInfo.JSON_PROPERTY_CREATE_AT,
  FileInfo.JSON_PROPERTY_UPDATE_AT,
  FileInfo.JSON_PROPERTY_DELETE_AT,
  FileInfo.JSON_PROPERTY_NAME,
  FileInfo.JSON_PROPERTY_EXTENSION,
  FileInfo.JSON_PROPERTY_SIZE,
  FileInfo.JSON_PROPERTY_MIME_TYPE,
  FileInfo.JSON_PROPERTY_WIDTH,
  FileInfo.JSON_PROPERTY_HEIGHT,
  FileInfo.JSON_PROPERTY_HAS_PREVIEW_IMAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class FileInfo {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private String userId;

  public static final String JSON_PROPERTY_POST_ID = "post_id";
  private String postId;

  public static final String JSON_PROPERTY_CREATE_AT = "create_at";
  private Long createAt;

  public static final String JSON_PROPERTY_UPDATE_AT = "update_at";
  private Long updateAt;

  public static final String JSON_PROPERTY_DELETE_AT = "delete_at";
  private Long deleteAt;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_EXTENSION = "extension";
  private String extension;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Integer size;

  public static final String JSON_PROPERTY_MIME_TYPE = "mime_type";
  private String mimeType;

  public static final String JSON_PROPERTY_WIDTH = "width";
  private Integer width;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private Integer height;

  public static final String JSON_PROPERTY_HAS_PREVIEW_IMAGE = "has_preview_image";
  private Boolean hasPreviewImage;

  public FileInfo() {
  }

  public FileInfo id(String id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for this file
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public FileInfo userId(String userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * The ID of the user that uploaded this file
   * @return userId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserId(String userId) {
    this.userId = userId;
  }


  public FileInfo postId(String postId) {
    
    this.postId = postId;
    return this;
  }

   /**
   * If this file is attached to a post, the ID of that post
   * @return postId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPostId() {
    return postId;
  }


  @JsonProperty(JSON_PROPERTY_POST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostId(String postId) {
    this.postId = postId;
  }


  public FileInfo createAt(Long createAt) {
    
    this.createAt = createAt;
    return this;
  }

   /**
   * The time in milliseconds a file was created
   * @return createAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getCreateAt() {
    return createAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreateAt(Long createAt) {
    this.createAt = createAt;
  }


  public FileInfo updateAt(Long updateAt) {
    
    this.updateAt = updateAt;
    return this;
  }

   /**
   * The time in milliseconds a file was last updated
   * @return updateAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getUpdateAt() {
    return updateAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdateAt(Long updateAt) {
    this.updateAt = updateAt;
  }


  public FileInfo deleteAt(Long deleteAt) {
    
    this.deleteAt = deleteAt;
    return this;
  }

   /**
   * The time in milliseconds a file was deleted
   * @return deleteAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getDeleteAt() {
    return deleteAt;
  }


  @JsonProperty(JSON_PROPERTY_DELETE_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeleteAt(Long deleteAt) {
    this.deleteAt = deleteAt;
  }


  public FileInfo name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The name of the file
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public FileInfo extension(String extension) {
    
    this.extension = extension;
    return this;
  }

   /**
   * The extension at the end of the file name
   * @return extension
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExtension() {
    return extension;
  }


  @JsonProperty(JSON_PROPERTY_EXTENSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtension(String extension) {
    this.extension = extension;
  }


  public FileInfo size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * The size of the file in bytes
   * @return size
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSize(Integer size) {
    this.size = size;
  }


  public FileInfo mimeType(String mimeType) {
    
    this.mimeType = mimeType;
    return this;
  }

   /**
   * The MIME type of the file
   * @return mimeType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMimeType() {
    return mimeType;
  }


  @JsonProperty(JSON_PROPERTY_MIME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public FileInfo width(Integer width) {
    
    this.width = width;
    return this;
  }

   /**
   * If this file is an image, the width of the file
   * @return width
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(Integer width) {
    this.width = width;
  }


  public FileInfo height(Integer height) {
    
    this.height = height;
    return this;
  }

   /**
   * If this file is an image, the height of the file
   * @return height
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(Integer height) {
    this.height = height;
  }


  public FileInfo hasPreviewImage(Boolean hasPreviewImage) {
    
    this.hasPreviewImage = hasPreviewImage;
    return this;
  }

   /**
   * If this file is an image, whether or not it has a preview-sized version
   * @return hasPreviewImage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_PREVIEW_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasPreviewImage() {
    return hasPreviewImage;
  }


  @JsonProperty(JSON_PROPERTY_HAS_PREVIEW_IMAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasPreviewImage(Boolean hasPreviewImage) {
    this.hasPreviewImage = hasPreviewImage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileInfo fileInfo = (FileInfo) o;
    return Objects.equals(this.id, fileInfo.id) &&
        Objects.equals(this.userId, fileInfo.userId) &&
        Objects.equals(this.postId, fileInfo.postId) &&
        Objects.equals(this.createAt, fileInfo.createAt) &&
        Objects.equals(this.updateAt, fileInfo.updateAt) &&
        Objects.equals(this.deleteAt, fileInfo.deleteAt) &&
        Objects.equals(this.name, fileInfo.name) &&
        Objects.equals(this.extension, fileInfo.extension) &&
        Objects.equals(this.size, fileInfo.size) &&
        Objects.equals(this.mimeType, fileInfo.mimeType) &&
        Objects.equals(this.width, fileInfo.width) &&
        Objects.equals(this.height, fileInfo.height) &&
        Objects.equals(this.hasPreviewImage, fileInfo.hasPreviewImage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, postId, createAt, updateAt, deleteAt, name, extension, size, mimeType, width, height, hasPreviewImage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    postId: ").append(toIndentedString(postId)).append("\n");
    sb.append("    createAt: ").append(toIndentedString(createAt)).append("\n");
    sb.append("    updateAt: ").append(toIndentedString(updateAt)).append("\n");
    sb.append("    deleteAt: ").append(toIndentedString(deleteAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    extension: ").append(toIndentedString(extension)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    hasPreviewImage: ").append(toIndentedString(hasPreviewImage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

