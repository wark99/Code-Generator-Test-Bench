/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StatConsumption
 */
@JsonPropertyOrder({
  StatConsumption.JSON_PROPERTY_DATE,
  StatConsumption.JSON_PROPERTY_BYTES,
  StatConsumption.JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StatConsumption {
  public static final String JSON_PROPERTY_DATE = "date";
  private String date;

  public static final String JSON_PROPERTY_BYTES = "bytes";
  private Integer bytes;

  public static final String JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS = "average_bytes_by_listeners";
  private BigDecimal averageBytesByListeners;

  public StatConsumption() {
  }

  public StatConsumption date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date of the consumption stat
   * @return date
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(String date) {
    this.date = date;
  }


  public StatConsumption bytes(Integer bytes) {
    
    this.bytes = bytes;
    return this;
  }

   /**
   * The number of bytes consumed
   * @return bytes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBytes() {
    return bytes;
  }


  @JsonProperty(JSON_PROPERTY_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBytes(Integer bytes) {
    this.bytes = bytes;
  }


  public StatConsumption averageBytesByListeners(BigDecimal averageBytesByListeners) {
    
    this.averageBytesByListeners = averageBytesByListeners;
    return this;
  }

   /**
   * The average of bytes consumed by listener
   * @return averageBytesByListeners
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageBytesByListeners() {
    return averageBytesByListeners;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageBytesByListeners(BigDecimal averageBytesByListeners) {
    this.averageBytesByListeners = averageBytesByListeners;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatConsumption statConsumption = (StatConsumption) o;
    return Objects.equals(this.date, statConsumption.date) &&
        Objects.equals(this.bytes, statConsumption.bytes) &&
        Objects.equals(this.averageBytesByListeners, statConsumption.averageBytesByListeners);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, bytes, averageBytesByListeners);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatConsumption {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    bytes: ").append(toIndentedString(bytes)).append("\n");
    sb.append("    averageBytesByListeners: ").append(toIndentedString(averageBytesByListeners)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

