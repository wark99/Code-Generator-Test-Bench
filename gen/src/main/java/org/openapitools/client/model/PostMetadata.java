/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Emoji;
import org.openapitools.client.model.FileInfo;
import org.openapitools.client.model.PostMetadataEmbedsInner;
import org.openapitools.client.model.Reaction;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Additional information used to display a post.
 */
@JsonPropertyOrder({
  PostMetadata.JSON_PROPERTY_EMBEDS,
  PostMetadata.JSON_PROPERTY_EMOJIS,
  PostMetadata.JSON_PROPERTY_FILES,
  PostMetadata.JSON_PROPERTY_IMAGES,
  PostMetadata.JSON_PROPERTY_REACTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PostMetadata {
  public static final String JSON_PROPERTY_EMBEDS = "embeds";
  private List<PostMetadataEmbedsInner> embeds;

  public static final String JSON_PROPERTY_EMOJIS = "emojis";
  private List<Emoji> emojis;

  public static final String JSON_PROPERTY_FILES = "files";
  private List<FileInfo> files;

  public static final String JSON_PROPERTY_IMAGES = "images";
  private Object images;

  public static final String JSON_PROPERTY_REACTIONS = "reactions";
  private List<Reaction> reactions;

  public PostMetadata() {
  }

  public PostMetadata embeds(List<PostMetadataEmbedsInner> embeds) {
    
    this.embeds = embeds;
    return this;
  }

  public PostMetadata addEmbedsItem(PostMetadataEmbedsInner embedsItem) {
    if (this.embeds == null) {
      this.embeds = new ArrayList<>();
    }
    this.embeds.add(embedsItem);
    return this;
  }

   /**
   * Information about content embedded in the post including OpenGraph previews, image link previews, and message attachments. This field will be null if the post does not contain embedded content. 
   * @return embeds
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMBEDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<PostMetadataEmbedsInner> getEmbeds() {
    return embeds;
  }


  @JsonProperty(JSON_PROPERTY_EMBEDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmbeds(List<PostMetadataEmbedsInner> embeds) {
    this.embeds = embeds;
  }


  public PostMetadata emojis(List<Emoji> emojis) {
    
    this.emojis = emojis;
    return this;
  }

  public PostMetadata addEmojisItem(Emoji emojisItem) {
    if (this.emojis == null) {
      this.emojis = new ArrayList<>();
    }
    this.emojis.add(emojisItem);
    return this;
  }

   /**
   * The custom emojis that appear in this point or have been used in reactions to this post. This field will be null if the post does not contain custom emojis. 
   * @return emojis
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMOJIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Emoji> getEmojis() {
    return emojis;
  }


  @JsonProperty(JSON_PROPERTY_EMOJIS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmojis(List<Emoji> emojis) {
    this.emojis = emojis;
  }


  public PostMetadata files(List<FileInfo> files) {
    
    this.files = files;
    return this;
  }

  public PostMetadata addFilesItem(FileInfo filesItem) {
    if (this.files == null) {
      this.files = new ArrayList<>();
    }
    this.files.add(filesItem);
    return this;
  }

   /**
   * The FileInfo objects for any files attached to the post. This field will be null if the post does not have any file attachments. 
   * @return files
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FileInfo> getFiles() {
    return files;
  }


  @JsonProperty(JSON_PROPERTY_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFiles(List<FileInfo> files) {
    this.files = files;
  }


  public PostMetadata images(Object images) {
    
    this.images = images;
    return this;
  }

   /**
   * An object mapping the URL of an external image to an object containing the dimensions of that image. This field will be null if the post or its embedded content does not reference any external images. 
   * @return images
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getImages() {
    return images;
  }


  @JsonProperty(JSON_PROPERTY_IMAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImages(Object images) {
    this.images = images;
  }


  public PostMetadata reactions(List<Reaction> reactions) {
    
    this.reactions = reactions;
    return this;
  }

  public PostMetadata addReactionsItem(Reaction reactionsItem) {
    if (this.reactions == null) {
      this.reactions = new ArrayList<>();
    }
    this.reactions.add(reactionsItem);
    return this;
  }

   /**
   * Any reactions made to this point. This field will be null if no reactions have been made to this post. 
   * @return reactions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Reaction> getReactions() {
    return reactions;
  }


  @JsonProperty(JSON_PROPERTY_REACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReactions(List<Reaction> reactions) {
    this.reactions = reactions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostMetadata postMetadata = (PostMetadata) o;
    return Objects.equals(this.embeds, postMetadata.embeds) &&
        Objects.equals(this.emojis, postMetadata.emojis) &&
        Objects.equals(this.files, postMetadata.files) &&
        Objects.equals(this.images, postMetadata.images) &&
        Objects.equals(this.reactions, postMetadata.reactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(embeds, emojis, files, images, reactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostMetadata {\n");
    sb.append("    embeds: ").append(toIndentedString(embeds)).append("\n");
    sb.append("    emojis: ").append(toIndentedString(emojis)).append("\n");
    sb.append("    files: ").append(toIndentedString(files)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    reactions: ").append(toIndentedString(reactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

