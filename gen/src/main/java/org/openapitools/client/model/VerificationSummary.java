/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.KeyMessages;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * VerificationSummary
 */
@JsonPropertyOrder({
  VerificationSummary.JSON_PROPERTY_BEST_MATCH,
  VerificationSummary.JSON_PROPERTY_KEY_MESSAGES,
  VerificationSummary.JSON_PROPERTY_LOWER_THRESHOLD,
  VerificationSummary.JSON_PROPERTY_RISK_INDICATOR,
  VerificationSummary.JSON_PROPERTY_UPPER_THRESHOLD,
  VerificationSummary.JSON_PROPERTY_VERIFICATION_POINT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class VerificationSummary {
  public static final String JSON_PROPERTY_BEST_MATCH = "bestMatch";
  private String bestMatch;

  public static final String JSON_PROPERTY_KEY_MESSAGES = "keyMessages";
  private KeyMessages keyMessages;

  public static final String JSON_PROPERTY_LOWER_THRESHOLD = "lowerThreshold";
  private Integer lowerThreshold;

  public static final String JSON_PROPERTY_RISK_INDICATOR = "riskIndicator";
  private String riskIndicator;

  public static final String JSON_PROPERTY_UPPER_THRESHOLD = "upperThreshold";
  private Integer upperThreshold;

  public static final String JSON_PROPERTY_VERIFICATION_POINT = "verificationPoint";
  private Integer verificationPoint;

  public VerificationSummary() {
  }

  public VerificationSummary bestMatch(String bestMatch) {
    
    this.bestMatch = bestMatch;
    return this;
  }

   /**
   * Get bestMatch
   * @return bestMatch
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEST_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBestMatch() {
    return bestMatch;
  }


  @JsonProperty(JSON_PROPERTY_BEST_MATCH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBestMatch(String bestMatch) {
    this.bestMatch = bestMatch;
  }


  public VerificationSummary keyMessages(KeyMessages keyMessages) {
    
    this.keyMessages = keyMessages;
    return this;
  }

   /**
   * Get keyMessages
   * @return keyMessages
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_KEY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public KeyMessages getKeyMessages() {
    return keyMessages;
  }


  @JsonProperty(JSON_PROPERTY_KEY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setKeyMessages(KeyMessages keyMessages) {
    this.keyMessages = keyMessages;
  }


  public VerificationSummary lowerThreshold(Integer lowerThreshold) {
    
    this.lowerThreshold = lowerThreshold;
    return this;
  }

   /**
   * Get lowerThreshold
   * @return lowerThreshold
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOWER_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getLowerThreshold() {
    return lowerThreshold;
  }


  @JsonProperty(JSON_PROPERTY_LOWER_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLowerThreshold(Integer lowerThreshold) {
    this.lowerThreshold = lowerThreshold;
  }


  public VerificationSummary riskIndicator(String riskIndicator) {
    
    this.riskIndicator = riskIndicator;
    return this;
  }

   /**
   * Get riskIndicator
   * @return riskIndicator
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RISK_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRiskIndicator() {
    return riskIndicator;
  }


  @JsonProperty(JSON_PROPERTY_RISK_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskIndicator(String riskIndicator) {
    this.riskIndicator = riskIndicator;
  }


  public VerificationSummary upperThreshold(Integer upperThreshold) {
    
    this.upperThreshold = upperThreshold;
    return this;
  }

   /**
   * Get upperThreshold
   * @return upperThreshold
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPPER_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUpperThreshold() {
    return upperThreshold;
  }


  @JsonProperty(JSON_PROPERTY_UPPER_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpperThreshold(Integer upperThreshold) {
    this.upperThreshold = upperThreshold;
  }


  public VerificationSummary verificationPoint(Integer verificationPoint) {
    
    this.verificationPoint = verificationPoint;
    return this;
  }

   /**
   * Get verificationPoint
   * @return verificationPoint
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERIFICATION_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getVerificationPoint() {
    return verificationPoint;
  }


  @JsonProperty(JSON_PROPERTY_VERIFICATION_POINT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerificationPoint(Integer verificationPoint) {
    this.verificationPoint = verificationPoint;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerificationSummary verificationSummary = (VerificationSummary) o;
    return Objects.equals(this.bestMatch, verificationSummary.bestMatch) &&
        Objects.equals(this.keyMessages, verificationSummary.keyMessages) &&
        Objects.equals(this.lowerThreshold, verificationSummary.lowerThreshold) &&
        Objects.equals(this.riskIndicator, verificationSummary.riskIndicator) &&
        Objects.equals(this.upperThreshold, verificationSummary.upperThreshold) &&
        Objects.equals(this.verificationPoint, verificationSummary.verificationPoint);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bestMatch, keyMessages, lowerThreshold, riskIndicator, upperThreshold, verificationPoint);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerificationSummary {\n");
    sb.append("    bestMatch: ").append(toIndentedString(bestMatch)).append("\n");
    sb.append("    keyMessages: ").append(toIndentedString(keyMessages)).append("\n");
    sb.append("    lowerThreshold: ").append(toIndentedString(lowerThreshold)).append("\n");
    sb.append("    riskIndicator: ").append(toIndentedString(riskIndicator)).append("\n");
    sb.append("    upperThreshold: ").append(toIndentedString(upperThreshold)).append("\n");
    sb.append("    verificationPoint: ").append(toIndentedString(verificationPoint)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

