/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Deductions;
import org.openapitools.client.model.Earnings;
import org.openapitools.client.model.MainPayStatementFields;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DirectPayStatements
 */
@JsonPropertyOrder({
  DirectPayStatements.JSON_PROPERTY_PAYROLL_PAY_HISTORY_ID,
  DirectPayStatements.JSON_PROPERTY_LAST_PAY_PERIOD_INDICATOR,
  DirectPayStatements.JSON_PROPERTY_MAIN_PAY_STATEMENT_FIELDS,
  DirectPayStatements.JSON_PROPERTY_EARNINGS,
  DirectPayStatements.JSON_PROPERTY_DEDUCTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T14:05:40.878624261Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class DirectPayStatements {
  public static final String JSON_PROPERTY_PAYROLL_PAY_HISTORY_ID = "payrollPayHistoryId";
  private String payrollPayHistoryId;

  public static final String JSON_PROPERTY_LAST_PAY_PERIOD_INDICATOR = "lastPayPeriodIndicator";
  private Boolean lastPayPeriodIndicator;

  public static final String JSON_PROPERTY_MAIN_PAY_STATEMENT_FIELDS = "mainPayStatementFields";
  private MainPayStatementFields mainPayStatementFields;

  public static final String JSON_PROPERTY_EARNINGS = "earnings";
  private List<Earnings> earnings = new ArrayList<>();

  public static final String JSON_PROPERTY_DEDUCTIONS = "deductions";
  private List<Deductions> deductions;

  public DirectPayStatements() {
  }

  public DirectPayStatements payrollPayHistoryId(String payrollPayHistoryId) {
    
    this.payrollPayHistoryId = payrollPayHistoryId;
    return this;
  }

   /**
   * An ID for the income and employment details for the given pay period
   * @return payrollPayHistoryId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYROLL_PAY_HISTORY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPayrollPayHistoryId() {
    return payrollPayHistoryId;
  }


  @JsonProperty(JSON_PROPERTY_PAYROLL_PAY_HISTORY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayrollPayHistoryId(String payrollPayHistoryId) {
    this.payrollPayHistoryId = payrollPayHistoryId;
  }


  public DirectPayStatements lastPayPeriodIndicator(Boolean lastPayPeriodIndicator) {
    
    this.lastPayPeriodIndicator = lastPayPeriodIndicator;
    return this;
  }

   /**
   * Most recent available pay check
   * @return lastPayPeriodIndicator
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAST_PAY_PERIOD_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLastPayPeriodIndicator() {
    return lastPayPeriodIndicator;
  }


  @JsonProperty(JSON_PROPERTY_LAST_PAY_PERIOD_INDICATOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastPayPeriodIndicator(Boolean lastPayPeriodIndicator) {
    this.lastPayPeriodIndicator = lastPayPeriodIndicator;
  }


  public DirectPayStatements mainPayStatementFields(MainPayStatementFields mainPayStatementFields) {
    
    this.mainPayStatementFields = mainPayStatementFields;
    return this;
  }

   /**
   * Get mainPayStatementFields
   * @return mainPayStatementFields
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAIN_PAY_STATEMENT_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MainPayStatementFields getMainPayStatementFields() {
    return mainPayStatementFields;
  }


  @JsonProperty(JSON_PROPERTY_MAIN_PAY_STATEMENT_FIELDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMainPayStatementFields(MainPayStatementFields mainPayStatementFields) {
    this.mainPayStatementFields = mainPayStatementFields;
  }


  public DirectPayStatements earnings(List<Earnings> earnings) {
    
    this.earnings = earnings;
    return this;
  }

  public DirectPayStatements addEarningsItem(Earnings earningsItem) {
    if (this.earnings == null) {
      this.earnings = new ArrayList<>();
    }
    this.earnings.add(earningsItem);
    return this;
  }

   /**
   * Categorization of pay, for the pay period
   * @return earnings
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EARNINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Earnings> getEarnings() {
    return earnings;
  }


  @JsonProperty(JSON_PROPERTY_EARNINGS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEarnings(List<Earnings> earnings) {
    this.earnings = earnings;
  }


  public DirectPayStatements deductions(List<Deductions> deductions) {
    
    this.deductions = deductions;
    return this;
  }

  public DirectPayStatements addDeductionsItem(Deductions deductionsItem) {
    if (this.deductions == null) {
      this.deductions = new ArrayList<>();
    }
    this.deductions.add(deductionsItem);
    return this;
  }

   /**
   * Deductions from the pay check
   * @return deductions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEDUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Deductions> getDeductions() {
    return deductions;
  }


  @JsonProperty(JSON_PROPERTY_DEDUCTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeductions(List<Deductions> deductions) {
    this.deductions = deductions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectPayStatements directPayStatements = (DirectPayStatements) o;
    return Objects.equals(this.payrollPayHistoryId, directPayStatements.payrollPayHistoryId) &&
        Objects.equals(this.lastPayPeriodIndicator, directPayStatements.lastPayPeriodIndicator) &&
        Objects.equals(this.mainPayStatementFields, directPayStatements.mainPayStatementFields) &&
        Objects.equals(this.earnings, directPayStatements.earnings) &&
        Objects.equals(this.deductions, directPayStatements.deductions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrollPayHistoryId, lastPayPeriodIndicator, mainPayStatementFields, earnings, deductions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectPayStatements {\n");
    sb.append("    payrollPayHistoryId: ").append(toIndentedString(payrollPayHistoryId)).append("\n");
    sb.append("    lastPayPeriodIndicator: ").append(toIndentedString(lastPayPeriodIndicator)).append("\n");
    sb.append("    mainPayStatementFields: ").append(toIndentedString(mainPayStatementFields)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    deductions: ").append(toIndentedString(deductions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

