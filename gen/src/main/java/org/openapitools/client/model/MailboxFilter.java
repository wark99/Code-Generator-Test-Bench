/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MailboxFilterFiltersInner;
import org.openapitools.client.model.MailboxFilterScriptsInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MailboxFilter
 */
@JsonPropertyOrder({
  MailboxFilter.JSON_PROPERTY_PREVENT_SCRIPT,
  MailboxFilter.JSON_PROPERTY_USE_SCRIPTS,
  MailboxFilter.JSON_PROPERTY_SCRIPTS,
  MailboxFilter.JSON_PROPERTY_FILTERS,
  MailboxFilter.JSON_PROPERTY_SCRIPT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class MailboxFilter {
  public static final String JSON_PROPERTY_PREVENT_SCRIPT = "prevent_script";
  private Boolean preventScript;

  public static final String JSON_PROPERTY_USE_SCRIPTS = "use_scripts";
  private Boolean useScripts;

  public static final String JSON_PROPERTY_SCRIPTS = "scripts";
  private List<MailboxFilterScriptsInner> scripts;

  public static final String JSON_PROPERTY_FILTERS = "filters";
  private List<MailboxFilterFiltersInner> filters;

  public static final String JSON_PROPERTY_SCRIPT = "script";
  private String script;

  public MailboxFilter() {
  }

  public MailboxFilter preventScript(Boolean preventScript) {
    
    this.preventScript = preventScript;
    return this;
  }

   /**
   * True if this mailbox can&#39;t use custom scripts  
   * @return preventScript
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PREVENT_SCRIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPreventScript() {
    return preventScript;
  }


  @JsonProperty(JSON_PROPERTY_PREVENT_SCRIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPreventScript(Boolean preventScript) {
    this.preventScript = preventScript;
  }


  public MailboxFilter useScripts(Boolean useScripts) {
    
    this.useScripts = useScripts;
    return this;
  }

   /**
   * True if a custom script is enabled  
   * @return useScripts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE_SCRIPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUseScripts() {
    return useScripts;
  }


  @JsonProperty(JSON_PROPERTY_USE_SCRIPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseScripts(Boolean useScripts) {
    this.useScripts = useScripts;
  }


  public MailboxFilter scripts(List<MailboxFilterScriptsInner> scripts) {
    
    this.scripts = scripts;
    return this;
  }

  public MailboxFilter addScriptsItem(MailboxFilterScriptsInner scriptsItem) {
    if (this.scripts == null) {
      this.scripts = new ArrayList<>();
    }
    this.scripts.add(scriptsItem);
    return this;
  }

   /**
   * Get scripts
   * @return scripts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCRIPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MailboxFilterScriptsInner> getScripts() {
    return scripts;
  }


  @JsonProperty(JSON_PROPERTY_SCRIPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScripts(List<MailboxFilterScriptsInner> scripts) {
    this.scripts = scripts;
  }


  public MailboxFilter filters(List<MailboxFilterFiltersInner> filters) {
    
    this.filters = filters;
    return this;
  }

  public MailboxFilter addFiltersItem(MailboxFilterFiltersInner filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * Get filters
   * @return filters
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<MailboxFilterFiltersInner> getFilters() {
    return filters;
  }


  @JsonProperty(JSON_PROPERTY_FILTERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilters(List<MailboxFilterFiltersInner> filters) {
    this.filters = filters;
  }


  public MailboxFilter script(String script) {
    
    this.script = script;
    return this;
  }

   /**
   * Actually used script content (custom script or generated script from filters)  
   * @return script
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SCRIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getScript() {
    return script;
  }


  @JsonProperty(JSON_PROPERTY_SCRIPT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScript(String script) {
    this.script = script;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailboxFilter mailboxFilter = (MailboxFilter) o;
    return Objects.equals(this.preventScript, mailboxFilter.preventScript) &&
        Objects.equals(this.useScripts, mailboxFilter.useScripts) &&
        Objects.equals(this.scripts, mailboxFilter.scripts) &&
        Objects.equals(this.filters, mailboxFilter.filters) &&
        Objects.equals(this.script, mailboxFilter.script);
  }

  @Override
  public int hashCode() {
    return Objects.hash(preventScript, useScripts, scripts, filters, script);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailboxFilter {\n");
    sb.append("    preventScript: ").append(toIndentedString(preventScript)).append("\n");
    sb.append("    useScripts: ").append(toIndentedString(useScripts)).append("\n");
    sb.append("    scripts: ").append(toIndentedString(scripts)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    script: ").append(toIndentedString(script)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

