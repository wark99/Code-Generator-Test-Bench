/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Channel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Player
 */
@JsonPropertyOrder({
  Player.JSON_PROPERTY_PLAYER_ID,
  Player.JSON_PROPERTY_NAME,
  Player.JSON_PROPERTY_TITLE,
  Player.JSON_PROPERTY_DESCRIPTION,
  Player.JSON_PROPERTY_BUFFER,
  Player.JSON_PROPERTY_AUTO_START,
  Player.JSON_PROPERTY_ALLOW_FULL_SCREEN,
  Player.JSON_PROPERTY_IS360,
  Player.JSON_PROPERTY_SHOW_CONTROLS,
  Player.JSON_PROPERTY_AUTO_HIDE_CONTROLS,
  Player.JSON_PROPERTY_TIME_BEFORE_HIDE_CB,
  Player.JSON_PROPERTY_SHOW_VIEWERS,
  Player.JSON_PROPERTY_SHOW_VIEWERS_AFTER,
  Player.JSON_PROPERTY_RATIO,
  Player.JSON_PROPERTY_WIDTH,
  Player.JSON_PROPERTY_HEIGHT,
  Player.JSON_PROPERTY_SHOW_LOGO,
  Player.JSON_PROPERTY_LOGO_IMG,
  Player.JSON_PROPERTY_LOGO_ANCHOR,
  Player.JSON_PROPERTY_LOGO_PERCENTAGE,
  Player.JSON_PROPERTY_LOGO_MARGIN_TOP,
  Player.JSON_PROPERTY_LOGO_MARGIN_LEFT,
  Player.JSON_PROPERTY_CONTROL_COLOR,
  Player.JSON_PROPERTY_CONTROLBAR_COLOR,
  Player.JSON_PROPERTY_CONTROL_ACTIVE_COLOR,
  Player.JSON_PROPERTY_EXTRACT_PRELOAD_IMG,
  Player.JSON_PROPERTY_USE_PRELOAD_IMG,
  Player.JSON_PROPERTY_PRELOAD_IMG,
  Player.JSON_PROPERTY_USE_GEO_IP_IMG,
  Player.JSON_PROPERTY_GEO_IP_IMG,
  Player.JSON_PROPERTY_USE_INTERRUPT_IMG,
  Player.JSON_PROPERTY_INTERRUPT_IMG,
  Player.JSON_PROPERTY_USE_RESTRICT_IMG,
  Player.JSON_PROPERTY_RESTRICT_IMG,
  Player.JSON_PROPERTY_COUNTDOWN,
  Player.JSON_PROPERTY_COUNTDOWN_TXT,
  Player.JSON_PROPERTY_COUNTDOWN_DAYS,
  Player.JSON_PROPERTY_COUNTDOWN_HOURS,
  Player.JSON_PROPERTY_COUNTDOWN_MINUTES,
  Player.JSON_PROPERTY_COUNTDOWN_SECONDS,
  Player.JSON_PROPERTY_ENABLE_EMBED_CODE,
  Player.JSON_PROPERTY_ENABLE_FACEBOOK,
  Player.JSON_PROPERTY_FACEBOOK_BACK_LINK,
  Player.JSON_PROPERTY_FACEBOOK_PLAYER_EMBED,
  Player.JSON_PROPERTY_ENABLE_TWITTER,
  Player.JSON_PROPERTY_TWITTER_VIA,
  Player.JSON_PROPERTY_TWITTER_BACK_LINK,
  Player.JSON_PROPERTY_TWITTER_RELATED,
  Player.JSON_PROPERTY_CREATED_AT,
  Player.JSON_PROPERTY_UPDATED_AT,
  Player.JSON_PROPERTY_ADS_ENABLED,
  Player.JSON_PROPERTY_SOUND_ENABLED,
  Player.JSON_PROPERTY_SOUND_PERCENTAGE,
  Player.JSON_PROPERTY_SHOW_VIEWERS_ONLY_AFTER,
  Player.JSON_PROPERTY_CHROMECAST,
  Player.JSON_PROPERTY_STEREO_PROJECTION360,
  Player.JSON_PROPERTY_ADS_URL,
  Player.JSON_PROPERTY_CHANNEL,
  Player.JSON_PROPERTY_INTEGRATIONS,
  Player.JSON_PROPERTY_COUNTDOWN_STOPS_AT,
  Player.JSON_PROPERTY_THUMBNAIL_URL,
  Player.JSON_PROPERTY_RESTRICTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Player {
  public static final String JSON_PROPERTY_PLAYER_ID = "player_id";
  private Integer playerId;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_BUFFER = "buffer";
  private String buffer;

  public static final String JSON_PROPERTY_AUTO_START = "auto_start";
  private Boolean autoStart;

  public static final String JSON_PROPERTY_ALLOW_FULL_SCREEN = "allow_full_screen";
  private Boolean allowFullScreen;

  public static final String JSON_PROPERTY_IS360 = "is360";
  private Boolean is360;

  public static final String JSON_PROPERTY_SHOW_CONTROLS = "show_controls";
  private Boolean showControls;

  public static final String JSON_PROPERTY_AUTO_HIDE_CONTROLS = "auto_hide_controls";
  private Boolean autoHideControls;

  public static final String JSON_PROPERTY_TIME_BEFORE_HIDE_CB = "time_before_hide_cb";
  private Integer timeBeforeHideCb;

  public static final String JSON_PROPERTY_SHOW_VIEWERS = "show_viewers";
  private Boolean showViewers;

  public static final String JSON_PROPERTY_SHOW_VIEWERS_AFTER = "show_viewers_after";
  private Integer showViewersAfter;

  public static final String JSON_PROPERTY_RATIO = "ratio";
  private String ratio;

  public static final String JSON_PROPERTY_WIDTH = "width";
  private Integer width;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private Integer height;

  public static final String JSON_PROPERTY_SHOW_LOGO = "show_logo";
  private Boolean showLogo;

  public static final String JSON_PROPERTY_LOGO_IMG = "logo_img";
  private String logoImg;

  /**
   * is the position of logo
   */
  public enum LogoAnchorEnum {
    BOTTOM_LEFT("bottom left"),
    
    BOTTOM_RIGHT("bottom right"),
    
    TOP_LEFT("top left"),
    
    TOP_RIGHT("top right");

    private String value;

    LogoAnchorEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LogoAnchorEnum fromValue(String value) {
      for (LogoAnchorEnum b : LogoAnchorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LOGO_ANCHOR = "logo_anchor";
  private LogoAnchorEnum logoAnchor;

  public static final String JSON_PROPERTY_LOGO_PERCENTAGE = "logo_percentage";
  private Integer logoPercentage;

  public static final String JSON_PROPERTY_LOGO_MARGIN_TOP = "logo_margin_top";
  private Integer logoMarginTop;

  public static final String JSON_PROPERTY_LOGO_MARGIN_LEFT = "logo_margin_left";
  private Integer logoMarginLeft;

  public static final String JSON_PROPERTY_CONTROL_COLOR = "control_color";
  private String controlColor;

  public static final String JSON_PROPERTY_CONTROLBAR_COLOR = "controlbar_color";
  private String controlbarColor;

  public static final String JSON_PROPERTY_CONTROL_ACTIVE_COLOR = "control_active_color";
  private String controlActiveColor;

  public static final String JSON_PROPERTY_EXTRACT_PRELOAD_IMG = "extract_preload_img";
  private Boolean extractPreloadImg;

  public static final String JSON_PROPERTY_USE_PRELOAD_IMG = "use_preload_img";
  private Boolean usePreloadImg;

  public static final String JSON_PROPERTY_PRELOAD_IMG = "preload_img";
  private String preloadImg;

  public static final String JSON_PROPERTY_USE_GEO_IP_IMG = "use_geo_ip_img";
  private Boolean useGeoIpImg;

  public static final String JSON_PROPERTY_GEO_IP_IMG = "geo_ip_img";
  private String geoIpImg;

  public static final String JSON_PROPERTY_USE_INTERRUPT_IMG = "use_interrupt_img";
  private Boolean useInterruptImg;

  public static final String JSON_PROPERTY_INTERRUPT_IMG = "interrupt_img";
  private String interruptImg;

  public static final String JSON_PROPERTY_USE_RESTRICT_IMG = "use_restrict_img";
  private Boolean useRestrictImg;

  public static final String JSON_PROPERTY_RESTRICT_IMG = "restrict_img";
  private String restrictImg;

  public static final String JSON_PROPERTY_COUNTDOWN = "countdown";
  private Boolean countdown;

  public static final String JSON_PROPERTY_COUNTDOWN_TXT = "countdown_txt";
  private String countdownTxt;

  public static final String JSON_PROPERTY_COUNTDOWN_DAYS = "countdown_days";
  private String countdownDays;

  public static final String JSON_PROPERTY_COUNTDOWN_HOURS = "countdown_hours";
  private String countdownHours;

  public static final String JSON_PROPERTY_COUNTDOWN_MINUTES = "countdown_minutes";
  private String countdownMinutes;

  public static final String JSON_PROPERTY_COUNTDOWN_SECONDS = "countdown_seconds";
  private String countdownSeconds;

  public static final String JSON_PROPERTY_ENABLE_EMBED_CODE = "enable_embed_code";
  private Boolean enableEmbedCode;

  public static final String JSON_PROPERTY_ENABLE_FACEBOOK = "enable_facebook";
  private Boolean enableFacebook;

  public static final String JSON_PROPERTY_FACEBOOK_BACK_LINK = "facebook_back_link";
  private String facebookBackLink;

  public static final String JSON_PROPERTY_FACEBOOK_PLAYER_EMBED = "facebook_player_embed";
  private Boolean facebookPlayerEmbed;

  public static final String JSON_PROPERTY_ENABLE_TWITTER = "enable_twitter";
  private Boolean enableTwitter;

  public static final String JSON_PROPERTY_TWITTER_VIA = "twitter_via";
  private String twitterVia;

  public static final String JSON_PROPERTY_TWITTER_BACK_LINK = "twitter_back_link";
  private String twitterBackLink;

  public static final String JSON_PROPERTY_TWITTER_RELATED = "twitter_related";
  private String twitterRelated;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private Integer updatedAt;

  public static final String JSON_PROPERTY_ADS_ENABLED = "ads_enabled";
  private Boolean adsEnabled;

  public static final String JSON_PROPERTY_SOUND_ENABLED = "sound_enabled";
  private Boolean soundEnabled;

  public static final String JSON_PROPERTY_SOUND_PERCENTAGE = "sound_percentage";
  private Integer soundPercentage;

  public static final String JSON_PROPERTY_SHOW_VIEWERS_ONLY_AFTER = "show_viewers_only_after";
  private Boolean showViewersOnlyAfter;

  public static final String JSON_PROPERTY_CHROMECAST = "chromecast";
  private Boolean chromecast;

  public static final String JSON_PROPERTY_STEREO_PROJECTION360 = "stereo_projection360";
  private String stereoProjection360;

  public static final String JSON_PROPERTY_ADS_URL = "ads_url";
  private String adsUrl;

  public static final String JSON_PROPERTY_CHANNEL = "channel";
  private Channel channel;

  public static final String JSON_PROPERTY_INTEGRATIONS = "integrations";
  private String integrations;

  public static final String JSON_PROPERTY_COUNTDOWN_STOPS_AT = "countdown_stops_at";
  private String countdownStopsAt;

  public static final String JSON_PROPERTY_THUMBNAIL_URL = "thumbnail_url";
  private String thumbnailUrl;

  public static final String JSON_PROPERTY_RESTRICTIONS = "restrictions";
  private String restrictions;

  public Player() {
  }

  public Player playerId(Integer playerId) {
    
    this.playerId = playerId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;player&#x60; that is related to the resource &#x60;Player&#x60;
   * @return playerId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLAYER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPlayerId() {
    return playerId;
  }


  @JsonProperty(JSON_PROPERTY_PLAYER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlayerId(Integer playerId) {
    this.playerId = playerId;
  }


  public Player name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the ressource &#x60;Player&#x60; visible by final customer
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Player title(String title) {
    
    this.title = title;
    return this;
  }

   /**
   * Name of the video stream
   * @return title
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(String title) {
    this.title = title;
  }


  public Player description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description of the stream
   * @return description
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Player buffer(String buffer) {
    
    this.buffer = buffer;
    return this;
  }

   /**
   * Buffer memory enables the reduction of video interruptions if yours viewers connections become unstable by preloading
   * @return buffer
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BUFFER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBuffer() {
    return buffer;
  }


  @JsonProperty(JSON_PROPERTY_BUFFER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBuffer(String buffer) {
    this.buffer = buffer;
  }


  public Player autoStart(Boolean autoStart) {
    
    this.autoStart = autoStart;
    return this;
  }

   /**
   * Start the video automatically (does not function on Android and iOS)
   * @return autoStart
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAutoStart() {
    return autoStart;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoStart(Boolean autoStart) {
    this.autoStart = autoStart;
  }


  public Player allowFullScreen(Boolean allowFullScreen) {
    
    this.allowFullScreen = allowFullScreen;
    return this;
  }

   /**
   * Authorise full-screen mode
   * @return allowFullScreen
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ALLOW_FULL_SCREEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAllowFullScreen() {
    return allowFullScreen;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_FULL_SCREEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAllowFullScreen(Boolean allowFullScreen) {
    this.allowFullScreen = allowFullScreen;
  }


  public Player is360(Boolean is360) {
    
    this.is360 = is360;
    return this;
  }

   /**
   * This option is required to display your 360 video streaming
   * @return is360
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS360)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIs360() {
    return is360;
  }


  @JsonProperty(JSON_PROPERTY_IS360)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIs360(Boolean is360) {
    this.is360 = is360;
  }


  public Player showControls(Boolean showControls) {
    
    this.showControls = showControls;
    return this;
  }

   /**
   * Display the playback bar
   * @return showControls
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOW_CONTROLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShowControls() {
    return showControls;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_CONTROLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShowControls(Boolean showControls) {
    this.showControls = showControls;
  }


  public Player autoHideControls(Boolean autoHideControls) {
    
    this.autoHideControls = autoHideControls;
    return this;
  }

   /**
   * Hide the playback bar after a few seconds
   * @return autoHideControls
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTO_HIDE_CONTROLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAutoHideControls() {
    return autoHideControls;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_HIDE_CONTROLS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAutoHideControls(Boolean autoHideControls) {
    this.autoHideControls = autoHideControls;
  }


  public Player timeBeforeHideCb(Integer timeBeforeHideCb) {
    
    this.timeBeforeHideCb = timeBeforeHideCb;
    return this;
  }

   /**
   * Get timeBeforeHideCb
   * @return timeBeforeHideCb
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIME_BEFORE_HIDE_CB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTimeBeforeHideCb() {
    return timeBeforeHideCb;
  }


  @JsonProperty(JSON_PROPERTY_TIME_BEFORE_HIDE_CB)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimeBeforeHideCb(Integer timeBeforeHideCb) {
    this.timeBeforeHideCb = timeBeforeHideCb;
  }


  public Player showViewers(Boolean showViewers) {
    
    this.showViewers = showViewers;
    return this;
  }

   /**
   * Display the number of viewers
   * @return showViewers
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOW_VIEWERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShowViewers() {
    return showViewers;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_VIEWERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShowViewers(Boolean showViewers) {
    this.showViewers = showViewers;
  }


  public Player showViewersAfter(Integer showViewersAfter) {
    
    this.showViewersAfter = showViewersAfter;
    return this;
  }

   /**
   * Display from the following number after {number} viewers
   * @return showViewersAfter
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOW_VIEWERS_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getShowViewersAfter() {
    return showViewersAfter;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_VIEWERS_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShowViewersAfter(Integer showViewersAfter) {
    this.showViewersAfter = showViewersAfter;
  }


  public Player ratio(String ratio) {
    
    this.ratio = ratio;
    return this;
  }

   /**
   * Ratio of the player
   * @return ratio
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RATIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRatio() {
    return ratio;
  }


  @JsonProperty(JSON_PROPERTY_RATIO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRatio(String ratio) {
    this.ratio = ratio;
  }


  public Player width(Integer width) {
    
    this.width = width;
    return this;
  }

   /**
   * The width used for render the &#x60;Player&#x60; (px)
   * @return width
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWidth(Integer width) {
    this.width = width;
  }


  public Player height(Integer height) {
    
    this.height = height;
    return this;
  }

   /**
   * The height used for render the &#x60;Player&#x60; (px)
   * @return height
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHeight(Integer height) {
    this.height = height;
  }


  public Player showLogo(Boolean showLogo) {
    
    this.showLogo = showLogo;
    return this;
  }

   /**
   * Is the logo Infomaniak enabled?
   * @return showLogo
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOW_LOGO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShowLogo() {
    return showLogo;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_LOGO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShowLogo(Boolean showLogo) {
    this.showLogo = showLogo;
  }


  public Player logoImg(String logoImg) {
    
    this.logoImg = logoImg;
    return this;
  }

   /**
   * The logo url of the &#x60;Player&#x60;
   * @return logoImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOGO_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLogoImg() {
    return logoImg;
  }


  @JsonProperty(JSON_PROPERTY_LOGO_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLogoImg(String logoImg) {
    this.logoImg = logoImg;
  }


  public Player logoAnchor(LogoAnchorEnum logoAnchor) {
    
    this.logoAnchor = logoAnchor;
    return this;
  }

   /**
   * is the position of logo
   * @return logoAnchor
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOGO_ANCHOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LogoAnchorEnum getLogoAnchor() {
    return logoAnchor;
  }


  @JsonProperty(JSON_PROPERTY_LOGO_ANCHOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLogoAnchor(LogoAnchorEnum logoAnchor) {
    this.logoAnchor = logoAnchor;
  }


  public Player logoPercentage(Integer logoPercentage) {
    
    this.logoPercentage = logoPercentage;
    return this;
  }

   /**
   * The logo size in &#x60;Player&#x60;
   * @return logoPercentage
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOGO_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLogoPercentage() {
    return logoPercentage;
  }


  @JsonProperty(JSON_PROPERTY_LOGO_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLogoPercentage(Integer logoPercentage) {
    this.logoPercentage = logoPercentage;
  }


  public Player logoMarginTop(Integer logoMarginTop) {
    
    this.logoMarginTop = logoMarginTop;
    return this;
  }

   /**
   * The margin top log in &#x60;Player&#x60;
   * @return logoMarginTop
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOGO_MARGIN_TOP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLogoMarginTop() {
    return logoMarginTop;
  }


  @JsonProperty(JSON_PROPERTY_LOGO_MARGIN_TOP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLogoMarginTop(Integer logoMarginTop) {
    this.logoMarginTop = logoMarginTop;
  }


  public Player logoMarginLeft(Integer logoMarginLeft) {
    
    this.logoMarginLeft = logoMarginLeft;
    return this;
  }

   /**
   * The margin left log in &#x60;Player&#x60;
   * @return logoMarginLeft
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOGO_MARGIN_LEFT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLogoMarginLeft() {
    return logoMarginLeft;
  }


  @JsonProperty(JSON_PROPERTY_LOGO_MARGIN_LEFT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLogoMarginLeft(Integer logoMarginLeft) {
    this.logoMarginLeft = logoMarginLeft;
  }


  public Player controlColor(String controlColor) {
    
    this.controlColor = controlColor;
    return this;
  }

   /**
   * The background color used in the &#x60;Player&#x60;
   * @return controlColor
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTROL_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getControlColor() {
    return controlColor;
  }


  @JsonProperty(JSON_PROPERTY_CONTROL_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setControlColor(String controlColor) {
    this.controlColor = controlColor;
  }


  public Player controlbarColor(String controlbarColor) {
    
    this.controlbarColor = controlbarColor;
    return this;
  }

   /**
   * The button color used in the &#x60;Player&#x60;
   * @return controlbarColor
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTROLBAR_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getControlbarColor() {
    return controlbarColor;
  }


  @JsonProperty(JSON_PROPERTY_CONTROLBAR_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setControlbarColor(String controlbarColor) {
    this.controlbarColor = controlbarColor;
  }


  public Player controlActiveColor(String controlActiveColor) {
    
    this.controlActiveColor = controlActiveColor;
    return this;
  }

   /**
   * The secondary color color used in the &#x60;Player&#x60;
   * @return controlActiveColor
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONTROL_ACTIVE_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getControlActiveColor() {
    return controlActiveColor;
  }


  @JsonProperty(JSON_PROPERTY_CONTROL_ACTIVE_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setControlActiveColor(String controlActiveColor) {
    this.controlActiveColor = controlActiveColor;
  }


  public Player extractPreloadImg(Boolean extractPreloadImg) {
    
    this.extractPreloadImg = extractPreloadImg;
    return this;
  }

   /**
   * Get extractPreloadImg
   * @return extractPreloadImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTRACT_PRELOAD_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getExtractPreloadImg() {
    return extractPreloadImg;
  }


  @JsonProperty(JSON_PROPERTY_EXTRACT_PRELOAD_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExtractPreloadImg(Boolean extractPreloadImg) {
    this.extractPreloadImg = extractPreloadImg;
  }


  public Player usePreloadImg(Boolean usePreloadImg) {
    
    this.usePreloadImg = usePreloadImg;
    return this;
  }

   /**
   * This image is displayed before the video is played.
   * @return usePreloadImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USE_PRELOAD_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUsePreloadImg() {
    return usePreloadImg;
  }


  @JsonProperty(JSON_PROPERTY_USE_PRELOAD_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsePreloadImg(Boolean usePreloadImg) {
    this.usePreloadImg = usePreloadImg;
  }


  public Player preloadImg(String preloadImg) {
    
    this.preloadImg = preloadImg;
    return this;
  }

   /**
   * Get preloadImg
   * @return preloadImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRELOAD_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPreloadImg() {
    return preloadImg;
  }


  @JsonProperty(JSON_PROPERTY_PRELOAD_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPreloadImg(String preloadImg) {
    this.preloadImg = preloadImg;
  }


  public Player useGeoIpImg(Boolean useGeoIpImg) {
    
    this.useGeoIpImg = useGeoIpImg;
    return this;
  }

   /**
   * Get useGeoIpImg
   * @return useGeoIpImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USE_GEO_IP_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUseGeoIpImg() {
    return useGeoIpImg;
  }


  @JsonProperty(JSON_PROPERTY_USE_GEO_IP_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUseGeoIpImg(Boolean useGeoIpImg) {
    this.useGeoIpImg = useGeoIpImg;
  }


  public Player geoIpImg(String geoIpImg) {
    
    this.geoIpImg = geoIpImg;
    return this;
  }

   /**
   * Get geoIpImg
   * @return geoIpImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GEO_IP_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getGeoIpImg() {
    return geoIpImg;
  }


  @JsonProperty(JSON_PROPERTY_GEO_IP_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGeoIpImg(String geoIpImg) {
    this.geoIpImg = geoIpImg;
  }


  public Player useInterruptImg(Boolean useInterruptImg) {
    
    this.useInterruptImg = useInterruptImg;
    return this;
  }

   /**
   * Get useInterruptImg
   * @return useInterruptImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USE_INTERRUPT_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUseInterruptImg() {
    return useInterruptImg;
  }


  @JsonProperty(JSON_PROPERTY_USE_INTERRUPT_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUseInterruptImg(Boolean useInterruptImg) {
    this.useInterruptImg = useInterruptImg;
  }


  public Player interruptImg(String interruptImg) {
    
    this.interruptImg = interruptImg;
    return this;
  }

   /**
   * This image is displayed if the viewer is not authorised to view the broadcast (IP, domain, unique hash code, etc.)
   * @return interruptImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INTERRUPT_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getInterruptImg() {
    return interruptImg;
  }


  @JsonProperty(JSON_PROPERTY_INTERRUPT_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterruptImg(String interruptImg) {
    this.interruptImg = interruptImg;
  }


  public Player useRestrictImg(Boolean useRestrictImg) {
    
    this.useRestrictImg = useRestrictImg;
    return this;
  }

   /**
   * This image is displayed if the viewer is located in an unauthorised geographic
   * @return useRestrictImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USE_RESTRICT_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getUseRestrictImg() {
    return useRestrictImg;
  }


  @JsonProperty(JSON_PROPERTY_USE_RESTRICT_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUseRestrictImg(Boolean useRestrictImg) {
    this.useRestrictImg = useRestrictImg;
  }


  public Player restrictImg(String restrictImg) {
    
    this.restrictImg = restrictImg;
    return this;
  }

   /**
   * This image is displayed if the viewer is not authorised to view the broadcast (IP, domain, unique hash code, etc.)
   * @return restrictImg
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESTRICT_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRestrictImg() {
    return restrictImg;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICT_IMG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRestrictImg(String restrictImg) {
    this.restrictImg = restrictImg;
  }


  public Player countdown(Boolean countdown) {
    
    this.countdown = countdown;
    return this;
  }

   /**
   * Is the countdown enabled?
   * @return countdown
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTDOWN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getCountdown() {
    return countdown;
  }


  @JsonProperty(JSON_PROPERTY_COUNTDOWN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountdown(Boolean countdown) {
    this.countdown = countdown;
  }


  public Player countdownTxt(String countdownTxt) {
    
    this.countdownTxt = countdownTxt;
    return this;
  }

   /**
   * Description of the countdown of the &#x60;Player&#x60; visible by final customer
   * @return countdownTxt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTDOWN_TXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCountdownTxt() {
    return countdownTxt;
  }


  @JsonProperty(JSON_PROPERTY_COUNTDOWN_TXT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountdownTxt(String countdownTxt) {
    this.countdownTxt = countdownTxt;
  }


  public Player countdownDays(String countdownDays) {
    
    this.countdownDays = countdownDays;
    return this;
  }

   /**
   * countdown days
   * @return countdownDays
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTDOWN_DAYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCountdownDays() {
    return countdownDays;
  }


  @JsonProperty(JSON_PROPERTY_COUNTDOWN_DAYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountdownDays(String countdownDays) {
    this.countdownDays = countdownDays;
  }


  public Player countdownHours(String countdownHours) {
    
    this.countdownHours = countdownHours;
    return this;
  }

   /**
   * hours days
   * @return countdownHours
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTDOWN_HOURS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCountdownHours() {
    return countdownHours;
  }


  @JsonProperty(JSON_PROPERTY_COUNTDOWN_HOURS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountdownHours(String countdownHours) {
    this.countdownHours = countdownHours;
  }


  public Player countdownMinutes(String countdownMinutes) {
    
    this.countdownMinutes = countdownMinutes;
    return this;
  }

   /**
   * countdown minutes
   * @return countdownMinutes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTDOWN_MINUTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCountdownMinutes() {
    return countdownMinutes;
  }


  @JsonProperty(JSON_PROPERTY_COUNTDOWN_MINUTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountdownMinutes(String countdownMinutes) {
    this.countdownMinutes = countdownMinutes;
  }


  public Player countdownSeconds(String countdownSeconds) {
    
    this.countdownSeconds = countdownSeconds;
    return this;
  }

   /**
   * countdown seconde
   * @return countdownSeconds
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNTDOWN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCountdownSeconds() {
    return countdownSeconds;
  }


  @JsonProperty(JSON_PROPERTY_COUNTDOWN_SECONDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountdownSeconds(String countdownSeconds) {
    this.countdownSeconds = countdownSeconds;
  }


  public Player enableEmbedCode(Boolean enableEmbedCode) {
    
    this.enableEmbedCode = enableEmbedCode;
    return this;
  }

   /**
   * Authorise other users to intergrate your live event on their sites
   * @return enableEmbedCode
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENABLE_EMBED_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnableEmbedCode() {
    return enableEmbedCode;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_EMBED_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnableEmbedCode(Boolean enableEmbedCode) {
    this.enableEmbedCode = enableEmbedCode;
  }


  public Player enableFacebook(Boolean enableFacebook) {
    
    this.enableFacebook = enableFacebook;
    return this;
  }

   /**
   * Is the facebook embed link visible?
   * @return enableFacebook
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENABLE_FACEBOOK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnableFacebook() {
    return enableFacebook;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_FACEBOOK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnableFacebook(Boolean enableFacebook) {
    this.enableFacebook = enableFacebook;
  }


  public Player facebookBackLink(String facebookBackLink) {
    
    this.facebookBackLink = facebookBackLink;
    return this;
  }

   /**
   * The Twitter backlink used to facebook embed
   * @return facebookBackLink
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FACEBOOK_BACK_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFacebookBackLink() {
    return facebookBackLink;
  }


  @JsonProperty(JSON_PROPERTY_FACEBOOK_BACK_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFacebookBackLink(String facebookBackLink) {
    this.facebookBackLink = facebookBackLink;
  }


  public Player facebookPlayerEmbed(Boolean facebookPlayerEmbed) {
    
    this.facebookPlayerEmbed = facebookPlayerEmbed;
    return this;
  }

   /**
   * Get facebookPlayerEmbed
   * @return facebookPlayerEmbed
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FACEBOOK_PLAYER_EMBED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getFacebookPlayerEmbed() {
    return facebookPlayerEmbed;
  }


  @JsonProperty(JSON_PROPERTY_FACEBOOK_PLAYER_EMBED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFacebookPlayerEmbed(Boolean facebookPlayerEmbed) {
    this.facebookPlayerEmbed = facebookPlayerEmbed;
  }


  public Player enableTwitter(Boolean enableTwitter) {
    
    this.enableTwitter = enableTwitter;
    return this;
  }

   /**
   * Is the Twitter embed link visible?
   * @return enableTwitter
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENABLE_TWITTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getEnableTwitter() {
    return enableTwitter;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_TWITTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEnableTwitter(Boolean enableTwitter) {
    this.enableTwitter = enableTwitter;
  }


  public Player twitterVia(String twitterVia) {
    
    this.twitterVia = twitterVia;
    return this;
  }

   /**
   * Get twitterVia
   * @return twitterVia
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TWITTER_VIA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTwitterVia() {
    return twitterVia;
  }


  @JsonProperty(JSON_PROPERTY_TWITTER_VIA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTwitterVia(String twitterVia) {
    this.twitterVia = twitterVia;
  }


  public Player twitterBackLink(String twitterBackLink) {
    
    this.twitterBackLink = twitterBackLink;
    return this;
  }

   /**
   * The Twitter backlink used to twitter embed
   * @return twitterBackLink
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TWITTER_BACK_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTwitterBackLink() {
    return twitterBackLink;
  }


  @JsonProperty(JSON_PROPERTY_TWITTER_BACK_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTwitterBackLink(String twitterBackLink) {
    this.twitterBackLink = twitterBackLink;
  }


  public Player twitterRelated(String twitterRelated) {
    
    this.twitterRelated = twitterRelated;
    return this;
  }

   /**
   * The Twitter hashtag used to Twitter embed
   * @return twitterRelated
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TWITTER_RELATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTwitterRelated() {
    return twitterRelated;
  }


  @JsonProperty(JSON_PROPERTY_TWITTER_RELATED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTwitterRelated(String twitterRelated) {
    this.twitterRelated = twitterRelated;
  }


  public Player createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp &#x60;Player&#x60; has been created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public Player updatedAt(Integer updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Timestamp &#x60;Player&#x60; has been updated
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(Integer updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Player adsEnabled(Boolean adsEnabled) {
    
    this.adsEnabled = adsEnabled;
    return this;
  }

   /**
   * Is the ads enabled?
   * @return adsEnabled
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAdsEnabled() {
    return adsEnabled;
  }


  @JsonProperty(JSON_PROPERTY_ADS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAdsEnabled(Boolean adsEnabled) {
    this.adsEnabled = adsEnabled;
  }


  public Player soundEnabled(Boolean soundEnabled) {
    
    this.soundEnabled = soundEnabled;
    return this;
  }

   /**
   * Is the sound enabled?
   * @return soundEnabled
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOUND_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getSoundEnabled() {
    return soundEnabled;
  }


  @JsonProperty(JSON_PROPERTY_SOUND_ENABLED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSoundEnabled(Boolean soundEnabled) {
    this.soundEnabled = soundEnabled;
  }


  public Player soundPercentage(Integer soundPercentage) {
    
    this.soundPercentage = soundPercentage;
    return this;
  }

   /**
   * The volume used in the &#x60;Player&#x60;
   * @return soundPercentage
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SOUND_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSoundPercentage() {
    return soundPercentage;
  }


  @JsonProperty(JSON_PROPERTY_SOUND_PERCENTAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSoundPercentage(Integer soundPercentage) {
    this.soundPercentage = soundPercentage;
  }


  public Player showViewersOnlyAfter(Boolean showViewersOnlyAfter) {
    
    this.showViewersOnlyAfter = showViewersOnlyAfter;
    return this;
  }

   /**
   * Get showViewersOnlyAfter
   * @return showViewersOnlyAfter
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHOW_VIEWERS_ONLY_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getShowViewersOnlyAfter() {
    return showViewersOnlyAfter;
  }


  @JsonProperty(JSON_PROPERTY_SHOW_VIEWERS_ONLY_AFTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShowViewersOnlyAfter(Boolean showViewersOnlyAfter) {
    this.showViewersOnlyAfter = showViewersOnlyAfter;
  }


  public Player chromecast(Boolean chromecast) {
    
    this.chromecast = chromecast;
    return this;
  }

   /**
   * you need to use a player that supports https in order for chromecast to work correctly
   * @return chromecast
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CHROMECAST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getChromecast() {
    return chromecast;
  }


  @JsonProperty(JSON_PROPERTY_CHROMECAST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChromecast(Boolean chromecast) {
    this.chromecast = chromecast;
  }


  public Player stereoProjection360(String stereoProjection360) {
    
    this.stereoProjection360 = stereoProjection360;
    return this;
  }

   /**
   * Get stereoProjection360
   * @return stereoProjection360
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STEREO_PROJECTION360)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStereoProjection360() {
    return stereoProjection360;
  }


  @JsonProperty(JSON_PROPERTY_STEREO_PROJECTION360)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStereoProjection360(String stereoProjection360) {
    this.stereoProjection360 = stereoProjection360;
  }


  public Player adsUrl(String adsUrl) {
    
    this.adsUrl = adsUrl;
    return this;
  }

   /**
   * The ads url
   * @return adsUrl
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADS_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAdsUrl() {
    return adsUrl;
  }


  @JsonProperty(JSON_PROPERTY_ADS_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAdsUrl(String adsUrl) {
    this.adsUrl = adsUrl;
  }


  public Player channel(Channel channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Channel getChannel() {
    return channel;
  }


  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannel(Channel channel) {
    this.channel = channel;
  }


  public Player integrations(String integrations) {
    
    this.integrations = integrations;
    return this;
  }

   /**
   * List all the raw integrations supported for the given channel.
   * @return integrations
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTEGRATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIntegrations() {
    return integrations;
  }


  @JsonProperty(JSON_PROPERTY_INTEGRATIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntegrations(String integrations) {
    this.integrations = integrations;
  }


  public Player countdownStopsAt(String countdownStopsAt) {
    
    this.countdownStopsAt = countdownStopsAt;
    return this;
  }

   /**
   * Get countdownStopsAt
   * @return countdownStopsAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTDOWN_STOPS_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountdownStopsAt() {
    return countdownStopsAt;
  }


  @JsonProperty(JSON_PROPERTY_COUNTDOWN_STOPS_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountdownStopsAt(String countdownStopsAt) {
    this.countdownStopsAt = countdownStopsAt;
  }


  public Player thumbnailUrl(String thumbnailUrl) {
    
    this.thumbnailUrl = thumbnailUrl;
    return this;
  }

   /**
   * Get thumbnailUrl
   * @return thumbnailUrl
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THUMBNAIL_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getThumbnailUrl() {
    return thumbnailUrl;
  }


  @JsonProperty(JSON_PROPERTY_THUMBNAIL_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThumbnailUrl(String thumbnailUrl) {
    this.thumbnailUrl = thumbnailUrl;
  }


  public Player restrictions(String restrictions) {
    
    this.restrictions = restrictions;
    return this;
  }

   /**
   * Get restrictions
   * @return restrictions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRestrictions() {
    return restrictions;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRestrictions(String restrictions) {
    this.restrictions = restrictions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.playerId, player.playerId) &&
        Objects.equals(this.name, player.name) &&
        Objects.equals(this.title, player.title) &&
        Objects.equals(this.description, player.description) &&
        Objects.equals(this.buffer, player.buffer) &&
        Objects.equals(this.autoStart, player.autoStart) &&
        Objects.equals(this.allowFullScreen, player.allowFullScreen) &&
        Objects.equals(this.is360, player.is360) &&
        Objects.equals(this.showControls, player.showControls) &&
        Objects.equals(this.autoHideControls, player.autoHideControls) &&
        Objects.equals(this.timeBeforeHideCb, player.timeBeforeHideCb) &&
        Objects.equals(this.showViewers, player.showViewers) &&
        Objects.equals(this.showViewersAfter, player.showViewersAfter) &&
        Objects.equals(this.ratio, player.ratio) &&
        Objects.equals(this.width, player.width) &&
        Objects.equals(this.height, player.height) &&
        Objects.equals(this.showLogo, player.showLogo) &&
        Objects.equals(this.logoImg, player.logoImg) &&
        Objects.equals(this.logoAnchor, player.logoAnchor) &&
        Objects.equals(this.logoPercentage, player.logoPercentage) &&
        Objects.equals(this.logoMarginTop, player.logoMarginTop) &&
        Objects.equals(this.logoMarginLeft, player.logoMarginLeft) &&
        Objects.equals(this.controlColor, player.controlColor) &&
        Objects.equals(this.controlbarColor, player.controlbarColor) &&
        Objects.equals(this.controlActiveColor, player.controlActiveColor) &&
        Objects.equals(this.extractPreloadImg, player.extractPreloadImg) &&
        Objects.equals(this.usePreloadImg, player.usePreloadImg) &&
        Objects.equals(this.preloadImg, player.preloadImg) &&
        Objects.equals(this.useGeoIpImg, player.useGeoIpImg) &&
        Objects.equals(this.geoIpImg, player.geoIpImg) &&
        Objects.equals(this.useInterruptImg, player.useInterruptImg) &&
        Objects.equals(this.interruptImg, player.interruptImg) &&
        Objects.equals(this.useRestrictImg, player.useRestrictImg) &&
        Objects.equals(this.restrictImg, player.restrictImg) &&
        Objects.equals(this.countdown, player.countdown) &&
        Objects.equals(this.countdownTxt, player.countdownTxt) &&
        Objects.equals(this.countdownDays, player.countdownDays) &&
        Objects.equals(this.countdownHours, player.countdownHours) &&
        Objects.equals(this.countdownMinutes, player.countdownMinutes) &&
        Objects.equals(this.countdownSeconds, player.countdownSeconds) &&
        Objects.equals(this.enableEmbedCode, player.enableEmbedCode) &&
        Objects.equals(this.enableFacebook, player.enableFacebook) &&
        Objects.equals(this.facebookBackLink, player.facebookBackLink) &&
        Objects.equals(this.facebookPlayerEmbed, player.facebookPlayerEmbed) &&
        Objects.equals(this.enableTwitter, player.enableTwitter) &&
        Objects.equals(this.twitterVia, player.twitterVia) &&
        Objects.equals(this.twitterBackLink, player.twitterBackLink) &&
        Objects.equals(this.twitterRelated, player.twitterRelated) &&
        Objects.equals(this.createdAt, player.createdAt) &&
        Objects.equals(this.updatedAt, player.updatedAt) &&
        Objects.equals(this.adsEnabled, player.adsEnabled) &&
        Objects.equals(this.soundEnabled, player.soundEnabled) &&
        Objects.equals(this.soundPercentage, player.soundPercentage) &&
        Objects.equals(this.showViewersOnlyAfter, player.showViewersOnlyAfter) &&
        Objects.equals(this.chromecast, player.chromecast) &&
        Objects.equals(this.stereoProjection360, player.stereoProjection360) &&
        Objects.equals(this.adsUrl, player.adsUrl) &&
        Objects.equals(this.channel, player.channel) &&
        Objects.equals(this.integrations, player.integrations) &&
        Objects.equals(this.countdownStopsAt, player.countdownStopsAt) &&
        Objects.equals(this.thumbnailUrl, player.thumbnailUrl) &&
        Objects.equals(this.restrictions, player.restrictions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(playerId, name, title, description, buffer, autoStart, allowFullScreen, is360, showControls, autoHideControls, timeBeforeHideCb, showViewers, showViewersAfter, ratio, width, height, showLogo, logoImg, logoAnchor, logoPercentage, logoMarginTop, logoMarginLeft, controlColor, controlbarColor, controlActiveColor, extractPreloadImg, usePreloadImg, preloadImg, useGeoIpImg, geoIpImg, useInterruptImg, interruptImg, useRestrictImg, restrictImg, countdown, countdownTxt, countdownDays, countdownHours, countdownMinutes, countdownSeconds, enableEmbedCode, enableFacebook, facebookBackLink, facebookPlayerEmbed, enableTwitter, twitterVia, twitterBackLink, twitterRelated, createdAt, updatedAt, adsEnabled, soundEnabled, soundPercentage, showViewersOnlyAfter, chromecast, stereoProjection360, adsUrl, channel, integrations, countdownStopsAt, thumbnailUrl, restrictions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    playerId: ").append(toIndentedString(playerId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    buffer: ").append(toIndentedString(buffer)).append("\n");
    sb.append("    autoStart: ").append(toIndentedString(autoStart)).append("\n");
    sb.append("    allowFullScreen: ").append(toIndentedString(allowFullScreen)).append("\n");
    sb.append("    is360: ").append(toIndentedString(is360)).append("\n");
    sb.append("    showControls: ").append(toIndentedString(showControls)).append("\n");
    sb.append("    autoHideControls: ").append(toIndentedString(autoHideControls)).append("\n");
    sb.append("    timeBeforeHideCb: ").append(toIndentedString(timeBeforeHideCb)).append("\n");
    sb.append("    showViewers: ").append(toIndentedString(showViewers)).append("\n");
    sb.append("    showViewersAfter: ").append(toIndentedString(showViewersAfter)).append("\n");
    sb.append("    ratio: ").append(toIndentedString(ratio)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    showLogo: ").append(toIndentedString(showLogo)).append("\n");
    sb.append("    logoImg: ").append(toIndentedString(logoImg)).append("\n");
    sb.append("    logoAnchor: ").append(toIndentedString(logoAnchor)).append("\n");
    sb.append("    logoPercentage: ").append(toIndentedString(logoPercentage)).append("\n");
    sb.append("    logoMarginTop: ").append(toIndentedString(logoMarginTop)).append("\n");
    sb.append("    logoMarginLeft: ").append(toIndentedString(logoMarginLeft)).append("\n");
    sb.append("    controlColor: ").append(toIndentedString(controlColor)).append("\n");
    sb.append("    controlbarColor: ").append(toIndentedString(controlbarColor)).append("\n");
    sb.append("    controlActiveColor: ").append(toIndentedString(controlActiveColor)).append("\n");
    sb.append("    extractPreloadImg: ").append(toIndentedString(extractPreloadImg)).append("\n");
    sb.append("    usePreloadImg: ").append(toIndentedString(usePreloadImg)).append("\n");
    sb.append("    preloadImg: ").append(toIndentedString(preloadImg)).append("\n");
    sb.append("    useGeoIpImg: ").append(toIndentedString(useGeoIpImg)).append("\n");
    sb.append("    geoIpImg: ").append(toIndentedString(geoIpImg)).append("\n");
    sb.append("    useInterruptImg: ").append(toIndentedString(useInterruptImg)).append("\n");
    sb.append("    interruptImg: ").append(toIndentedString(interruptImg)).append("\n");
    sb.append("    useRestrictImg: ").append(toIndentedString(useRestrictImg)).append("\n");
    sb.append("    restrictImg: ").append(toIndentedString(restrictImg)).append("\n");
    sb.append("    countdown: ").append(toIndentedString(countdown)).append("\n");
    sb.append("    countdownTxt: ").append(toIndentedString(countdownTxt)).append("\n");
    sb.append("    countdownDays: ").append(toIndentedString(countdownDays)).append("\n");
    sb.append("    countdownHours: ").append(toIndentedString(countdownHours)).append("\n");
    sb.append("    countdownMinutes: ").append(toIndentedString(countdownMinutes)).append("\n");
    sb.append("    countdownSeconds: ").append(toIndentedString(countdownSeconds)).append("\n");
    sb.append("    enableEmbedCode: ").append(toIndentedString(enableEmbedCode)).append("\n");
    sb.append("    enableFacebook: ").append(toIndentedString(enableFacebook)).append("\n");
    sb.append("    facebookBackLink: ").append(toIndentedString(facebookBackLink)).append("\n");
    sb.append("    facebookPlayerEmbed: ").append(toIndentedString(facebookPlayerEmbed)).append("\n");
    sb.append("    enableTwitter: ").append(toIndentedString(enableTwitter)).append("\n");
    sb.append("    twitterVia: ").append(toIndentedString(twitterVia)).append("\n");
    sb.append("    twitterBackLink: ").append(toIndentedString(twitterBackLink)).append("\n");
    sb.append("    twitterRelated: ").append(toIndentedString(twitterRelated)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    adsEnabled: ").append(toIndentedString(adsEnabled)).append("\n");
    sb.append("    soundEnabled: ").append(toIndentedString(soundEnabled)).append("\n");
    sb.append("    soundPercentage: ").append(toIndentedString(soundPercentage)).append("\n");
    sb.append("    showViewersOnlyAfter: ").append(toIndentedString(showViewersOnlyAfter)).append("\n");
    sb.append("    chromecast: ").append(toIndentedString(chromecast)).append("\n");
    sb.append("    stereoProjection360: ").append(toIndentedString(stereoProjection360)).append("\n");
    sb.append("    adsUrl: ").append(toIndentedString(adsUrl)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    integrations: ").append(toIndentedString(integrations)).append("\n");
    sb.append("    countdownStopsAt: ").append(toIndentedString(countdownStopsAt)).append("\n");
    sb.append("    thumbnailUrl: ").append(toIndentedString(thumbnailUrl)).append("\n");
    sb.append("    restrictions: ").append(toIndentedString(restrictions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

