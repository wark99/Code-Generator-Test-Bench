/*
 * LiveFree Health Measurements API
 * The Health Measurements API enables partners to access data from the LiveFree Health Portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@lifebeacon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.client.model.Measurement;
import org.openapitools.client.model.MeasurementEventDevice;
import org.openapitools.client.model.MeasurementEventRaw;
import org.openapitools.client.model.MeasurementEventType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MeasurementEvent
 */
@JsonPropertyOrder({
  MeasurementEvent.JSON_PROPERTY_ID,
  MeasurementEvent.JSON_PROPERTY_TIMESTAMP,
  MeasurementEvent.JSON_PROPERTY_LAST_MODIFIED,
  MeasurementEvent.JSON_PROPERTY_TYPE,
  MeasurementEvent.JSON_PROPERTY_DEVICE,
  MeasurementEvent.JSON_PROPERTY_RAW,
  MeasurementEvent.JSON_PROPERTY_MEASUREMENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:30.476705269Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class MeasurementEvent {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private OffsetDateTime timestamp;

  public static final String JSON_PROPERTY_LAST_MODIFIED = "lastModified";
  private OffsetDateTime lastModified;

  public static final String JSON_PROPERTY_TYPE = "type";
  private MeasurementEventType type;

  public static final String JSON_PROPERTY_DEVICE = "device";
  private MeasurementEventDevice device;

  public static final String JSON_PROPERTY_RAW = "raw";
  private MeasurementEventRaw raw;

  public static final String JSON_PROPERTY_MEASUREMENTS = "measurements";
  private List<Measurement> measurements = new ArrayList<>();

  public MeasurementEvent() {
  }

  public MeasurementEvent id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for the event.
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public MeasurementEvent timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The time when the event occurred.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public MeasurementEvent lastModified(OffsetDateTime lastModified) {
    
    this.lastModified = lastModified;
    return this;
  }

   /**
   * The time when the event was last modified. In some cases an event may be modified to correct invalid information.
   * @return lastModified
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getLastModified() {
    return lastModified;
  }


  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastModified(OffsetDateTime lastModified) {
    this.lastModified = lastModified;
  }


  public MeasurementEvent type(MeasurementEventType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MeasurementEventType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(MeasurementEventType type) {
    this.type = type;
  }


  public MeasurementEvent device(MeasurementEventDevice device) {
    
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MeasurementEventDevice getDevice() {
    return device;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDevice(MeasurementEventDevice device) {
    this.device = device;
  }


  public MeasurementEvent raw(MeasurementEventRaw raw) {
    
    this.raw = raw;
    return this;
  }

   /**
   * Get raw
   * @return raw
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RAW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MeasurementEventRaw getRaw() {
    return raw;
  }


  @JsonProperty(JSON_PROPERTY_RAW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRaw(MeasurementEventRaw raw) {
    this.raw = raw;
  }


  public MeasurementEvent measurements(List<Measurement> measurements) {
    
    this.measurements = measurements;
    return this;
  }

  public MeasurementEvent addMeasurementsItem(Measurement measurementsItem) {
    if (this.measurements == null) {
      this.measurements = new ArrayList<>();
    }
    this.measurements.add(measurementsItem);
    return this;
  }

   /**
   * Get measurements
   * @return measurements
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Measurement> getMeasurements() {
    return measurements;
  }


  @JsonProperty(JSON_PROPERTY_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMeasurements(List<Measurement> measurements) {
    this.measurements = measurements;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeasurementEvent measurementEvent = (MeasurementEvent) o;
    return Objects.equals(this.id, measurementEvent.id) &&
        Objects.equals(this.timestamp, measurementEvent.timestamp) &&
        Objects.equals(this.lastModified, measurementEvent.lastModified) &&
        Objects.equals(this.type, measurementEvent.type) &&
        Objects.equals(this.device, measurementEvent.device) &&
        Objects.equals(this.raw, measurementEvent.raw) &&
        Objects.equals(this.measurements, measurementEvent.measurements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, timestamp, lastModified, type, device, raw, measurements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeasurementEvent {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    measurements: ").append(toIndentedString(measurements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

