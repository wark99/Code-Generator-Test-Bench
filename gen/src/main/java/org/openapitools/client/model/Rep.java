/*
 * Perch API
 * Perch API for accessing data from Perch. See our [API Guide](https://docs.google.com/document/d/1ms6LFNwFN4C4WkrfWs8Hlu5igFBpNLhNr7uLEkGmvJA) for guidance on best practices. <br/> <br/> Find out more about Perch at [https://perch.fit](https://perch.fit) or by contacting us at [support@perch.fit](mailto:support@perch.fit).
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@perch.fit
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The object representing an individual rep tracked by a Perch camera. You&#39;ll notice the lack of mean power stats, which are calculated simply by converting the corresponding mean velocity to &#x60;m/s&#x60; and multiplying by the weight in &#x60;kg&#x60;. Peak power stats are given in strange units. This is to make those fields independent from the &#x60;Set.weight&#x60;, which is an editable field required to calculate the actual power (i.e. in units of watts). Equations to convert these stats to watts are provided.
 */
@JsonPropertyOrder({
  Rep.JSON_PROPERTY_CONCENTRIC_MEAN_VELOCITY_Z,
  Rep.JSON_PROPERTY_ECCENTRIC_MEAN_VELOCITY_Z,
  Rep.JSON_PROPERTY_CONCENTRIC_PEAK_VELOCITY_Z,
  Rep.JSON_PROPERTY_CONCENTRIC_TIME_TO_PEAK_VELOCITY_Z,
  Rep.JSON_PROPERTY_CONCENTRIC_TIME_TO_PEAK_POWER_Z,
  Rep.JSON_PROPERTY_CONCENTRIC_VELOCITY_AT100_MS_Z,
  Rep.JSON_PROPERTY_ECCENTRIC_PEAK_VELOCITY_Z,
  Rep.JSON_PROPERTY_CONCENTRIC_PEAK_POWER_PER_MASS_Z
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:20:41.221792118Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Rep {
  public static final String JSON_PROPERTY_CONCENTRIC_MEAN_VELOCITY_Z = "concentric_mean_velocity_z";
  private BigDecimal concentricMeanVelocityZ;

  public static final String JSON_PROPERTY_ECCENTRIC_MEAN_VELOCITY_Z = "eccentric_mean_velocity_z";
  private BigDecimal eccentricMeanVelocityZ;

  public static final String JSON_PROPERTY_CONCENTRIC_PEAK_VELOCITY_Z = "concentric_peak_velocity_z";
  private BigDecimal concentricPeakVelocityZ;

  public static final String JSON_PROPERTY_CONCENTRIC_TIME_TO_PEAK_VELOCITY_Z = "concentric_time_to_peak_velocity_z";
  private BigDecimal concentricTimeToPeakVelocityZ;

  public static final String JSON_PROPERTY_CONCENTRIC_TIME_TO_PEAK_POWER_Z = "concentric_time_to_peak_power_z";
  private BigDecimal concentricTimeToPeakPowerZ;

  public static final String JSON_PROPERTY_CONCENTRIC_VELOCITY_AT100_MS_Z = "concentric_velocity_at_100_ms_z";
  private BigDecimal concentricVelocityAt100MsZ;

  public static final String JSON_PROPERTY_ECCENTRIC_PEAK_VELOCITY_Z = "eccentric_peak_velocity_z";
  private BigDecimal eccentricPeakVelocityZ;

  public static final String JSON_PROPERTY_CONCENTRIC_PEAK_POWER_PER_MASS_Z = "concentric_peak_power_per_mass_z";
  private BigDecimal concentricPeakPowerPerMassZ;

  public Rep() {
  }

  public Rep concentricMeanVelocityZ(BigDecimal concentricMeanVelocityZ) {
    
    this.concentricMeanVelocityZ = concentricMeanVelocityZ;
    return this;
  }

   /**
   * The average vertical component of velocity for the concentric phase of the rep.
   * @return concentricMeanVelocityZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCENTRIC_MEAN_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getConcentricMeanVelocityZ() {
    return concentricMeanVelocityZ;
  }


  @JsonProperty(JSON_PROPERTY_CONCENTRIC_MEAN_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcentricMeanVelocityZ(BigDecimal concentricMeanVelocityZ) {
    this.concentricMeanVelocityZ = concentricMeanVelocityZ;
  }


  public Rep eccentricMeanVelocityZ(BigDecimal eccentricMeanVelocityZ) {
    
    this.eccentricMeanVelocityZ = eccentricMeanVelocityZ;
    return this;
  }

   /**
   * The average vertical component of velocity for the eccentric phase of the rep.
   * @return eccentricMeanVelocityZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ECCENTRIC_MEAN_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getEccentricMeanVelocityZ() {
    return eccentricMeanVelocityZ;
  }


  @JsonProperty(JSON_PROPERTY_ECCENTRIC_MEAN_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEccentricMeanVelocityZ(BigDecimal eccentricMeanVelocityZ) {
    this.eccentricMeanVelocityZ = eccentricMeanVelocityZ;
  }


  public Rep concentricPeakVelocityZ(BigDecimal concentricPeakVelocityZ) {
    
    this.concentricPeakVelocityZ = concentricPeakVelocityZ;
    return this;
  }

   /**
   * The maximum instantaneous vertical component of velocity for the concentric phase of the rep.
   * @return concentricPeakVelocityZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCENTRIC_PEAK_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getConcentricPeakVelocityZ() {
    return concentricPeakVelocityZ;
  }


  @JsonProperty(JSON_PROPERTY_CONCENTRIC_PEAK_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcentricPeakVelocityZ(BigDecimal concentricPeakVelocityZ) {
    this.concentricPeakVelocityZ = concentricPeakVelocityZ;
  }


  public Rep concentricTimeToPeakVelocityZ(BigDecimal concentricTimeToPeakVelocityZ) {
    
    this.concentricTimeToPeakVelocityZ = concentricTimeToPeakVelocityZ;
    return this;
  }

   /**
   * The time (in seconds) the athelete took to achieve peak velocity (on the Z axis) during the concentric phase of the movement.
   * @return concentricTimeToPeakVelocityZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCENTRIC_TIME_TO_PEAK_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getConcentricTimeToPeakVelocityZ() {
    return concentricTimeToPeakVelocityZ;
  }


  @JsonProperty(JSON_PROPERTY_CONCENTRIC_TIME_TO_PEAK_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcentricTimeToPeakVelocityZ(BigDecimal concentricTimeToPeakVelocityZ) {
    this.concentricTimeToPeakVelocityZ = concentricTimeToPeakVelocityZ;
  }


  public Rep concentricTimeToPeakPowerZ(BigDecimal concentricTimeToPeakPowerZ) {
    
    this.concentricTimeToPeakPowerZ = concentricTimeToPeakPowerZ;
    return this;
  }

   /**
   * The time (in seconds) the athelete took to achieve peak power during the concentric phase of the movement.
   * @return concentricTimeToPeakPowerZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCENTRIC_TIME_TO_PEAK_POWER_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getConcentricTimeToPeakPowerZ() {
    return concentricTimeToPeakPowerZ;
  }


  @JsonProperty(JSON_PROPERTY_CONCENTRIC_TIME_TO_PEAK_POWER_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcentricTimeToPeakPowerZ(BigDecimal concentricTimeToPeakPowerZ) {
    this.concentricTimeToPeakPowerZ = concentricTimeToPeakPowerZ;
  }


  public Rep concentricVelocityAt100MsZ(BigDecimal concentricVelocityAt100MsZ) {
    
    this.concentricVelocityAt100MsZ = concentricVelocityAt100MsZ;
    return this;
  }

   /**
   * The instantaneous velocity at 100ms into the concentric phase of the movement.
   * @return concentricVelocityAt100MsZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCENTRIC_VELOCITY_AT100_MS_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getConcentricVelocityAt100MsZ() {
    return concentricVelocityAt100MsZ;
  }


  @JsonProperty(JSON_PROPERTY_CONCENTRIC_VELOCITY_AT100_MS_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcentricVelocityAt100MsZ(BigDecimal concentricVelocityAt100MsZ) {
    this.concentricVelocityAt100MsZ = concentricVelocityAt100MsZ;
  }


  public Rep eccentricPeakVelocityZ(BigDecimal eccentricPeakVelocityZ) {
    
    this.eccentricPeakVelocityZ = eccentricPeakVelocityZ;
    return this;
  }

   /**
   * The maximum instantaneous vertical component of velocity for the eccentric phase of the rep.
   * @return eccentricPeakVelocityZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ECCENTRIC_PEAK_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getEccentricPeakVelocityZ() {
    return eccentricPeakVelocityZ;
  }


  @JsonProperty(JSON_PROPERTY_ECCENTRIC_PEAK_VELOCITY_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEccentricPeakVelocityZ(BigDecimal eccentricPeakVelocityZ) {
    this.eccentricPeakVelocityZ = eccentricPeakVelocityZ;
  }


  public Rep concentricPeakPowerPerMassZ(BigDecimal concentricPeakPowerPerMassZ) {
    
    this.concentricPeakPowerPerMassZ = concentricPeakPowerPerMassZ;
    return this;
  }

   /**
   * Convert to peak power in watts: &#x60;(m/in)**2 * concentric_peak_power_per_mass_z * kg/lbs * Set.weight&#x60;
   * @return concentricPeakPowerPerMassZ
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONCENTRIC_PEAK_POWER_PER_MASS_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getConcentricPeakPowerPerMassZ() {
    return concentricPeakPowerPerMassZ;
  }


  @JsonProperty(JSON_PROPERTY_CONCENTRIC_PEAK_POWER_PER_MASS_Z)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConcentricPeakPowerPerMassZ(BigDecimal concentricPeakPowerPerMassZ) {
    this.concentricPeakPowerPerMassZ = concentricPeakPowerPerMassZ;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Rep rep = (Rep) o;
    return Objects.equals(this.concentricMeanVelocityZ, rep.concentricMeanVelocityZ) &&
        Objects.equals(this.eccentricMeanVelocityZ, rep.eccentricMeanVelocityZ) &&
        Objects.equals(this.concentricPeakVelocityZ, rep.concentricPeakVelocityZ) &&
        Objects.equals(this.concentricTimeToPeakVelocityZ, rep.concentricTimeToPeakVelocityZ) &&
        Objects.equals(this.concentricTimeToPeakPowerZ, rep.concentricTimeToPeakPowerZ) &&
        Objects.equals(this.concentricVelocityAt100MsZ, rep.concentricVelocityAt100MsZ) &&
        Objects.equals(this.eccentricPeakVelocityZ, rep.eccentricPeakVelocityZ) &&
        Objects.equals(this.concentricPeakPowerPerMassZ, rep.concentricPeakPowerPerMassZ);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concentricMeanVelocityZ, eccentricMeanVelocityZ, concentricPeakVelocityZ, concentricTimeToPeakVelocityZ, concentricTimeToPeakPowerZ, concentricVelocityAt100MsZ, eccentricPeakVelocityZ, concentricPeakPowerPerMassZ);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Rep {\n");
    sb.append("    concentricMeanVelocityZ: ").append(toIndentedString(concentricMeanVelocityZ)).append("\n");
    sb.append("    eccentricMeanVelocityZ: ").append(toIndentedString(eccentricMeanVelocityZ)).append("\n");
    sb.append("    concentricPeakVelocityZ: ").append(toIndentedString(concentricPeakVelocityZ)).append("\n");
    sb.append("    concentricTimeToPeakVelocityZ: ").append(toIndentedString(concentricTimeToPeakVelocityZ)).append("\n");
    sb.append("    concentricTimeToPeakPowerZ: ").append(toIndentedString(concentricTimeToPeakPowerZ)).append("\n");
    sb.append("    concentricVelocityAt100MsZ: ").append(toIndentedString(concentricVelocityAt100MsZ)).append("\n");
    sb.append("    eccentricPeakVelocityZ: ").append(toIndentedString(eccentricPeakVelocityZ)).append("\n");
    sb.append("    concentricPeakPowerPerMassZ: ").append(toIndentedString(concentricPeakPowerPerMassZ)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

