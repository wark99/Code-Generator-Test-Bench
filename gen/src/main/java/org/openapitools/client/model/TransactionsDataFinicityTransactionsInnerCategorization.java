/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TransactionsDataFinicityTransactionsInnerCategorization
 */
@JsonPropertyOrder({
  TransactionsDataFinicityTransactionsInnerCategorization.JSON_PROPERTY_NORMALIZED_PAYEE_NAME,
  TransactionsDataFinicityTransactionsInnerCategorization.JSON_PROPERTY_CATEGORY,
  TransactionsDataFinicityTransactionsInnerCategorization.JSON_PROPERTY_STATE,
  TransactionsDataFinicityTransactionsInnerCategorization.JSON_PROPERTY_POSTAL_CODE,
  TransactionsDataFinicityTransactionsInnerCategorization.JSON_PROPERTY_COUNTRY,
  TransactionsDataFinicityTransactionsInnerCategorization.JSON_PROPERTY_BEST_REPRESENTATION
})
@JsonTypeName("TransactionsDataFinicity_transactions_inner_categorization")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class TransactionsDataFinicityTransactionsInnerCategorization {
  public static final String JSON_PROPERTY_NORMALIZED_PAYEE_NAME = "normalizedPayeeName";
  private String normalizedPayeeName;

  public static final String JSON_PROPERTY_CATEGORY = "category";
  private String category;

  public static final String JSON_PROPERTY_STATE = "state";
  private String state;

  public static final String JSON_PROPERTY_POSTAL_CODE = "postalCode";
  private String postalCode;

  public static final String JSON_PROPERTY_COUNTRY = "country";
  private String country;

  public static final String JSON_PROPERTY_BEST_REPRESENTATION = "bestRepresentation";
  private String bestRepresentation;

  public TransactionsDataFinicityTransactionsInnerCategorization() {
  }

  public TransactionsDataFinicityTransactionsInnerCategorization normalizedPayeeName(String normalizedPayeeName) {
    
    this.normalizedPayeeName = normalizedPayeeName;
    return this;
  }

   /**
   * Get normalizedPayeeName
   * @return normalizedPayeeName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NORMALIZED_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getNormalizedPayeeName() {
    return normalizedPayeeName;
  }


  @JsonProperty(JSON_PROPERTY_NORMALIZED_PAYEE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNormalizedPayeeName(String normalizedPayeeName) {
    this.normalizedPayeeName = normalizedPayeeName;
  }


  public TransactionsDataFinicityTransactionsInnerCategorization category(String category) {
    
    this.category = category;
    return this;
  }

   /**
   * Get category
   * @return category
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCategory() {
    return category;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategory(String category) {
    this.category = category;
  }


  public TransactionsDataFinicityTransactionsInnerCategorization state(String state) {
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setState(String state) {
    this.state = state;
  }


  public TransactionsDataFinicityTransactionsInnerCategorization postalCode(String postalCode) {
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Get postalCode
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPostalCode() {
    return postalCode;
  }


  @JsonProperty(JSON_PROPERTY_POSTAL_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public TransactionsDataFinicityTransactionsInnerCategorization country(String country) {
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCountry() {
    return country;
  }


  @JsonProperty(JSON_PROPERTY_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountry(String country) {
    this.country = country;
  }


  public TransactionsDataFinicityTransactionsInnerCategorization bestRepresentation(String bestRepresentation) {
    
    this.bestRepresentation = bestRepresentation;
    return this;
  }

   /**
   * Get bestRepresentation
   * @return bestRepresentation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEST_REPRESENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBestRepresentation() {
    return bestRepresentation;
  }


  @JsonProperty(JSON_PROPERTY_BEST_REPRESENTATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBestRepresentation(String bestRepresentation) {
    this.bestRepresentation = bestRepresentation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsDataFinicityTransactionsInnerCategorization transactionsDataFinicityTransactionsInnerCategorization = (TransactionsDataFinicityTransactionsInnerCategorization) o;
    return Objects.equals(this.normalizedPayeeName, transactionsDataFinicityTransactionsInnerCategorization.normalizedPayeeName) &&
        Objects.equals(this.category, transactionsDataFinicityTransactionsInnerCategorization.category) &&
        Objects.equals(this.state, transactionsDataFinicityTransactionsInnerCategorization.state) &&
        Objects.equals(this.postalCode, transactionsDataFinicityTransactionsInnerCategorization.postalCode) &&
        Objects.equals(this.country, transactionsDataFinicityTransactionsInnerCategorization.country) &&
        Objects.equals(this.bestRepresentation, transactionsDataFinicityTransactionsInnerCategorization.bestRepresentation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(normalizedPayeeName, category, state, postalCode, country, bestRepresentation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsDataFinicityTransactionsInnerCategorization {\n");
    sb.append("    normalizedPayeeName: ").append(toIndentedString(normalizedPayeeName)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    bestRepresentation: ").append(toIndentedString(bestRepresentation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

