/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CountFile
 */
@JsonPropertyOrder({
  CountFile.JSON_PROPERTY_USER_ID,
  CountFile.JSON_PROPERTY_EXECUTED,
  CountFile.JSON_PROPERTY_ARCHIVED,
  CountFile.JSON_PROPERTY_CONFLICTED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CountFile {
  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private Integer userId;

  public static final String JSON_PROPERTY_EXECUTED = "executed";
  private Integer executed;

  public static final String JSON_PROPERTY_ARCHIVED = "archived";
  private Integer archived;

  public static final String JSON_PROPERTY_CONFLICTED = "conflicted";
  private Integer conflicted;

  public CountFile() {
  }

  public CountFile userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * User id
   * @return userId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public CountFile executed(Integer executed) {
    
    this.executed = executed;
    return this;
  }

   /**
   * Total of actions executed
   * @return executed
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXECUTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExecuted() {
    return executed;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExecuted(Integer executed) {
    this.executed = executed;
  }


  public CountFile archived(Integer archived) {
    
    this.archived = archived;
    return this;
  }

   /**
   * Total of actions archived
   * @return archived
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getArchived() {
    return archived;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArchived(Integer archived) {
    this.archived = archived;
  }


  public CountFile conflicted(Integer conflicted) {
    
    this.conflicted = conflicted;
    return this;
  }

   /**
   * Total of actions conflicted
   * @return conflicted
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONFLICTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getConflicted() {
    return conflicted;
  }


  @JsonProperty(JSON_PROPERTY_CONFLICTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConflicted(Integer conflicted) {
    this.conflicted = conflicted;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountFile countFile = (CountFile) o;
    return Objects.equals(this.userId, countFile.userId) &&
        Objects.equals(this.executed, countFile.executed) &&
        Objects.equals(this.archived, countFile.archived) &&
        Objects.equals(this.conflicted, countFile.conflicted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(userId, executed, archived, conflicted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountFile {\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    executed: ").append(toIndentedString(executed)).append("\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    conflicted: ").append(toIndentedString(conflicted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

