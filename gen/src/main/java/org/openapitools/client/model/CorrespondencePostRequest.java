/*
 * SME Professional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.15.0-oas3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CorrespondencePostRequestAction;
import org.openapitools.client.model.CorrespondencePostRequestContact;
import org.openapitools.client.model.CorrespondencePostRequestProperty;
import org.openapitools.client.model.CorrespondencePostRequestUser;
import org.openapitools.client.model.DateRequest;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CorrespondencePostRequest
 */
@JsonPropertyOrder({
  CorrespondencePostRequest.JSON_PROPERTY_TYPE,
  CorrespondencePostRequest.JSON_PROPERTY_SUB_CATEGORY,
  CorrespondencePostRequest.JSON_PROPERTY_PROPERTY,
  CorrespondencePostRequest.JSON_PROPERTY_CONTACT,
  CorrespondencePostRequest.JSON_PROPERTY_DATE,
  CorrespondencePostRequest.JSON_PROPERTY_SUBJECT,
  CorrespondencePostRequest.JSON_PROPERTY_DESCRIPTION,
  CorrespondencePostRequest.JSON_PROPERTY_USER,
  CorrespondencePostRequest.JSON_PROPERTY_ACTION
})
@JsonTypeName("_correspondence_post_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:30.009582082Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CorrespondencePostRequest {
  /**
   * Email &#x3D; Email, Phone &#x3D; Telephone, Comment &#x3D; General comment
   */
  public enum TypeEnum {
    EMAIL("Email"),
    
    PHONE("Phone"),
    
    COMMENT("Comment");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * 1 &#x3D; Arrears - contact to tenant, 2 &#x3D; Arrears - response from tenant, 3 &#x3D; Complaint - HMO, 4 &#x3D; Complaint - owner, 5 &#x3D; Complaint - tenant, 6 &#x3D; Complaint - neighbour, 7 &#x3D; Complaint - other, 8 &#x3D; HMO - licence application/renewal, 9 &#x3D; Owner - general enquiry, 10 &#x3D; Owner - change of details, 11 &#x3D; Owner - rent enquiry, 12 &#x3D; Owner - statement enquiry, 13 &#x3D; Owner - NTQ enquiry, 14 &#x3D; Owner - move out enquiry, 15 &#x3D; Owner - move in enquiry, 16 &#x3D; Neighbour/other agency enquiry, 17 &#x3D; New tenancy application - tenant enquiry, 18 &#x3D; New tenancy application - references, 19 &#x3D; Tenant  - general enquiry, 20 &#x3D; Tenant - change of details, 21 &#x3D; Tenant - rent enquiry, 22 &#x3D; Tenant - NTQ enquiry, 23 &#x3D; Tenant - move out enquiry, 24 &#x3D; Tenant - move in enquiry, 25 &#x3D; Tenant - deposit enquiry, 26 &#x3D; Tenant - guarantor enquiry, 27 &#x3D; TDS, 28 &#x3D; Utilities/Council Tax, 29 &#x3D; Owner - maintenance enquiry, 30 &#x3D; Tenant - maintenance enquiry, 31 &#x3D; Property - general, 32 &#x3D; Property - work recommendation, 33 &#x3D; Viewing - feedback, 34 &#x3D; Tenant - deposit deduction, 41 &#x3D; Generated document, 42 &#x3D; Property - maintenance general, 43 &#x3D; Property - advertising board, 45 &#x3D; Sales progression, 46 &#x3D; Owner - contract renewal, 60 &#x3D; Buyer - general enquiry, 61 &#x3D; Buyer - home report, 62 &#x3D; Buyer - note of interest, 63 &#x3D; Buyer - offer, 64 &#x3D; Buyer - sales progression, 65 &#x3D; Buyer - viewing feedback, 66 &#x3D; Seller - appraisal, 67 &#x3D; Seller - closing date, 68 &#x3D; Seller - general enquiry, 69 &#x3D; Seller - home report, 70 &#x3D; Seller - marketing approval, 71 &#x3D; Seller - offer, 72 &#x3D; Seller - viewing feedback, 73 &#x3D; Withdrawal reason, 74 &#x3D; Chain notes, 75 &#x3D; Seller - marketing update, 76 &#x3D; Seller - price change, 77 &#x3D; Seller - contract renewal, 78 &#x3D; Tenant - renewal, 79 &#x3D; Owner - offer, 80 &#x3D; Memorandum of sale, 81 &#x3D; Buyer - EPC, 82 &#x3D; Buyer - brochure / schedule sent, 83 &#x3D; Seller - brochure / schedule sent, 84 &#x3D; Buyer - Closing date
   */
  public enum SubCategoryEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_19(19),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_29(29),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_33(33),
    
    NUMBER_34(34),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_60(60),
    
    NUMBER_61(61),
    
    NUMBER_62(62),
    
    NUMBER_63(63),
    
    NUMBER_64(64),
    
    NUMBER_65(65),
    
    NUMBER_66(66),
    
    NUMBER_67(67),
    
    NUMBER_68(68),
    
    NUMBER_69(69),
    
    NUMBER_70(70),
    
    NUMBER_71(71),
    
    NUMBER_72(72),
    
    NUMBER_73(73),
    
    NUMBER_74(74),
    
    NUMBER_75(75),
    
    NUMBER_76(76),
    
    NUMBER_77(77),
    
    NUMBER_78(78),
    
    NUMBER_79(79),
    
    NUMBER_80(80),
    
    NUMBER_81(81),
    
    NUMBER_82(82),
    
    NUMBER_83(83),
    
    NUMBER_84(84);

    private Integer value;

    SubCategoryEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SubCategoryEnum fromValue(Integer value) {
      for (SubCategoryEnum b : SubCategoryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SUB_CATEGORY = "sub_category";
  private SubCategoryEnum subCategory;

  public static final String JSON_PROPERTY_PROPERTY = "property";
  private CorrespondencePostRequestProperty property;

  public static final String JSON_PROPERTY_CONTACT = "contact";
  private CorrespondencePostRequestContact contact;

  public static final String JSON_PROPERTY_DATE = "date";
  private DateRequest date;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  private String subject;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_USER = "user";
  private CorrespondencePostRequestUser user;

  public static final String JSON_PROPERTY_ACTION = "action";
  private CorrespondencePostRequestAction action;

  public CorrespondencePostRequest() {
  }

  public CorrespondencePostRequest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Email &#x3D; Email, Phone &#x3D; Telephone, Comment &#x3D; General comment
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public CorrespondencePostRequest subCategory(SubCategoryEnum subCategory) {
    
    this.subCategory = subCategory;
    return this;
  }

   /**
   * 1 &#x3D; Arrears - contact to tenant, 2 &#x3D; Arrears - response from tenant, 3 &#x3D; Complaint - HMO, 4 &#x3D; Complaint - owner, 5 &#x3D; Complaint - tenant, 6 &#x3D; Complaint - neighbour, 7 &#x3D; Complaint - other, 8 &#x3D; HMO - licence application/renewal, 9 &#x3D; Owner - general enquiry, 10 &#x3D; Owner - change of details, 11 &#x3D; Owner - rent enquiry, 12 &#x3D; Owner - statement enquiry, 13 &#x3D; Owner - NTQ enquiry, 14 &#x3D; Owner - move out enquiry, 15 &#x3D; Owner - move in enquiry, 16 &#x3D; Neighbour/other agency enquiry, 17 &#x3D; New tenancy application - tenant enquiry, 18 &#x3D; New tenancy application - references, 19 &#x3D; Tenant  - general enquiry, 20 &#x3D; Tenant - change of details, 21 &#x3D; Tenant - rent enquiry, 22 &#x3D; Tenant - NTQ enquiry, 23 &#x3D; Tenant - move out enquiry, 24 &#x3D; Tenant - move in enquiry, 25 &#x3D; Tenant - deposit enquiry, 26 &#x3D; Tenant - guarantor enquiry, 27 &#x3D; TDS, 28 &#x3D; Utilities/Council Tax, 29 &#x3D; Owner - maintenance enquiry, 30 &#x3D; Tenant - maintenance enquiry, 31 &#x3D; Property - general, 32 &#x3D; Property - work recommendation, 33 &#x3D; Viewing - feedback, 34 &#x3D; Tenant - deposit deduction, 41 &#x3D; Generated document, 42 &#x3D; Property - maintenance general, 43 &#x3D; Property - advertising board, 45 &#x3D; Sales progression, 46 &#x3D; Owner - contract renewal, 60 &#x3D; Buyer - general enquiry, 61 &#x3D; Buyer - home report, 62 &#x3D; Buyer - note of interest, 63 &#x3D; Buyer - offer, 64 &#x3D; Buyer - sales progression, 65 &#x3D; Buyer - viewing feedback, 66 &#x3D; Seller - appraisal, 67 &#x3D; Seller - closing date, 68 &#x3D; Seller - general enquiry, 69 &#x3D; Seller - home report, 70 &#x3D; Seller - marketing approval, 71 &#x3D; Seller - offer, 72 &#x3D; Seller - viewing feedback, 73 &#x3D; Withdrawal reason, 74 &#x3D; Chain notes, 75 &#x3D; Seller - marketing update, 76 &#x3D; Seller - price change, 77 &#x3D; Seller - contract renewal, 78 &#x3D; Tenant - renewal, 79 &#x3D; Owner - offer, 80 &#x3D; Memorandum of sale, 81 &#x3D; Buyer - EPC, 82 &#x3D; Buyer - brochure / schedule sent, 83 &#x3D; Seller - brochure / schedule sent, 84 &#x3D; Buyer - Closing date
   * @return subCategory
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SubCategoryEnum getSubCategory() {
    return subCategory;
  }


  @JsonProperty(JSON_PROPERTY_SUB_CATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubCategory(SubCategoryEnum subCategory) {
    this.subCategory = subCategory;
  }


  public CorrespondencePostRequest property(CorrespondencePostRequestProperty property) {
    
    this.property = property;
    return this;
  }

   /**
   * Get property
   * @return property
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CorrespondencePostRequestProperty getProperty() {
    return property;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperty(CorrespondencePostRequestProperty property) {
    this.property = property;
  }


  public CorrespondencePostRequest contact(CorrespondencePostRequestContact contact) {
    
    this.contact = contact;
    return this;
  }

   /**
   * Get contact
   * @return contact
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CorrespondencePostRequestContact getContact() {
    return contact;
  }


  @JsonProperty(JSON_PROPERTY_CONTACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContact(CorrespondencePostRequestContact contact) {
    this.contact = contact;
  }


  public CorrespondencePostRequest date(DateRequest date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateRequest getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(DateRequest date) {
    this.date = date;
  }


  public CorrespondencePostRequest subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject line of a correspondence.
   * @return subject
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CorrespondencePostRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Description/Body of a correspondence.
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public CorrespondencePostRequest user(CorrespondencePostRequestUser user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CorrespondencePostRequestUser getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(CorrespondencePostRequestUser user) {
    this.user = user;
  }


  public CorrespondencePostRequest action(CorrespondencePostRequestAction action) {
    
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CorrespondencePostRequestAction getAction() {
    return action;
  }


  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAction(CorrespondencePostRequestAction action) {
    this.action = action;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CorrespondencePostRequest correspondencePostRequest = (CorrespondencePostRequest) o;
    return Objects.equals(this.type, correspondencePostRequest.type) &&
        Objects.equals(this.subCategory, correspondencePostRequest.subCategory) &&
        Objects.equals(this.property, correspondencePostRequest.property) &&
        Objects.equals(this.contact, correspondencePostRequest.contact) &&
        Objects.equals(this.date, correspondencePostRequest.date) &&
        Objects.equals(this.subject, correspondencePostRequest.subject) &&
        Objects.equals(this.description, correspondencePostRequest.description) &&
        Objects.equals(this.user, correspondencePostRequest.user) &&
        Objects.equals(this.action, correspondencePostRequest.action);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, subCategory, property, contact, date, subject, description, user, action);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CorrespondencePostRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    subCategory: ").append(toIndentedString(subCategory)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

