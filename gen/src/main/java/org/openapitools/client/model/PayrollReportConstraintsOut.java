/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.PayrollDataOut;
import org.openapitools.client.model.ReportCustomField;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PayrollReportConstraintsOut
 */
@JsonPropertyOrder({
  PayrollReportConstraintsOut.JSON_PROPERTY_PAYROLL_DATA,
  PayrollReportConstraintsOut.JSON_PROPERTY_REPORT_CUSTOM_FIELDS,
  PayrollReportConstraintsOut.JSON_PROPERTY_PAY_STATEMENTS_FROM_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T14:15:37.937249550Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PayrollReportConstraintsOut {
  public static final String JSON_PROPERTY_PAYROLL_DATA = "payrollData";
  private PayrollDataOut payrollData;

  public static final String JSON_PROPERTY_REPORT_CUSTOM_FIELDS = "reportCustomFields";
  private List<ReportCustomField> reportCustomFields;

  public static final String JSON_PROPERTY_PAY_STATEMENTS_FROM_DATE = "payStatementsFromDate";
  private Long payStatementsFromDate;

  public PayrollReportConstraintsOut() {
  }

  public PayrollReportConstraintsOut payrollData(PayrollDataOut payrollData) {
    
    this.payrollData = payrollData;
    return this;
  }

   /**
   * Get payrollData
   * @return payrollData
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PAYROLL_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PayrollDataOut getPayrollData() {
    return payrollData;
  }


  @JsonProperty(JSON_PROPERTY_PAYROLL_DATA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPayrollData(PayrollDataOut payrollData) {
    this.payrollData = payrollData;
  }


  public PayrollReportConstraintsOut reportCustomFields(List<ReportCustomField> reportCustomFields) {
    
    this.reportCustomFields = reportCustomFields;
    return this;
  }

  public PayrollReportConstraintsOut addReportCustomFieldsItem(ReportCustomField reportCustomFieldsItem) {
    if (this.reportCustomFields == null) {
      this.reportCustomFields = new ArrayList<>();
    }
    this.reportCustomFields.add(reportCustomFieldsItem);
    return this;
  }

   /**
   * The &#x60;reportCustomFields&#x60; parameter is used when experiences are associated with a credit decisioning report.  Designate up to 5 custom fields that you&#39;d like associated with the report when it&#39;s generated. Every custom field consists of three variables: &#x60;label&#x60;, &#x60;value&#x60;, and &#x60;shown&#x60;. The &#x60;shown&#x60; variable is \&quot;true\&quot; or \&quot;false\&quot;. * \&quot;true\&quot;: (default) display the custom field in the PDF report * \&quot;false\&quot;: don&#39;t display the custom field in the PDF report  For an experience that generates multiple reports, the &#x60;reportCustomFields&#x60; parameter gets passed to all reports.  All custom fields display in the Reseller Billing API.
   * @return reportCustomFields
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPORT_CUSTOM_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ReportCustomField> getReportCustomFields() {
    return reportCustomFields;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_CUSTOM_FIELDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportCustomFields(List<ReportCustomField> reportCustomFields) {
    this.reportCustomFields = reportCustomFields;
  }


  public PayrollReportConstraintsOut payStatementsFromDate(Long payStatementsFromDate) {
    
    this.payStatementsFromDate = payStatementsFromDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return payStatementsFromDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAY_STATEMENTS_FROM_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getPayStatementsFromDate() {
    return payStatementsFromDate;
  }


  @JsonProperty(JSON_PROPERTY_PAY_STATEMENTS_FROM_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayStatementsFromDate(Long payStatementsFromDate) {
    this.payStatementsFromDate = payStatementsFromDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayrollReportConstraintsOut payrollReportConstraintsOut = (PayrollReportConstraintsOut) o;
    return Objects.equals(this.payrollData, payrollReportConstraintsOut.payrollData) &&
        Objects.equals(this.reportCustomFields, payrollReportConstraintsOut.reportCustomFields) &&
        Objects.equals(this.payStatementsFromDate, payrollReportConstraintsOut.payStatementsFromDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(payrollData, reportCustomFields, payStatementsFromDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayrollReportConstraintsOut {\n");
    sb.append("    payrollData: ").append(toIndentedString(payrollData)).append("\n");
    sb.append("    reportCustomFields: ").append(toIndentedString(reportCustomFields)).append("\n");
    sb.append("    payStatementsFromDate: ").append(toIndentedString(payStatementsFromDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

