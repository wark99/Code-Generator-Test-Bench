/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Drivepackprice
 */
@JsonPropertyOrder({
  Drivepackprice.JSON_PROPERTY_TYPE,
  Drivepackprice.JSON_PROPERTY_UNIT,
  Drivepackprice.JSON_PROPERTY_PERIOD,
  Drivepackprice.JSON_PROPERTY_CURRENCY_ID,
  Drivepackprice.JSON_PROPERTY_AMOUNT_EXCL_VAT,
  Drivepackprice.JSON_PROPERTY_AMOUNT_INCL_VAT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Drivepackprice {
  /**
   * Drive pack price type, Base: standard price, User : Additional user price, Storage_giga : Additional storage price
   */
  public enum TypeEnum {
    BASE("base"),
    
    STORAGE_GIGA("storage_giga"),
    
    USER("user");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_UNIT = "unit";
  private Integer unit;

  public static final String JSON_PROPERTY_PERIOD = "period";
  private Integer period;

  public static final String JSON_PROPERTY_CURRENCY_ID = "currency_id";
  private Integer currencyId;

  public static final String JSON_PROPERTY_AMOUNT_EXCL_VAT = "amount_excl_vat";
  private BigDecimal amountExclVat;

  public static final String JSON_PROPERTY_AMOUNT_INCL_VAT = "amount_incl_vat";
  private BigDecimal amountInclVat;

  public Drivepackprice() {
  }

  public Drivepackprice type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Drive pack price type, Base: standard price, User : Additional user price, Storage_giga : Additional storage price
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Drivepackprice unit(Integer unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Unity of additional type
   * @return unit
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnit(Integer unit) {
    this.unit = unit;
  }


  public Drivepackprice period(Integer period) {
    
    this.period = period;
    return this;
  }

   /**
   * Price by months
   * @return period
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPeriod() {
    return period;
  }


  @JsonProperty(JSON_PROPERTY_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPeriod(Integer period) {
    this.period = period;
  }


  public Drivepackprice currencyId(Integer currencyId) {
    
    this.currencyId = currencyId;
    return this;
  }

   /**
   * Currency identifier
   * @return currencyId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCurrencyId() {
    return currencyId;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrencyId(Integer currencyId) {
    this.currencyId = currencyId;
  }


  public Drivepackprice amountExclVat(BigDecimal amountExclVat) {
    
    this.amountExclVat = amountExclVat;
    return this;
  }

   /**
   * Price without the tax
   * @return amountExclVat
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT_EXCL_VAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmountExclVat() {
    return amountExclVat;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_EXCL_VAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmountExclVat(BigDecimal amountExclVat) {
    this.amountExclVat = amountExclVat;
  }


  public Drivepackprice amountInclVat(BigDecimal amountInclVat) {
    
    this.amountInclVat = amountInclVat;
    return this;
  }

   /**
   * Price with the tax
   * @return amountInclVat
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT_INCL_VAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmountInclVat() {
    return amountInclVat;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_INCL_VAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmountInclVat(BigDecimal amountInclVat) {
    this.amountInclVat = amountInclVat;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Drivepackprice drivepackprice = (Drivepackprice) o;
    return Objects.equals(this.type, drivepackprice.type) &&
        Objects.equals(this.unit, drivepackprice.unit) &&
        Objects.equals(this.period, drivepackprice.period) &&
        Objects.equals(this.currencyId, drivepackprice.currencyId) &&
        Objects.equals(this.amountExclVat, drivepackprice.amountExclVat) &&
        Objects.equals(this.amountInclVat, drivepackprice.amountInclVat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, unit, period, currencyId, amountExclVat, amountInclVat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Drivepackprice {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    currencyId: ").append(toIndentedString(currencyId)).append("\n");
    sb.append("    amountExclVat: ").append(toIndentedString(amountExclVat)).append("\n");
    sb.append("    amountInclVat: ").append(toIndentedString(amountInclVat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

