/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AnnualIncome
 */
@JsonPropertyOrder({
  AnnualIncome.JSON_PROPERTY_YEAR,
  AnnualIncome.JSON_PROPERTY_GROSS_PAY_AMOUNT_Y_T_D,
  AnnualIncome.JSON_PROPERTY_NET_PAY_AMOUNT_Y_T_D,
  AnnualIncome.JSON_PROPERTY_BASE_PAY_AMOUNT_Y_T_D,
  AnnualIncome.JSON_PROPERTY_OVERTIME_PAY_AMOUNT_Y_T_D,
  AnnualIncome.JSON_PROPERTY_OTHER_PAY_AMOUNT_Y_T_D,
  AnnualIncome.JSON_PROPERTY_COMMISSION_PAY_AMOUNT_Y_T_D
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:05:06.990716937Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AnnualIncome {
  public static final String JSON_PROPERTY_YEAR = "year";
  private String year;

  public static final String JSON_PROPERTY_GROSS_PAY_AMOUNT_Y_T_D = "grossPayAmountYTD";
  private BigDecimal grossPayAmountYTD;

  public static final String JSON_PROPERTY_NET_PAY_AMOUNT_Y_T_D = "netPayAmountYTD";
  private BigDecimal netPayAmountYTD;

  public static final String JSON_PROPERTY_BASE_PAY_AMOUNT_Y_T_D = "basePayAmountYTD";
  private BigDecimal basePayAmountYTD;

  public static final String JSON_PROPERTY_OVERTIME_PAY_AMOUNT_Y_T_D = "overtimePayAmountYTD";
  private BigDecimal overtimePayAmountYTD;

  public static final String JSON_PROPERTY_OTHER_PAY_AMOUNT_Y_T_D = "otherPayAmountYTD";
  private BigDecimal otherPayAmountYTD;

  public static final String JSON_PROPERTY_COMMISSION_PAY_AMOUNT_Y_T_D = "commissionPayAmountYTD";
  private BigDecimal commissionPayAmountYTD;

  public AnnualIncome() {
  }

  public AnnualIncome year(String year) {
    
    this.year = year;
    return this;
  }

   /**
   * The year for the amounts given in YTD totals for an employer
   * @return year
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_YEAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getYear() {
    return year;
  }


  @JsonProperty(JSON_PROPERTY_YEAR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setYear(String year) {
    this.year = year;
  }


  public AnnualIncome grossPayAmountYTD(BigDecimal grossPayAmountYTD) {
    
    this.grossPayAmountYTD = grossPayAmountYTD;
    return this;
  }

   /**
   * Year to date (YTD) gross pay amount for the indicated year
   * @return grossPayAmountYTD
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_GROSS_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getGrossPayAmountYTD() {
    return grossPayAmountYTD;
  }


  @JsonProperty(JSON_PROPERTY_GROSS_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setGrossPayAmountYTD(BigDecimal grossPayAmountYTD) {
    this.grossPayAmountYTD = grossPayAmountYTD;
  }


  public AnnualIncome netPayAmountYTD(BigDecimal netPayAmountYTD) {
    
    this.netPayAmountYTD = netPayAmountYTD;
    return this;
  }

   /**
   * Year to date (YTD) net pay amount for the indicated year
   * @return netPayAmountYTD
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNetPayAmountYTD() {
    return netPayAmountYTD;
  }


  @JsonProperty(JSON_PROPERTY_NET_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetPayAmountYTD(BigDecimal netPayAmountYTD) {
    this.netPayAmountYTD = netPayAmountYTD;
  }


  public AnnualIncome basePayAmountYTD(BigDecimal basePayAmountYTD) {
    
    this.basePayAmountYTD = basePayAmountYTD;
    return this;
  }

   /**
   * Year to date (YTD) base pay amount for the year indicated
   * @return basePayAmountYTD
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BASE_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBasePayAmountYTD() {
    return basePayAmountYTD;
  }


  @JsonProperty(JSON_PROPERTY_BASE_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBasePayAmountYTD(BigDecimal basePayAmountYTD) {
    this.basePayAmountYTD = basePayAmountYTD;
  }


  public AnnualIncome overtimePayAmountYTD(BigDecimal overtimePayAmountYTD) {
    
    this.overtimePayAmountYTD = overtimePayAmountYTD;
    return this;
  }

   /**
   * Year to date (YTD) overtime pay amount for the year indicated
   * @return overtimePayAmountYTD
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OVERTIME_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOvertimePayAmountYTD() {
    return overtimePayAmountYTD;
  }


  @JsonProperty(JSON_PROPERTY_OVERTIME_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOvertimePayAmountYTD(BigDecimal overtimePayAmountYTD) {
    this.overtimePayAmountYTD = overtimePayAmountYTD;
  }


  public AnnualIncome otherPayAmountYTD(BigDecimal otherPayAmountYTD) {
    
    this.otherPayAmountYTD = otherPayAmountYTD;
    return this;
  }

   /**
   * Year to date (YTD) other pay amount for the indicated year. Other pay is pay that is not categorized into one of the other categories.
   * @return otherPayAmountYTD
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OTHER_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOtherPayAmountYTD() {
    return otherPayAmountYTD;
  }


  @JsonProperty(JSON_PROPERTY_OTHER_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOtherPayAmountYTD(BigDecimal otherPayAmountYTD) {
    this.otherPayAmountYTD = otherPayAmountYTD;
  }


  public AnnualIncome commissionPayAmountYTD(BigDecimal commissionPayAmountYTD) {
    
    this.commissionPayAmountYTD = commissionPayAmountYTD;
    return this;
  }

   /**
   * Year to date (YTD) commission pay amount for the indicated year
   * @return commissionPayAmountYTD
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMISSION_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCommissionPayAmountYTD() {
    return commissionPayAmountYTD;
  }


  @JsonProperty(JSON_PROPERTY_COMMISSION_PAY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommissionPayAmountYTD(BigDecimal commissionPayAmountYTD) {
    this.commissionPayAmountYTD = commissionPayAmountYTD;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnnualIncome annualIncome = (AnnualIncome) o;
    return Objects.equals(this.year, annualIncome.year) &&
        Objects.equals(this.grossPayAmountYTD, annualIncome.grossPayAmountYTD) &&
        Objects.equals(this.netPayAmountYTD, annualIncome.netPayAmountYTD) &&
        Objects.equals(this.basePayAmountYTD, annualIncome.basePayAmountYTD) &&
        Objects.equals(this.overtimePayAmountYTD, annualIncome.overtimePayAmountYTD) &&
        Objects.equals(this.otherPayAmountYTD, annualIncome.otherPayAmountYTD) &&
        Objects.equals(this.commissionPayAmountYTD, annualIncome.commissionPayAmountYTD);
  }

  @Override
  public int hashCode() {
    return Objects.hash(year, grossPayAmountYTD, netPayAmountYTD, basePayAmountYTD, overtimePayAmountYTD, otherPayAmountYTD, commissionPayAmountYTD);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnnualIncome {\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("    grossPayAmountYTD: ").append(toIndentedString(grossPayAmountYTD)).append("\n");
    sb.append("    netPayAmountYTD: ").append(toIndentedString(netPayAmountYTD)).append("\n");
    sb.append("    basePayAmountYTD: ").append(toIndentedString(basePayAmountYTD)).append("\n");
    sb.append("    overtimePayAmountYTD: ").append(toIndentedString(overtimePayAmountYTD)).append("\n");
    sb.append("    otherPayAmountYTD: ").append(toIndentedString(otherPayAmountYTD)).append("\n");
    sb.append("    commissionPayAmountYTD: ").append(toIndentedString(commissionPayAmountYTD)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

