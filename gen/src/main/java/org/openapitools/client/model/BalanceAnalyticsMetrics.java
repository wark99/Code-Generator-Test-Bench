/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObbDailyBalance;
import org.openapitools.client.model.ObbDateRangeAndAmount;
import org.openapitools.client.model.ObbDateRangeAndCount;
import org.openapitools.client.model.ObbNumWeeksAverageBalanceIncreasing;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Balance analytics metrics and calculations
 */
@JsonPropertyOrder({
  BalanceAnalyticsMetrics.JSON_PROPERTY_AVAILABLE_BALANCE,
  BalanceAnalyticsMetrics.JSON_PROPERTY_AVAILABLE_BALANCE_DATE,
  BalanceAnalyticsMetrics.JSON_PROPERTY_AVERAGE_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_AVERAGE_DAILY_BALANCE_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_AVERAGE_WEEKDAY_BALANCE_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_COUNT_DAILY_NEGATIVE_BALANCES_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_CURRENT_RUNNING_BALANCE,
  BalanceAnalyticsMetrics.JSON_PROPERTY_CURRENT_RUNNING_BALANCE_DATE,
  BalanceAnalyticsMetrics.JSON_PROPERTY_DAILY_BALANCES_BY_WEEKDAY_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_DAILY_BALANCES_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_HISTORIC_NUMBER_OF_WEEKS_AVERAGE_BALANCE_INCREASING,
  BalanceAnalyticsMetrics.JSON_PROPERTY_MAXIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_MAXIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_MINIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  BalanceAnalyticsMetrics.JSON_PROPERTY_MINIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T12:57:35.632313798Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class BalanceAnalyticsMetrics {
  public static final String JSON_PROPERTY_AVAILABLE_BALANCE = "availableBalance";
  private BigDecimal availableBalance;

  public static final String JSON_PROPERTY_AVAILABLE_BALANCE_DATE = "availableBalanceDate";
  private String availableBalanceDate;

  public static final String JSON_PROPERTY_AVERAGE_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "averageDailyBalanceByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> averageDailyBalanceByMonthForTheReportTimePeriod;

  public static final String JSON_PROPERTY_AVERAGE_DAILY_BALANCE_FOR_THE_REPORT_TIME_PERIOD = "averageDailyBalanceForTheReportTimePeriod";
  private BigDecimal averageDailyBalanceForTheReportTimePeriod;

  public static final String JSON_PROPERTY_AVERAGE_WEEKDAY_BALANCE_FOR_THE_REPORT_TIME_PERIOD = "averageWeekdayBalanceForTheReportTimePeriod";
  private BigDecimal averageWeekdayBalanceForTheReportTimePeriod;

  public static final String JSON_PROPERTY_COUNT_DAILY_NEGATIVE_BALANCES_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "countDailyNegativeBalancesByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndCount> countDailyNegativeBalancesByMonthForTheReportTimePeriod;

  public static final String JSON_PROPERTY_CURRENT_RUNNING_BALANCE = "currentRunningBalance";
  private BigDecimal currentRunningBalance;

  public static final String JSON_PROPERTY_CURRENT_RUNNING_BALANCE_DATE = "currentRunningBalanceDate";
  private String currentRunningBalanceDate;

  public static final String JSON_PROPERTY_DAILY_BALANCES_BY_WEEKDAY_FOR_THE_REPORT_TIME_PERIOD = "dailyBalancesByWeekdayForTheReportTimePeriod";
  private List<ObbDailyBalance> dailyBalancesByWeekdayForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_DAILY_BALANCES_FOR_THE_REPORT_TIME_PERIOD = "dailyBalancesForTheReportTimePeriod";
  private List<ObbDailyBalance> dailyBalancesForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_HISTORIC_NUMBER_OF_WEEKS_AVERAGE_BALANCE_INCREASING = "historicNumberOfWeeksAverageBalanceIncreasing";
  private ObbNumWeeksAverageBalanceIncreasing historicNumberOfWeeksAverageBalanceIncreasing;

  public static final String JSON_PROPERTY_MAXIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "maximumDailyBalanceByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> maximumDailyBalanceByMonthForTheReportTimePeriod;

  public static final String JSON_PROPERTY_MAXIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD = "maximumRunningBalanceForTheReportTimePeriod";
  private BigDecimal maximumRunningBalanceForTheReportTimePeriod;

  public static final String JSON_PROPERTY_MINIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "minimumDailyBalanceByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> minimumDailyBalanceByMonthForTheReportTimePeriod;

  public static final String JSON_PROPERTY_MINIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD = "minimumRunningBalanceForTheReportTimePeriod";
  private BigDecimal minimumRunningBalanceForTheReportTimePeriod;

  public BalanceAnalyticsMetrics() {
  }

  public BalanceAnalyticsMetrics availableBalance(BigDecimal availableBalance) {
    
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Available Balance
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAvailableBalance() {
    return availableBalance;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
  }


  public BalanceAnalyticsMetrics availableBalanceDate(String availableBalanceDate) {
    
    this.availableBalanceDate = availableBalanceDate;
    return this;
  }

   /**
   * Available Balance date
   * @return availableBalanceDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAvailableBalanceDate() {
    return availableBalanceDate;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableBalanceDate(String availableBalanceDate) {
    this.availableBalanceDate = availableBalanceDate;
  }


  public BalanceAnalyticsMetrics averageDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageDailyBalanceByMonthForTheReportTimePeriod) {
    
    this.averageDailyBalanceByMonthForTheReportTimePeriod = averageDailyBalanceByMonthForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addAverageDailyBalanceByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount averageDailyBalanceByMonthForTheReportTimePeriodItem) {
    if (this.averageDailyBalanceByMonthForTheReportTimePeriod == null) {
      this.averageDailyBalanceByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.averageDailyBalanceByMonthForTheReportTimePeriod.add(averageDailyBalanceByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Average daily ending balance each month over the report time period
   * @return averageDailyBalanceByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDateRangeAndAmount> getAverageDailyBalanceByMonthForTheReportTimePeriod() {
    return averageDailyBalanceByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageDailyBalanceByMonthForTheReportTimePeriod) {
    this.averageDailyBalanceByMonthForTheReportTimePeriod = averageDailyBalanceByMonthForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics averageDailyBalanceForTheReportTimePeriod(BigDecimal averageDailyBalanceForTheReportTimePeriod) {
    
    this.averageDailyBalanceForTheReportTimePeriod = averageDailyBalanceForTheReportTimePeriod;
    return this;
  }

   /**
   * Average Daily Balance
   * @return averageDailyBalanceForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_DAILY_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAverageDailyBalanceForTheReportTimePeriod() {
    return averageDailyBalanceForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_DAILY_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageDailyBalanceForTheReportTimePeriod(BigDecimal averageDailyBalanceForTheReportTimePeriod) {
    this.averageDailyBalanceForTheReportTimePeriod = averageDailyBalanceForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics averageWeekdayBalanceForTheReportTimePeriod(BigDecimal averageWeekdayBalanceForTheReportTimePeriod) {
    
    this.averageWeekdayBalanceForTheReportTimePeriod = averageWeekdayBalanceForTheReportTimePeriod;
    return this;
  }

   /**
   * Average Weekday Balance
   * @return averageWeekdayBalanceForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_WEEKDAY_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAverageWeekdayBalanceForTheReportTimePeriod() {
    return averageWeekdayBalanceForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_WEEKDAY_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageWeekdayBalanceForTheReportTimePeriod(BigDecimal averageWeekdayBalanceForTheReportTimePeriod) {
    this.averageWeekdayBalanceForTheReportTimePeriod = averageWeekdayBalanceForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics countDailyNegativeBalancesByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countDailyNegativeBalancesByMonthForTheReportTimePeriod) {
    
    this.countDailyNegativeBalancesByMonthForTheReportTimePeriod = countDailyNegativeBalancesByMonthForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addCountDailyNegativeBalancesByMonthForTheReportTimePeriodItem(ObbDateRangeAndCount countDailyNegativeBalancesByMonthForTheReportTimePeriodItem) {
    if (this.countDailyNegativeBalancesByMonthForTheReportTimePeriod == null) {
      this.countDailyNegativeBalancesByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.countDailyNegativeBalancesByMonthForTheReportTimePeriod.add(countDailyNegativeBalancesByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Number of negative daily ending balances each month over the report time period
   * @return countDailyNegativeBalancesByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNT_DAILY_NEGATIVE_BALANCES_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDateRangeAndCount> getCountDailyNegativeBalancesByMonthForTheReportTimePeriod() {
    return countDailyNegativeBalancesByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_DAILY_NEGATIVE_BALANCES_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountDailyNegativeBalancesByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countDailyNegativeBalancesByMonthForTheReportTimePeriod) {
    this.countDailyNegativeBalancesByMonthForTheReportTimePeriod = countDailyNegativeBalancesByMonthForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics currentRunningBalance(BigDecimal currentRunningBalance) {
    
    this.currentRunningBalance = currentRunningBalance;
    return this;
  }

   /**
   * Current Running Balance Date
   * @return currentRunningBalance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_RUNNING_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCurrentRunningBalance() {
    return currentRunningBalance;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_RUNNING_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentRunningBalance(BigDecimal currentRunningBalance) {
    this.currentRunningBalance = currentRunningBalance;
  }


  public BalanceAnalyticsMetrics currentRunningBalanceDate(String currentRunningBalanceDate) {
    
    this.currentRunningBalanceDate = currentRunningBalanceDate;
    return this;
  }

   /**
   * Current Running Balance date
   * @return currentRunningBalanceDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_RUNNING_BALANCE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrentRunningBalanceDate() {
    return currentRunningBalanceDate;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_RUNNING_BALANCE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentRunningBalanceDate(String currentRunningBalanceDate) {
    this.currentRunningBalanceDate = currentRunningBalanceDate;
  }


  public BalanceAnalyticsMetrics dailyBalancesByWeekdayForTheReportTimePeriod(List<ObbDailyBalance> dailyBalancesByWeekdayForTheReportTimePeriod) {
    
    this.dailyBalancesByWeekdayForTheReportTimePeriod = dailyBalancesByWeekdayForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addDailyBalancesByWeekdayForTheReportTimePeriodItem(ObbDailyBalance dailyBalancesByWeekdayForTheReportTimePeriodItem) {
    if (this.dailyBalancesByWeekdayForTheReportTimePeriod == null) {
      this.dailyBalancesByWeekdayForTheReportTimePeriod = new ArrayList<>();
    }
    this.dailyBalancesByWeekdayForTheReportTimePeriod.add(dailyBalancesByWeekdayForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Daily balance of the account during weekdays over the length of the report
   * @return dailyBalancesByWeekdayForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DAILY_BALANCES_BY_WEEKDAY_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDailyBalance> getDailyBalancesByWeekdayForTheReportTimePeriod() {
    return dailyBalancesByWeekdayForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_DAILY_BALANCES_BY_WEEKDAY_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDailyBalancesByWeekdayForTheReportTimePeriod(List<ObbDailyBalance> dailyBalancesByWeekdayForTheReportTimePeriod) {
    this.dailyBalancesByWeekdayForTheReportTimePeriod = dailyBalancesByWeekdayForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics dailyBalancesForTheReportTimePeriod(List<ObbDailyBalance> dailyBalancesForTheReportTimePeriod) {
    
    this.dailyBalancesForTheReportTimePeriod = dailyBalancesForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addDailyBalancesForTheReportTimePeriodItem(ObbDailyBalance dailyBalancesForTheReportTimePeriodItem) {
    if (this.dailyBalancesForTheReportTimePeriod == null) {
      this.dailyBalancesForTheReportTimePeriod = new ArrayList<>();
    }
    this.dailyBalancesForTheReportTimePeriod.add(dailyBalancesForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Daily balance of the account over the length of the report
   * @return dailyBalancesForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DAILY_BALANCES_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDailyBalance> getDailyBalancesForTheReportTimePeriod() {
    return dailyBalancesForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_DAILY_BALANCES_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDailyBalancesForTheReportTimePeriod(List<ObbDailyBalance> dailyBalancesForTheReportTimePeriod) {
    this.dailyBalancesForTheReportTimePeriod = dailyBalancesForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics historicNumberOfWeeksAverageBalanceIncreasing(ObbNumWeeksAverageBalanceIncreasing historicNumberOfWeeksAverageBalanceIncreasing) {
    
    this.historicNumberOfWeeksAverageBalanceIncreasing = historicNumberOfWeeksAverageBalanceIncreasing;
    return this;
  }

   /**
   * Get historicNumberOfWeeksAverageBalanceIncreasing
   * @return historicNumberOfWeeksAverageBalanceIncreasing
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HISTORIC_NUMBER_OF_WEEKS_AVERAGE_BALANCE_INCREASING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ObbNumWeeksAverageBalanceIncreasing getHistoricNumberOfWeeksAverageBalanceIncreasing() {
    return historicNumberOfWeeksAverageBalanceIncreasing;
  }


  @JsonProperty(JSON_PROPERTY_HISTORIC_NUMBER_OF_WEEKS_AVERAGE_BALANCE_INCREASING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistoricNumberOfWeeksAverageBalanceIncreasing(ObbNumWeeksAverageBalanceIncreasing historicNumberOfWeeksAverageBalanceIncreasing) {
    this.historicNumberOfWeeksAverageBalanceIncreasing = historicNumberOfWeeksAverageBalanceIncreasing;
  }


  public BalanceAnalyticsMetrics maximumDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumDailyBalanceByMonthForTheReportTimePeriod) {
    
    this.maximumDailyBalanceByMonthForTheReportTimePeriod = maximumDailyBalanceByMonthForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addMaximumDailyBalanceByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount maximumDailyBalanceByMonthForTheReportTimePeriodItem) {
    if (this.maximumDailyBalanceByMonthForTheReportTimePeriod == null) {
      this.maximumDailyBalanceByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.maximumDailyBalanceByMonthForTheReportTimePeriod.add(maximumDailyBalanceByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Maximum daily ending balance each month over the report time period
   * @return maximumDailyBalanceByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAXIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDateRangeAndAmount> getMaximumDailyBalanceByMonthForTheReportTimePeriod() {
    return maximumDailyBalanceByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumDailyBalanceByMonthForTheReportTimePeriod) {
    this.maximumDailyBalanceByMonthForTheReportTimePeriod = maximumDailyBalanceByMonthForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics maximumRunningBalanceForTheReportTimePeriod(BigDecimal maximumRunningBalanceForTheReportTimePeriod) {
    
    this.maximumRunningBalanceForTheReportTimePeriod = maximumRunningBalanceForTheReportTimePeriod;
    return this;
  }

   /**
   * Maximum Running Balance
   * @return maximumRunningBalanceForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAXIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMaximumRunningBalanceForTheReportTimePeriod() {
    return maximumRunningBalanceForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumRunningBalanceForTheReportTimePeriod(BigDecimal maximumRunningBalanceForTheReportTimePeriod) {
    this.maximumRunningBalanceForTheReportTimePeriod = maximumRunningBalanceForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics minimumDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumDailyBalanceByMonthForTheReportTimePeriod) {
    
    this.minimumDailyBalanceByMonthForTheReportTimePeriod = minimumDailyBalanceByMonthForTheReportTimePeriod;
    return this;
  }

  public BalanceAnalyticsMetrics addMinimumDailyBalanceByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount minimumDailyBalanceByMonthForTheReportTimePeriodItem) {
    if (this.minimumDailyBalanceByMonthForTheReportTimePeriod == null) {
      this.minimumDailyBalanceByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.minimumDailyBalanceByMonthForTheReportTimePeriod.add(minimumDailyBalanceByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Minimum daily ending balance each month over the report time period
   * @return minimumDailyBalanceByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MINIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDateRangeAndAmount> getMinimumDailyBalanceByMonthForTheReportTimePeriod() {
    return minimumDailyBalanceByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_DAILY_BALANCE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumDailyBalanceByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumDailyBalanceByMonthForTheReportTimePeriod) {
    this.minimumDailyBalanceByMonthForTheReportTimePeriod = minimumDailyBalanceByMonthForTheReportTimePeriod;
  }


  public BalanceAnalyticsMetrics minimumRunningBalanceForTheReportTimePeriod(BigDecimal minimumRunningBalanceForTheReportTimePeriod) {
    
    this.minimumRunningBalanceForTheReportTimePeriod = minimumRunningBalanceForTheReportTimePeriod;
    return this;
  }

   /**
   * Minimum Running Balance
   * @return minimumRunningBalanceForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MINIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMinimumRunningBalanceForTheReportTimePeriod() {
    return minimumRunningBalanceForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_RUNNING_BALANCE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMinimumRunningBalanceForTheReportTimePeriod(BigDecimal minimumRunningBalanceForTheReportTimePeriod) {
    this.minimumRunningBalanceForTheReportTimePeriod = minimumRunningBalanceForTheReportTimePeriod;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BalanceAnalyticsMetrics balanceAnalyticsMetrics = (BalanceAnalyticsMetrics) o;
    return Objects.equals(this.availableBalance, balanceAnalyticsMetrics.availableBalance) &&
        Objects.equals(this.availableBalanceDate, balanceAnalyticsMetrics.availableBalanceDate) &&
        Objects.equals(this.averageDailyBalanceByMonthForTheReportTimePeriod, balanceAnalyticsMetrics.averageDailyBalanceByMonthForTheReportTimePeriod) &&
        Objects.equals(this.averageDailyBalanceForTheReportTimePeriod, balanceAnalyticsMetrics.averageDailyBalanceForTheReportTimePeriod) &&
        Objects.equals(this.averageWeekdayBalanceForTheReportTimePeriod, balanceAnalyticsMetrics.averageWeekdayBalanceForTheReportTimePeriod) &&
        Objects.equals(this.countDailyNegativeBalancesByMonthForTheReportTimePeriod, balanceAnalyticsMetrics.countDailyNegativeBalancesByMonthForTheReportTimePeriod) &&
        Objects.equals(this.currentRunningBalance, balanceAnalyticsMetrics.currentRunningBalance) &&
        Objects.equals(this.currentRunningBalanceDate, balanceAnalyticsMetrics.currentRunningBalanceDate) &&
        Objects.equals(this.dailyBalancesByWeekdayForTheReportTimePeriod, balanceAnalyticsMetrics.dailyBalancesByWeekdayForTheReportTimePeriod) &&
        Objects.equals(this.dailyBalancesForTheReportTimePeriod, balanceAnalyticsMetrics.dailyBalancesForTheReportTimePeriod) &&
        Objects.equals(this.historicNumberOfWeeksAverageBalanceIncreasing, balanceAnalyticsMetrics.historicNumberOfWeeksAverageBalanceIncreasing) &&
        Objects.equals(this.maximumDailyBalanceByMonthForTheReportTimePeriod, balanceAnalyticsMetrics.maximumDailyBalanceByMonthForTheReportTimePeriod) &&
        Objects.equals(this.maximumRunningBalanceForTheReportTimePeriod, balanceAnalyticsMetrics.maximumRunningBalanceForTheReportTimePeriod) &&
        Objects.equals(this.minimumDailyBalanceByMonthForTheReportTimePeriod, balanceAnalyticsMetrics.minimumDailyBalanceByMonthForTheReportTimePeriod) &&
        Objects.equals(this.minimumRunningBalanceForTheReportTimePeriod, balanceAnalyticsMetrics.minimumRunningBalanceForTheReportTimePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableBalance, availableBalanceDate, averageDailyBalanceByMonthForTheReportTimePeriod, averageDailyBalanceForTheReportTimePeriod, averageWeekdayBalanceForTheReportTimePeriod, countDailyNegativeBalancesByMonthForTheReportTimePeriod, currentRunningBalance, currentRunningBalanceDate, dailyBalancesByWeekdayForTheReportTimePeriod, dailyBalancesForTheReportTimePeriod, historicNumberOfWeeksAverageBalanceIncreasing, maximumDailyBalanceByMonthForTheReportTimePeriod, maximumRunningBalanceForTheReportTimePeriod, minimumDailyBalanceByMonthForTheReportTimePeriod, minimumRunningBalanceForTheReportTimePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BalanceAnalyticsMetrics {\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    availableBalanceDate: ").append(toIndentedString(availableBalanceDate)).append("\n");
    sb.append("    averageDailyBalanceByMonthForTheReportTimePeriod: ").append(toIndentedString(averageDailyBalanceByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    averageDailyBalanceForTheReportTimePeriod: ").append(toIndentedString(averageDailyBalanceForTheReportTimePeriod)).append("\n");
    sb.append("    averageWeekdayBalanceForTheReportTimePeriod: ").append(toIndentedString(averageWeekdayBalanceForTheReportTimePeriod)).append("\n");
    sb.append("    countDailyNegativeBalancesByMonthForTheReportTimePeriod: ").append(toIndentedString(countDailyNegativeBalancesByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    currentRunningBalance: ").append(toIndentedString(currentRunningBalance)).append("\n");
    sb.append("    currentRunningBalanceDate: ").append(toIndentedString(currentRunningBalanceDate)).append("\n");
    sb.append("    dailyBalancesByWeekdayForTheReportTimePeriod: ").append(toIndentedString(dailyBalancesByWeekdayForTheReportTimePeriod)).append("\n");
    sb.append("    dailyBalancesForTheReportTimePeriod: ").append(toIndentedString(dailyBalancesForTheReportTimePeriod)).append("\n");
    sb.append("    historicNumberOfWeeksAverageBalanceIncreasing: ").append(toIndentedString(historicNumberOfWeeksAverageBalanceIncreasing)).append("\n");
    sb.append("    maximumDailyBalanceByMonthForTheReportTimePeriod: ").append(toIndentedString(maximumDailyBalanceByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    maximumRunningBalanceForTheReportTimePeriod: ").append(toIndentedString(maximumRunningBalanceForTheReportTimePeriod)).append("\n");
    sb.append("    minimumDailyBalanceByMonthForTheReportTimePeriod: ").append(toIndentedString(minimumDailyBalanceByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    minimumRunningBalanceForTheReportTimePeriod: ").append(toIndentedString(minimumRunningBalanceForTheReportTimePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

