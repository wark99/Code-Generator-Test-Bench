/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MailPermissions;
import org.openapitools.client.model.MailboxBase;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * WorkspaceInvitation
 */
@JsonPropertyOrder({
  WorkspaceInvitation.JSON_PROPERTY_SHORT_URL,
  WorkspaceInvitation.JSON_PROPERTY_KEY,
  WorkspaceInvitation.JSON_PROPERTY_SENT_TO,
  WorkspaceInvitation.JSON_PROPERTY_PERMISSIONS,
  WorkspaceInvitation.JSON_PROPERTY_EXPIRED_AT,
  WorkspaceInvitation.JSON_PROPERTY_IS_VALID,
  WorkspaceInvitation.JSON_PROPERTY_IS_USED,
  WorkspaceInvitation.JSON_PROPERTY_MAILBOX,
  WorkspaceInvitation.JSON_PROPERTY_QRCODE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class WorkspaceInvitation {
  public static final String JSON_PROPERTY_SHORT_URL = "short_url";
  private String shortUrl;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_SENT_TO = "sent_to";
  private String sentTo;

  public static final String JSON_PROPERTY_PERMISSIONS = "permissions";
  private List<MailPermissions> permissions = new ArrayList<>();

  public static final String JSON_PROPERTY_EXPIRED_AT = "expired_at";
  private Integer expiredAt;

  public static final String JSON_PROPERTY_IS_VALID = "is_valid";
  private Boolean isValid;

  public static final String JSON_PROPERTY_IS_USED = "is_used";
  private Boolean isUsed;

  public static final String JSON_PROPERTY_MAILBOX = "mailbox";
  private MailboxBase mailbox;

  public static final String JSON_PROPERTY_QRCODE = "qrcode";
  private String qrcode;

  public WorkspaceInvitation() {
  }

  public WorkspaceInvitation shortUrl(String shortUrl) {
    
    this.shortUrl = shortUrl;
    return this;
  }

   /**
   * Invitation url  
   * @return shortUrl
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHORT_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getShortUrl() {
    return shortUrl;
  }


  @JsonProperty(JSON_PROPERTY_SHORT_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setShortUrl(String shortUrl) {
    this.shortUrl = shortUrl;
  }


  public WorkspaceInvitation key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Key  
   * @return key
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKey(String key) {
    this.key = key;
  }


  public WorkspaceInvitation sentTo(String sentTo) {
    
    this.sentTo = sentTo;
    return this;
  }

   /**
   * Invitation recipient email address  
   * @return sentTo
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SENT_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSentTo() {
    return sentTo;
  }


  @JsonProperty(JSON_PROPERTY_SENT_TO)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSentTo(String sentTo) {
    this.sentTo = sentTo;
  }


  public WorkspaceInvitation permissions(List<MailPermissions> permissions) {
    
    this.permissions = permissions;
    return this;
  }

  public WorkspaceInvitation addPermissionsItem(MailPermissions permissionsItem) {
    if (this.permissions == null) {
      this.permissions = new ArrayList<>();
    }
    this.permissions.add(permissionsItem);
    return this;
  }

   /**
   * Get permissions
   * @return permissions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<MailPermissions> getPermissions() {
    return permissions;
  }


  @JsonProperty(JSON_PROPERTY_PERMISSIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPermissions(List<MailPermissions> permissions) {
    this.permissions = permissions;
  }


  public WorkspaceInvitation expiredAt(Integer expiredAt) {
    
    this.expiredAt = expiredAt;
    return this;
  }

   /**
   * Expired date  
   * @return expiredAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExpiredAt() {
    return expiredAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiredAt(Integer expiredAt) {
    this.expiredAt = expiredAt;
  }


  public WorkspaceInvitation isValid(Boolean isValid) {
    
    this.isValid = isValid;
    return this;
  }

   /**
   * True if still valid  
   * @return isValid
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_VALID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsValid() {
    return isValid;
  }


  @JsonProperty(JSON_PROPERTY_IS_VALID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public WorkspaceInvitation isUsed(Boolean isUsed) {
    
    this.isUsed = isUsed;
    return this;
  }

   /**
   * True if invitation has been accepted  
   * @return isUsed
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_USED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsUsed() {
    return isUsed;
  }


  @JsonProperty(JSON_PROPERTY_IS_USED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsUsed(Boolean isUsed) {
    this.isUsed = isUsed;
  }


  public WorkspaceInvitation mailbox(MailboxBase mailbox) {
    
    this.mailbox = mailbox;
    return this;
  }

   /**
   * Get mailbox
   * @return mailbox
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAILBOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MailboxBase getMailbox() {
    return mailbox;
  }


  @JsonProperty(JSON_PROPERTY_MAILBOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMailbox(MailboxBase mailbox) {
    this.mailbox = mailbox;
  }


  public WorkspaceInvitation qrcode(String qrcode) {
    
    this.qrcode = qrcode;
    return this;
  }

   /**
   * QR Code url  **This field is provided only if you have set with&#x3D;qrcode**
   * @return qrcode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QRCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getQrcode() {
    return qrcode;
  }


  @JsonProperty(JSON_PROPERTY_QRCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQrcode(String qrcode) {
    this.qrcode = qrcode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspaceInvitation workspaceInvitation = (WorkspaceInvitation) o;
    return Objects.equals(this.shortUrl, workspaceInvitation.shortUrl) &&
        Objects.equals(this.key, workspaceInvitation.key) &&
        Objects.equals(this.sentTo, workspaceInvitation.sentTo) &&
        Objects.equals(this.permissions, workspaceInvitation.permissions) &&
        Objects.equals(this.expiredAt, workspaceInvitation.expiredAt) &&
        Objects.equals(this.isValid, workspaceInvitation.isValid) &&
        Objects.equals(this.isUsed, workspaceInvitation.isUsed) &&
        Objects.equals(this.mailbox, workspaceInvitation.mailbox) &&
        Objects.equals(this.qrcode, workspaceInvitation.qrcode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(shortUrl, key, sentTo, permissions, expiredAt, isValid, isUsed, mailbox, qrcode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspaceInvitation {\n");
    sb.append("    shortUrl: ").append(toIndentedString(shortUrl)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    sentTo: ").append(toIndentedString(sentTo)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    isUsed: ").append(toIndentedString(isUsed)).append("\n");
    sb.append("    mailbox: ").append(toIndentedString(mailbox)).append("\n");
    sb.append("    qrcode: ").append(toIndentedString(qrcode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

