/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TransactionsFiltersYodlee
 */
@JsonPropertyOrder({
  TransactionsFiltersYodlee.JSON_PROPERTY_ACCOUNT_ID,
  TransactionsFiltersYodlee.JSON_PROPERTY_CONSUMER_ID,
  TransactionsFiltersYodlee.JSON_PROPERTY_FROM_DATE,
  TransactionsFiltersYodlee.JSON_PROPERTY_TO_DATE,
  TransactionsFiltersYodlee.JSON_PROPERTY_SKIP,
  TransactionsFiltersYodlee.JSON_PROPERTY_TOP
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class TransactionsFiltersYodlee {
  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  private Long accountId;

  public static final String JSON_PROPERTY_CONSUMER_ID = "consumer_id";
  private String consumerId;

  public static final String JSON_PROPERTY_FROM_DATE = "from_date";
  private String fromDate;

  public static final String JSON_PROPERTY_TO_DATE = "to_date";
  private String toDate;

  public static final String JSON_PROPERTY_SKIP = "skip";
  private Integer skip;

  public static final String JSON_PROPERTY_TOP = "top";
  private Integer top;

  public TransactionsFiltersYodlee() {
  }

  public TransactionsFiltersYodlee accountId(Long accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Must be obtained from List ConsumerAccounts.
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(Long accountId) {
    this.accountId = accountId;
  }


  public TransactionsFiltersYodlee consumerId(String consumerId) {
    
    this.consumerId = consumerId;
    return this;
  }

   /**
   * Get consumerId
   * @return consumerId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONSUMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConsumerId() {
    return consumerId;
  }


  @JsonProperty(JSON_PROPERTY_CONSUMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConsumerId(String consumerId) {
    this.consumerId = consumerId;
  }


  public TransactionsFiltersYodlee fromDate(String fromDate) {
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * YYYY-MM-DD
   * @return fromDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FROM_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFromDate() {
    return fromDate;
  }


  @JsonProperty(JSON_PROPERTY_FROM_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromDate(String fromDate) {
    this.fromDate = fromDate;
  }


  public TransactionsFiltersYodlee toDate(String toDate) {
    
    this.toDate = toDate;
    return this;
  }

   /**
   * YYYY-MM-DD
   * @return toDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getToDate() {
    return toDate;
  }


  @JsonProperty(JSON_PROPERTY_TO_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToDate(String toDate) {
    this.toDate = toDate;
  }


  public TransactionsFiltersYodlee skip(Integer skip) {
    
    this.skip = skip;
    return this;
  }

   /**
   * Get skip
   * minimum: 0
   * @return skip
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SKIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSkip() {
    return skip;
  }


  @JsonProperty(JSON_PROPERTY_SKIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSkip(Integer skip) {
    this.skip = skip;
  }


  public TransactionsFiltersYodlee top(Integer top) {
    
    this.top = top;
    return this;
  }

   /**
   * Get top
   * maximum: 100
   * @return top
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTop() {
    return top;
  }


  @JsonProperty(JSON_PROPERTY_TOP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTop(Integer top) {
    this.top = top;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsFiltersYodlee transactionsFiltersYodlee = (TransactionsFiltersYodlee) o;
    return Objects.equals(this.accountId, transactionsFiltersYodlee.accountId) &&
        Objects.equals(this.consumerId, transactionsFiltersYodlee.consumerId) &&
        Objects.equals(this.fromDate, transactionsFiltersYodlee.fromDate) &&
        Objects.equals(this.toDate, transactionsFiltersYodlee.toDate) &&
        Objects.equals(this.skip, transactionsFiltersYodlee.skip) &&
        Objects.equals(this.top, transactionsFiltersYodlee.top);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, consumerId, fromDate, toDate, skip, top);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsFiltersYodlee {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    consumerId: ").append(toIndentedString(consumerId)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

