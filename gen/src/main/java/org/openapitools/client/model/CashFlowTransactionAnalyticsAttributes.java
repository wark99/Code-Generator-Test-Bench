/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CashFlowActivityDepositsCredits;
import org.openapitools.client.model.CashFlowActivityWithdrawalsDebits;
import org.openapitools.client.model.CashFlowNumWeeksZeros;
import org.openapitools.client.model.CashFlowTransactionAnalyticsAttributesLastTransactionDateInner;
import org.openapitools.client.model.ObbDateRangeAndAmount;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Transaction Analytics Attributes
 */
@JsonPropertyOrder({
  CashFlowTransactionAnalyticsAttributes.JSON_PROPERTY_ACTIVITY_DEPOSITS_CREDITS_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowTransactionAnalyticsAttributes.JSON_PROPERTY_ACTIVITY_WITHDRAWALS_DEBITS_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowTransactionAnalyticsAttributes.JSON_PROPERTY_AVERAGE_TRANSACTION_VALUE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowTransactionAnalyticsAttributes.JSON_PROPERTY_HISTORIC_WEEKS_WITH_ZERO_TRANSACTIONS,
  CashFlowTransactionAnalyticsAttributes.JSON_PROPERTY_LAST_TRANSACTION_DATE,
  CashFlowTransactionAnalyticsAttributes.JSON_PROPERTY_NET_CASH_FLOW_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowTransactionAnalyticsAttributes.JSON_PROPERTY_NET_CASH_FLOW_FOR_THE_REPORT_TIME_PERIOD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T12:47:14.152745765Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CashFlowTransactionAnalyticsAttributes {
  public static final String JSON_PROPERTY_ACTIVITY_DEPOSITS_CREDITS_FOR_THE_REPORT_TIME_PERIOD = "activityDepositsCreditsForTheReportTimePeriod";
  private List<CashFlowActivityDepositsCredits> activityDepositsCreditsForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_ACTIVITY_WITHDRAWALS_DEBITS_FOR_THE_REPORT_TIME_PERIOD = "activityWithdrawalsDebitsForTheReportTimePeriod";
  private List<CashFlowActivityWithdrawalsDebits> activityWithdrawalsDebitsForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_AVERAGE_TRANSACTION_VALUE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "averageTransactionValueByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> averageTransactionValueByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_HISTORIC_WEEKS_WITH_ZERO_TRANSACTIONS = "historicWeeksWithZeroTransactions";
  private CashFlowNumWeeksZeros historicWeeksWithZeroTransactions;

  public static final String JSON_PROPERTY_LAST_TRANSACTION_DATE = "lastTransactionDate";
  private List<CashFlowTransactionAnalyticsAttributesLastTransactionDateInner> lastTransactionDate;

  public static final String JSON_PROPERTY_NET_CASH_FLOW_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "netCashFlowByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> netCashFlowByMonthForTheReportTimePeriod;

  public static final String JSON_PROPERTY_NET_CASH_FLOW_FOR_THE_REPORT_TIME_PERIOD = "netCashFlowForTheReportTimePeriod";
  private BigDecimal netCashFlowForTheReportTimePeriod;

  public CashFlowTransactionAnalyticsAttributes() {
  }

  public CashFlowTransactionAnalyticsAttributes activityDepositsCreditsForTheReportTimePeriod(List<CashFlowActivityDepositsCredits> activityDepositsCreditsForTheReportTimePeriod) {
    
    this.activityDepositsCreditsForTheReportTimePeriod = activityDepositsCreditsForTheReportTimePeriod;
    return this;
  }

  public CashFlowTransactionAnalyticsAttributes addActivityDepositsCreditsForTheReportTimePeriodItem(CashFlowActivityDepositsCredits activityDepositsCreditsForTheReportTimePeriodItem) {
    if (this.activityDepositsCreditsForTheReportTimePeriod == null) {
      this.activityDepositsCreditsForTheReportTimePeriod = new ArrayList<>();
    }
    this.activityDepositsCreditsForTheReportTimePeriod.add(activityDepositsCreditsForTheReportTimePeriodItem);
    return this;
  }

   /**
   * List of all deposit transactions posted to the account during the report period
   * @return activityDepositsCreditsForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVITY_DEPOSITS_CREDITS_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CashFlowActivityDepositsCredits> getActivityDepositsCreditsForTheReportTimePeriod() {
    return activityDepositsCreditsForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVITY_DEPOSITS_CREDITS_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActivityDepositsCreditsForTheReportTimePeriod(List<CashFlowActivityDepositsCredits> activityDepositsCreditsForTheReportTimePeriod) {
    this.activityDepositsCreditsForTheReportTimePeriod = activityDepositsCreditsForTheReportTimePeriod;
  }


  public CashFlowTransactionAnalyticsAttributes activityWithdrawalsDebitsForTheReportTimePeriod(List<CashFlowActivityWithdrawalsDebits> activityWithdrawalsDebitsForTheReportTimePeriod) {
    
    this.activityWithdrawalsDebitsForTheReportTimePeriod = activityWithdrawalsDebitsForTheReportTimePeriod;
    return this;
  }

  public CashFlowTransactionAnalyticsAttributes addActivityWithdrawalsDebitsForTheReportTimePeriodItem(CashFlowActivityWithdrawalsDebits activityWithdrawalsDebitsForTheReportTimePeriodItem) {
    if (this.activityWithdrawalsDebitsForTheReportTimePeriod == null) {
      this.activityWithdrawalsDebitsForTheReportTimePeriod = new ArrayList<>();
    }
    this.activityWithdrawalsDebitsForTheReportTimePeriod.add(activityWithdrawalsDebitsForTheReportTimePeriodItem);
    return this;
  }

   /**
   * List of all withdrawal transactions posted to the account during the report period
   * @return activityWithdrawalsDebitsForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVITY_WITHDRAWALS_DEBITS_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<CashFlowActivityWithdrawalsDebits> getActivityWithdrawalsDebitsForTheReportTimePeriod() {
    return activityWithdrawalsDebitsForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVITY_WITHDRAWALS_DEBITS_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActivityWithdrawalsDebitsForTheReportTimePeriod(List<CashFlowActivityWithdrawalsDebits> activityWithdrawalsDebitsForTheReportTimePeriod) {
    this.activityWithdrawalsDebitsForTheReportTimePeriod = activityWithdrawalsDebitsForTheReportTimePeriod;
  }


  public CashFlowTransactionAnalyticsAttributes averageTransactionValueByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageTransactionValueByMonthForTheReportTimePeriod) {
    
    this.averageTransactionValueByMonthForTheReportTimePeriod = averageTransactionValueByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowTransactionAnalyticsAttributes addAverageTransactionValueByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount averageTransactionValueByMonthForTheReportTimePeriodItem) {
    if (this.averageTransactionValueByMonthForTheReportTimePeriod == null) {
      this.averageTransactionValueByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.averageTransactionValueByMonthForTheReportTimePeriod.add(averageTransactionValueByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Average value of transactions during periods in the report. Values may be positive or negative
   * @return averageTransactionValueByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_TRANSACTION_VALUE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndAmount> getAverageTransactionValueByMonthForTheReportTimePeriod() {
    return averageTransactionValueByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_TRANSACTION_VALUE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageTransactionValueByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageTransactionValueByMonthForTheReportTimePeriod) {
    this.averageTransactionValueByMonthForTheReportTimePeriod = averageTransactionValueByMonthForTheReportTimePeriod;
  }


  public CashFlowTransactionAnalyticsAttributes historicWeeksWithZeroTransactions(CashFlowNumWeeksZeros historicWeeksWithZeroTransactions) {
    
    this.historicWeeksWithZeroTransactions = historicWeeksWithZeroTransactions;
    return this;
  }

   /**
   * Get historicWeeksWithZeroTransactions
   * @return historicWeeksWithZeroTransactions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HISTORIC_WEEKS_WITH_ZERO_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CashFlowNumWeeksZeros getHistoricWeeksWithZeroTransactions() {
    return historicWeeksWithZeroTransactions;
  }


  @JsonProperty(JSON_PROPERTY_HISTORIC_WEEKS_WITH_ZERO_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistoricWeeksWithZeroTransactions(CashFlowNumWeeksZeros historicWeeksWithZeroTransactions) {
    this.historicWeeksWithZeroTransactions = historicWeeksWithZeroTransactions;
  }


  public CashFlowTransactionAnalyticsAttributes lastTransactionDate(List<CashFlowTransactionAnalyticsAttributesLastTransactionDateInner> lastTransactionDate) {
    
    this.lastTransactionDate = lastTransactionDate;
    return this;
  }

  public CashFlowTransactionAnalyticsAttributes addLastTransactionDateItem(CashFlowTransactionAnalyticsAttributesLastTransactionDateInner lastTransactionDateItem) {
    if (this.lastTransactionDate == null) {
      this.lastTransactionDate = new ArrayList<>();
    }
    this.lastTransactionDate.add(lastTransactionDateItem);
    return this;
  }

   /**
   * Latest posted transaction(s) to the account. May be more than one if they share the same timestamp
   * @return lastTransactionDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_TRANSACTION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CashFlowTransactionAnalyticsAttributesLastTransactionDateInner> getLastTransactionDate() {
    return lastTransactionDate;
  }


  @JsonProperty(JSON_PROPERTY_LAST_TRANSACTION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastTransactionDate(List<CashFlowTransactionAnalyticsAttributesLastTransactionDateInner> lastTransactionDate) {
    this.lastTransactionDate = lastTransactionDate;
  }


  public CashFlowTransactionAnalyticsAttributes netCashFlowByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> netCashFlowByMonthForTheReportTimePeriod) {
    
    this.netCashFlowByMonthForTheReportTimePeriod = netCashFlowByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowTransactionAnalyticsAttributes addNetCashFlowByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount netCashFlowByMonthForTheReportTimePeriodItem) {
    if (this.netCashFlowByMonthForTheReportTimePeriod == null) {
      this.netCashFlowByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.netCashFlowByMonthForTheReportTimePeriod.add(netCashFlowByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Net cash flow for each month during the report period
   * @return netCashFlowByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_CASH_FLOW_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDateRangeAndAmount> getNetCashFlowByMonthForTheReportTimePeriod() {
    return netCashFlowByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_NET_CASH_FLOW_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetCashFlowByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> netCashFlowByMonthForTheReportTimePeriod) {
    this.netCashFlowByMonthForTheReportTimePeriod = netCashFlowByMonthForTheReportTimePeriod;
  }


  public CashFlowTransactionAnalyticsAttributes netCashFlowForTheReportTimePeriod(BigDecimal netCashFlowForTheReportTimePeriod) {
    
    this.netCashFlowForTheReportTimePeriod = netCashFlowForTheReportTimePeriod;
    return this;
  }

   /**
   * Net cash flow during the report period (may be positive or negative)
   * @return netCashFlowForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NET_CASH_FLOW_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getNetCashFlowForTheReportTimePeriod() {
    return netCashFlowForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_NET_CASH_FLOW_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNetCashFlowForTheReportTimePeriod(BigDecimal netCashFlowForTheReportTimePeriod) {
    this.netCashFlowForTheReportTimePeriod = netCashFlowForTheReportTimePeriod;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowTransactionAnalyticsAttributes cashFlowTransactionAnalyticsAttributes = (CashFlowTransactionAnalyticsAttributes) o;
    return Objects.equals(this.activityDepositsCreditsForTheReportTimePeriod, cashFlowTransactionAnalyticsAttributes.activityDepositsCreditsForTheReportTimePeriod) &&
        Objects.equals(this.activityWithdrawalsDebitsForTheReportTimePeriod, cashFlowTransactionAnalyticsAttributes.activityWithdrawalsDebitsForTheReportTimePeriod) &&
        Objects.equals(this.averageTransactionValueByMonthForTheReportTimePeriod, cashFlowTransactionAnalyticsAttributes.averageTransactionValueByMonthForTheReportTimePeriod) &&
        Objects.equals(this.historicWeeksWithZeroTransactions, cashFlowTransactionAnalyticsAttributes.historicWeeksWithZeroTransactions) &&
        Objects.equals(this.lastTransactionDate, cashFlowTransactionAnalyticsAttributes.lastTransactionDate) &&
        Objects.equals(this.netCashFlowByMonthForTheReportTimePeriod, cashFlowTransactionAnalyticsAttributes.netCashFlowByMonthForTheReportTimePeriod) &&
        Objects.equals(this.netCashFlowForTheReportTimePeriod, cashFlowTransactionAnalyticsAttributes.netCashFlowForTheReportTimePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activityDepositsCreditsForTheReportTimePeriod, activityWithdrawalsDebitsForTheReportTimePeriod, averageTransactionValueByMonthForTheReportTimePeriod, historicWeeksWithZeroTransactions, lastTransactionDate, netCashFlowByMonthForTheReportTimePeriod, netCashFlowForTheReportTimePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowTransactionAnalyticsAttributes {\n");
    sb.append("    activityDepositsCreditsForTheReportTimePeriod: ").append(toIndentedString(activityDepositsCreditsForTheReportTimePeriod)).append("\n");
    sb.append("    activityWithdrawalsDebitsForTheReportTimePeriod: ").append(toIndentedString(activityWithdrawalsDebitsForTheReportTimePeriod)).append("\n");
    sb.append("    averageTransactionValueByMonthForTheReportTimePeriod: ").append(toIndentedString(averageTransactionValueByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    historicWeeksWithZeroTransactions: ").append(toIndentedString(historicWeeksWithZeroTransactions)).append("\n");
    sb.append("    lastTransactionDate: ").append(toIndentedString(lastTransactionDate)).append("\n");
    sb.append("    netCashFlowByMonthForTheReportTimePeriod: ").append(toIndentedString(netCashFlowByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    netCashFlowForTheReportTimePeriod: ").append(toIndentedString(netCashFlowForTheReportTimePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

