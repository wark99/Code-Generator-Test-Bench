/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AccountOwnerDetails;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AccountOwnerHolders
 */
@JsonPropertyOrder({
  AccountOwnerHolders.JSON_PROPERTY_HOLDERS,
  AccountOwnerHolders.JSON_PROPERTY_ENCRYPTED_VALUE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-30T11:16:07.490346735Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AccountOwnerHolders {
  public static final String JSON_PROPERTY_HOLDERS = "holders";
  private List<AccountOwnerDetails> holders = new ArrayList<>();

  public static final String JSON_PROPERTY_ENCRYPTED_VALUE = "encryptedValue";
  private String encryptedValue;

  public AccountOwnerHolders() {
  }

  public AccountOwnerHolders holders(List<AccountOwnerDetails> holders) {
    
    this.holders = holders;
    return this;
  }

  public AccountOwnerHolders addHoldersItem(AccountOwnerDetails holdersItem) {
    if (this.holders == null) {
      this.holders = new ArrayList<>();
    }
    this.holders.add(holdersItem);
    return this;
  }

   /**
   * List of account owners
   * @return holders
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HOLDERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<AccountOwnerDetails> getHolders() {
    return holders;
  }


  @JsonProperty(JSON_PROPERTY_HOLDERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHolders(List<AccountOwnerDetails> holders) {
    this.holders = holders;
  }


  public AccountOwnerHolders encryptedValue(String encryptedValue) {
    
    this.encryptedValue = encryptedValue;
    return this;
  }

   /**
   * Encrypted response.
   * @return encryptedValue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENCRYPTED_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEncryptedValue() {
    return encryptedValue;
  }


  @JsonProperty(JSON_PROPERTY_ENCRYPTED_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncryptedValue(String encryptedValue) {
    this.encryptedValue = encryptedValue;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountOwnerHolders accountOwnerHolders = (AccountOwnerHolders) o;
    return Objects.equals(this.holders, accountOwnerHolders.holders) &&
        Objects.equals(this.encryptedValue, accountOwnerHolders.encryptedValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(holders, encryptedValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountOwnerHolders {\n");
    sb.append("    holders: ").append(toIndentedString(holders)).append("\n");
    sb.append("    encryptedValue: ").append(toIndentedString(encryptedValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

