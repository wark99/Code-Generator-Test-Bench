/*
 * Reference
 * The DoDays API reference.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@dodays.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ModelClass;
import org.openapitools.client.model.Organiser;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Waitee
 */
@JsonPropertyOrder({
  Waitee.JSON_PROPERTY_ID,
  Waitee.JSON_PROPERTY_INVITE_CODE,
  Waitee.JSON_PROPERTY_INVITED_AT,
  Waitee.JSON_PROPERTY_EXPIRED,
  Waitee.JSON_PROPERTY_ORGANISER,
  Waitee.JSON_PROPERTY_PROPERTY_CLASS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:23:35.686627593Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Waitee {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_INVITE_CODE = "invite_code";
  private String inviteCode;

  public static final String JSON_PROPERTY_INVITED_AT = "invited_at";
  private OffsetDateTime invitedAt;

  public static final String JSON_PROPERTY_EXPIRED = "expired";
  private Boolean expired;

  public static final String JSON_PROPERTY_ORGANISER = "organiser";
  private Organiser organiser;

  public static final String JSON_PROPERTY_PROPERTY_CLASS = "class";
  private ModelClass propertyClass;

  public Waitee() {
  }

  public Waitee id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public Waitee inviteCode(String inviteCode) {
    
    this.inviteCode = inviteCode;
    return this;
  }

   /**
   * Get inviteCode
   * @return inviteCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVITE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInviteCode() {
    return inviteCode;
  }


  @JsonProperty(JSON_PROPERTY_INVITE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInviteCode(String inviteCode) {
    this.inviteCode = inviteCode;
  }


  public Waitee invitedAt(OffsetDateTime invitedAt) {
    
    this.invitedAt = invitedAt;
    return this;
  }

   /**
   * Get invitedAt
   * @return invitedAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVITED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getInvitedAt() {
    return invitedAt;
  }


  @JsonProperty(JSON_PROPERTY_INVITED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvitedAt(OffsetDateTime invitedAt) {
    this.invitedAt = invitedAt;
  }


  public Waitee expired(Boolean expired) {
    
    this.expired = expired;
    return this;
  }

   /**
   * Get expired
   * @return expired
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExpired() {
    return expired;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpired(Boolean expired) {
    this.expired = expired;
  }


  public Waitee organiser(Organiser organiser) {
    
    this.organiser = organiser;
    return this;
  }

   /**
   * Get organiser
   * @return organiser
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORGANISER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Organiser getOrganiser() {
    return organiser;
  }


  @JsonProperty(JSON_PROPERTY_ORGANISER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrganiser(Organiser organiser) {
    this.organiser = organiser;
  }


  public Waitee propertyClass(ModelClass propertyClass) {
    
    this.propertyClass = propertyClass;
    return this;
  }

   /**
   * Get propertyClass
   * @return propertyClass
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ModelClass getPropertyClass() {
    return propertyClass;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_CLASS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyClass(ModelClass propertyClass) {
    this.propertyClass = propertyClass;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Waitee waitee = (Waitee) o;
    return Objects.equals(this.id, waitee.id) &&
        Objects.equals(this.inviteCode, waitee.inviteCode) &&
        Objects.equals(this.invitedAt, waitee.invitedAt) &&
        Objects.equals(this.expired, waitee.expired) &&
        Objects.equals(this.organiser, waitee.organiser) &&
        Objects.equals(this.propertyClass, waitee.propertyClass);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, inviteCode, invitedAt, expired, organiser, propertyClass);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Waitee {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inviteCode: ").append(toIndentedString(inviteCode)).append("\n");
    sb.append("    invitedAt: ").append(toIndentedString(invitedAt)).append("\n");
    sb.append("    expired: ").append(toIndentedString(expired)).append("\n");
    sb.append("    organiser: ").append(toIndentedString(organiser)).append("\n");
    sb.append("    propertyClass: ").append(toIndentedString(propertyClass)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

