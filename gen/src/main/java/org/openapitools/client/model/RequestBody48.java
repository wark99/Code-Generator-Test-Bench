/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RequestBody48
 */
@JsonPropertyOrder({
  RequestBody48.JSON_PROPERTY_IS_ENABLED,
  RequestBody48.JSON_PROPERTY_REDIRECT_ADDRESSES,
  RequestBody48.JSON_PROPERTY_HAS_DONT_DELIVER,
  RequestBody48.JSON_PROPERTY_HAS_FORWARD_SPAM
})
@JsonTypeName("Request_body_48")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RequestBody48 {
  public static final String JSON_PROPERTY_IS_ENABLED = "is_enabled";
  private Boolean isEnabled;

  public static final String JSON_PROPERTY_REDIRECT_ADDRESSES = "redirect_addresses";
  private JsonNullable<Object> redirectAddresses = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_HAS_DONT_DELIVER = "has_dont_deliver";
  private Boolean hasDontDeliver;

  public static final String JSON_PROPERTY_HAS_FORWARD_SPAM = "has_forward_spam";
  private Boolean hasForwardSpam;

  public RequestBody48() {
  }

  public RequestBody48 isEnabled(Boolean isEnabled) {
    
    this.isEnabled = isEnabled;
    return this;
  }

   /**
   * Enable or disable forwarding
   * @return isEnabled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsEnabled() {
    return isEnabled;
  }


  @JsonProperty(JSON_PROPERTY_IS_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsEnabled(Boolean isEnabled) {
    this.isEnabled = isEnabled;
  }


  public RequestBody48 redirectAddresses(Object redirectAddresses) {
    this.redirectAddresses = JsonNullable.<Object>of(redirectAddresses);
    
    return this;
  }

   /**
   * Get redirectAddresses
   * @return redirectAddresses
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getRedirectAddresses() {
        return redirectAddresses.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_REDIRECT_ADDRESSES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getRedirectAddresses_JsonNullable() {
    return redirectAddresses;
  }
  
  @JsonProperty(JSON_PROPERTY_REDIRECT_ADDRESSES)
  public void setRedirectAddresses_JsonNullable(JsonNullable<Object> redirectAddresses) {
    this.redirectAddresses = redirectAddresses;
  }

  public void setRedirectAddresses(Object redirectAddresses) {
    this.redirectAddresses = JsonNullable.<Object>of(redirectAddresses);
  }


  public RequestBody48 hasDontDeliver(Boolean hasDontDeliver) {
    
    this.hasDontDeliver = hasDontDeliver;
    return this;
  }

   /**
   * Delete messages from the server after sending
   * @return hasDontDeliver
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_DONT_DELIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasDontDeliver() {
    return hasDontDeliver;
  }


  @JsonProperty(JSON_PROPERTY_HAS_DONT_DELIVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasDontDeliver(Boolean hasDontDeliver) {
    this.hasDontDeliver = hasDontDeliver;
  }


  public RequestBody48 hasForwardSpam(Boolean hasForwardSpam) {
    
    this.hasForwardSpam = hasForwardSpam;
    return this;
  }

   /**
   * Transmit spam messages
   * @return hasForwardSpam
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HAS_FORWARD_SPAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHasForwardSpam() {
    return hasForwardSpam;
  }


  @JsonProperty(JSON_PROPERTY_HAS_FORWARD_SPAM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHasForwardSpam(Boolean hasForwardSpam) {
    this.hasForwardSpam = hasForwardSpam;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestBody48 requestBody48 = (RequestBody48) o;
    return Objects.equals(this.isEnabled, requestBody48.isEnabled) &&
        equalsNullable(this.redirectAddresses, requestBody48.redirectAddresses) &&
        Objects.equals(this.hasDontDeliver, requestBody48.hasDontDeliver) &&
        Objects.equals(this.hasForwardSpam, requestBody48.hasForwardSpam);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(isEnabled, hashCodeNullable(redirectAddresses), hasDontDeliver, hasForwardSpam);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestBody48 {\n");
    sb.append("    isEnabled: ").append(toIndentedString(isEnabled)).append("\n");
    sb.append("    redirectAddresses: ").append(toIndentedString(redirectAddresses)).append("\n");
    sb.append("    hasDontDeliver: ").append(toIndentedString(hasDontDeliver)).append("\n");
    sb.append("    hasForwardSpam: ").append(toIndentedString(hasForwardSpam)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

