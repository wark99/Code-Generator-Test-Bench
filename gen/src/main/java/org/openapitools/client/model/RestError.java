/*
 * Spring PetClinic
 * Spring PetClinic Sample Application.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ValidationMessage;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * The schema for all error responses.
 */
@JsonPropertyOrder({
  RestError.JSON_PROPERTY_STATUS,
  RestError.JSON_PROPERTY_ERROR,
  RestError.JSON_PROPERTY_PATH,
  RestError.JSON_PROPERTY_TIMESTAMP,
  RestError.JSON_PROPERTY_MESSAGE,
  RestError.JSON_PROPERTY_SCHEMA_VALIDATION_ERRORS,
  RestError.JSON_PROPERTY_TRACE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T14:25:59.185079973Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RestError {
  public static final String JSON_PROPERTY_STATUS = "status";
  private Integer status;

  public static final String JSON_PROPERTY_ERROR = "error";
  private String error;

  public static final String JSON_PROPERTY_PATH = "path";
  private URI path;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private OffsetDateTime timestamp;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_SCHEMA_VALIDATION_ERRORS = "schemaValidationErrors";
  private List<ValidationMessage> schemaValidationErrors = new ArrayList<>();

  public static final String JSON_PROPERTY_TRACE = "trace";
  private String trace;

  public RestError() {
  }

  @JsonCreator
  public RestError(
    @JsonProperty(JSON_PROPERTY_STATUS) Integer status, 
    @JsonProperty(JSON_PROPERTY_ERROR) String error, 
    @JsonProperty(JSON_PROPERTY_PATH) URI path, 
    @JsonProperty(JSON_PROPERTY_TIMESTAMP) OffsetDateTime timestamp, 
    @JsonProperty(JSON_PROPERTY_MESSAGE) String message, 
    @JsonProperty(JSON_PROPERTY_TRACE) String trace
  ) {
    this();
    this.status = status;
    this.error = error;
    this.path = path;
    this.timestamp = timestamp;
    this.message = message;
    this.trace = trace;
  }

   /**
   * The HTTP status code.
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStatus() {
    return status;
  }




   /**
   * The short error message.
   * @return error
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getError() {
    return error;
  }




   /**
   * The path of the URL for this request.
   * @return path
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public URI getPath() {
    return path;
  }




   /**
   * The time the error occured.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }




   /**
   * The long error message.
   * @return message
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }




  public RestError schemaValidationErrors(List<ValidationMessage> schemaValidationErrors) {
    
    this.schemaValidationErrors = schemaValidationErrors;
    return this;
  }

  public RestError addSchemaValidationErrorsItem(ValidationMessage schemaValidationErrorsItem) {
    if (this.schemaValidationErrors == null) {
      this.schemaValidationErrors = new ArrayList<>();
    }
    this.schemaValidationErrors.add(schemaValidationErrorsItem);
    return this;
  }

   /**
   * Validation errors against the OpenAPI schema.
   * @return schemaValidationErrors
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SCHEMA_VALIDATION_ERRORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ValidationMessage> getSchemaValidationErrors() {
    return schemaValidationErrors;
  }


  @JsonProperty(JSON_PROPERTY_SCHEMA_VALIDATION_ERRORS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSchemaValidationErrors(List<ValidationMessage> schemaValidationErrors) {
    this.schemaValidationErrors = schemaValidationErrors;
  }


   /**
   * The stacktrace for this error.
   * @return trace
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTrace() {
    return trace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RestError restError = (RestError) o;
    return Objects.equals(this.status, restError.status) &&
        Objects.equals(this.error, restError.error) &&
        Objects.equals(this.path, restError.path) &&
        Objects.equals(this.timestamp, restError.timestamp) &&
        Objects.equals(this.message, restError.message) &&
        Objects.equals(this.schemaValidationErrors, restError.schemaValidationErrors) &&
        Objects.equals(this.trace, restError.trace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, error, path, timestamp, message, schemaValidationErrors, trace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RestError {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    schemaValidationErrors: ").append(toIndentedString(schemaValidationErrors)).append("\n");
    sb.append("    trace: ").append(toIndentedString(trace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

