/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Machine
 */
@JsonPropertyOrder({
  Machine.JSON_PROPERTY_NAME,
  Machine.JSON_PROPERTY_IP,
  Machine.JSON_PROPERTY_URL,
  Machine.JSON_PROPERTY_TYPE,
  Machine.JSON_PROPERTY_POOL_ID,
  Machine.JSON_PROPERTY_URL_DOMAIN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Machine {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_IP = "ip";
  private String ip;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  /**
   * Type of server
   */
  public enum TypeEnum {
    EDGE("edge"),
    
    LOAD_BALANCER("load-balancer"),
    
    MASTER("master"),
    
    RECORDER("recorder"),
    
    TIME_SHIFTER("time-shifter"),
    
    TRANSCODER("transcoder");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * Gets or Sets poolId
   */
  public enum PoolIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    PoolIdEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PoolIdEnum fromValue(Integer value) {
      for (PoolIdEnum b : PoolIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_POOL_ID = "pool_id";
  private PoolIdEnum poolId;

  public static final String JSON_PROPERTY_URL_DOMAIN = "url_domain";
  private String urlDomain;

  public Machine() {
  }

  public Machine name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the resource &#x60;Machine&#x60;
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Machine ip(String ip) {
    
    this.ip = ip;
    return this;
  }

   /**
   * Get ip
   * @return ip
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getIp() {
    return ip;
  }


  @JsonProperty(JSON_PROPERTY_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIp(String ip) {
    this.ip = ip;
  }


  public Machine url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }


  public Machine type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of server
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Machine poolId(PoolIdEnum poolId) {
    
    this.poolId = poolId;
    return this;
  }

   /**
   * Get poolId
   * @return poolId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_POOL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PoolIdEnum getPoolId() {
    return poolId;
  }


  @JsonProperty(JSON_PROPERTY_POOL_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPoolId(PoolIdEnum poolId) {
    this.poolId = poolId;
  }


  public Machine urlDomain(String urlDomain) {
    
    this.urlDomain = urlDomain;
    return this;
  }

   /**
   * Get urlDomain
   * @return urlDomain
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrlDomain() {
    return urlDomain;
  }


  @JsonProperty(JSON_PROPERTY_URL_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrlDomain(String urlDomain) {
    this.urlDomain = urlDomain;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Machine machine = (Machine) o;
    return Objects.equals(this.name, machine.name) &&
        Objects.equals(this.ip, machine.ip) &&
        Objects.equals(this.url, machine.url) &&
        Objects.equals(this.type, machine.type) &&
        Objects.equals(this.poolId, machine.poolId) &&
        Objects.equals(this.urlDomain, machine.urlDomain);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, ip, url, type, poolId, urlDomain);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Machine {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    poolId: ").append(toIndentedString(poolId)).append("\n");
    sb.append("    urlDomain: ").append(toIndentedString(urlDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

