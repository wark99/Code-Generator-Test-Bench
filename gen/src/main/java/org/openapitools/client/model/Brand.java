/*
 * Websitebuilder public API
 * Public WSB API for third party clients.   Prefix: `/api/pub/vX`. 
 *
 * The version of the OpenAPI document: 0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.BrandWsbApiUri;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Brand
 */
@JsonPropertyOrder({
  Brand.JSON_PROPERTY_CODE_NAME,
  Brand.JSON_PROPERTY_WSB_API_URI
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:57.815576076Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Brand {
  /**
   * Gets or Sets codeName
   */
  public enum CodeNameEnum {
    ONECOM("onecom"),
    
    HOSTNET("hostnet"),
    
    CHECKDOMAIN("checkdomain");

    private String value;

    CodeNameEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodeNameEnum fromValue(String value) {
      for (CodeNameEnum b : CodeNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CODE_NAME = "codeName";
  private CodeNameEnum codeName;

  public static final String JSON_PROPERTY_WSB_API_URI = "wsbApiUri";
  private BrandWsbApiUri wsbApiUri;

  public Brand() {
  }

  public Brand codeName(CodeNameEnum codeName) {
    
    this.codeName = codeName;
    return this;
  }

   /**
   * Get codeName
   * @return codeName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CODE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CodeNameEnum getCodeName() {
    return codeName;
  }


  @JsonProperty(JSON_PROPERTY_CODE_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeName(CodeNameEnum codeName) {
    this.codeName = codeName;
  }


  public Brand wsbApiUri(BrandWsbApiUri wsbApiUri) {
    
    this.wsbApiUri = wsbApiUri;
    return this;
  }

   /**
   * Get wsbApiUri
   * @return wsbApiUri
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WSB_API_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BrandWsbApiUri getWsbApiUri() {
    return wsbApiUri;
  }


  @JsonProperty(JSON_PROPERTY_WSB_API_URI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWsbApiUri(BrandWsbApiUri wsbApiUri) {
    this.wsbApiUri = wsbApiUri;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Brand brand = (Brand) o;
    return Objects.equals(this.codeName, brand.codeName) &&
        Objects.equals(this.wsbApiUri, brand.wsbApiUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(codeName, wsbApiUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Brand {\n");
    sb.append("    codeName: ").append(toIndentedString(codeName)).append("\n");
    sb.append("    wsbApiUri: ").append(toIndentedString(wsbApiUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

