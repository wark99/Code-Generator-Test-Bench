/*
 * SME Professional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.15.0-oas3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.ExtendedLinkedPropertyResponse;
import org.openapitools.client.model.MaintenancePost200ResponseValueCreatedDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PropertyNoteResponse
 */
@JsonPropertyOrder({
  PropertyNoteResponse.JSON_PROPERTY_ID,
  PropertyNoteResponse.JSON_PROPERTY_DATE,
  PropertyNoteResponse.JSON_PROPERTY_PROPERTY,
  PropertyNoteResponse.JSON_PROPERTY_TYPE_OF_NOTE,
  PropertyNoteResponse.JSON_PROPERTY_DESCRIPTION,
  PropertyNoteResponse.JSON_PROPERTY_EXPIRY_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:30.009582082Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PropertyNoteResponse {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_DATE = "date";
  private MaintenancePost200ResponseValueCreatedDate date;

  public static final String JSON_PROPERTY_PROPERTY = "property";
  private ExtendedLinkedPropertyResponse property;

  /**
   * 1 &#x3D; General, 2 &#x3D; Preferred contractor, 3 &#x3D; Gas cover, 5 &#x3D; Preferences for tenants, 8 &#x3D; Pat, 9 &#x3D; Eicr, 12 &#x3D; No gas appliances, 13 &#x3D; Gardener, 14 &#x3D; Stair cleaning, 15 &#x3D; Non resident landlord, 16 &#x3D; Factor, 17 &#x3D; Important, 18 &#x3D; General note on rent alerts, 20 &#x3D; Stopcock location, 21 &#x3D; Insurance details, 22 &#x3D; Alarm, 23 &#x3D; Parking space, 24 &#x3D; Warranties, 25 &#x3D; Holiday, 26 &#x3D; Viewing preferences, 27 &#x3D; Rent guarantee, 28 &#x3D; Additional lease clauses, 30 &#x3D; Sensitive let general, 31 &#x3D; Sensitive let financial, 32 &#x3D; Sensitive let hmo, 33 &#x3D; Sensitive let neighbours, 34 &#x3D; Sensitive let tenants, 35 &#x3D; Sensitive let owners, 40 &#x3D; Two person visit, 41 &#x3D; Development guarantee, 42 &#x3D; Vip, 45 &#x3D; Access, 46 &#x3D; Festival, 50 &#x3D; Important finance note, 51 &#x3D; Inspection note
   */
  public enum TypeOfNoteEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_5(5),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_14(14),
    
    NUMBER_15(15),
    
    NUMBER_16(16),
    
    NUMBER_17(17),
    
    NUMBER_18(18),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_25(25),
    
    NUMBER_26(26),
    
    NUMBER_27(27),
    
    NUMBER_28(28),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_33(33),
    
    NUMBER_34(34),
    
    NUMBER_35(35),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_45(45),
    
    NUMBER_46(46),
    
    NUMBER_50(50),
    
    NUMBER_51(51);

    private Integer value;

    TypeOfNoteEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeOfNoteEnum fromValue(Integer value) {
      for (TypeOfNoteEnum b : TypeOfNoteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE_OF_NOTE = "type_of_note";
  private TypeOfNoteEnum typeOfNote;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_EXPIRY_DATE = "expiry_date";
  private MaintenancePost200ResponseValueCreatedDate expiryDate;

  public PropertyNoteResponse() {
  }

  public PropertyNoteResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public PropertyNoteResponse date(MaintenancePost200ResponseValueCreatedDate date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(MaintenancePost200ResponseValueCreatedDate date) {
    this.date = date;
  }


  public PropertyNoteResponse property(ExtendedLinkedPropertyResponse property) {
    
    this.property = property;
    return this;
  }

   /**
   * Get property
   * @return property
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExtendedLinkedPropertyResponse getProperty() {
    return property;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProperty(ExtendedLinkedPropertyResponse property) {
    this.property = property;
  }


  public PropertyNoteResponse typeOfNote(TypeOfNoteEnum typeOfNote) {
    
    this.typeOfNote = typeOfNote;
    return this;
  }

   /**
   * 1 &#x3D; General, 2 &#x3D; Preferred contractor, 3 &#x3D; Gas cover, 5 &#x3D; Preferences for tenants, 8 &#x3D; Pat, 9 &#x3D; Eicr, 12 &#x3D; No gas appliances, 13 &#x3D; Gardener, 14 &#x3D; Stair cleaning, 15 &#x3D; Non resident landlord, 16 &#x3D; Factor, 17 &#x3D; Important, 18 &#x3D; General note on rent alerts, 20 &#x3D; Stopcock location, 21 &#x3D; Insurance details, 22 &#x3D; Alarm, 23 &#x3D; Parking space, 24 &#x3D; Warranties, 25 &#x3D; Holiday, 26 &#x3D; Viewing preferences, 27 &#x3D; Rent guarantee, 28 &#x3D; Additional lease clauses, 30 &#x3D; Sensitive let general, 31 &#x3D; Sensitive let financial, 32 &#x3D; Sensitive let hmo, 33 &#x3D; Sensitive let neighbours, 34 &#x3D; Sensitive let tenants, 35 &#x3D; Sensitive let owners, 40 &#x3D; Two person visit, 41 &#x3D; Development guarantee, 42 &#x3D; Vip, 45 &#x3D; Access, 46 &#x3D; Festival, 50 &#x3D; Important finance note, 51 &#x3D; Inspection note
   * @return typeOfNote
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE_OF_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeOfNoteEnum getTypeOfNote() {
    return typeOfNote;
  }


  @JsonProperty(JSON_PROPERTY_TYPE_OF_NOTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTypeOfNote(TypeOfNoteEnum typeOfNote) {
    this.typeOfNote = typeOfNote;
  }


  public PropertyNoteResponse description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public PropertyNoteResponse expiryDate(MaintenancePost200ResponseValueCreatedDate expiryDate) {
    
    this.expiryDate = expiryDate;
    return this;
  }

   /**
   * Get expiryDate
   * @return expiryDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getExpiryDate() {
    return expiryDate;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiryDate(MaintenancePost200ResponseValueCreatedDate expiryDate) {
    this.expiryDate = expiryDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyNoteResponse propertyNoteResponse = (PropertyNoteResponse) o;
    return Objects.equals(this.id, propertyNoteResponse.id) &&
        Objects.equals(this.date, propertyNoteResponse.date) &&
        Objects.equals(this.property, propertyNoteResponse.property) &&
        Objects.equals(this.typeOfNote, propertyNoteResponse.typeOfNote) &&
        Objects.equals(this.description, propertyNoteResponse.description) &&
        Objects.equals(this.expiryDate, propertyNoteResponse.expiryDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, date, property, typeOfNote, description, expiryDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyNoteResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    property: ").append(toIndentedString(property)).append("\n");
    sb.append("    typeOfNote: ").append(toIndentedString(typeOfNote)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expiryDate: ").append(toIndentedString(expiryDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

