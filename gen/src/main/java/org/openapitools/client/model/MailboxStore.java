/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Mailbox;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MailboxStore
 */
@JsonPropertyOrder({
  MailboxStore.JSON_PROPERTY_MAILBOX,
  MailboxStore.JSON_PROPERTY_QUOTA,
  MailboxStore.JSON_PROPERTY_USED,
  MailboxStore.JSON_PROPERTY_TOTAL,
  MailboxStore.JSON_PROPERTY_EXISTING_USER_EMAIL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class MailboxStore {
  public static final String JSON_PROPERTY_MAILBOX = "mailbox";
  private Mailbox mailbox;

  public static final String JSON_PROPERTY_QUOTA = "quota";
  private Integer quota;

  public static final String JSON_PROPERTY_USED = "used";
  private Integer used;

  public static final String JSON_PROPERTY_TOTAL = "total";
  private Integer total;

  public static final String JSON_PROPERTY_EXISTING_USER_EMAIL = "existing_user_email";
  private Boolean existingUserEmail;

  public MailboxStore() {
  }

  public MailboxStore mailbox(Mailbox mailbox) {
    
    this.mailbox = mailbox;
    return this;
  }

   /**
   * Get mailbox
   * @return mailbox
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAILBOX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Mailbox getMailbox() {
    return mailbox;
  }


  @JsonProperty(JSON_PROPERTY_MAILBOX)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMailbox(Mailbox mailbox) {
    this.mailbox = mailbox;
  }


  public MailboxStore quota(Integer quota) {
    
    this.quota = quota;
    return this;
  }

   /**
   * Service mail quota  
   * @return quota
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_QUOTA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getQuota() {
    return quota;
  }


  @JsonProperty(JSON_PROPERTY_QUOTA)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setQuota(Integer quota) {
    this.quota = quota;
  }


  public MailboxStore used(Integer used) {
    
    this.used = used;
    return this;
  }

   /**
   * Number of existing mailboxes linked to this service  
   * @return used
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUsed() {
    return used;
  }


  @JsonProperty(JSON_PROPERTY_USED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsed(Integer used) {
    this.used = used;
  }


  public MailboxStore total(Integer total) {
    
    this.total = total;
    return this;
  }

   /**
   * New number of mailboxes linked to this service  
   * @return total
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotal() {
    return total;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotal(Integer total) {
    this.total = total;
  }


  public MailboxStore existingUserEmail(Boolean existingUserEmail) {
    
    this.existingUserEmail = existingUserEmail;
    return this;
  }

   /**
   * True when user exists for email and target is other_user  
   * @return existingUserEmail
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXISTING_USER_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getExistingUserEmail() {
    return existingUserEmail;
  }


  @JsonProperty(JSON_PROPERTY_EXISTING_USER_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExistingUserEmail(Boolean existingUserEmail) {
    this.existingUserEmail = existingUserEmail;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MailboxStore mailboxStore = (MailboxStore) o;
    return Objects.equals(this.mailbox, mailboxStore.mailbox) &&
        Objects.equals(this.quota, mailboxStore.quota) &&
        Objects.equals(this.used, mailboxStore.used) &&
        Objects.equals(this.total, mailboxStore.total) &&
        Objects.equals(this.existingUserEmail, mailboxStore.existingUserEmail);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailbox, quota, used, total, existingUserEmail);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MailboxStore {\n");
    sb.append("    mailbox: ").append(toIndentedString(mailbox)).append("\n");
    sb.append("    quota: ").append(toIndentedString(quota)).append("\n");
    sb.append("    used: ").append(toIndentedString(used)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("    existingUserEmail: ").append(toIndentedString(existingUserEmail)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

