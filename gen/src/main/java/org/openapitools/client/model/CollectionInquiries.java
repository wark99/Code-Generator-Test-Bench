/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.DateOfExpiration;
import org.openapitools.client.model.Names;
import org.openapitools.client.model.Subscriber4;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CollectionInquiries
 */
@JsonPropertyOrder({
  CollectionInquiries.JSON_PROPERTY_ACCOUNT_TYPE,
  CollectionInquiries.JSON_PROPERTY_DATE,
  CollectionInquiries.JSON_PROPERTY_ECOADESIGNATOR,
  CollectionInquiries.JSON_PROPERTY_REQUESTOR,
  CollectionInquiries.JSON_PROPERTY_SUBSCRIBER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CollectionInquiries {
  public static final String JSON_PROPERTY_ACCOUNT_TYPE = "accountType";
  private String accountType;

  public static final String JSON_PROPERTY_DATE = "date";
  private DateOfExpiration date;

  public static final String JSON_PROPERTY_ECOADESIGNATOR = "ecoadesignator";
  private String ecoadesignator;

  public static final String JSON_PROPERTY_REQUESTOR = "requestor";
  private Names requestor;

  public static final String JSON_PROPERTY_SUBSCRIBER = "subscriber";
  private Subscriber4 subscriber;

  public CollectionInquiries() {
  }

  public CollectionInquiries accountType(String accountType) {
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAccountType() {
    return accountType;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccountType(String accountType) {
    this.accountType = accountType;
  }


  public CollectionInquiries date(DateOfExpiration date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateOfExpiration getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(DateOfExpiration date) {
    this.date = date;
  }


  public CollectionInquiries ecoadesignator(String ecoadesignator) {
    
    this.ecoadesignator = ecoadesignator;
    return this;
  }

   /**
   * Get ecoadesignator
   * @return ecoadesignator
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ECOADESIGNATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEcoadesignator() {
    return ecoadesignator;
  }


  @JsonProperty(JSON_PROPERTY_ECOADESIGNATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEcoadesignator(String ecoadesignator) {
    this.ecoadesignator = ecoadesignator;
  }


  public CollectionInquiries requestor(Names requestor) {
    
    this.requestor = requestor;
    return this;
  }

   /**
   * Get requestor
   * @return requestor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REQUESTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Names getRequestor() {
    return requestor;
  }


  @JsonProperty(JSON_PROPERTY_REQUESTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestor(Names requestor) {
    this.requestor = requestor;
  }


  public CollectionInquiries subscriber(Subscriber4 subscriber) {
    
    this.subscriber = subscriber;
    return this;
  }

   /**
   * Get subscriber
   * @return subscriber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBSCRIBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Subscriber4 getSubscriber() {
    return subscriber;
  }


  @JsonProperty(JSON_PROPERTY_SUBSCRIBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubscriber(Subscriber4 subscriber) {
    this.subscriber = subscriber;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CollectionInquiries collectionInquiries = (CollectionInquiries) o;
    return Objects.equals(this.accountType, collectionInquiries.accountType) &&
        Objects.equals(this.date, collectionInquiries.date) &&
        Objects.equals(this.ecoadesignator, collectionInquiries.ecoadesignator) &&
        Objects.equals(this.requestor, collectionInquiries.requestor) &&
        Objects.equals(this.subscriber, collectionInquiries.subscriber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountType, date, ecoadesignator, requestor, subscriber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CollectionInquiries {\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    ecoadesignator: ").append(toIndentedString(ecoadesignator)).append("\n");
    sb.append("    requestor: ").append(toIndentedString(requestor)).append("\n");
    sb.append("    subscriber: ").append(toIndentedString(subscriber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

