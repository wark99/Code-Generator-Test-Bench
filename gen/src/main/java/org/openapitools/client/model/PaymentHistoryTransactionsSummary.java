/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Top-level summary of transactions
 */
@JsonPropertyOrder({
  PaymentHistoryTransactionsSummary.JSON_PROPERTY_TOTAL_NON_SUFFICIENT_FUNDS,
  PaymentHistoryTransactionsSummary.JSON_PROPERTY_AVERAGE_MONTHLY_NON_SUFFICIENT_FUNDS,
  PaymentHistoryTransactionsSummary.JSON_PROPERTY_TOTAL_DEPOSITS,
  PaymentHistoryTransactionsSummary.JSON_PROPERTY_AVERAGE_MONTHLY_DEPOSITS,
  PaymentHistoryTransactionsSummary.JSON_PROPERTY_TOTAL_WITHDRAWALS,
  PaymentHistoryTransactionsSummary.JSON_PROPERTY_AVERAGE_MONTHLY_WITHDRAWALS,
  PaymentHistoryTransactionsSummary.JSON_PROPERTY_BEGIN_DATE,
  PaymentHistoryTransactionsSummary.JSON_PROPERTY_END_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T12:47:14.152745765Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PaymentHistoryTransactionsSummary {
  public static final String JSON_PROPERTY_TOTAL_NON_SUFFICIENT_FUNDS = "totalNonSufficientFunds";
  private BigDecimal totalNonSufficientFunds;

  public static final String JSON_PROPERTY_AVERAGE_MONTHLY_NON_SUFFICIENT_FUNDS = "averageMonthlyNonSufficientFunds";
  private BigDecimal averageMonthlyNonSufficientFunds;

  public static final String JSON_PROPERTY_TOTAL_DEPOSITS = "totalDeposits";
  private BigDecimal totalDeposits;

  public static final String JSON_PROPERTY_AVERAGE_MONTHLY_DEPOSITS = "averageMonthlyDeposits";
  private BigDecimal averageMonthlyDeposits;

  public static final String JSON_PROPERTY_TOTAL_WITHDRAWALS = "totalWithdrawals";
  private BigDecimal totalWithdrawals;

  public static final String JSON_PROPERTY_AVERAGE_MONTHLY_WITHDRAWALS = "averageMonthlyWithdrawals";
  private BigDecimal averageMonthlyWithdrawals;

  public static final String JSON_PROPERTY_BEGIN_DATE = "beginDate";
  private String beginDate;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private String endDate;

  public PaymentHistoryTransactionsSummary() {
  }

  public PaymentHistoryTransactionsSummary totalNonSufficientFunds(BigDecimal totalNonSufficientFunds) {
    
    this.totalNonSufficientFunds = totalNonSufficientFunds;
    return this;
  }

   /**
   * Total of NSF transactions
   * @return totalNonSufficientFunds
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_NON_SUFFICIENT_FUNDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getTotalNonSufficientFunds() {
    return totalNonSufficientFunds;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_NON_SUFFICIENT_FUNDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalNonSufficientFunds(BigDecimal totalNonSufficientFunds) {
    this.totalNonSufficientFunds = totalNonSufficientFunds;
  }


  public PaymentHistoryTransactionsSummary averageMonthlyNonSufficientFunds(BigDecimal averageMonthlyNonSufficientFunds) {
    
    this.averageMonthlyNonSufficientFunds = averageMonthlyNonSufficientFunds;
    return this;
  }

   /**
   * Monthly average of NSF transactions
   * @return averageMonthlyNonSufficientFunds
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_MONTHLY_NON_SUFFICIENT_FUNDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageMonthlyNonSufficientFunds() {
    return averageMonthlyNonSufficientFunds;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_MONTHLY_NON_SUFFICIENT_FUNDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageMonthlyNonSufficientFunds(BigDecimal averageMonthlyNonSufficientFunds) {
    this.averageMonthlyNonSufficientFunds = averageMonthlyNonSufficientFunds;
  }


  public PaymentHistoryTransactionsSummary totalDeposits(BigDecimal totalDeposits) {
    
    this.totalDeposits = totalDeposits;
    return this;
  }

   /**
   * Total of deposit transactions
   * @return totalDeposits
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getTotalDeposits() {
    return totalDeposits;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalDeposits(BigDecimal totalDeposits) {
    this.totalDeposits = totalDeposits;
  }


  public PaymentHistoryTransactionsSummary averageMonthlyDeposits(BigDecimal averageMonthlyDeposits) {
    
    this.averageMonthlyDeposits = averageMonthlyDeposits;
    return this;
  }

   /**
   * Monthly average of deposit transactions
   * @return averageMonthlyDeposits
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_MONTHLY_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageMonthlyDeposits() {
    return averageMonthlyDeposits;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_MONTHLY_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageMonthlyDeposits(BigDecimal averageMonthlyDeposits) {
    this.averageMonthlyDeposits = averageMonthlyDeposits;
  }


  public PaymentHistoryTransactionsSummary totalWithdrawals(BigDecimal totalWithdrawals) {
    
    this.totalWithdrawals = totalWithdrawals;
    return this;
  }

   /**
   * Total of withdrawals transactions
   * @return totalWithdrawals
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_WITHDRAWALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getTotalWithdrawals() {
    return totalWithdrawals;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_WITHDRAWALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalWithdrawals(BigDecimal totalWithdrawals) {
    this.totalWithdrawals = totalWithdrawals;
  }


  public PaymentHistoryTransactionsSummary averageMonthlyWithdrawals(BigDecimal averageMonthlyWithdrawals) {
    
    this.averageMonthlyWithdrawals = averageMonthlyWithdrawals;
    return this;
  }

   /**
   * Monthly average of withdrawal transactions
   * @return averageMonthlyWithdrawals
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_MONTHLY_WITHDRAWALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageMonthlyWithdrawals() {
    return averageMonthlyWithdrawals;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_MONTHLY_WITHDRAWALS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageMonthlyWithdrawals(BigDecimal averageMonthlyWithdrawals) {
    this.averageMonthlyWithdrawals = averageMonthlyWithdrawals;
  }


  public PaymentHistoryTransactionsSummary beginDate(String beginDate) {
    
    this.beginDate = beginDate;
    return this;
  }

   /**
   * ISO-8601 date of earliest transaction
   * @return beginDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BEGIN_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBeginDate() {
    return beginDate;
  }


  @JsonProperty(JSON_PROPERTY_BEGIN_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBeginDate(String beginDate) {
    this.beginDate = beginDate;
  }


  public PaymentHistoryTransactionsSummary endDate(String endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * ISO-8601 date of latest transaction
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentHistoryTransactionsSummary paymentHistoryTransactionsSummary = (PaymentHistoryTransactionsSummary) o;
    return Objects.equals(this.totalNonSufficientFunds, paymentHistoryTransactionsSummary.totalNonSufficientFunds) &&
        Objects.equals(this.averageMonthlyNonSufficientFunds, paymentHistoryTransactionsSummary.averageMonthlyNonSufficientFunds) &&
        Objects.equals(this.totalDeposits, paymentHistoryTransactionsSummary.totalDeposits) &&
        Objects.equals(this.averageMonthlyDeposits, paymentHistoryTransactionsSummary.averageMonthlyDeposits) &&
        Objects.equals(this.totalWithdrawals, paymentHistoryTransactionsSummary.totalWithdrawals) &&
        Objects.equals(this.averageMonthlyWithdrawals, paymentHistoryTransactionsSummary.averageMonthlyWithdrawals) &&
        Objects.equals(this.beginDate, paymentHistoryTransactionsSummary.beginDate) &&
        Objects.equals(this.endDate, paymentHistoryTransactionsSummary.endDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalNonSufficientFunds, averageMonthlyNonSufficientFunds, totalDeposits, averageMonthlyDeposits, totalWithdrawals, averageMonthlyWithdrawals, beginDate, endDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentHistoryTransactionsSummary {\n");
    sb.append("    totalNonSufficientFunds: ").append(toIndentedString(totalNonSufficientFunds)).append("\n");
    sb.append("    averageMonthlyNonSufficientFunds: ").append(toIndentedString(averageMonthlyNonSufficientFunds)).append("\n");
    sb.append("    totalDeposits: ").append(toIndentedString(totalDeposits)).append("\n");
    sb.append("    averageMonthlyDeposits: ").append(toIndentedString(averageMonthlyDeposits)).append("\n");
    sb.append("    totalWithdrawals: ").append(toIndentedString(totalWithdrawals)).append("\n");
    sb.append("    averageMonthlyWithdrawals: ").append(toIndentedString(averageMonthlyWithdrawals)).append("\n");
    sb.append("    beginDate: ").append(toIndentedString(beginDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

