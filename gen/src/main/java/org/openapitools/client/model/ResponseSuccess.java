/*
 * Proxy API Adapter
 * Convert standard OpenAPI requests to Internal API s**t show, respond with normalized data and messaging
 *
 * The version of the OpenAPI document: 1.1.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.ResponseSuccessArray;
import org.openapitools.client.model.ResponseSuccessArrayObjects;
import org.openapitools.client.model.ResponseSuccessBoolean;
import org.openapitools.client.model.ResponseSuccessDouble;
import org.openapitools.client.model.ResponseSuccessInteger;
import org.openapitools.client.model.ResponseSuccessNumber;
import org.openapitools.client.model.ResponseSuccessObject;
import org.openapitools.client.model.ResponseSuccessString;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ResponseSuccess
 */
@JsonPropertyOrder({
  ResponseSuccess.JSON_PROPERTY_SUCCESS,
  ResponseSuccess.JSON_PROPERTY_DATA
})
@JsonTypeName("Response.Success")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:17:03.349465965Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ResponseSuccess {
  public static final String JSON_PROPERTY_SUCCESS = "success";
  private JsonNullable<Object> success = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_DATA = "data";
  private JsonNullable<Object> data = JsonNullable.<Object>of(null);

  public ResponseSuccess() {
  }

  public ResponseSuccess success(Object success) {
    this.success = JsonNullable.<Object>of(success);
    
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getSuccess() {
        return success.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SUCCESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getSuccess_JsonNullable() {
    return success;
  }
  
  @JsonProperty(JSON_PROPERTY_SUCCESS)
  public void setSuccess_JsonNullable(JsonNullable<Object> success) {
    this.success = success;
  }

  public void setSuccess(Object success) {
    this.success = JsonNullable.<Object>of(success);
  }


  public ResponseSuccess data(Object data) {
    this.data = JsonNullable.<Object>of(data);
    
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getData() {
        return data.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getData_JsonNullable() {
    return data;
  }
  
  @JsonProperty(JSON_PROPERTY_DATA)
  public void setData_JsonNullable(JsonNullable<Object> data) {
    this.data = data;
  }

  public void setData(Object data) {
    this.data = JsonNullable.<Object>of(data);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResponseSuccess responseSuccess = (ResponseSuccess) o;
    return equalsNullable(this.success, responseSuccess.success) &&
        equalsNullable(this.data, responseSuccess.data);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(success), hashCodeNullable(data));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResponseSuccess {\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

