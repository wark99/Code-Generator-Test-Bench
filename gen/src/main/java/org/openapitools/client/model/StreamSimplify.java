/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StreamSimplify
 */
@JsonPropertyOrder({
  StreamSimplify.JSON_PROPERTY_ID,
  StreamSimplify.JSON_PROPERTY_TYPE,
  StreamSimplify.JSON_PROPERTY_MOUNTPOINT,
  StreamSimplify.JSON_PROPERTY_CODEC,
  StreamSimplify.JSON_PROPERTY_BITRATE,
  StreamSimplify.JSON_PROPERTY_IS_SOURCE,
  StreamSimplify.JSON_PROPERTY_IS_FALLBACK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StreamSimplify {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_MOUNTPOINT = "mountpoint";
  private String mountpoint;

  public static final String JSON_PROPERTY_CODEC = "codec";
  private Integer codec;

  public static final String JSON_PROPERTY_BITRATE = "bitrate";
  private String bitrate;

  public static final String JSON_PROPERTY_IS_SOURCE = "is_source";
  private Boolean isSource;

  public static final String JSON_PROPERTY_IS_FALLBACK = "is_fallback";
  private Boolean isFallback;

  public StreamSimplify() {
  }

  public StreamSimplify id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;Stream&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public StreamSimplify type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of stream
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public StreamSimplify mountpoint(String mountpoint) {
    
    this.mountpoint = mountpoint;
    return this;
  }

   /**
   * The mountpoint to access to the stream
   * @return mountpoint
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MOUNTPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMountpoint() {
    return mountpoint;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMountpoint(String mountpoint) {
    this.mountpoint = mountpoint;
  }


  public StreamSimplify codec(Integer codec) {
    
    this.codec = codec;
    return this;
  }

   /**
   * The codec used in the stream
   * @return codec
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCodec() {
    return codec;
  }


  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCodec(Integer codec) {
    this.codec = codec;
  }


  public StreamSimplify bitrate(String bitrate) {
    
    this.bitrate = bitrate;
    return this;
  }

   /**
   * The bitrate used to in the stream
   * @return bitrate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getBitrate() {
    return bitrate;
  }


  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBitrate(String bitrate) {
    this.bitrate = bitrate;
  }


  public StreamSimplify isSource(Boolean isSource) {
    
    this.isSource = isSource;
    return this;
  }

   /**
   * Define if the stream is used like a source for HlsStream or Transcoding
   * @return isSource
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsSource() {
    return isSource;
  }


  @JsonProperty(JSON_PROPERTY_IS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsSource(Boolean isSource) {
    this.isSource = isSource;
  }


  public StreamSimplify isFallback(Boolean isFallback) {
    
    this.isFallback = isFallback;
    return this;
  }

   /**
   * Is the &#x60;Stream&#x60; is a fallback?
   * @return isFallback
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_FALLBACK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsFallback() {
    return isFallback;
  }


  @JsonProperty(JSON_PROPERTY_IS_FALLBACK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsFallback(Boolean isFallback) {
    this.isFallback = isFallback;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamSimplify streamSimplify = (StreamSimplify) o;
    return Objects.equals(this.id, streamSimplify.id) &&
        Objects.equals(this.type, streamSimplify.type) &&
        Objects.equals(this.mountpoint, streamSimplify.mountpoint) &&
        Objects.equals(this.codec, streamSimplify.codec) &&
        Objects.equals(this.bitrate, streamSimplify.bitrate) &&
        Objects.equals(this.isSource, streamSimplify.isSource) &&
        Objects.equals(this.isFallback, streamSimplify.isFallback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, mountpoint, codec, bitrate, isSource, isFallback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamSimplify {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    mountpoint: ").append(toIndentedString(mountpoint)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    isSource: ").append(toIndentedString(isSource)).append("\n");
    sb.append("    isFallback: ").append(toIndentedString(isFallback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

