/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Descriptor;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PaymentInstruction
 */
@JsonPropertyOrder({
  PaymentInstruction.JSON_PROPERTY_TYPE,
  PaymentInstruction.JSON_PROPERTY_ACCOUNT_NUMBER,
  PaymentInstruction.JSON_PROPERTY_DESCRIPTORS,
  PaymentInstruction.JSON_PROPERTY_TRANSFER_IN_ENABLED,
  PaymentInstruction.JSON_PROPERTY_TRANSFER_OUT_ENABLED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T12:50:32.834459740Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PaymentInstruction {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_ACCOUNT_NUMBER = "accountNumber";
  private String accountNumber;

  public static final String JSON_PROPERTY_DESCRIPTORS = "descriptors";
  private List<Descriptor> descriptors;

  public static final String JSON_PROPERTY_TRANSFER_IN_ENABLED = "transferInEnabled";
  private Boolean transferInEnabled;

  public static final String JSON_PROPERTY_TRANSFER_OUT_ENABLED = "transferOutEnabled";
  private Boolean transferOutEnabled;

  public PaymentInstruction() {
  }

  public PaymentInstruction type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of payment instruction: 1. ACH: when payment instruction type is ACH (Automated Clearing House) 2. RTP: when payment instruction type is RTP (Real-Time Payments)
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public PaymentInstruction accountNumber(String accountNumber) {
    
    this.accountNumber = accountNumber;
    return this;
  }

   /**
   * The account number from the institution
   * @return accountNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccountNumber() {
    return accountNumber;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountNumber(String accountNumber) {
    this.accountNumber = accountNumber;
  }


  public PaymentInstruction descriptors(List<Descriptor> descriptors) {
    
    this.descriptors = descriptors;
    return this;
  }

  public PaymentInstruction addDescriptorsItem(Descriptor descriptorsItem) {
    if (this.descriptors == null) {
      this.descriptors = new ArrayList<>();
    }
    this.descriptors.add(descriptorsItem);
    return this;
  }

   /**
   * List of descriptors
   * @return descriptors
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Descriptor> getDescriptors() {
    return descriptors;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescriptors(List<Descriptor> descriptors) {
    this.descriptors = descriptors;
  }


  public PaymentInstruction transferInEnabled(Boolean transferInEnabled) {
    
    this.transferInEnabled = transferInEnabled;
    return this;
  }

   /**
   * Indicates whether transfer to this account is enabled or not. Applicable for \&quot;RTP\&quot; type only.
   * @return transferInEnabled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSFER_IN_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTransferInEnabled() {
    return transferInEnabled;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFER_IN_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransferInEnabled(Boolean transferInEnabled) {
    this.transferInEnabled = transferInEnabled;
  }


  public PaymentInstruction transferOutEnabled(Boolean transferOutEnabled) {
    
    this.transferOutEnabled = transferOutEnabled;
    return this;
  }

   /**
   * Indicates whether transfer from this account is enabled or not. Applicable for \&quot;RTP\&quot; type only.
   * @return transferOutEnabled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSFER_OUT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTransferOutEnabled() {
    return transferOutEnabled;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFER_OUT_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransferOutEnabled(Boolean transferOutEnabled) {
    this.transferOutEnabled = transferOutEnabled;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PaymentInstruction paymentInstruction = (PaymentInstruction) o;
    return Objects.equals(this.type, paymentInstruction.type) &&
        Objects.equals(this.accountNumber, paymentInstruction.accountNumber) &&
        Objects.equals(this.descriptors, paymentInstruction.descriptors) &&
        Objects.equals(this.transferInEnabled, paymentInstruction.transferInEnabled) &&
        Objects.equals(this.transferOutEnabled, paymentInstruction.transferOutEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, accountNumber, descriptors, transferInEnabled, transferOutEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PaymentInstruction {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    accountNumber: ").append(toIndentedString(accountNumber)).append("\n");
    sb.append("    descriptors: ").append(toIndentedString(descriptors)).append("\n");
    sb.append("    transferInEnabled: ").append(toIndentedString(transferInEnabled)).append("\n");
    sb.append("    transferOutEnabled: ").append(toIndentedString(transferOutEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

