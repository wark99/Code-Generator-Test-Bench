/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AsyncTask
 */
@JsonPropertyOrder({
  AsyncTask.JSON_PROPERTY_UUID,
  AsyncTask.JSON_PROPERTY_STATUS,
  AsyncTask.JSON_PROPERTY_CREATED_AT,
  AsyncTask.JSON_PROPERTY_UPDATED_AT,
  AsyncTask.JSON_PROPERTY_EXECUTED_AT,
  AsyncTask.JSON_PROPERTY_FINISHED_AT,
  AsyncTask.JSON_PROPERTY_RESPONSE,
  AsyncTask.JSON_PROPERTY_ERROR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AsyncTask {
  public static final String JSON_PROPERTY_UUID = "uuid";
  private UUID uuid;

  /**
   * Status of the resource &#x60;Async Task&#x60;
   */
  public enum StatusEnum {
    EXECUTED("executed"),
    
    FAILED("failed"),
    
    RUNNING("running"),
    
    SPOOLED("spooled");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private Integer updatedAt;

  public static final String JSON_PROPERTY_EXECUTED_AT = "executed_at";
  private Integer executedAt;

  public static final String JSON_PROPERTY_FINISHED_AT = "finished_at";
  private Integer finishedAt;

  public static final String JSON_PROPERTY_RESPONSE = "response";
  private Object response;

  public static final String JSON_PROPERTY_ERROR = "error";
  private Object error;

  public AsyncTask() {
  }

  public AsyncTask uuid(UUID uuid) {
    
    this.uuid = uuid;
    return this;
  }

   /**
   * Universally unique identifier of the resource &#x60;Async Task&#x60;
   * @return uuid
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getUuid() {
    return uuid;
  }


  @JsonProperty(JSON_PROPERTY_UUID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUuid(UUID uuid) {
    this.uuid = uuid;
  }


  public AsyncTask status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the resource &#x60;Async Task&#x60;
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public AsyncTask createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp &#x60;Async Task&#x60; has been created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public AsyncTask updatedAt(Integer updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Timestamp &#x60;Async Task&#x60; has been updated
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(Integer updatedAt) {
    this.updatedAt = updatedAt;
  }


  public AsyncTask executedAt(Integer executedAt) {
    
    this.executedAt = executedAt;
    return this;
  }

   /**
   * Timestamp &#x60;Async Task&#x60; has been executed
   * @return executedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXECUTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExecutedAt() {
    return executedAt;
  }


  @JsonProperty(JSON_PROPERTY_EXECUTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExecutedAt(Integer executedAt) {
    this.executedAt = executedAt;
  }


  public AsyncTask finishedAt(Integer finishedAt) {
    
    this.finishedAt = finishedAt;
    return this;
  }

   /**
   * Timestamp &#x60;Async Task&#x60; is finished
   * @return finishedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FINISHED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFinishedAt() {
    return finishedAt;
  }


  @JsonProperty(JSON_PROPERTY_FINISHED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFinishedAt(Integer finishedAt) {
    this.finishedAt = finishedAt;
  }


  public AsyncTask response(Object response) {
    
    this.response = response;
    return this;
  }

   /**
   * Asynchronous response result
   * @return response
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getResponse() {
    return response;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResponse(Object response) {
    this.response = response;
  }


  public AsyncTask error(Object error) {
    
    this.error = error;
    return this;
  }

   /**
   * Asynchronous error result
   * @return error
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getError() {
    return error;
  }


  @JsonProperty(JSON_PROPERTY_ERROR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setError(Object error) {
    this.error = error;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AsyncTask asyncTask = (AsyncTask) o;
    return Objects.equals(this.uuid, asyncTask.uuid) &&
        Objects.equals(this.status, asyncTask.status) &&
        Objects.equals(this.createdAt, asyncTask.createdAt) &&
        Objects.equals(this.updatedAt, asyncTask.updatedAt) &&
        Objects.equals(this.executedAt, asyncTask.executedAt) &&
        Objects.equals(this.finishedAt, asyncTask.finishedAt) &&
        Objects.equals(this.response, asyncTask.response) &&
        Objects.equals(this.error, asyncTask.error);
  }

  @Override
  public int hashCode() {
    return Objects.hash(uuid, status, createdAt, updatedAt, executedAt, finishedAt, response, error);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AsyncTask {\n");
    sb.append("    uuid: ").append(toIndentedString(uuid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    executedAt: ").append(toIndentedString(executedAt)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    response: ").append(toIndentedString(response)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

