/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.TransactionsFiltersAkoya;
import org.openapitools.client.model.TransactionsFiltersFinicity;
import org.openapitools.client.model.TransactionsFiltersMx;
import org.openapitools.client.model.TransactionsFiltersYodlee;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TransactionsFiltersParameter
 */
@JsonPropertyOrder({
  TransactionsFiltersParameter.JSON_PROPERTY_ACCOUNT_ID,
  TransactionsFiltersParameter.JSON_PROPERTY_CONSUMER_ID,
  TransactionsFiltersParameter.JSON_PROPERTY_FROM_DATE,
  TransactionsFiltersParameter.JSON_PROPERTY_TO_DATE,
  TransactionsFiltersParameter.JSON_PROPERTY_START,
  TransactionsFiltersParameter.JSON_PROPERTY_LIMIT,
  TransactionsFiltersParameter.JSON_PROPERTY_SORT,
  TransactionsFiltersParameter.JSON_PROPERTY_INCLUDE_PENDING,
  TransactionsFiltersParameter.JSON_PROPERTY_PAGE,
  TransactionsFiltersParameter.JSON_PROPERTY_RECORDS_PER_PAGE,
  TransactionsFiltersParameter.JSON_PROPERTY_SKIP,
  TransactionsFiltersParameter.JSON_PROPERTY_TOP,
  TransactionsFiltersParameter.JSON_PROPERTY_START_TIME,
  TransactionsFiltersParameter.JSON_PROPERTY_END_TIME,
  TransactionsFiltersParameter.JSON_PROPERTY_OFFSET
})
@JsonTypeName("transactions_filters_parameter")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class TransactionsFiltersParameter {
  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  private Object accountId = null;

  public static final String JSON_PROPERTY_CONSUMER_ID = "consumer_id";
  private Object consumerId = null;

  public static final String JSON_PROPERTY_FROM_DATE = "from_date";
  private Object fromDate = null;

  public static final String JSON_PROPERTY_TO_DATE = "to_date";
  private Object toDate = null;

  public static final String JSON_PROPERTY_START = "start";
  private Object start = null;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  private Object limit = null;

  /**
   * Gets or Sets sort
   */
  public enum SortEnum {
    DESC("desc"),
    
    ASC("asc");

    private Object value;

    SortEnum(Object value) {
      this.value = value;
    }

    @JsonValue
    public Object getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SortEnum fromValue(Object value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }
  }

  public static final String JSON_PROPERTY_SORT = "sort";
  private SortEnum sort = null;

  public static final String JSON_PROPERTY_INCLUDE_PENDING = "include_pending";
  private Object includePending = null;

  public static final String JSON_PROPERTY_PAGE = "page";
  private Object page = null;

  public static final String JSON_PROPERTY_RECORDS_PER_PAGE = "records_per_page";
  private Object recordsPerPage = null;

  public static final String JSON_PROPERTY_SKIP = "skip";
  private Object skip = null;

  public static final String JSON_PROPERTY_TOP = "top";
  private Object top = null;

  public static final String JSON_PROPERTY_START_TIME = "start_time";
  private Object startTime = null;

  public static final String JSON_PROPERTY_END_TIME = "end_time";
  private Object endTime = null;

  public static final String JSON_PROPERTY_OFFSET = "offset";
  private Object offset = null;

  public TransactionsFiltersParameter() {
  }

  public TransactionsFiltersParameter accountId(Object accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Must be obtained from List ConsumerAccounts.
   * @return accountId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(Object accountId) {
    this.accountId = accountId;
  }


  public TransactionsFiltersParameter consumerId(Object consumerId) {
    
    this.consumerId = consumerId;
    return this;
  }

   /**
   * Get consumerId
   * @return consumerId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSUMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getConsumerId() {
    return consumerId;
  }


  @JsonProperty(JSON_PROPERTY_CONSUMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConsumerId(Object consumerId) {
    this.consumerId = consumerId;
  }


  public TransactionsFiltersParameter fromDate(Object fromDate) {
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * YYYY-MM-DD
   * @return fromDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getFromDate() {
    return fromDate;
  }


  @JsonProperty(JSON_PROPERTY_FROM_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromDate(Object fromDate) {
    this.fromDate = fromDate;
  }


  public TransactionsFiltersParameter toDate(Object toDate) {
    
    this.toDate = toDate;
    return this;
  }

   /**
   * YYYY-MM-DD
   * @return toDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getToDate() {
    return toDate;
  }


  @JsonProperty(JSON_PROPERTY_TO_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToDate(Object toDate) {
    this.toDate = toDate;
  }


  public TransactionsFiltersParameter start(Object start) {
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * minimum: 1
   * @return start
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(Object start) {
    this.start = start;
  }


  public TransactionsFiltersParameter limit(Object limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * @return limit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimit(Object limit) {
    this.limit = limit;
  }


  public TransactionsFiltersParameter sort(SortEnum sort) {
    
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SortEnum getSort() {
    return sort;
  }


  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSort(SortEnum sort) {
    this.sort = sort;
  }


  public TransactionsFiltersParameter includePending(Object includePending) {
    
    this.includePending = includePending;
    return this;
  }

   /**
   * Get includePending
   * @return includePending
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCLUDE_PENDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getIncludePending() {
    return includePending;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_PENDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIncludePending(Object includePending) {
    this.includePending = includePending;
  }


  public TransactionsFiltersParameter page(Object page) {
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * minimum: 1
   * @return page
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getPage() {
    return page;
  }


  @JsonProperty(JSON_PROPERTY_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPage(Object page) {
    this.page = page;
  }


  public TransactionsFiltersParameter recordsPerPage(Object recordsPerPage) {
    
    this.recordsPerPage = recordsPerPage;
    return this;
  }

   /**
   * Get recordsPerPage
   * minimum: 10
   * maximum: 100
   * @return recordsPerPage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECORDS_PER_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getRecordsPerPage() {
    return recordsPerPage;
  }


  @JsonProperty(JSON_PROPERTY_RECORDS_PER_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecordsPerPage(Object recordsPerPage) {
    this.recordsPerPage = recordsPerPage;
  }


  public TransactionsFiltersParameter skip(Object skip) {
    
    this.skip = skip;
    return this;
  }

   /**
   * Get skip
   * minimum: 0
   * @return skip
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SKIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getSkip() {
    return skip;
  }


  @JsonProperty(JSON_PROPERTY_SKIP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSkip(Object skip) {
    this.skip = skip;
  }


  public TransactionsFiltersParameter top(Object top) {
    
    this.top = top;
    return this;
  }

   /**
   * Get top
   * maximum: 100
   * @return top
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getTop() {
    return top;
  }


  @JsonProperty(JSON_PROPERTY_TOP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTop(Object top) {
    this.top = top;
  }


  public TransactionsFiltersParameter startTime(Object startTime) {
    
    this.startTime = startTime;
    return this;
  }

   /**
   * yyyy-mm-ddThh:mm:ssZ
   * @return startTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getStartTime() {
    return startTime;
  }


  @JsonProperty(JSON_PROPERTY_START_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartTime(Object startTime) {
    this.startTime = startTime;
  }


  public TransactionsFiltersParameter endTime(Object endTime) {
    
    this.endTime = endTime;
    return this;
  }

   /**
   * yyyy-mm-ddThh:mm:ssZ
   * @return endTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getEndTime() {
    return endTime;
  }


  @JsonProperty(JSON_PROPERTY_END_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndTime(Object endTime) {
    this.endTime = endTime;
  }


  public TransactionsFiltersParameter offset(Object offset) {
    
    this.offset = offset;
    return this;
  }

   /**
   * Get offset
   * @return offset
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getOffset() {
    return offset;
  }


  @JsonProperty(JSON_PROPERTY_OFFSET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOffset(Object offset) {
    this.offset = offset;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsFiltersParameter transactionsFiltersParameter = (TransactionsFiltersParameter) o;
    return Objects.equals(this.accountId, transactionsFiltersParameter.accountId) &&
        Objects.equals(this.consumerId, transactionsFiltersParameter.consumerId) &&
        Objects.equals(this.fromDate, transactionsFiltersParameter.fromDate) &&
        Objects.equals(this.toDate, transactionsFiltersParameter.toDate) &&
        Objects.equals(this.start, transactionsFiltersParameter.start) &&
        Objects.equals(this.limit, transactionsFiltersParameter.limit) &&
        Objects.equals(this.sort, transactionsFiltersParameter.sort) &&
        Objects.equals(this.includePending, transactionsFiltersParameter.includePending) &&
        Objects.equals(this.page, transactionsFiltersParameter.page) &&
        Objects.equals(this.recordsPerPage, transactionsFiltersParameter.recordsPerPage) &&
        Objects.equals(this.skip, transactionsFiltersParameter.skip) &&
        Objects.equals(this.top, transactionsFiltersParameter.top) &&
        Objects.equals(this.startTime, transactionsFiltersParameter.startTime) &&
        Objects.equals(this.endTime, transactionsFiltersParameter.endTime) &&
        Objects.equals(this.offset, transactionsFiltersParameter.offset);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, consumerId, fromDate, toDate, start, limit, sort, includePending, page, recordsPerPage, skip, top, startTime, endTime, offset);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsFiltersParameter {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    consumerId: ").append(toIndentedString(consumerId)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    includePending: ").append(toIndentedString(includePending)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    recordsPerPage: ").append(toIndentedString(recordsPerPage)).append("\n");
    sb.append("    skip: ").append(toIndentedString(skip)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

