/*
 * SME Professional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.15.0-oas3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.DateRequest;
import org.openapitools.client.model.InspectionReportPostRequestAdditionalNotesInner;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * InspectionReportPostRequest
 */
@JsonPropertyOrder({
  InspectionReportPostRequest.JSON_PROPERTY_PROPERTY_ID,
  InspectionReportPostRequest.JSON_PROPERTY_DATE,
  InspectionReportPostRequest.JSON_PROPERTY_COMMENT,
  InspectionReportPostRequest.JSON_PROPERTY_TYPE,
  InspectionReportPostRequest.JSON_PROPERTY_DESCRIPTION,
  InspectionReportPostRequest.JSON_PROPERTY_ADDITIONAL_NOTES,
  InspectionReportPostRequest.JSON_PROPERTY_COMPANY_REPRESENTATIVE_CALLING_NAME
})
@JsonTypeName("_inspection_report_post_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:30.009582082Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class InspectionReportPostRequest {
  public static final String JSON_PROPERTY_PROPERTY_ID = "property_id";
  private Integer propertyId;

  public static final String JSON_PROPERTY_DATE = "date";
  private DateRequest date;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private String comment;

  /**
   * 1 &#x3D; General periodic, 2 &#x3D; HMO, 3 &#x3D; Pre move in, 4 &#x3D; Move in, 5 &#x3D; Pre move out, 6 &#x3D; Move out, 7 &#x3D; Empty property, 8 &#x3D; Condition concern, 9 &#x3D; Tenant concern, 10 &#x3D; Inventory, 11 &#x3D; Smoke detector, 12 &#x3D; Fitness for human habitation
   */
  public enum TypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_ADDITIONAL_NOTES = "additional_notes";
  private List<InspectionReportPostRequestAdditionalNotesInner> additionalNotes;

  public static final String JSON_PROPERTY_COMPANY_REPRESENTATIVE_CALLING_NAME = "company_representative_calling_name";
  private String companyRepresentativeCallingName;

  public InspectionReportPostRequest() {
  }

  public InspectionReportPostRequest propertyId(Integer propertyId) {
    
    this.propertyId = propertyId;
    return this;
  }

   /**
   * Get propertyId
   * @return propertyId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPropertyId() {
    return propertyId;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyId(Integer propertyId) {
    this.propertyId = propertyId;
  }


  public InspectionReportPostRequest date(DateRequest date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public DateRequest getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(DateRequest date) {
    this.date = date;
  }


  public InspectionReportPostRequest comment(String comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setComment(String comment) {
    this.comment = comment;
  }


  public InspectionReportPostRequest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * 1 &#x3D; General periodic, 2 &#x3D; HMO, 3 &#x3D; Pre move in, 4 &#x3D; Move in, 5 &#x3D; Pre move out, 6 &#x3D; Move out, 7 &#x3D; Empty property, 8 &#x3D; Condition concern, 9 &#x3D; Tenant concern, 10 &#x3D; Inventory, 11 &#x3D; Smoke detector, 12 &#x3D; Fitness for human habitation
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public InspectionReportPostRequest description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public InspectionReportPostRequest additionalNotes(List<InspectionReportPostRequestAdditionalNotesInner> additionalNotes) {
    
    this.additionalNotes = additionalNotes;
    return this;
  }

  public InspectionReportPostRequest addAdditionalNotesItem(InspectionReportPostRequestAdditionalNotesInner additionalNotesItem) {
    if (this.additionalNotes == null) {
      this.additionalNotes = new ArrayList<>();
    }
    this.additionalNotes.add(additionalNotesItem);
    return this;
  }

   /**
   * Get additionalNotes
   * @return additionalNotes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<InspectionReportPostRequestAdditionalNotesInner> getAdditionalNotes() {
    return additionalNotes;
  }


  @JsonProperty(JSON_PROPERTY_ADDITIONAL_NOTES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalNotes(List<InspectionReportPostRequestAdditionalNotesInner> additionalNotes) {
    this.additionalNotes = additionalNotes;
  }


  public InspectionReportPostRequest companyRepresentativeCallingName(String companyRepresentativeCallingName) {
    
    this.companyRepresentativeCallingName = companyRepresentativeCallingName;
    return this;
  }

   /**
   * Get companyRepresentativeCallingName
   * @return companyRepresentativeCallingName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMPANY_REPRESENTATIVE_CALLING_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCompanyRepresentativeCallingName() {
    return companyRepresentativeCallingName;
  }


  @JsonProperty(JSON_PROPERTY_COMPANY_REPRESENTATIVE_CALLING_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCompanyRepresentativeCallingName(String companyRepresentativeCallingName) {
    this.companyRepresentativeCallingName = companyRepresentativeCallingName;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InspectionReportPostRequest inspectionReportPostRequest = (InspectionReportPostRequest) o;
    return Objects.equals(this.propertyId, inspectionReportPostRequest.propertyId) &&
        Objects.equals(this.date, inspectionReportPostRequest.date) &&
        Objects.equals(this.comment, inspectionReportPostRequest.comment) &&
        Objects.equals(this.type, inspectionReportPostRequest.type) &&
        Objects.equals(this.description, inspectionReportPostRequest.description) &&
        Objects.equals(this.additionalNotes, inspectionReportPostRequest.additionalNotes) &&
        Objects.equals(this.companyRepresentativeCallingName, inspectionReportPostRequest.companyRepresentativeCallingName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyId, date, comment, type, description, additionalNotes, companyRepresentativeCallingName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InspectionReportPostRequest {\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    additionalNotes: ").append(toIndentedString(additionalNotes)).append("\n");
    sb.append("    companyRepresentativeCallingName: ").append(toIndentedString(companyRepresentativeCallingName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

