/*
 * NSA Client API
 * This is the official Client API To interact with National Service Alliance (NSA)  # Dates All dates are in the ISO 8601 format - YYYY-MM-DD - ex. 2021-12-31  See this article for more information: [ISO 8601 article](https://en.wikipedia.org/wiki/ISO_8601)  # Authenication Authenication is handled via basic authentication.   Dev and Production credentials will be provided during the implimentation process  See this article for more information: [basic auth article](https://en.wikipedia.org/wiki/Basic_access_authentication) 
 *
 * The version of the OpenAPI document: 1.0.17
 * Contact: rj.whitehead@nationalservicealliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AvailabilityWithCODCostResponseCost
 */
@JsonPropertyOrder({
  AvailabilityWithCODCostResponseCost.JSON_PROPERTY_RATE_TYPE,
  AvailabilityWithCODCostResponseCost.JSON_PROPERTY_AREA_TYPE,
  AvailabilityWithCODCostResponseCost.JSON_PROPERTY_COST
})
@JsonTypeName("AvailabilityWithCODCostResponse_cost")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:53.009381485Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AvailabilityWithCODCostResponseCost {
  /**
   * Gets or Sets rateType
   */
  public enum RateTypeEnum {
    FLATERATE("flateRate"),
    
    LABORONLY("laborOnly");

    private String value;

    RateTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static RateTypeEnum fromValue(String value) {
      for (RateTypeEnum b : RateTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_RATE_TYPE = "rateType";
  private RateTypeEnum rateType;

  /**
   * Gets or Sets areaType
   */
  public enum AreaTypeEnum {
    NORMAL("normal"),
    
    HIGHCOST("highCost");

    private String value;

    AreaTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AreaTypeEnum fromValue(String value) {
      for (AreaTypeEnum b : AreaTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_AREA_TYPE = "areaType";
  private AreaTypeEnum areaType;

  public static final String JSON_PROPERTY_COST = "cost";
  private BigDecimal cost;

  public AvailabilityWithCODCostResponseCost() {
  }

  public AvailabilityWithCODCostResponseCost rateType(RateTypeEnum rateType) {
    
    this.rateType = rateType;
    return this;
  }

   /**
   * Get rateType
   * @return rateType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public RateTypeEnum getRateType() {
    return rateType;
  }


  @JsonProperty(JSON_PROPERTY_RATE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRateType(RateTypeEnum rateType) {
    this.rateType = rateType;
  }


  public AvailabilityWithCODCostResponseCost areaType(AreaTypeEnum areaType) {
    
    this.areaType = areaType;
    return this;
  }

   /**
   * Get areaType
   * @return areaType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AREA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AreaTypeEnum getAreaType() {
    return areaType;
  }


  @JsonProperty(JSON_PROPERTY_AREA_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAreaType(AreaTypeEnum areaType) {
    this.areaType = areaType;
  }


  public AvailabilityWithCODCostResponseCost cost(BigDecimal cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCost() {
    return cost;
  }


  @JsonProperty(JSON_PROPERTY_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityWithCODCostResponseCost availabilityWithCODCostResponseCost = (AvailabilityWithCODCostResponseCost) o;
    return Objects.equals(this.rateType, availabilityWithCODCostResponseCost.rateType) &&
        Objects.equals(this.areaType, availabilityWithCODCostResponseCost.areaType) &&
        Objects.equals(this.cost, availabilityWithCODCostResponseCost.cost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rateType, areaType, cost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityWithCODCostResponseCost {\n");
    sb.append("    rateType: ").append(toIndentedString(rateType)).append("\n");
    sb.append("    areaType: ").append(toIndentedString(areaType)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

