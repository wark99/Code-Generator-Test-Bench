/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RequestBody62
 */
@JsonPropertyOrder({
  RequestBody62.JSON_PROPERTY_APPLY_ALL,
  RequestBody62.JSON_PROPERTY_MAILBOXES,
  RequestBody62.JSON_PROPERTY_PASSWORD
})
@JsonTypeName("Request_body_62")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RequestBody62 {
  public static final String JSON_PROPERTY_APPLY_ALL = "apply_all";
  private Boolean applyAll;

  public static final String JSON_PROPERTY_MAILBOXES = "mailboxes";
  private List<String> mailboxes;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public RequestBody62() {
  }

  public RequestBody62 applyAll(Boolean applyAll) {
    
    this.applyAll = applyAll;
    return this;
  }

   /**
   * Get applyAll
   * @return applyAll
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLY_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getApplyAll() {
    return applyAll;
  }


  @JsonProperty(JSON_PROPERTY_APPLY_ALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplyAll(Boolean applyAll) {
    this.applyAll = applyAll;
  }


  public RequestBody62 mailboxes(List<String> mailboxes) {
    
    this.mailboxes = mailboxes;
    return this;
  }

  public RequestBody62 addMailboxesItem(String mailboxesItem) {
    if (this.mailboxes == null) {
      this.mailboxes = new ArrayList<>();
    }
    this.mailboxes.add(mailboxesItem);
    return this;
  }

   /**
   * Get mailboxes
   * @return mailboxes
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAILBOXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMailboxes() {
    return mailboxes;
  }


  @JsonProperty(JSON_PROPERTY_MAILBOXES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMailboxes(List<String> mailboxes) {
    this.mailboxes = mailboxes;
  }


  public RequestBody62 password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(String password) {
    this.password = password;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestBody62 requestBody62 = (RequestBody62) o;
    return Objects.equals(this.applyAll, requestBody62.applyAll) &&
        Objects.equals(this.mailboxes, requestBody62.mailboxes) &&
        Objects.equals(this.password, requestBody62.password);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applyAll, mailboxes, password);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestBody62 {\n");
    sb.append("    applyAll: ").append(toIndentedString(applyAll)).append("\n");
    sb.append("    mailboxes: ").append(toIndentedString(mailboxes)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

