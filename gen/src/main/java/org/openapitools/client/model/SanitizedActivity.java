/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Target;
import org.openapitools.client.model.TargetAt;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SanitizedActivity
 */
@JsonPropertyOrder({
  SanitizedActivity.JSON_PROPERTY_TARGET,
  SanitizedActivity.JSON_PROPERTY_TARGET_AT,
  SanitizedActivity.JSON_PROPERTY_ACTION,
  SanitizedActivity.JSON_PROPERTY_STATE,
  SanitizedActivity.JSON_PROPERTY_SPECIAL_PARENT_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SanitizedActivity {
  public static final String JSON_PROPERTY_TARGET = "target";
  private Target target;

  public static final String JSON_PROPERTY_TARGET_AT = "target_at";
  private TargetAt targetAt;

  /**
   * Action to do in rewind situation.&lt;note&gt;&lt;strong&gt;archive&lt;/strong&gt;: File needs to be archived in a specific directory.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;archive_in_trash&lt;/strong&gt;: File needs to be archived in trash root.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;file_deleted&lt;/strong&gt;: File does not exist.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;move&lt;/strong&gt;: File needs to be moved.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;rename&lt;/strong&gt;: File needs to be renamed.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;restore&lt;/strong&gt;: File needs to be restored from trash.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;trash&lt;/strong&gt;: File needs to be trashed.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;update&lt;/strong&gt;: File content need to be updated.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;version_deleted&lt;/strong&gt;: File content does not exist.&lt;/note&gt;
   */
  public enum ActionEnum {
    ARCHIVE("archive"),
    
    ARCHIVE_IN_TRASH("archive_in_trash"),
    
    FILE_DELETED("file_deleted"),
    
    MOVE("move"),
    
    RENAME("rename"),
    
    RESTORE("restore"),
    
    TRASH("trash"),
    
    UPDATE("update"),
    
    VERSION_DELETED("version_deleted");

    private String value;

    ActionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ActionEnum fromValue(String value) {
      for (ActionEnum b : ActionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACTION = "action";
  private ActionEnum action;

  /**
   * State one action in the rewind process.&lt;note&gt;&lt;strong&gt;not_executed&lt;/strong&gt;: Action was not executed yet.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;not_handled&lt;/strong&gt;: Action cannot be rewound.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;on_conflict&lt;/strong&gt;: Action lead to a conflict with another file/directory, this item was moved to a specific directory.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;on_error&lt;/strong&gt;: Action lead to a fatal error, for instance the targeted version of a file was unable to be restored.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;success&lt;/strong&gt;: Action was executed correctly.&lt;/note&gt;
   */
  public enum StateEnum {
    NOT_EXECUTED("not_executed"),
    
    NOT_HANDLED("not_handled"),
    
    ON_CONFLICT("on_conflict"),
    
    ON_ERROR("on_error"),
    
    SUCCESS("success");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATE = "state";
  private StateEnum state;

  public static final String JSON_PROPERTY_SPECIAL_PARENT_ID = "special_parent_id";
  private Integer specialParentId;

  public SanitizedActivity() {
  }

  public SanitizedActivity target(Target target) {
    
    this.target = target;
    return this;
  }

   /**
   * Get target
   * @return target
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Target getTarget() {
    return target;
  }


  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTarget(Target target) {
    this.target = target;
  }


  public SanitizedActivity targetAt(TargetAt targetAt) {
    
    this.targetAt = targetAt;
    return this;
  }

   /**
   * Get targetAt
   * @return targetAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TARGET_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TargetAt getTargetAt() {
    return targetAt;
  }


  @JsonProperty(JSON_PROPERTY_TARGET_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetAt(TargetAt targetAt) {
    this.targetAt = targetAt;
  }


  public SanitizedActivity action(ActionEnum action) {
    
    this.action = action;
    return this;
  }

   /**
   * Action to do in rewind situation.&lt;note&gt;&lt;strong&gt;archive&lt;/strong&gt;: File needs to be archived in a specific directory.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;archive_in_trash&lt;/strong&gt;: File needs to be archived in trash root.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;file_deleted&lt;/strong&gt;: File does not exist.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;move&lt;/strong&gt;: File needs to be moved.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;rename&lt;/strong&gt;: File needs to be renamed.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;restore&lt;/strong&gt;: File needs to be restored from trash.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;trash&lt;/strong&gt;: File needs to be trashed.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;update&lt;/strong&gt;: File content need to be updated.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;version_deleted&lt;/strong&gt;: File content does not exist.&lt;/note&gt;
   * @return action
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ActionEnum getAction() {
    return action;
  }


  @JsonProperty(JSON_PROPERTY_ACTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAction(ActionEnum action) {
    this.action = action;
  }


  public SanitizedActivity state(StateEnum state) {
    
    this.state = state;
    return this;
  }

   /**
   * State one action in the rewind process.&lt;note&gt;&lt;strong&gt;not_executed&lt;/strong&gt;: Action was not executed yet.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;not_handled&lt;/strong&gt;: Action cannot be rewound.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;on_conflict&lt;/strong&gt;: Action lead to a conflict with another file/directory, this item was moved to a specific directory.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;on_error&lt;/strong&gt;: Action lead to a fatal error, for instance the targeted version of a file was unable to be restored.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;success&lt;/strong&gt;: Action was executed correctly.&lt;/note&gt;
   * @return state
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StateEnum getState() {
    return state;
  }


  @JsonProperty(JSON_PROPERTY_STATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setState(StateEnum state) {
    this.state = state;
  }


  public SanitizedActivity specialParentId(Integer specialParentId) {
    
    this.specialParentId = specialParentId;
    return this;
  }

   /**
   * Get specialParentId
   * @return specialParentId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPECIAL_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSpecialParentId() {
    return specialParentId;
  }


  @JsonProperty(JSON_PROPERTY_SPECIAL_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpecialParentId(Integer specialParentId) {
    this.specialParentId = specialParentId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SanitizedActivity sanitizedActivity = (SanitizedActivity) o;
    return Objects.equals(this.target, sanitizedActivity.target) &&
        Objects.equals(this.targetAt, sanitizedActivity.targetAt) &&
        Objects.equals(this.action, sanitizedActivity.action) &&
        Objects.equals(this.state, sanitizedActivity.state) &&
        Objects.equals(this.specialParentId, sanitizedActivity.specialParentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(target, targetAt, action, state, specialParentId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SanitizedActivity {\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    targetAt: ").append(toIndentedString(targetAt)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    specialParentId: ").append(toIndentedString(specialParentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

