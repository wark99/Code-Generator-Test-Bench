/*
 * Communication API
 * Communication API
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Retry policy for communications
 */
@JsonPropertyOrder({
  RetryPolicy.JSON_PROPERTY_MAXIMUM_ATTEMPTS,
  RetryPolicy.JSON_PROPERTY_BACKOFF_COEFFICIENT,
  RetryPolicy.JSON_PROPERTY_INITIAL_INTERVAL,
  RetryPolicy.JSON_PROPERTY_MAXIMUM_INTERVAL,
  RetryPolicy.JSON_PROPERTY_START_TO_CLOSE_TIMEOUT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:15:04.742654231Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RetryPolicy {
  public static final String JSON_PROPERTY_MAXIMUM_ATTEMPTS = "maximumAttempts";
  private String maximumAttempts = "PT0S";

  public static final String JSON_PROPERTY_BACKOFF_COEFFICIENT = "backoffCoefficient";
  private BigDecimal backoffCoefficient = new BigDecimal("2.0");

  public static final String JSON_PROPERTY_INITIAL_INTERVAL = "initialInterval";
  private String initialInterval = "PT1S";

  public static final String JSON_PROPERTY_MAXIMUM_INTERVAL = "maximumInterval";
  private String maximumInterval = "PT100S";

  public static final String JSON_PROPERTY_START_TO_CLOSE_TIMEOUT = "startToCloseTimeout";
  private String startToCloseTimeout = "PT0S";

  public RetryPolicy() {
  }

  public RetryPolicy maximumAttempts(String maximumAttempts) {
    
    this.maximumAttempts = maximumAttempts;
    return this;
  }

   /**
   * 0 means unlimited, otherwise the maximum number of attempts
   * @return maximumAttempts
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAXIMUM_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMaximumAttempts() {
    return maximumAttempts;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_ATTEMPTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumAttempts(String maximumAttempts) {
    this.maximumAttempts = maximumAttempts;
  }


  public RetryPolicy backoffCoefficient(BigDecimal backoffCoefficient) {
    
    this.backoffCoefficient = backoffCoefficient;
    return this;
  }

   /**
   * The backoff coefficient to use for exponential backoff. 1.0 means no backoff and always use the initial interval value.
   * @return backoffCoefficient
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BACKOFF_COEFFICIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getBackoffCoefficient() {
    return backoffCoefficient;
  }


  @JsonProperty(JSON_PROPERTY_BACKOFF_COEFFICIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBackoffCoefficient(BigDecimal backoffCoefficient) {
    this.backoffCoefficient = backoffCoefficient;
  }


  public RetryPolicy initialInterval(String initialInterval) {
    
    this.initialInterval = initialInterval;
    return this;
  }

   /**
   * Amount of time before the first retry. Subsequent retries will also be at this interval if backoff coefficient is set to &gt; 1.0
   * @return initialInterval
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INITIAL_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInitialInterval() {
    return initialInterval;
  }


  @JsonProperty(JSON_PROPERTY_INITIAL_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInitialInterval(String initialInterval) {
    this.initialInterval = initialInterval;
  }


  public RetryPolicy maximumInterval(String maximumInterval) {
    
    this.maximumInterval = maximumInterval;
    return this;
  }

   /**
   * Maximum amount of time between retries. The interval will not exceed this value to stop waiting exponentially due to the backoff coefficient.
   * @return maximumInterval
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAXIMUM_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMaximumInterval() {
    return maximumInterval;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaximumInterval(String maximumInterval) {
    this.maximumInterval = maximumInterval;
  }


  public RetryPolicy startToCloseTimeout(String startToCloseTimeout) {
    
    this.startToCloseTimeout = startToCloseTimeout;
    return this;
  }

   /**
   * Maximum amount of time for the workflow to be scheduled and to complete. Set to \&quot;PT0S\&quot; to disable
   * @return startToCloseTimeout
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_TO_CLOSE_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStartToCloseTimeout() {
    return startToCloseTimeout;
  }


  @JsonProperty(JSON_PROPERTY_START_TO_CLOSE_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartToCloseTimeout(String startToCloseTimeout) {
    this.startToCloseTimeout = startToCloseTimeout;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RetryPolicy retryPolicy = (RetryPolicy) o;
    return Objects.equals(this.maximumAttempts, retryPolicy.maximumAttempts) &&
        Objects.equals(this.backoffCoefficient, retryPolicy.backoffCoefficient) &&
        Objects.equals(this.initialInterval, retryPolicy.initialInterval) &&
        Objects.equals(this.maximumInterval, retryPolicy.maximumInterval) &&
        Objects.equals(this.startToCloseTimeout, retryPolicy.startToCloseTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maximumAttempts, backoffCoefficient, initialInterval, maximumInterval, startToCloseTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RetryPolicy {\n");
    sb.append("    maximumAttempts: ").append(toIndentedString(maximumAttempts)).append("\n");
    sb.append("    backoffCoefficient: ").append(toIndentedString(backoffCoefficient)).append("\n");
    sb.append("    initialInterval: ").append(toIndentedString(initialInterval)).append("\n");
    sb.append("    maximumInterval: ").append(toIndentedString(maximumInterval)).append("\n");
    sb.append("    startToCloseTimeout: ").append(toIndentedString(startToCloseTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

