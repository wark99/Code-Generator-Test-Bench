/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ViewersRestrictions
 */
@JsonPropertyOrder({
  ViewersRestrictions.JSON_PROPERTY_RESTRICTIONS_ID,
  ViewersRestrictions.JSON_PROPERTY_ACCESS_COUNTRY,
  ViewersRestrictions.JSON_PROPERTY_ALLOW_DOMAIN,
  ViewersRestrictions.JSON_PROPERTY_EXCEPTION_IP,
  ViewersRestrictions.JSON_PROPERTY_FORBIDDEN_IP,
  ViewersRestrictions.JSON_PROPERTY_SHARED_KEY,
  ViewersRestrictions.JSON_PROPERTY_AUTHORIZE_COUNTRY,
  ViewersRestrictions.JSON_PROPERTY_PLAYER_TOKEN
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ViewersRestrictions {
  public static final String JSON_PROPERTY_RESTRICTIONS_ID = "restrictions_id";
  private Integer restrictionsId;

  public static final String JSON_PROPERTY_ACCESS_COUNTRY = "access_country";
  private String accessCountry;

  public static final String JSON_PROPERTY_ALLOW_DOMAIN = "allow_domain";
  private String allowDomain;

  public static final String JSON_PROPERTY_EXCEPTION_IP = "exception_ip";
  private String exceptionIp;

  public static final String JSON_PROPERTY_FORBIDDEN_IP = "forbidden_ip";
  private String forbiddenIp;

  public static final String JSON_PROPERTY_SHARED_KEY = "shared_key";
  private String sharedKey;

  public static final String JSON_PROPERTY_AUTHORIZE_COUNTRY = "authorize_country";
  private Boolean authorizeCountry;

  public static final String JSON_PROPERTY_PLAYER_TOKEN = "player_token";
  private String playerToken;

  public ViewersRestrictions() {
  }

  public ViewersRestrictions restrictionsId(Integer restrictionsId) {
    
    this.restrictionsId = restrictionsId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;restriction&#x60; that is related to the resource &#x60;ViewersRestrictions&#x60;
   * @return restrictionsId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESTRICTIONS_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRestrictionsId() {
    return restrictionsId;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICTIONS_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRestrictionsId(Integer restrictionsId) {
    this.restrictionsId = restrictionsId;
  }


  public ViewersRestrictions accessCountry(String accessCountry) {
    
    this.accessCountry = accessCountry;
    return this;
  }

   /**
   * Get accessCountry
   * @return accessCountry
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccessCountry() {
    return accessCountry;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccessCountry(String accessCountry) {
    this.accessCountry = accessCountry;
  }


  public ViewersRestrictions allowDomain(String allowDomain) {
    
    this.allowDomain = allowDomain;
    return this;
  }

   /**
   * Get allowDomain
   * @return allowDomain
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ALLOW_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAllowDomain() {
    return allowDomain;
  }


  @JsonProperty(JSON_PROPERTY_ALLOW_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAllowDomain(String allowDomain) {
    this.allowDomain = allowDomain;
  }


  public ViewersRestrictions exceptionIp(String exceptionIp) {
    
    this.exceptionIp = exceptionIp;
    return this;
  }

   /**
   * Get exceptionIp
   * @return exceptionIp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXCEPTION_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExceptionIp() {
    return exceptionIp;
  }


  @JsonProperty(JSON_PROPERTY_EXCEPTION_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExceptionIp(String exceptionIp) {
    this.exceptionIp = exceptionIp;
  }


  public ViewersRestrictions forbiddenIp(String forbiddenIp) {
    
    this.forbiddenIp = forbiddenIp;
    return this;
  }

   /**
   * Get forbiddenIp
   * @return forbiddenIp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FORBIDDEN_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getForbiddenIp() {
    return forbiddenIp;
  }


  @JsonProperty(JSON_PROPERTY_FORBIDDEN_IP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setForbiddenIp(String forbiddenIp) {
    this.forbiddenIp = forbiddenIp;
  }


  public ViewersRestrictions sharedKey(String sharedKey) {
    
    this.sharedKey = sharedKey;
    return this;
  }

   /**
   * Get sharedKey
   * @return sharedKey
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHARED_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSharedKey() {
    return sharedKey;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSharedKey(String sharedKey) {
    this.sharedKey = sharedKey;
  }


  public ViewersRestrictions authorizeCountry(Boolean authorizeCountry) {
    
    this.authorizeCountry = authorizeCountry;
    return this;
  }

   /**
   * Get authorizeCountry
   * @return authorizeCountry
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTHORIZE_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAuthorizeCountry() {
    return authorizeCountry;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZE_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthorizeCountry(Boolean authorizeCountry) {
    this.authorizeCountry = authorizeCountry;
  }


  public ViewersRestrictions playerToken(String playerToken) {
    
    this.playerToken = playerToken;
    return this;
  }

   /**
   * Get playerToken
   * @return playerToken
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLAYER_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPlayerToken() {
    return playerToken;
  }


  @JsonProperty(JSON_PROPERTY_PLAYER_TOKEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlayerToken(String playerToken) {
    this.playerToken = playerToken;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewersRestrictions viewersRestrictions = (ViewersRestrictions) o;
    return Objects.equals(this.restrictionsId, viewersRestrictions.restrictionsId) &&
        Objects.equals(this.accessCountry, viewersRestrictions.accessCountry) &&
        Objects.equals(this.allowDomain, viewersRestrictions.allowDomain) &&
        Objects.equals(this.exceptionIp, viewersRestrictions.exceptionIp) &&
        Objects.equals(this.forbiddenIp, viewersRestrictions.forbiddenIp) &&
        Objects.equals(this.sharedKey, viewersRestrictions.sharedKey) &&
        Objects.equals(this.authorizeCountry, viewersRestrictions.authorizeCountry) &&
        Objects.equals(this.playerToken, viewersRestrictions.playerToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(restrictionsId, accessCountry, allowDomain, exceptionIp, forbiddenIp, sharedKey, authorizeCountry, playerToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewersRestrictions {\n");
    sb.append("    restrictionsId: ").append(toIndentedString(restrictionsId)).append("\n");
    sb.append("    accessCountry: ").append(toIndentedString(accessCountry)).append("\n");
    sb.append("    allowDomain: ").append(toIndentedString(allowDomain)).append("\n");
    sb.append("    exceptionIp: ").append(toIndentedString(exceptionIp)).append("\n");
    sb.append("    forbiddenIp: ").append(toIndentedString(forbiddenIp)).append("\n");
    sb.append("    sharedKey: ").append(toIndentedString(sharedKey)).append("\n");
    sb.append("    authorizeCountry: ").append(toIndentedString(authorizeCountry)).append("\n");
    sb.append("    playerToken: ").append(toIndentedString(playerToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

