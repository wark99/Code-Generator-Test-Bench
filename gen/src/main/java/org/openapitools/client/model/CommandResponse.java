/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SlackAttachment;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CommandResponse
 */
@JsonPropertyOrder({
  CommandResponse.JSON_PROPERTY_RESPONSE_TYPE,
  CommandResponse.JSON_PROPERTY_TEXT,
  CommandResponse.JSON_PROPERTY_USERNAME,
  CommandResponse.JSON_PROPERTY_ICON_U_R_L,
  CommandResponse.JSON_PROPERTY_GOTO_LOCATION,
  CommandResponse.JSON_PROPERTY_ATTACHMENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CommandResponse {
  public static final String JSON_PROPERTY_RESPONSE_TYPE = "ResponseType";
  private String responseType;

  public static final String JSON_PROPERTY_TEXT = "Text";
  private String text;

  public static final String JSON_PROPERTY_USERNAME = "Username";
  private String username;

  public static final String JSON_PROPERTY_ICON_U_R_L = "IconURL";
  private String iconURL;

  public static final String JSON_PROPERTY_GOTO_LOCATION = "GotoLocation";
  private String gotoLocation;

  public static final String JSON_PROPERTY_ATTACHMENTS = "Attachments";
  private List<SlackAttachment> attachments;

  public CommandResponse() {
  }

  public CommandResponse responseType(String responseType) {
    
    this.responseType = responseType;
    return this;
  }

   /**
   * The response type either in_channel or ephemeral
   * @return responseType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RESPONSE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getResponseType() {
    return responseType;
  }


  @JsonProperty(JSON_PROPERTY_RESPONSE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResponseType(String responseType) {
    this.responseType = responseType;
  }


  public CommandResponse text(String text) {
    
    this.text = text;
    return this;
  }

   /**
   * Get text
   * @return text
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getText() {
    return text;
  }


  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setText(String text) {
    this.text = text;
  }


  public CommandResponse username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsername(String username) {
    this.username = username;
  }


  public CommandResponse iconURL(String iconURL) {
    
    this.iconURL = iconURL;
    return this;
  }

   /**
   * Get iconURL
   * @return iconURL
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ICON_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIconURL() {
    return iconURL;
  }


  @JsonProperty(JSON_PROPERTY_ICON_U_R_L)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIconURL(String iconURL) {
    this.iconURL = iconURL;
  }


  public CommandResponse gotoLocation(String gotoLocation) {
    
    this.gotoLocation = gotoLocation;
    return this;
  }

   /**
   * Get gotoLocation
   * @return gotoLocation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GOTO_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getGotoLocation() {
    return gotoLocation;
  }


  @JsonProperty(JSON_PROPERTY_GOTO_LOCATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGotoLocation(String gotoLocation) {
    this.gotoLocation = gotoLocation;
  }


  public CommandResponse attachments(List<SlackAttachment> attachments) {
    
    this.attachments = attachments;
    return this;
  }

  public CommandResponse addAttachmentsItem(SlackAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

   /**
   * Get attachments
   * @return attachments
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SlackAttachment> getAttachments() {
    return attachments;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHMENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachments(List<SlackAttachment> attachments) {
    this.attachments = attachments;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommandResponse commandResponse = (CommandResponse) o;
    return Objects.equals(this.responseType, commandResponse.responseType) &&
        Objects.equals(this.text, commandResponse.text) &&
        Objects.equals(this.username, commandResponse.username) &&
        Objects.equals(this.iconURL, commandResponse.iconURL) &&
        Objects.equals(this.gotoLocation, commandResponse.gotoLocation) &&
        Objects.equals(this.attachments, commandResponse.attachments);
  }

  @Override
  public int hashCode() {
    return Objects.hash(responseType, text, username, iconURL, gotoLocation, attachments);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommandResponse {\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    iconURL: ").append(toIndentedString(iconURL)).append("\n");
    sb.append("    gotoLocation: ").append(toIndentedString(gotoLocation)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

