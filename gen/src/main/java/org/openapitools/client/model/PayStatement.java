/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * A pay statement document and pay statement label
 */
@JsonPropertyOrder({
  PayStatement.JSON_PROPERTY_LABEL,
  PayStatement.JSON_PROPERTY_STATEMENT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-30T11:16:07.490346735Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PayStatement {
  public static final String JSON_PROPERTY_LABEL = "label";
  private String label;

  public static final String JSON_PROPERTY_STATEMENT = "statement";
  private String statement;

  public PayStatement() {
  }

  public PayStatement label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * The label to be associated with the pay statement. This label will allow the paystub to go through data extraction. * &#x60;lastPayPeriod&#x60;: default label that should be used for the VOIE - Paystub products * &#x60;lastPayPeriodMinusOne&#x60;: the second most recent pay statement * &#x60;lastPayPeriodMinusTwo&#x60;: the third most recent pay statement * &#x60;previousYearLastPayPeriod&#x60; Last pay statement of the previous calendar year * &#x60;previousYear2LastPayPeriod&#x60;: last pay statement of the calendar year 2 years prior * &#x60;earliestPayPeriod&#x60;: the earliest pay statement
   * @return label
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLabel() {
    return label;
  }


  @JsonProperty(JSON_PROPERTY_LABEL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLabel(String label) {
    this.label = label;
  }


  public PayStatement statement(String statement) {
    
    this.statement = statement;
    return this;
  }

   /**
   * A Base64 encoded pay statement file. Finicity supports PDF, JPG, or PNG files.
   * @return statement
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATEMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStatement() {
    return statement;
  }


  @JsonProperty(JSON_PROPERTY_STATEMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatement(String statement) {
    this.statement = statement;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PayStatement payStatement = (PayStatement) o;
    return Objects.equals(this.label, payStatement.label) &&
        Objects.equals(this.statement, payStatement.statement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(label, statement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PayStatement {\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    statement: ").append(toIndentedString(statement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

