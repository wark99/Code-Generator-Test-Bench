/*
 * SDANet - OpenAPI 3.1
 * [WIP] API for third-party developers to interact with Anduril's SDANet system.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nwagner@anduril.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FluxStateLinkStateInner
 */
@JsonPropertyOrder({
  FluxStateLinkStateInner.JSON_PROPERTY_REMOTE_I_D,
  FluxStateLinkStateInner.JSON_PROPERTY_LINK_STATE
})
@JsonTypeName("FluxState_linkState_inner")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:19:53.299039697Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class FluxStateLinkStateInner {
  public static final String JSON_PROPERTY_REMOTE_I_D = "remoteID";
  private String remoteID;

  /**
   * Gets or Sets linkState
   */
  public enum LinkStateEnum {
    UNKNOWN("UNKNOWN"),
    
    DISCONNECTED("DISCONNECTED"),
    
    DEGRADED("DEGRADED"),
    
    CONNECTED("CONNECTED");

    private String value;

    LinkStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LinkStateEnum fromValue(String value) {
      for (LinkStateEnum b : LinkStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LINK_STATE = "linkState";
  private LinkStateEnum linkState;

  public FluxStateLinkStateInner() {
  }

  public FluxStateLinkStateInner remoteID(String remoteID) {
    
    this.remoteID = remoteID;
    return this;
  }

   /**
   * The siteID of the remote site that this link status describes.
   * @return remoteID
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REMOTE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRemoteID() {
    return remoteID;
  }


  @JsonProperty(JSON_PROPERTY_REMOTE_I_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRemoteID(String remoteID) {
    this.remoteID = remoteID;
  }


  public FluxStateLinkStateInner linkState(LinkStateEnum linkState) {
    
    this.linkState = linkState;
    return this;
  }

   /**
   * Get linkState
   * @return linkState
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LINK_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LinkStateEnum getLinkState() {
    return linkState;
  }


  @JsonProperty(JSON_PROPERTY_LINK_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLinkState(LinkStateEnum linkState) {
    this.linkState = linkState;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FluxStateLinkStateInner fluxStateLinkStateInner = (FluxStateLinkStateInner) o;
    return Objects.equals(this.remoteID, fluxStateLinkStateInner.remoteID) &&
        Objects.equals(this.linkState, fluxStateLinkStateInner.linkState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(remoteID, linkState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FluxStateLinkStateInner {\n");
    sb.append("    remoteID: ").append(toIndentedString(remoteID)).append("\n");
    sb.append("    linkState: ").append(toIndentedString(linkState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

