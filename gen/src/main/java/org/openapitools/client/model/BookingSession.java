/*
 * Reference
 * The DoDays API reference.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@dodays.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Session;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * BookingSession
 */
@JsonPropertyOrder({
  BookingSession.JSON_PROPERTY_ID,
  BookingSession.JSON_PROPERTY_DATE_TIME,
  BookingSession.JSON_PROPERTY_ATTENDED,
  BookingSession.JSON_PROPERTY_ABSENT,
  BookingSession.JSON_PROPERTY_CANCELLED,
  BookingSession.JSON_PROPERTY_SESSION
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:23:35.686627593Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class BookingSession {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_DATE_TIME = "date_time";
  private OffsetDateTime dateTime;

  public static final String JSON_PROPERTY_ATTENDED = "attended";
  private Boolean attended;

  public static final String JSON_PROPERTY_ABSENT = "absent";
  private Boolean absent;

  public static final String JSON_PROPERTY_CANCELLED = "cancelled";
  private Boolean cancelled;

  public static final String JSON_PROPERTY_SESSION = "session";
  private Session session;

  public BookingSession() {
  }

  public BookingSession id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public BookingSession dateTime(OffsetDateTime dateTime) {
    
    this.dateTime = dateTime;
    return this;
  }

   /**
   * Get dateTime
   * @return dateTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getDateTime() {
    return dateTime;
  }


  @JsonProperty(JSON_PROPERTY_DATE_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDateTime(OffsetDateTime dateTime) {
    this.dateTime = dateTime;
  }


  public BookingSession attended(Boolean attended) {
    
    this.attended = attended;
    return this;
  }

   /**
   * Get attended
   * @return attended
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAttended() {
    return attended;
  }


  @JsonProperty(JSON_PROPERTY_ATTENDED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttended(Boolean attended) {
    this.attended = attended;
  }


  public BookingSession absent(Boolean absent) {
    
    this.absent = absent;
    return this;
  }

   /**
   * Get absent
   * @return absent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ABSENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAbsent() {
    return absent;
  }


  @JsonProperty(JSON_PROPERTY_ABSENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAbsent(Boolean absent) {
    this.absent = absent;
  }


  public BookingSession cancelled(Boolean cancelled) {
    
    this.cancelled = cancelled;
    return this;
  }

   /**
   * Get cancelled
   * @return cancelled
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANCELLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getCancelled() {
    return cancelled;
  }


  @JsonProperty(JSON_PROPERTY_CANCELLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCancelled(Boolean cancelled) {
    this.cancelled = cancelled;
  }


  public BookingSession session(Session session) {
    
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Session getSession() {
    return session;
  }


  @JsonProperty(JSON_PROPERTY_SESSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSession(Session session) {
    this.session = session;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BookingSession bookingSession = (BookingSession) o;
    return Objects.equals(this.id, bookingSession.id) &&
        Objects.equals(this.dateTime, bookingSession.dateTime) &&
        Objects.equals(this.attended, bookingSession.attended) &&
        Objects.equals(this.absent, bookingSession.absent) &&
        Objects.equals(this.cancelled, bookingSession.cancelled) &&
        Objects.equals(this.session, bookingSession.session);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, dateTime, attended, absent, cancelled, session);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BookingSession {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    attended: ").append(toIndentedString(attended)).append("\n");
    sb.append("    absent: ").append(toIndentedString(absent)).append("\n");
    sb.append("    cancelled: ").append(toIndentedString(cancelled)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

