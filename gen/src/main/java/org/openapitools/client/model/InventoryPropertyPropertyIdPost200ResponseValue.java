/*
 * SME Professional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.15.0-oas3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * InventoryPropertyPropertyIdPost200ResponseValue
 */
@JsonPropertyOrder({
  InventoryPropertyPropertyIdPost200ResponseValue.JSON_PROPERTY_PROPERTY_ID,
  InventoryPropertyPropertyIdPost200ResponseValue.JSON_PROPERTY_INVENTORY_ID
})
@JsonTypeName("_inventory_property__property_id__post_200_response_value")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:30.009582082Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class InventoryPropertyPropertyIdPost200ResponseValue {
  public static final String JSON_PROPERTY_PROPERTY_ID = "property_id";
  private Integer propertyId;

  public static final String JSON_PROPERTY_INVENTORY_ID = "inventory_id";
  private Integer inventoryId;

  public InventoryPropertyPropertyIdPost200ResponseValue() {
  }

  public InventoryPropertyPropertyIdPost200ResponseValue propertyId(Integer propertyId) {
    
    this.propertyId = propertyId;
    return this;
  }

   /**
   * Get propertyId
   * @return propertyId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getPropertyId() {
    return propertyId;
  }


  @JsonProperty(JSON_PROPERTY_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPropertyId(Integer propertyId) {
    this.propertyId = propertyId;
  }


  public InventoryPropertyPropertyIdPost200ResponseValue inventoryId(Integer inventoryId) {
    
    this.inventoryId = inventoryId;
    return this;
  }

   /**
   * Get inventoryId
   * @return inventoryId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVENTORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInventoryId() {
    return inventoryId;
  }


  @JsonProperty(JSON_PROPERTY_INVENTORY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInventoryId(Integer inventoryId) {
    this.inventoryId = inventoryId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InventoryPropertyPropertyIdPost200ResponseValue inventoryPropertyPropertyIdPost200ResponseValue = (InventoryPropertyPropertyIdPost200ResponseValue) o;
    return Objects.equals(this.propertyId, inventoryPropertyPropertyIdPost200ResponseValue.propertyId) &&
        Objects.equals(this.inventoryId, inventoryPropertyPropertyIdPost200ResponseValue.inventoryId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyId, inventoryId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InventoryPropertyPropertyIdPost200ResponseValue {\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    inventoryId: ").append(toIndentedString(inventoryId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

