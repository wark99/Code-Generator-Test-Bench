/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.InsufficientFundsTransaction;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Non-Sufficient Fund Fees
 */
@JsonPropertyOrder({
  CashFlowInsufficientFundsFees.JSON_PROPERTY_COUNT_OF_TRANSACTIONS_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowInsufficientFundsFees.JSON_PROPERTY_SUM_OF_TRANSACTIONS_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowInsufficientFundsFees.JSON_PROPERTY_TRANSACTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T14:15:37.937249550Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CashFlowInsufficientFundsFees {
  public static final String JSON_PROPERTY_COUNT_OF_TRANSACTIONS_FOR_THE_REPORT_TIME_PERIOD = "countOfTransactionsForTheReportTimePeriod";
  private Integer countOfTransactionsForTheReportTimePeriod;

  public static final String JSON_PROPERTY_SUM_OF_TRANSACTIONS_FOR_THE_REPORT_TIME_PERIOD = "sumOfTransactionsForTheReportTimePeriod";
  private BigDecimal sumOfTransactionsForTheReportTimePeriod;

  public static final String JSON_PROPERTY_TRANSACTIONS = "transactions";
  private List<InsufficientFundsTransaction> transactions;

  public CashFlowInsufficientFundsFees() {
  }

  public CashFlowInsufficientFundsFees countOfTransactionsForTheReportTimePeriod(Integer countOfTransactionsForTheReportTimePeriod) {
    
    this.countOfTransactionsForTheReportTimePeriod = countOfTransactionsForTheReportTimePeriod;
    return this;
  }

   /**
   * Count of all NSF transactions during the report
   * @return countOfTransactionsForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNT_OF_TRANSACTIONS_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCountOfTransactionsForTheReportTimePeriod() {
    return countOfTransactionsForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_OF_TRANSACTIONS_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCountOfTransactionsForTheReportTimePeriod(Integer countOfTransactionsForTheReportTimePeriod) {
    this.countOfTransactionsForTheReportTimePeriod = countOfTransactionsForTheReportTimePeriod;
  }


  public CashFlowInsufficientFundsFees sumOfTransactionsForTheReportTimePeriod(BigDecimal sumOfTransactionsForTheReportTimePeriod) {
    
    this.sumOfTransactionsForTheReportTimePeriod = sumOfTransactionsForTheReportTimePeriod;
    return this;
  }

   /**
   * Sum of all NSF transactions during the report
   * @return sumOfTransactionsForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUM_OF_TRANSACTIONS_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSumOfTransactionsForTheReportTimePeriod() {
    return sumOfTransactionsForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_SUM_OF_TRANSACTIONS_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSumOfTransactionsForTheReportTimePeriod(BigDecimal sumOfTransactionsForTheReportTimePeriod) {
    this.sumOfTransactionsForTheReportTimePeriod = sumOfTransactionsForTheReportTimePeriod;
  }


  public CashFlowInsufficientFundsFees transactions(List<InsufficientFundsTransaction> transactions) {
    
    this.transactions = transactions;
    return this;
  }

  public CashFlowInsufficientFundsFees addTransactionsItem(InsufficientFundsTransaction transactionsItem) {
    if (this.transactions == null) {
      this.transactions = new ArrayList<>();
    }
    this.transactions.add(transactionsItem);
    return this;
  }

   /**
   * Transactions categorized as NSF
   * @return transactions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<InsufficientFundsTransaction> getTransactions() {
    return transactions;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactions(List<InsufficientFundsTransaction> transactions) {
    this.transactions = transactions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowInsufficientFundsFees cashFlowInsufficientFundsFees = (CashFlowInsufficientFundsFees) o;
    return Objects.equals(this.countOfTransactionsForTheReportTimePeriod, cashFlowInsufficientFundsFees.countOfTransactionsForTheReportTimePeriod) &&
        Objects.equals(this.sumOfTransactionsForTheReportTimePeriod, cashFlowInsufficientFundsFees.sumOfTransactionsForTheReportTimePeriod) &&
        Objects.equals(this.transactions, cashFlowInsufficientFundsFees.transactions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countOfTransactionsForTheReportTimePeriod, sumOfTransactionsForTheReportTimePeriod, transactions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowInsufficientFundsFees {\n");
    sb.append("    countOfTransactionsForTheReportTimePeriod: ").append(toIndentedString(countOfTransactionsForTheReportTimePeriod)).append("\n");
    sb.append("    sumOfTransactionsForTheReportTimePeriod: ").append(toIndentedString(sumOfTransactionsForTheReportTimePeriod)).append("\n");
    sb.append("    transactions: ").append(toIndentedString(transactions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

