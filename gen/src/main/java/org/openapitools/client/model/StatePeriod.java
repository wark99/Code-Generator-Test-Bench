/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Statistics for one period in the report of a StateAttribute.
 */
@JsonPropertyOrder({
  StatePeriod.JSON_PROPERTY_BEGINNING_VALUE,
  StatePeriod.JSON_PROPERTY_COUNT,
  StatePeriod.JSON_PROPERTY_END_DATE,
  StatePeriod.JSON_PROPERTY_ENDING_VALUE,
  StatePeriod.JSON_PROPERTY_MAX,
  StatePeriod.JSON_PROPERTY_MEAN,
  StatePeriod.JSON_PROPERTY_MEDIAN,
  StatePeriod.JSON_PROPERTY_MIN,
  StatePeriod.JSON_PROPERTY_STANDARD_DEVIATION,
  StatePeriod.JSON_PROPERTY_START_DATE,
  StatePeriod.JSON_PROPERTY_SUM
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:12:42.105719365Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StatePeriod {
  public static final String JSON_PROPERTY_BEGINNING_VALUE = "beginningValue";
  private BigDecimal beginningValue;

  public static final String JSON_PROPERTY_COUNT = "count";
  private Integer count;

  public static final String JSON_PROPERTY_END_DATE = "endDate";
  private LocalDate endDate;

  public static final String JSON_PROPERTY_ENDING_VALUE = "endingValue";
  private BigDecimal endingValue;

  public static final String JSON_PROPERTY_MAX = "max";
  private BigDecimal max;

  public static final String JSON_PROPERTY_MEAN = "mean";
  private BigDecimal mean;

  public static final String JSON_PROPERTY_MEDIAN = "median";
  private BigDecimal median;

  public static final String JSON_PROPERTY_MIN = "min";
  private BigDecimal min;

  public static final String JSON_PROPERTY_STANDARD_DEVIATION = "standardDeviation";
  private BigDecimal standardDeviation;

  public static final String JSON_PROPERTY_START_DATE = "startDate";
  private LocalDate startDate;

  public static final String JSON_PROPERTY_SUM = "sum";
  private BigDecimal sum;

  public StatePeriod() {
  }

  public StatePeriod beginningValue(BigDecimal beginningValue) {
    
    this.beginningValue = beginningValue;
    return this;
  }

   /**
   * Value on the first date in the period
   * @return beginningValue
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BEGINNING_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getBeginningValue() {
    return beginningValue;
  }


  @JsonProperty(JSON_PROPERTY_BEGINNING_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBeginningValue(BigDecimal beginningValue) {
    this.beginningValue = beginningValue;
  }


  public StatePeriod count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Count of data points during the period
   * @return count
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCount() {
    return count;
  }


  @JsonProperty(JSON_PROPERTY_COUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCount(Integer count) {
    this.count = count;
  }


  public StatePeriod endDate(LocalDate endDate) {
    
    this.endDate = endDate;
    return this;
  }

   /**
   * End date for the period being reported
   * @return endDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getEndDate() {
    return endDate;
  }


  @JsonProperty(JSON_PROPERTY_END_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndDate(LocalDate endDate) {
    this.endDate = endDate;
  }


  public StatePeriod endingValue(BigDecimal endingValue) {
    
    this.endingValue = endingValue;
    return this;
  }

   /**
   * Value on the last date in the period
   * @return endingValue
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ENDING_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getEndingValue() {
    return endingValue;
  }


  @JsonProperty(JSON_PROPERTY_ENDING_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEndingValue(BigDecimal endingValue) {
    this.endingValue = endingValue;
  }


  public StatePeriod max(BigDecimal max) {
    
    this.max = max;
    return this;
  }

   /**
   * Maximum amount during the period
   * @return max
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMax() {
    return max;
  }


  @JsonProperty(JSON_PROPERTY_MAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMax(BigDecimal max) {
    this.max = max;
  }


  public StatePeriod mean(BigDecimal mean) {
    
    this.mean = mean;
    return this;
  }

   /**
   * Mean of amounts during the period
   * @return mean
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMean() {
    return mean;
  }


  @JsonProperty(JSON_PROPERTY_MEAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMean(BigDecimal mean) {
    this.mean = mean;
  }


  public StatePeriod median(BigDecimal median) {
    
    this.median = median;
    return this;
  }

   /**
   * Median of amounts during the period
   * @return median
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEDIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMedian() {
    return median;
  }


  @JsonProperty(JSON_PROPERTY_MEDIAN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedian(BigDecimal median) {
    this.median = median;
  }


  public StatePeriod min(BigDecimal min) {
    
    this.min = min;
    return this;
  }

   /**
   * Minimum amount during the period
   * @return min
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMin() {
    return min;
  }


  @JsonProperty(JSON_PROPERTY_MIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMin(BigDecimal min) {
    this.min = min;
  }


  public StatePeriod standardDeviation(BigDecimal standardDeviation) {
    
    this.standardDeviation = standardDeviation;
    return this;
  }

   /**
   * Standard deviation of amounts during the period
   * @return standardDeviation
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STANDARD_DEVIATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getStandardDeviation() {
    return standardDeviation;
  }


  @JsonProperty(JSON_PROPERTY_STANDARD_DEVIATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStandardDeviation(BigDecimal standardDeviation) {
    this.standardDeviation = standardDeviation;
  }


  public StatePeriod startDate(LocalDate startDate) {
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date for the period being reported
   * @return startDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LocalDate getStartDate() {
    return startDate;
  }


  @JsonProperty(JSON_PROPERTY_START_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartDate(LocalDate startDate) {
    this.startDate = startDate;
  }


  public StatePeriod sum(BigDecimal sum) {
    
    this.sum = sum;
    return this;
  }

   /**
   * Sum of amounts during the period
   * @return sum
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSum() {
    return sum;
  }


  @JsonProperty(JSON_PROPERTY_SUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSum(BigDecimal sum) {
    this.sum = sum;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatePeriod statePeriod = (StatePeriod) o;
    return Objects.equals(this.beginningValue, statePeriod.beginningValue) &&
        Objects.equals(this.count, statePeriod.count) &&
        Objects.equals(this.endDate, statePeriod.endDate) &&
        Objects.equals(this.endingValue, statePeriod.endingValue) &&
        Objects.equals(this.max, statePeriod.max) &&
        Objects.equals(this.mean, statePeriod.mean) &&
        Objects.equals(this.median, statePeriod.median) &&
        Objects.equals(this.min, statePeriod.min) &&
        Objects.equals(this.standardDeviation, statePeriod.standardDeviation) &&
        Objects.equals(this.startDate, statePeriod.startDate) &&
        Objects.equals(this.sum, statePeriod.sum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beginningValue, count, endDate, endingValue, max, mean, median, min, standardDeviation, startDate, sum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatePeriod {\n");
    sb.append("    beginningValue: ").append(toIndentedString(beginningValue)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    endingValue: ").append(toIndentedString(endingValue)).append("\n");
    sb.append("    max: ").append(toIndentedString(max)).append("\n");
    sb.append("    mean: ").append(toIndentedString(mean)).append("\n");
    sb.append("    median: ").append(toIndentedString(median)).append("\n");
    sb.append("    min: ").append(toIndentedString(min)).append("\n");
    sb.append("    standardDeviation: ").append(toIndentedString(standardDeviation)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    sum: ").append(toIndentedString(sum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

