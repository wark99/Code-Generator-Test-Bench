/*
 * Perch API
 * Perch API for accessing data from Perch. See our [API Guide](https://docs.google.com/document/d/1ms6LFNwFN4C4WkrfWs8Hlu5igFBpNLhNr7uLEkGmvJA) for guidance on best practices. <br/> <br/> Find out more about Perch at [https://perch.fit](https://perch.fit) or by contacting us at [support@perch.fit](mailto:support@perch.fit).
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@perch.fit
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Exercise;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FilterExercisesResponseAllOfData
 */
@JsonPropertyOrder({
  FilterExercisesResponseAllOfData.JSON_PROPERTY_ID,
  FilterExercisesResponseAllOfData.JSON_PROPERTY_NAME,
  FilterExercisesResponseAllOfData.JSON_PROPERTY_ORG_ID,
  FilterExercisesResponseAllOfData.JSON_PROPERTY_LIMBED,
  FilterExercisesResponseAllOfData.JSON_PROPERTY_TRACKED
})
@JsonTypeName("FilterExercisesResponse_allOf_data")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:20:41.221792118Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class FilterExercisesResponseAllOfData {
  public static final String JSON_PROPERTY_ID = "id";
  private Object id = null;

  public static final String JSON_PROPERTY_NAME = "name";
  private Object name = null;

  public static final String JSON_PROPERTY_ORG_ID = "org_id";
  private JsonNullable<Object> orgId = JsonNullable.<Object>of(null);

  public static final String JSON_PROPERTY_LIMBED = "limbed";
  private Object limbed = null;

  public static final String JSON_PROPERTY_TRACKED = "tracked";
  private JsonNullable<Object> tracked = JsonNullable.<Object>of(null);

  public FilterExercisesResponseAllOfData() {
  }

  public FilterExercisesResponseAllOfData id(Object id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Object id) {
    this.id = id;
  }


  public FilterExercisesResponseAllOfData name(Object name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(Object name) {
    this.name = name;
  }


  public FilterExercisesResponseAllOfData orgId(Object orgId) {
    this.orgId = JsonNullable.<Object>of(orgId);
    
    return this;
  }

   /**
   * (Optional) Integer ID of the customer Group (aka Organization) that owns this exercise. Exercises with an &#x60;org_id&#x60; of &#x60;null&#x60; are considered \&quot;global\&quot; (meaning no Group owns the exercise and it is useable by any customer). Exercises with a non-null value for &#x60;org_id&#x60; are \&quot;owned\&quot; by the corresponding customer organization and only visible to / usable by that customer.
   * @return orgId
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getOrgId() {
        return orgId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getOrgId_JsonNullable() {
    return orgId;
  }
  
  @JsonProperty(JSON_PROPERTY_ORG_ID)
  public void setOrgId_JsonNullable(JsonNullable<Object> orgId) {
    this.orgId = orgId;
  }

  public void setOrgId(Object orgId) {
    this.orgId = JsonNullable.<Object>of(orgId);
  }


  public FilterExercisesResponseAllOfData limbed(Object limbed) {
    
    this.limbed = limbed;
    return this;
  }

   /**
   * Whether or not the exercise is performed on right and left limbs individually. E.g. Back Squat is not limbed, whereas Split Squat is limbed.
   * @return limbed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIMBED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getLimbed() {
    return limbed;
  }


  @JsonProperty(JSON_PROPERTY_LIMBED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimbed(Object limbed) {
    this.limbed = limbed;
  }


  public FilterExercisesResponseAllOfData tracked(Object tracked) {
    this.tracked = JsonNullable.<Object>of(tracked);
    
    return this;
  }

   /**
   * Whether this exercise is tracked by the Perch camera or data is manually entered.
   * @return tracked
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getTracked() {
        return tracked.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TRACKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getTracked_JsonNullable() {
    return tracked;
  }
  
  @JsonProperty(JSON_PROPERTY_TRACKED)
  public void setTracked_JsonNullable(JsonNullable<Object> tracked) {
    this.tracked = tracked;
  }

  public void setTracked(Object tracked) {
    this.tracked = JsonNullable.<Object>of(tracked);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterExercisesResponseAllOfData filterExercisesResponseAllOfData = (FilterExercisesResponseAllOfData) o;
    return Objects.equals(this.id, filterExercisesResponseAllOfData.id) &&
        Objects.equals(this.name, filterExercisesResponseAllOfData.name) &&
        equalsNullable(this.orgId, filterExercisesResponseAllOfData.orgId) &&
        Objects.equals(this.limbed, filterExercisesResponseAllOfData.limbed) &&
        equalsNullable(this.tracked, filterExercisesResponseAllOfData.tracked);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, hashCodeNullable(orgId), limbed, hashCodeNullable(tracked));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterExercisesResponseAllOfData {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    limbed: ").append(toIndentedString(limbed)).append("\n");
    sb.append("    tracked: ").append(toIndentedString(tracked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

