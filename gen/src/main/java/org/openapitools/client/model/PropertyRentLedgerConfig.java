/*
 * SME Professional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.15.0-oas3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.MaintenancePost200ResponseValueCreatedDate;
import org.openapitools.client.model.PropertyRentLedgerConfigAppliesToDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PropertyRentLedgerConfig
 */
@JsonPropertyOrder({
  PropertyRentLedgerConfig.JSON_PROPERTY_ID,
  PropertyRentLedgerConfig.JSON_PROPERTY_DATE,
  PropertyRentLedgerConfig.JSON_PROPERTY_APPLIES_TO_DATE,
  PropertyRentLedgerConfig.JSON_PROPERTY_AMOUNT_RECEIVED,
  PropertyRentLedgerConfig.JSON_PROPERTY_AMOUNT_DUE,
  PropertyRentLedgerConfig.JSON_PROPERTY_DESCRIPTION,
  PropertyRentLedgerConfig.JSON_PROPERTY_SUBCATEGORY
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:30.009582082Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PropertyRentLedgerConfig {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_DATE = "date";
  private MaintenancePost200ResponseValueCreatedDate date;

  public static final String JSON_PROPERTY_APPLIES_TO_DATE = "applies_to_date";
  private PropertyRentLedgerConfigAppliesToDate appliesToDate;

  public static final String JSON_PROPERTY_AMOUNT_RECEIVED = "amount_received";
  private Double amountReceived;

  public static final String JSON_PROPERTY_AMOUNT_DUE = "amount_due";
  private Double amountDue;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_SUBCATEGORY = "subcategory";
  private String subcategory;

  public PropertyRentLedgerConfig() {
  }

  public PropertyRentLedgerConfig id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Payments received only
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public PropertyRentLedgerConfig date(MaintenancePost200ResponseValueCreatedDate date) {
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDate(MaintenancePost200ResponseValueCreatedDate date) {
    this.date = date;
  }


  public PropertyRentLedgerConfig appliesToDate(PropertyRentLedgerConfigAppliesToDate appliesToDate) {
    
    this.appliesToDate = appliesToDate;
    return this;
  }

   /**
   * Get appliesToDate
   * @return appliesToDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_APPLIES_TO_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyRentLedgerConfigAppliesToDate getAppliesToDate() {
    return appliesToDate;
  }


  @JsonProperty(JSON_PROPERTY_APPLIES_TO_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppliesToDate(PropertyRentLedgerConfigAppliesToDate appliesToDate) {
    this.appliesToDate = appliesToDate;
  }


  public PropertyRentLedgerConfig amountReceived(Double amountReceived) {
    
    this.amountReceived = amountReceived;
    return this;
  }

   /**
   * Payments received only
   * @return amountReceived
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_RECEIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAmountReceived() {
    return amountReceived;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_RECEIVED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountReceived(Double amountReceived) {
    this.amountReceived = amountReceived;
  }


  public PropertyRentLedgerConfig amountDue(Double amountDue) {
    
    this.amountDue = amountDue;
    return this;
  }

   /**
   * Payments owed only
   * @return amountDue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_DUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Double getAmountDue() {
    return amountDue;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_DUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountDue(Double amountDue) {
    this.amountDue = amountDue;
  }


  public PropertyRentLedgerConfig description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public PropertyRentLedgerConfig subcategory(String subcategory) {
    
    this.subcategory = subcategory;
    return this;
  }

   /**
   * Payments received only
   * @return subcategory
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBCATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubcategory() {
    return subcategory;
  }


  @JsonProperty(JSON_PROPERTY_SUBCATEGORY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubcategory(String subcategory) {
    this.subcategory = subcategory;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PropertyRentLedgerConfig propertyRentLedgerConfig = (PropertyRentLedgerConfig) o;
    return Objects.equals(this.id, propertyRentLedgerConfig.id) &&
        Objects.equals(this.date, propertyRentLedgerConfig.date) &&
        Objects.equals(this.appliesToDate, propertyRentLedgerConfig.appliesToDate) &&
        Objects.equals(this.amountReceived, propertyRentLedgerConfig.amountReceived) &&
        Objects.equals(this.amountDue, propertyRentLedgerConfig.amountDue) &&
        Objects.equals(this.description, propertyRentLedgerConfig.description) &&
        Objects.equals(this.subcategory, propertyRentLedgerConfig.subcategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, date, appliesToDate, amountReceived, amountDue, description, subcategory);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PropertyRentLedgerConfig {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    appliesToDate: ").append(toIndentedString(appliesToDate)).append("\n");
    sb.append("    amountReceived: ").append(toIndentedString(amountReceived)).append("\n");
    sb.append("    amountDue: ").append(toIndentedString(amountDue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    subcategory: ").append(toIndentedString(subcategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

