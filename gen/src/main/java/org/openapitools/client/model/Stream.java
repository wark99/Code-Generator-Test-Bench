/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Channel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Stream
 */
@JsonPropertyOrder({
  Stream.JSON_PROPERTY_STREAM_ID,
  Stream.JSON_PROPERTY_ORIGINAL_STREAM_ID,
  Stream.JSON_PROPERTY_RENDERED,
  Stream.JSON_PROPERTY_TRANSCODING_OPTION_ID,
  Stream.JSON_PROPERTY_URL,
  Stream.JSON_PROPERTY_AUDIO_BITRATE,
  Stream.JSON_PROPERTY_VIDEO_BITRATE,
  Stream.JSON_PROPERTY_LANGUAGE,
  Stream.JSON_PROPERTY_CREATED_AT,
  Stream.JSON_PROPERTY_INTERRUPTED_AT,
  Stream.JSON_PROPERTY_RESTRICTIONS_ID,
  Stream.JSON_PROPERTY_PUBLISHED,
  Stream.JSON_PROPERTY_RESOLUTION,
  Stream.JSON_PROPERTY_RECORDING_CONFIG_ID,
  Stream.JSON_PROPERTY_USERNAME,
  Stream.JSON_PROPERTY_PASS,
  Stream.JSON_PROPERTY_INTERRUPTED,
  Stream.JSON_PROPERTY_AUDIO_CODEC,
  Stream.JSON_PROPERTY_FRAME_RATE,
  Stream.JSON_PROPERTY_KEYFRAME_RATE,
  Stream.JSON_PROPERTY_INSTANT_CONNECTION,
  Stream.JSON_PROPERTY_CHANNEL
})
@JsonTypeName("stream")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Stream {
  public static final String JSON_PROPERTY_STREAM_ID = "stream_id";
  private String streamId;

  public static final String JSON_PROPERTY_ORIGINAL_STREAM_ID = "original_stream_id";
  private String originalStreamId;

  public static final String JSON_PROPERTY_RENDERED = "rendered";
  private Boolean rendered;

  public static final String JSON_PROPERTY_TRANSCODING_OPTION_ID = "transcoding_option_id";
  private Integer transcodingOptionId;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_AUDIO_BITRATE = "audio_bitrate";
  private Integer audioBitrate;

  public static final String JSON_PROPERTY_VIDEO_BITRATE = "video_bitrate";
  private Integer videoBitrate;

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private String language;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_INTERRUPTED_AT = "interrupted_at";
  private Integer interruptedAt;

  public static final String JSON_PROPERTY_RESTRICTIONS_ID = "restrictions_id";
  private Integer restrictionsId;

  public static final String JSON_PROPERTY_PUBLISHED = "published";
  private Boolean published;

  public static final String JSON_PROPERTY_RESOLUTION = "resolution";
  private Integer resolution;

  public static final String JSON_PROPERTY_RECORDING_CONFIG_ID = "recording_config_id";
  private Integer recordingConfigId;

  public static final String JSON_PROPERTY_USERNAME = "username";
  private String username;

  public static final String JSON_PROPERTY_PASS = "pass";
  private String pass;

  public static final String JSON_PROPERTY_INTERRUPTED = "interrupted";
  private Boolean interrupted;

  public static final String JSON_PROPERTY_AUDIO_CODEC = "audio_codec";
  private String audioCodec;

  public static final String JSON_PROPERTY_FRAME_RATE = "frame_rate";
  private String frameRate;

  public static final String JSON_PROPERTY_KEYFRAME_RATE = "keyframe_rate";
  private Integer keyframeRate;

  public static final String JSON_PROPERTY_INSTANT_CONNECTION = "instant_connection";
  private Integer instantConnection;

  public static final String JSON_PROPERTY_CHANNEL = "channel";
  private Channel channel;

  public Stream() {
  }

  public Stream streamId(String streamId) {
    
    this.streamId = streamId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;stream&#x60; that is related to the resource &#x60;stream&#x60;
   * @return streamId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStreamId() {
    return streamId;
  }


  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }


  public Stream originalStreamId(String originalStreamId) {
    
    this.originalStreamId = originalStreamId;
    return this;
  }

   /**
   * Get originalStreamId
   * @return originalStreamId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ORIGINAL_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getOriginalStreamId() {
    return originalStreamId;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOriginalStreamId(String originalStreamId) {
    this.originalStreamId = originalStreamId;
  }


  public Stream rendered(Boolean rendered) {
    
    this.rendered = rendered;
    return this;
  }

   /**
   * Get rendered
   * @return rendered
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RENDERED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getRendered() {
    return rendered;
  }


  @JsonProperty(JSON_PROPERTY_RENDERED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRendered(Boolean rendered) {
    this.rendered = rendered;
  }


  public Stream transcodingOptionId(Integer transcodingOptionId) {
    
    this.transcodingOptionId = transcodingOptionId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;Option transcoding&#x60; that is related to the resource &#x60;stream&#x60;
   * @return transcodingOptionId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSCODING_OPTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTranscodingOptionId() {
    return transcodingOptionId;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCODING_OPTION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTranscodingOptionId(Integer transcodingOptionId) {
    this.transcodingOptionId = transcodingOptionId;
  }


  public Stream url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }


  public Stream audioBitrate(Integer audioBitrate) {
    
    this.audioBitrate = audioBitrate;
    return this;
  }

   /**
   * Get audioBitrate
   * @return audioBitrate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUDIO_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAudioBitrate() {
    return audioBitrate;
  }


  @JsonProperty(JSON_PROPERTY_AUDIO_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAudioBitrate(Integer audioBitrate) {
    this.audioBitrate = audioBitrate;
  }


  public Stream videoBitrate(Integer videoBitrate) {
    
    this.videoBitrate = videoBitrate;
    return this;
  }

   /**
   * Get videoBitrate
   * @return videoBitrate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VIDEO_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getVideoBitrate() {
    return videoBitrate;
  }


  @JsonProperty(JSON_PROPERTY_VIDEO_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVideoBitrate(Integer videoBitrate) {
    this.videoBitrate = videoBitrate;
  }


  public Stream language(String language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLanguage(String language) {
    this.language = language;
  }


  public Stream createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp &#x60;stream&#x60; has been created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public Stream interruptedAt(Integer interruptedAt) {
    
    this.interruptedAt = interruptedAt;
    return this;
  }

   /**
   * Timestamp &#x60;stream&#x60; has been interrupted
   * @return interruptedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INTERRUPTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getInterruptedAt() {
    return interruptedAt;
  }


  @JsonProperty(JSON_PROPERTY_INTERRUPTED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterruptedAt(Integer interruptedAt) {
    this.interruptedAt = interruptedAt;
  }


  public Stream restrictionsId(Integer restrictionsId) {
    
    this.restrictionsId = restrictionsId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;restriction&#x60; that is related to the resource &#x60;stream&#x60;
   * @return restrictionsId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESTRICTIONS_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRestrictionsId() {
    return restrictionsId;
  }


  @JsonProperty(JSON_PROPERTY_RESTRICTIONS_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRestrictionsId(Integer restrictionsId) {
    this.restrictionsId = restrictionsId;
  }


  public Stream published(Boolean published) {
    
    this.published = published;
    return this;
  }

   /**
   * Get published
   * @return published
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PUBLISHED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getPublished() {
    return published;
  }


  @JsonProperty(JSON_PROPERTY_PUBLISHED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPublished(Boolean published) {
    this.published = published;
  }


  public Stream resolution(Integer resolution) {
    
    this.resolution = resolution;
    return this;
  }

   /**
   * Get resolution
   * @return resolution
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getResolution() {
    return resolution;
  }


  @JsonProperty(JSON_PROPERTY_RESOLUTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResolution(Integer resolution) {
    this.resolution = resolution;
  }


  public Stream recordingConfigId(Integer recordingConfigId) {
    
    this.recordingConfigId = recordingConfigId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;recording config&#x60; that is related to the resource &#x60;stream&#x60;
   * @return recordingConfigId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECORDING_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRecordingConfigId() {
    return recordingConfigId;
  }


  @JsonProperty(JSON_PROPERTY_RECORDING_CONFIG_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecordingConfigId(Integer recordingConfigId) {
    this.recordingConfigId = recordingConfigId;
  }


  public Stream username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Get username
   * @return username
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUsername() {
    return username;
  }


  @JsonProperty(JSON_PROPERTY_USERNAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUsername(String username) {
    this.username = username;
  }


  public Stream pass(String pass) {
    
    this.pass = pass;
    return this;
  }

   /**
   * Get pass
   * @return pass
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPass() {
    return pass;
  }


  @JsonProperty(JSON_PROPERTY_PASS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPass(String pass) {
    this.pass = pass;
  }


  public Stream interrupted(Boolean interrupted) {
    
    this.interrupted = interrupted;
    return this;
  }

   /**
   * Get interrupted
   * @return interrupted
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INTERRUPTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getInterrupted() {
    return interrupted;
  }


  @JsonProperty(JSON_PROPERTY_INTERRUPTED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterrupted(Boolean interrupted) {
    this.interrupted = interrupted;
  }


  public Stream audioCodec(String audioCodec) {
    
    this.audioCodec = audioCodec;
    return this;
  }

   /**
   * Get audioCodec
   * @return audioCodec
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUDIO_CODEC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAudioCodec() {
    return audioCodec;
  }


  @JsonProperty(JSON_PROPERTY_AUDIO_CODEC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAudioCodec(String audioCodec) {
    this.audioCodec = audioCodec;
  }


  public Stream frameRate(String frameRate) {
    
    this.frameRate = frameRate;
    return this;
  }

   /**
   * Get frameRate
   * @return frameRate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFrameRate() {
    return frameRate;
  }


  @JsonProperty(JSON_PROPERTY_FRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFrameRate(String frameRate) {
    this.frameRate = frameRate;
  }


  public Stream keyframeRate(Integer keyframeRate) {
    
    this.keyframeRate = keyframeRate;
    return this;
  }

   /**
   * Get keyframeRate
   * @return keyframeRate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KEYFRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getKeyframeRate() {
    return keyframeRate;
  }


  @JsonProperty(JSON_PROPERTY_KEYFRAME_RATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKeyframeRate(Integer keyframeRate) {
    this.keyframeRate = keyframeRate;
  }


  public Stream instantConnection(Integer instantConnection) {
    
    this.instantConnection = instantConnection;
    return this;
  }

   /**
   * Get instantConnection
   * @return instantConnection
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INSTANT_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getInstantConnection() {
    return instantConnection;
  }


  @JsonProperty(JSON_PROPERTY_INSTANT_CONNECTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInstantConnection(Integer instantConnection) {
    this.instantConnection = instantConnection;
  }


  public Stream channel(Channel channel) {
    
    this.channel = channel;
    return this;
  }

   /**
   * Get channel
   * @return channel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Channel getChannel() {
    return channel;
  }


  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannel(Channel channel) {
    this.channel = channel;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Stream stream = (Stream) o;
    return Objects.equals(this.streamId, stream.streamId) &&
        Objects.equals(this.originalStreamId, stream.originalStreamId) &&
        Objects.equals(this.rendered, stream.rendered) &&
        Objects.equals(this.transcodingOptionId, stream.transcodingOptionId) &&
        Objects.equals(this.url, stream.url) &&
        Objects.equals(this.audioBitrate, stream.audioBitrate) &&
        Objects.equals(this.videoBitrate, stream.videoBitrate) &&
        Objects.equals(this.language, stream.language) &&
        Objects.equals(this.createdAt, stream.createdAt) &&
        Objects.equals(this.interruptedAt, stream.interruptedAt) &&
        Objects.equals(this.restrictionsId, stream.restrictionsId) &&
        Objects.equals(this.published, stream.published) &&
        Objects.equals(this.resolution, stream.resolution) &&
        Objects.equals(this.recordingConfigId, stream.recordingConfigId) &&
        Objects.equals(this.username, stream.username) &&
        Objects.equals(this.pass, stream.pass) &&
        Objects.equals(this.interrupted, stream.interrupted) &&
        Objects.equals(this.audioCodec, stream.audioCodec) &&
        Objects.equals(this.frameRate, stream.frameRate) &&
        Objects.equals(this.keyframeRate, stream.keyframeRate) &&
        Objects.equals(this.instantConnection, stream.instantConnection) &&
        Objects.equals(this.channel, stream.channel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamId, originalStreamId, rendered, transcodingOptionId, url, audioBitrate, videoBitrate, language, createdAt, interruptedAt, restrictionsId, published, resolution, recordingConfigId, username, pass, interrupted, audioCodec, frameRate, keyframeRate, instantConnection, channel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Stream {\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    originalStreamId: ").append(toIndentedString(originalStreamId)).append("\n");
    sb.append("    rendered: ").append(toIndentedString(rendered)).append("\n");
    sb.append("    transcodingOptionId: ").append(toIndentedString(transcodingOptionId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    audioBitrate: ").append(toIndentedString(audioBitrate)).append("\n");
    sb.append("    videoBitrate: ").append(toIndentedString(videoBitrate)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    interruptedAt: ").append(toIndentedString(interruptedAt)).append("\n");
    sb.append("    restrictionsId: ").append(toIndentedString(restrictionsId)).append("\n");
    sb.append("    published: ").append(toIndentedString(published)).append("\n");
    sb.append("    resolution: ").append(toIndentedString(resolution)).append("\n");
    sb.append("    recordingConfigId: ").append(toIndentedString(recordingConfigId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    pass: ").append(toIndentedString(pass)).append("\n");
    sb.append("    interrupted: ").append(toIndentedString(interrupted)).append("\n");
    sb.append("    audioCodec: ").append(toIndentedString(audioCodec)).append("\n");
    sb.append("    frameRate: ").append(toIndentedString(frameRate)).append("\n");
    sb.append("    keyframeRate: ").append(toIndentedString(keyframeRate)).append("\n");
    sb.append("    instantConnection: ").append(toIndentedString(instantConnection)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

