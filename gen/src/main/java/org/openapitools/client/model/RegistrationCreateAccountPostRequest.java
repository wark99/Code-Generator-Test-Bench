/*
 * Childcare Provider API
 * Childcare Provider RESTful Service API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: p.oforduru@zodiac-software.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RegistrationCreateAccountPostRequest
 */
@JsonPropertyOrder({
  RegistrationCreateAccountPostRequest.JSON_PROPERTY_TYPE,
  RegistrationCreateAccountPostRequest.JSON_PROPERTY_EMAIL,
  RegistrationCreateAccountPostRequest.JSON_PROPERTY_MOBILE,
  RegistrationCreateAccountPostRequest.JSON_PROPERTY_PASSWORD,
  RegistrationCreateAccountPostRequest.JSON_PROPERTY_EDIT
})
@JsonTypeName("_registration_create_account_post_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:20:24.544913406Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RegistrationCreateAccountPostRequest {
  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    PARENT("parent"),
    
    PROVIDER("provider");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_MOBILE = "mobile";
  private String mobile;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_EDIT = "edit";
  private Boolean edit;

  public RegistrationCreateAccountPostRequest() {
  }

  public RegistrationCreateAccountPostRequest type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public RegistrationCreateAccountPostRequest email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(String email) {
    this.email = email;
  }


  public RegistrationCreateAccountPostRequest mobile(String mobile) {
    
    this.mobile = mobile;
    return this;
  }

   /**
   * Get mobile
   * @return mobile
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MOBILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMobile() {
    return mobile;
  }


  @JsonProperty(JSON_PROPERTY_MOBILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMobile(String mobile) {
    this.mobile = mobile;
  }


  public RegistrationCreateAccountPostRequest password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Get password
   * @return password
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(String password) {
    this.password = password;
  }


  public RegistrationCreateAccountPostRequest edit(Boolean edit) {
    
    this.edit = edit;
    return this;
  }

   /**
   * Get edit
   * @return edit
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEdit() {
    return edit;
  }


  @JsonProperty(JSON_PROPERTY_EDIT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEdit(Boolean edit) {
    this.edit = edit;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrationCreateAccountPostRequest registrationCreateAccountPostRequest = (RegistrationCreateAccountPostRequest) o;
    return Objects.equals(this.type, registrationCreateAccountPostRequest.type) &&
        Objects.equals(this.email, registrationCreateAccountPostRequest.email) &&
        Objects.equals(this.mobile, registrationCreateAccountPostRequest.mobile) &&
        Objects.equals(this.password, registrationCreateAccountPostRequest.password) &&
        Objects.equals(this.edit, registrationCreateAccountPostRequest.edit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, email, mobile, password, edit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrationCreateAccountPostRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    edit: ").append(toIndentedString(edit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

