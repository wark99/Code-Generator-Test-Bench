/*
 * Drip - Merchant API
 * API Documentation of endpoints available to Merchants. All requests need to contain the `X-API-KEY` received during the initial Drip Merchant Onboarding. If you do not have it, contact one of the admins.
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Checkout
 */
@JsonPropertyOrder({
  Checkout.JSON_PROPERTY_ID,
  Checkout.JSON_PROPERTY_MERCHANT_CODE,
  Checkout.JSON_PROPERTY_STATUS,
  Checkout.JSON_PROPERTY_FORM_URL,
  Checkout.JSON_PROPERTY_ORDER_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:11.928068984Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Checkout {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_MERCHANT_CODE = "merchantCode";
  private String merchantCode;

  /**
   * Gets or Sets status
   */
  public enum StatusEnum {
    MORE_INFO("MORE_INFO"),
    
    OK("OK"),
    
    KO("KO");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_FORM_URL = "formUrl";
  private String formUrl;

  public static final String JSON_PROPERTY_ORDER_ID = "orderId";
  private UUID orderId;

  public Checkout() {
  }

  public Checkout id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }


  public Checkout merchantCode(String merchantCode) {
    
    this.merchantCode = merchantCode;
    return this;
  }

   /**
   * Get merchantCode
   * @return merchantCode
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MERCHANT_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMerchantCode() {
    return merchantCode;
  }


  @JsonProperty(JSON_PROPERTY_MERCHANT_CODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMerchantCode(String merchantCode) {
    this.merchantCode = merchantCode;
  }


  public Checkout status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Checkout formUrl(String formUrl) {
    
    this.formUrl = formUrl;
    return this;
  }

   /**
   * Get formUrl
   * @return formUrl
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORM_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFormUrl() {
    return formUrl;
  }


  @JsonProperty(JSON_PROPERTY_FORM_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFormUrl(String formUrl) {
    this.formUrl = formUrl;
  }


  public Checkout orderId(UUID orderId) {
    
    this.orderId = orderId;
    return this;
  }

   /**
   * Get orderId
   * @return orderId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getOrderId() {
    return orderId;
  }


  @JsonProperty(JSON_PROPERTY_ORDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrderId(UUID orderId) {
    this.orderId = orderId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Checkout checkout = (Checkout) o;
    return Objects.equals(this.id, checkout.id) &&
        Objects.equals(this.merchantCode, checkout.merchantCode) &&
        Objects.equals(this.status, checkout.status) &&
        Objects.equals(this.formUrl, checkout.formUrl) &&
        Objects.equals(this.orderId, checkout.orderId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, merchantCode, status, formUrl, orderId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Checkout {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    merchantCode: ").append(toIndentedString(merchantCode)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    formUrl: ").append(toIndentedString(formUrl)).append("\n");
    sb.append("    orderId: ").append(toIndentedString(orderId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

