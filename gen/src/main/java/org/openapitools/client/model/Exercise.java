/*
 * Perch API
 * Perch API for accessing data from Perch. See our [API Guide](https://docs.google.com/document/d/1ms6LFNwFN4C4WkrfWs8Hlu5igFBpNLhNr7uLEkGmvJA) for guidance on best practices. <br/> <br/> Find out more about Perch at [https://perch.fit](https://perch.fit) or by contacting us at [support@perch.fit](mailto:support@perch.fit).
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@perch.fit
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Exercise
 */
@JsonPropertyOrder({
  Exercise.JSON_PROPERTY_ID,
  Exercise.JSON_PROPERTY_NAME,
  Exercise.JSON_PROPERTY_ORG_ID,
  Exercise.JSON_PROPERTY_LIMBED,
  Exercise.JSON_PROPERTY_TRACKED
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:20:41.221792118Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Exercise {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_ORG_ID = "org_id";
  private Integer orgId;

  public static final String JSON_PROPERTY_LIMBED = "limbed";
  private Boolean limbed;

  public static final String JSON_PROPERTY_TRACKED = "tracked";
  private Boolean tracked;

  public Exercise() {
  }

  public Exercise id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public Exercise name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Exercise orgId(Integer orgId) {
    
    this.orgId = orgId;
    return this;
  }

   /**
   * (Optional) Integer ID of the customer Group (aka Organization) that owns this exercise. Exercises with an &#x60;org_id&#x60; of &#x60;null&#x60; are considered \&quot;global\&quot; (meaning no Group owns the exercise and it is useable by any customer). Exercises with a non-null value for &#x60;org_id&#x60; are \&quot;owned\&quot; by the corresponding customer organization and only visible to / usable by that customer.
   * @return orgId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getOrgId() {
    return orgId;
  }


  @JsonProperty(JSON_PROPERTY_ORG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOrgId(Integer orgId) {
    this.orgId = orgId;
  }


  public Exercise limbed(Boolean limbed) {
    
    this.limbed = limbed;
    return this;
  }

   /**
   * Whether or not the exercise is performed on right and left limbs individually. E.g. Back Squat is not limbed, whereas Split Squat is limbed.
   * @return limbed
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LIMBED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getLimbed() {
    return limbed;
  }


  @JsonProperty(JSON_PROPERTY_LIMBED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimbed(Boolean limbed) {
    this.limbed = limbed;
  }


  public Exercise tracked(Boolean tracked) {
    
    this.tracked = tracked;
    return this;
  }

   /**
   * Whether this exercise is tracked by the Perch camera or data is manually entered.
   * @return tracked
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRACKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTracked() {
    return tracked;
  }


  @JsonProperty(JSON_PROPERTY_TRACKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTracked(Boolean tracked) {
    this.tracked = tracked;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Exercise exercise = (Exercise) o;
    return Objects.equals(this.id, exercise.id) &&
        Objects.equals(this.name, exercise.name) &&
        Objects.equals(this.orgId, exercise.orgId) &&
        Objects.equals(this.limbed, exercise.limbed) &&
        Objects.equals(this.tracked, exercise.tracked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, orgId, limbed, tracked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Exercise {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    limbed: ").append(toIndentedString(limbed)).append("\n");
    sb.append("    tracked: ").append(toIndentedString(tracked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

