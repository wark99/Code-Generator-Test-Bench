/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * All assets are SVGs so can be slightly resized without any issues.
 */
@JsonPropertyOrder({
  Branding.JSON_PROPERTY_LOGO,
  Branding.JSON_PROPERTY_ALTERNATE_LOGO,
  Branding.JSON_PROPERTY_ICON,
  Branding.JSON_PROPERTY_PRIMARY_COLOR,
  Branding.JSON_PROPERTY_TILE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:05:06.990716937Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Branding {
  public static final String JSON_PROPERTY_LOGO = "logo";
  private String logo;

  public static final String JSON_PROPERTY_ALTERNATE_LOGO = "alternateLogo";
  private String alternateLogo;

  public static final String JSON_PROPERTY_ICON = "icon";
  private String icon;

  public static final String JSON_PROPERTY_PRIMARY_COLOR = "primaryColor";
  private String primaryColor;

  public static final String JSON_PROPERTY_TILE = "tile";
  private String tile;

  public Branding() {
  }

  public Branding logo(String logo) {
    
    this.logo = logo;
    return this;
  }

   /**
   * File path of the institution&#39;s logo. For white backgrounds designed at 375 x 72, has built in spacing around it to normalize brand sizing.
   * @return logo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLogo() {
    return logo;
  }


  @JsonProperty(JSON_PROPERTY_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLogo(String logo) {
    this.logo = logo;
  }


  public Branding alternateLogo(String alternateLogo) {
    
    this.alternateLogo = alternateLogo;
    return this;
  }

   /**
   * File path of the institution&#39;s alternate logo. For colored backgrounds designed at 375 x 72 has built in spacing around it to normalize brand sizing.
   * @return alternateLogo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ALTERNATE_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAlternateLogo() {
    return alternateLogo;
  }


  @JsonProperty(JSON_PROPERTY_ALTERNATE_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAlternateLogo(String alternateLogo) {
    this.alternateLogo = alternateLogo;
  }


  public Branding icon(String icon) {
    
    this.icon = icon;
    return this;
  }

   /**
   * File path of the institution&#39;s icon. For search results designed at 40 x 40.
   * @return icon
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIcon() {
    return icon;
  }


  @JsonProperty(JSON_PROPERTY_ICON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIcon(String icon) {
    this.icon = icon;
  }


  public Branding primaryColor(String primaryColor) {
    
    this.primaryColor = primaryColor;
    return this;
  }

   /**
   * Hex code for the institution&#39;s primary color
   * @return primaryColor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIMARY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPrimaryColor() {
    return primaryColor;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryColor(String primaryColor) {
    this.primaryColor = primaryColor;
  }


  public Branding tile(String tile) {
    
    this.tile = tile;
    return this;
  }

   /**
   * File path of institution name logo. For popular banks designed at 160 x 72.
   * @return tile
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTile() {
    return tile;
  }


  @JsonProperty(JSON_PROPERTY_TILE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTile(String tile) {
    this.tile = tile;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Branding branding = (Branding) o;
    return Objects.equals(this.logo, branding.logo) &&
        Objects.equals(this.alternateLogo, branding.alternateLogo) &&
        Objects.equals(this.icon, branding.icon) &&
        Objects.equals(this.primaryColor, branding.primaryColor) &&
        Objects.equals(this.tile, branding.tile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(logo, alternateLogo, icon, primaryColor, tile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Branding {\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    alternateLogo: ").append(toIndentedString(alternateLogo)).append("\n");
    sb.append("    icon: ").append(toIndentedString(icon)).append("\n");
    sb.append("    primaryColor: ").append(toIndentedString(primaryColor)).append("\n");
    sb.append("    tile: ").append(toIndentedString(tile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

