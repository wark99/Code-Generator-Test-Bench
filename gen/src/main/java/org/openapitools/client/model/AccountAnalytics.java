/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StateAttribute;
import org.openapitools.client.model.StreamModel;
import org.openapitools.client.model.TransactionalAttribute;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Analytics calculated for one account in the report.
 */
@JsonPropertyOrder({
  AccountAnalytics.JSON_PROPERTY_TRANSACTIONAL_ATTRIBUTES,
  AccountAnalytics.JSON_PROPERTY_STATE_ATTRIBUTES,
  AccountAnalytics.JSON_PROPERTY_STREAMS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T14:25:40.114879426Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AccountAnalytics {
  public static final String JSON_PROPERTY_TRANSACTIONAL_ATTRIBUTES = "transactionalAttributes";
  private List<TransactionalAttribute> transactionalAttributes = new ArrayList<>();

  public static final String JSON_PROPERTY_STATE_ATTRIBUTES = "stateAttributes";
  private List<StateAttribute> stateAttributes = new ArrayList<>();

  public static final String JSON_PROPERTY_STREAMS = "streams";
  private List<StreamModel> streams = new ArrayList<>();

  public AccountAnalytics() {
  }

  public AccountAnalytics transactionalAttributes(List<TransactionalAttribute> transactionalAttributes) {
    
    this.transactionalAttributes = transactionalAttributes;
    return this;
  }

  public AccountAnalytics addTransactionalAttributesItem(TransactionalAttribute transactionalAttributesItem) {
    if (this.transactionalAttributes == null) {
      this.transactionalAttributes = new ArrayList<>();
    }
    this.transactionalAttributes.add(transactionalAttributesItem);
    return this;
  }

   /**
   * List of calculated transactional attributes
   * @return transactionalAttributes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSACTIONAL_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<TransactionalAttribute> getTransactionalAttributes() {
    return transactionalAttributes;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTIONAL_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTransactionalAttributes(List<TransactionalAttribute> transactionalAttributes) {
    this.transactionalAttributes = transactionalAttributes;
  }


  public AccountAnalytics stateAttributes(List<StateAttribute> stateAttributes) {
    
    this.stateAttributes = stateAttributes;
    return this;
  }

  public AccountAnalytics addStateAttributesItem(StateAttribute stateAttributesItem) {
    if (this.stateAttributes == null) {
      this.stateAttributes = new ArrayList<>();
    }
    this.stateAttributes.add(stateAttributesItem);
    return this;
  }

   /**
   * List of calculated state attributes
   * @return stateAttributes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATE_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<StateAttribute> getStateAttributes() {
    return stateAttributes;
  }


  @JsonProperty(JSON_PROPERTY_STATE_ATTRIBUTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStateAttributes(List<StateAttribute> stateAttributes) {
    this.stateAttributes = stateAttributes;
  }


  public AccountAnalytics streams(List<StreamModel> streams) {
    
    this.streams = streams;
    return this;
  }

  public AccountAnalytics addStreamsItem(StreamModel streamsItem) {
    if (this.streams == null) {
      this.streams = new ArrayList<>();
    }
    this.streams.add(streamsItem);
    return this;
  }

   /**
   * List of generated streams
   * @return streams
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STREAMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<StreamModel> getStreams() {
    return streams;
  }


  @JsonProperty(JSON_PROPERTY_STREAMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStreams(List<StreamModel> streams) {
    this.streams = streams;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountAnalytics accountAnalytics = (AccountAnalytics) o;
    return Objects.equals(this.transactionalAttributes, accountAnalytics.transactionalAttributes) &&
        Objects.equals(this.stateAttributes, accountAnalytics.stateAttributes) &&
        Objects.equals(this.streams, accountAnalytics.streams);
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionalAttributes, stateAttributes, streams);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountAnalytics {\n");
    sb.append("    transactionalAttributes: ").append(toIndentedString(transactionalAttributes)).append("\n");
    sb.append("    stateAttributes: ").append(toIndentedString(stateAttributes)).append("\n");
    sb.append("    streams: ").append(toIndentedString(streams)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

