/*
 * Formuesgrunnlag for eiendomsskatt API
 * Tjenesten leverer fastsatte formuesgrunnlag for fast eiendom som grunnlag for eiendomsskatt, og inneholder informasjon om eiendomsopplysninger, adresseopplysninger og eiendomsrelasjoner for fast eiendom, samt beregnede markedsverdier med tilhørende grunnlag for boliger
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Eiendomsidentifikator;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Relasjon mellom fast eiendom som formuesobjekt hvor en fast eiendom kan være enten forelder i relasjonen eller barn. Eksempel: Relasjonen samlet hvor flere formuesobjekt som fast eiendom skal ses på som et formuesobjekt, og har en hovedeiendom (forelder) og tilleggseiendommer (barn)
 */
@JsonPropertyOrder({
  Eiendomsrelasjon.JSON_PROPERTY_RELASJONSTYPE,
  Eiendomsrelasjon.JSON_PROPERTY_RELASJONSROLLE,
  Eiendomsrelasjon.JSON_PROPERTY_RELASJONSMEDLEMMER,
  Eiendomsrelasjon.JSON_PROPERTY_FORELDER
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:25:17.794277948Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Eiendomsrelasjon {
  public static final String JSON_PROPERTY_RELASJONSTYPE = "relasjonstype";
  private String relasjonstype;

  public static final String JSON_PROPERTY_RELASJONSROLLE = "relasjonsrolle";
  private String relasjonsrolle;

  public static final String JSON_PROPERTY_RELASJONSMEDLEMMER = "relasjonsmedlemmer";
  private List<Eiendomsidentifikator> relasjonsmedlemmer;

  public static final String JSON_PROPERTY_FORELDER = "forelder";
  private Eiendomsidentifikator forelder;

  public Eiendomsrelasjon() {
  }

  public Eiendomsrelasjon relasjonstype(String relasjonstype) {
    
    this.relasjonstype = relasjonstype;
    return this;
  }

   /**
   * Kodeliste som beskriver type relasjon mellom eiendommer, for eksempel en splittet relasjon eller seksjonert (&lt;a href&#x3D;&#39;https://data.skatteetaten.no/web/datakatalog/kodeliste/af719f1a-2ba5-4f54-92f7-26334a92c200&#39;&gt;Kodelistereferanse&lt;/a&gt;)
   * @return relasjonstype
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELASJONSTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRelasjonstype() {
    return relasjonstype;
  }


  @JsonProperty(JSON_PROPERTY_RELASJONSTYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelasjonstype(String relasjonstype) {
    this.relasjonstype = relasjonstype;
  }


  public Eiendomsrelasjon relasjonsrolle(String relasjonsrolle) {
    
    this.relasjonsrolle = relasjonsrolle;
    return this;
  }

   /**
   * Kodeliste som beskriver roller en fast eiendom som formuesobjekt har i en eiendomsrelasjon til en eller flere andre fast eiendom som formuesobjekt, da i enten rollen forelder (parent) eller barn (child) (&lt;a href&#x3D;&#39;https://data.skatteetaten.no/web/datakatalog/kodeliste/6ea96ba6-c118-4c40-a077-3723ef719a19&#39;&gt;Kodelistereferanse&lt;/a&gt;)
   * @return relasjonsrolle
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELASJONSROLLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRelasjonsrolle() {
    return relasjonsrolle;
  }


  @JsonProperty(JSON_PROPERTY_RELASJONSROLLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelasjonsrolle(String relasjonsrolle) {
    this.relasjonsrolle = relasjonsrolle;
  }


  public Eiendomsrelasjon relasjonsmedlemmer(List<Eiendomsidentifikator> relasjonsmedlemmer) {
    
    this.relasjonsmedlemmer = relasjonsmedlemmer;
    return this;
  }

  public Eiendomsrelasjon addRelasjonsmedlemmerItem(Eiendomsidentifikator relasjonsmedlemmerItem) {
    if (this.relasjonsmedlemmer == null) {
      this.relasjonsmedlemmer = new ArrayList<>();
    }
    this.relasjonsmedlemmer.add(relasjonsmedlemmerItem);
    return this;
  }

   /**
   * Angir hvilke eiendommer som har en søsken-relasjon til denne eiendommen
   * @return relasjonsmedlemmer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RELASJONSMEDLEMMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Eiendomsidentifikator> getRelasjonsmedlemmer() {
    return relasjonsmedlemmer;
  }


  @JsonProperty(JSON_PROPERTY_RELASJONSMEDLEMMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRelasjonsmedlemmer(List<Eiendomsidentifikator> relasjonsmedlemmer) {
    this.relasjonsmedlemmer = relasjonsmedlemmer;
  }


  public Eiendomsrelasjon forelder(Eiendomsidentifikator forelder) {
    
    this.forelder = forelder;
    return this;
  }

   /**
   * Get forelder
   * @return forelder
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FORELDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Eiendomsidentifikator getForelder() {
    return forelder;
  }


  @JsonProperty(JSON_PROPERTY_FORELDER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForelder(Eiendomsidentifikator forelder) {
    this.forelder = forelder;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Eiendomsrelasjon eiendomsrelasjon = (Eiendomsrelasjon) o;
    return Objects.equals(this.relasjonstype, eiendomsrelasjon.relasjonstype) &&
        Objects.equals(this.relasjonsrolle, eiendomsrelasjon.relasjonsrolle) &&
        Objects.equals(this.relasjonsmedlemmer, eiendomsrelasjon.relasjonsmedlemmer) &&
        Objects.equals(this.forelder, eiendomsrelasjon.forelder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(relasjonstype, relasjonsrolle, relasjonsmedlemmer, forelder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Eiendomsrelasjon {\n");
    sb.append("    relasjonstype: ").append(toIndentedString(relasjonstype)).append("\n");
    sb.append("    relasjonsrolle: ").append(toIndentedString(relasjonsrolle)).append("\n");
    sb.append("    relasjonsmedlemmer: ").append(toIndentedString(relasjonsmedlemmer)).append("\n");
    sb.append("    forelder: ").append(toIndentedString(forelder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

