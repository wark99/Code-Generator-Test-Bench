/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Deductions
 */
@JsonPropertyOrder({
  Deductions.JSON_PROPERTY_TYPE,
  Deductions.JSON_PROPERTY_AMOUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:34:32.874275138Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Deductions {
  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public Deductions() {
  }

  public Deductions type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Deduction types:  * &#x60;Federal tax&#x60;: Federal tax withholdings  * &#x60;State tax&#x60;: State tax withholdings  * &#x60;Local tax&#x60;: Local tax withholdings  * &#x60;Social security tax&#x60;: Social security tax withholdings  * &#x60;Medicare tax&#x60;: Medicare withholdings  * &#x60;SUI SDI VPDI tax&#x60;: SUI SDI VPDI tax  * Retirement deductions: Retirement withholdings  * &#x60;Benefit deductions&#x60;: Medical/Health benefits withholdings (i.e. medical, dental, vision, insurance)  * &#x60;Garnishment deductions&#x60;: Garnishment withholdings, (i.e. bankruptcy, student loan, state garnishments, tax levy garnishments, child support)  * &#x60;Other deductions&#x60;: Other withholdings, includes any other uncommon withholdings, pension plan, stock plans, etc. 
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(String type) {
    this.type = type;
  }


  public Deductions amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount associated with deduction
   * @return amount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deductions deductions = (Deductions) o;
    return Objects.equals(this.type, deductions.type) &&
        Objects.equals(this.amount, deductions.amount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, amount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deductions {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

