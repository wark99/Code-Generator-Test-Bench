/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Uploadsegment
 */
@JsonPropertyOrder({
  Uploadsegment.JSON_PROPERTY_NUMBER,
  Uploadsegment.JSON_PROPERTY_STATUS,
  Uploadsegment.JSON_PROPERTY_CREATED_AT,
  Uploadsegment.JSON_PROPERTY_SIZE,
  Uploadsegment.JSON_PROPERTY_HASH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Uploadsegment {
  public static final String JSON_PROPERTY_NUMBER = "number";
  private Integer number;

  /**
   * The chunk status during the upload.&lt;note&gt;&lt;strong&gt;error&lt;/strong&gt;: Something was wrong chunk was not correctly received, retried to send the same chunk.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;ok&lt;/strong&gt;: Chunk has been received.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;uploading&lt;/strong&gt;: Chunks still uploading.&lt;/note&gt;
   */
  public enum StatusEnum {
    ERROR("error"),
    
    OK("ok"),
    
    UPLOADING("uploading");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_SIZE = "size";
  private Integer size;

  public static final String JSON_PROPERTY_HASH = "hash";
  private String hash;

  public Uploadsegment() {
  }

  public Uploadsegment number(Integer number) {
    
    this.number = number;
    return this;
  }

   /**
   * Index of the chunk to compute the final object correctly
   * @return number
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getNumber() {
    return number;
  }


  @JsonProperty(JSON_PROPERTY_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumber(Integer number) {
    this.number = number;
  }


  public Uploadsegment status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * The chunk status during the upload.&lt;note&gt;&lt;strong&gt;error&lt;/strong&gt;: Something was wrong chunk was not correctly received, retried to send the same chunk.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;ok&lt;/strong&gt;: Chunk has been received.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;uploading&lt;/strong&gt;: Chunks still uploading.&lt;/note&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Uploadsegment createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp &#x60;Upload segment&#x60; was created at
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public Uploadsegment size(Integer size) {
    
    this.size = size;
    return this;
  }

   /**
   * Chunk uploaded size, computed
   * @return size
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSize() {
    return size;
  }


  @JsonProperty(JSON_PROPERTY_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSize(Integer size) {
    this.size = size;
  }


  public Uploadsegment hash(String hash) {
    
    this.hash = hash;
    return this;
  }

   /**
   * Chunk uploaded hash, computed
   * @return hash
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getHash() {
    return hash;
  }


  @JsonProperty(JSON_PROPERTY_HASH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHash(String hash) {
    this.hash = hash;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Uploadsegment uploadsegment = (Uploadsegment) o;
    return Objects.equals(this.number, uploadsegment.number) &&
        Objects.equals(this.status, uploadsegment.status) &&
        Objects.equals(this.createdAt, uploadsegment.createdAt) &&
        Objects.equals(this.size, uploadsegment.size) &&
        Objects.equals(this.hash, uploadsegment.hash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(number, status, createdAt, size, hash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Uploadsegment {\n");
    sb.append("    number: ").append(toIndentedString(number)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    hash: ").append(toIndentedString(hash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

