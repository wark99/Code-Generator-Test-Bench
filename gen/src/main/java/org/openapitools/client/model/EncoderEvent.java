/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * EncoderEvent
 */
@JsonPropertyOrder({
  EncoderEvent.JSON_PROPERTY_MOUNTPOINT,
  EncoderEvent.JSON_PROPERTY_TYPE,
  EncoderEvent.JSON_PROPERTY_DATE,
  EncoderEvent.JSON_PROPERTY_STREAM_ID,
  EncoderEvent.JSON_PROPERTY_IS_TRANSCODING,
  EncoderEvent.JSON_PROPERTY_IS_SOURCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class EncoderEvent {
  public static final String JSON_PROPERTY_MOUNTPOINT = "mountpoint";
  private String mountpoint;

  /**
   * The type of event
   */
  public enum TypeEnum {
    BAD_PASSWORD("bad_password"),
    
    START("start"),
    
    STOP("stop");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_DATE = "date";
  private String date;

  public static final String JSON_PROPERTY_STREAM_ID = "stream_id";
  private Integer streamId;

  public static final String JSON_PROPERTY_IS_TRANSCODING = "is_transcoding";
  private Boolean isTranscoding;

  public static final String JSON_PROPERTY_IS_SOURCE = "is_source";
  private Boolean isSource;

  public EncoderEvent() {
  }

  public EncoderEvent mountpoint(String mountpoint) {
    
    this.mountpoint = mountpoint;
    return this;
  }

   /**
   * The mountpoint has the event
   * @return mountpoint
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MOUNTPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMountpoint() {
    return mountpoint;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMountpoint(String mountpoint) {
    this.mountpoint = mountpoint;
  }


  public EncoderEvent type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of event
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public EncoderEvent date(String date) {
    
    this.date = date;
    return this;
  }

   /**
   * The date of the encoder event
   * @return date
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDate() {
    return date;
  }


  @JsonProperty(JSON_PROPERTY_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDate(String date) {
    this.date = date;
  }


  public EncoderEvent streamId(Integer streamId) {
    
    this.streamId = streamId;
    return this;
  }

   /**
   * The stream id has the event
   * @return streamId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStreamId() {
    return streamId;
  }


  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStreamId(Integer streamId) {
    this.streamId = streamId;
  }


  public EncoderEvent isTranscoding(Boolean isTranscoding) {
    
    this.isTranscoding = isTranscoding;
    return this;
  }

   /**
   * Is a transcoded stream ?
   * @return isTranscoding
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_TRANSCODING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsTranscoding() {
    return isTranscoding;
  }


  @JsonProperty(JSON_PROPERTY_IS_TRANSCODING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsTranscoding(Boolean isTranscoding) {
    this.isTranscoding = isTranscoding;
  }


  public EncoderEvent isSource(Boolean isSource) {
    
    this.isSource = isSource;
    return this;
  }

   /**
   * Is a source stream?
   * @return isSource
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsSource() {
    return isSource;
  }


  @JsonProperty(JSON_PROPERTY_IS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsSource(Boolean isSource) {
    this.isSource = isSource;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EncoderEvent encoderEvent = (EncoderEvent) o;
    return Objects.equals(this.mountpoint, encoderEvent.mountpoint) &&
        Objects.equals(this.type, encoderEvent.type) &&
        Objects.equals(this.date, encoderEvent.date) &&
        Objects.equals(this.streamId, encoderEvent.streamId) &&
        Objects.equals(this.isTranscoding, encoderEvent.isTranscoding) &&
        Objects.equals(this.isSource, encoderEvent.isSource);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mountpoint, type, date, streamId, isTranscoding, isSource);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EncoderEvent {\n");
    sb.append("    mountpoint: ").append(toIndentedString(mountpoint)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    isTranscoding: ").append(toIndentedString(isTranscoding)).append("\n");
    sb.append("    isSource: ").append(toIndentedString(isSource)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

