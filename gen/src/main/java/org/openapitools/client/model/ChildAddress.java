/*
 * kita-app - kinddatenEAI Schnittstellenspezifikation
 * Schnittstellenspezifikation für die Übertragung von Kinddaten aus dem kf+ über eine kinddatenEAI an die kita-app.
 *
 * The version of the OpenAPI document: 0.0.2
 * Contact: itm.km23@muenchen.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Adresse des Kindes. Wird aus der Adresse der SB1 | SB2 bzw. der abweichenden (ABW) Adresse berechnet. Berechnung abhängig von [WOHNHAFT_BEI]
 */
@JsonPropertyOrder({
  ChildAddress.JSON_PROPERTY_STREET,
  ChildAddress.JSON_PROPERTY_STREET_NO,
  ChildAddress.JSON_PROPERTY_CITY,
  ChildAddress.JSON_PROPERTY_ZIP_CODE
})
@JsonTypeName("Child_address")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:16:34.786677241Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ChildAddress {
  public static final String JSON_PROPERTY_STREET = "street";
  private String street;

  public static final String JSON_PROPERTY_STREET_NO = "streetNo";
  private String streetNo;

  public static final String JSON_PROPERTY_CITY = "city";
  private String city;

  public static final String JSON_PROPERTY_ZIP_CODE = "zipCode";
  private String zipCode;

  public ChildAddress() {
  }

  public ChildAddress street(String street) {
    
    this.street = street;
    return this;
  }

   /**
   * Strasse des Kindes [SB1_STRASSE | SB2_STRASSE | ABW_STRASSE]
   * @return street
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STREET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStreet() {
    return street;
  }


  @JsonProperty(JSON_PROPERTY_STREET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreet(String street) {
    this.street = street;
  }


  public ChildAddress streetNo(String streetNo) {
    
    this.streetNo = streetNo;
    return this;
  }

   /**
   * Hausnummer des Kindes [SB1_HAUSNUMMER | SB2_HAUSNUMMER | ABW_HAUSNUMMER]
   * @return streetNo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STREET_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStreetNo() {
    return streetNo;
  }


  @JsonProperty(JSON_PROPERTY_STREET_NO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStreetNo(String streetNo) {
    this.streetNo = streetNo;
  }


  public ChildAddress city(String city) {
    
    this.city = city;
    return this;
  }

   /**
   * Wohnort des Kindes [SB1_ORT | SB2_ORT | ABW_ORT]
   * @return city
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCity() {
    return city;
  }


  @JsonProperty(JSON_PROPERTY_CITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCity(String city) {
    this.city = city;
  }


  public ChildAddress zipCode(String zipCode) {
    
    this.zipCode = zipCode;
    return this;
  }

   /**
   * Postleitzahl des Wohnortes des Kindes [SB1_POSTLEITZAHL | SB2_POSTLEITZAHL | ABW_POSTLEITZAHL]
   * @return zipCode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ZIP_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getZipCode() {
    return zipCode;
  }


  @JsonProperty(JSON_PROPERTY_ZIP_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setZipCode(String zipCode) {
    this.zipCode = zipCode;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChildAddress childAddress = (ChildAddress) o;
    return Objects.equals(this.street, childAddress.street) &&
        Objects.equals(this.streetNo, childAddress.streetNo) &&
        Objects.equals(this.city, childAddress.city) &&
        Objects.equals(this.zipCode, childAddress.zipCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(street, streetNo, city, zipCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChildAddress {\n");
    sb.append("    street: ").append(toIndentedString(street)).append("\n");
    sb.append("    streetNo: ").append(toIndentedString(streetNo)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    zipCode: ").append(toIndentedString(zipCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

