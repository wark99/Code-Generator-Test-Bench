/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CashFlowInflowAttributes;
import org.openapitools.client.model.CashFlowNegativeTriggers;
import org.openapitools.client.model.CashFlowOutflowAttributes;
import org.openapitools.client.model.CashFlowTransactionAnalyticsAttributes;
import org.openapitools.client.model.ObbDateRangeAndAmount;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Cash flow analytics metrics and calculations
 */
@JsonPropertyOrder({
  CashFlowAnalyticsMetrics.JSON_PROPERTY_INFLOW,
  CashFlowAnalyticsMetrics.JSON_PROPERTY_NEGATIVE_TRIGGERS,
  CashFlowAnalyticsMetrics.JSON_PROPERTY_OUTFLOW,
  CashFlowAnalyticsMetrics.JSON_PROPERTY_REVENUE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowAnalyticsMetrics.JSON_PROPERTY_REVENUE_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowAnalyticsMetrics.JSON_PROPERTY_TRANSACTION_ANALYTICS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:05:06.990716937Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CashFlowAnalyticsMetrics {
  public static final String JSON_PROPERTY_INFLOW = "inflow";
  private CashFlowInflowAttributes inflow;

  public static final String JSON_PROPERTY_NEGATIVE_TRIGGERS = "negativeTriggers";
  private CashFlowNegativeTriggers negativeTriggers;

  public static final String JSON_PROPERTY_OUTFLOW = "outflow";
  private CashFlowOutflowAttributes outflow;

  public static final String JSON_PROPERTY_REVENUE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "revenueByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> revenueByMonthForTheReportTimePeriod;

  public static final String JSON_PROPERTY_REVENUE_FOR_THE_REPORT_TIME_PERIOD = "revenueForTheReportTimePeriod";
  private BigDecimal revenueForTheReportTimePeriod;

  public static final String JSON_PROPERTY_TRANSACTION_ANALYTICS = "transactionAnalytics";
  private CashFlowTransactionAnalyticsAttributes transactionAnalytics;

  public CashFlowAnalyticsMetrics() {
  }

  public CashFlowAnalyticsMetrics inflow(CashFlowInflowAttributes inflow) {
    
    this.inflow = inflow;
    return this;
  }

   /**
   * Get inflow
   * @return inflow
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INFLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CashFlowInflowAttributes getInflow() {
    return inflow;
  }


  @JsonProperty(JSON_PROPERTY_INFLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInflow(CashFlowInflowAttributes inflow) {
    this.inflow = inflow;
  }


  public CashFlowAnalyticsMetrics negativeTriggers(CashFlowNegativeTriggers negativeTriggers) {
    
    this.negativeTriggers = negativeTriggers;
    return this;
  }

   /**
   * Get negativeTriggers
   * @return negativeTriggers
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NEGATIVE_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CashFlowNegativeTriggers getNegativeTriggers() {
    return negativeTriggers;
  }


  @JsonProperty(JSON_PROPERTY_NEGATIVE_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNegativeTriggers(CashFlowNegativeTriggers negativeTriggers) {
    this.negativeTriggers = negativeTriggers;
  }


  public CashFlowAnalyticsMetrics outflow(CashFlowOutflowAttributes outflow) {
    
    this.outflow = outflow;
    return this;
  }

   /**
   * Get outflow
   * @return outflow
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUTFLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CashFlowOutflowAttributes getOutflow() {
    return outflow;
  }


  @JsonProperty(JSON_PROPERTY_OUTFLOW)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutflow(CashFlowOutflowAttributes outflow) {
    this.outflow = outflow;
  }


  public CashFlowAnalyticsMetrics revenueByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> revenueByMonthForTheReportTimePeriod) {
    
    this.revenueByMonthForTheReportTimePeriod = revenueByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowAnalyticsMetrics addRevenueByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount revenueByMonthForTheReportTimePeriodItem) {
    if (this.revenueByMonthForTheReportTimePeriod == null) {
      this.revenueByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.revenueByMonthForTheReportTimePeriod.add(revenueByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Sum of all transactions categorized as revenue, split by months
   * @return revenueByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVENUE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDateRangeAndAmount> getRevenueByMonthForTheReportTimePeriod() {
    return revenueByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_REVENUE_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevenueByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> revenueByMonthForTheReportTimePeriod) {
    this.revenueByMonthForTheReportTimePeriod = revenueByMonthForTheReportTimePeriod;
  }


  public CashFlowAnalyticsMetrics revenueForTheReportTimePeriod(BigDecimal revenueForTheReportTimePeriod) {
    
    this.revenueForTheReportTimePeriod = revenueForTheReportTimePeriod;
    return this;
  }

   /**
   * Sum of all transactions categorized as revenue
   * @return revenueForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REVENUE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRevenueForTheReportTimePeriod() {
    return revenueForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_REVENUE_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRevenueForTheReportTimePeriod(BigDecimal revenueForTheReportTimePeriod) {
    this.revenueForTheReportTimePeriod = revenueForTheReportTimePeriod;
  }


  public CashFlowAnalyticsMetrics transactionAnalytics(CashFlowTransactionAnalyticsAttributes transactionAnalytics) {
    
    this.transactionAnalytics = transactionAnalytics;
    return this;
  }

   /**
   * Get transactionAnalytics
   * @return transactionAnalytics
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_ANALYTICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CashFlowTransactionAnalyticsAttributes getTransactionAnalytics() {
    return transactionAnalytics;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_ANALYTICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionAnalytics(CashFlowTransactionAnalyticsAttributes transactionAnalytics) {
    this.transactionAnalytics = transactionAnalytics;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowAnalyticsMetrics cashFlowAnalyticsMetrics = (CashFlowAnalyticsMetrics) o;
    return Objects.equals(this.inflow, cashFlowAnalyticsMetrics.inflow) &&
        Objects.equals(this.negativeTriggers, cashFlowAnalyticsMetrics.negativeTriggers) &&
        Objects.equals(this.outflow, cashFlowAnalyticsMetrics.outflow) &&
        Objects.equals(this.revenueByMonthForTheReportTimePeriod, cashFlowAnalyticsMetrics.revenueByMonthForTheReportTimePeriod) &&
        Objects.equals(this.revenueForTheReportTimePeriod, cashFlowAnalyticsMetrics.revenueForTheReportTimePeriod) &&
        Objects.equals(this.transactionAnalytics, cashFlowAnalyticsMetrics.transactionAnalytics);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inflow, negativeTriggers, outflow, revenueByMonthForTheReportTimePeriod, revenueForTheReportTimePeriod, transactionAnalytics);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowAnalyticsMetrics {\n");
    sb.append("    inflow: ").append(toIndentedString(inflow)).append("\n");
    sb.append("    negativeTriggers: ").append(toIndentedString(negativeTriggers)).append("\n");
    sb.append("    outflow: ").append(toIndentedString(outflow)).append("\n");
    sb.append("    revenueByMonthForTheReportTimePeriod: ").append(toIndentedString(revenueByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    revenueForTheReportTimePeriod: ").append(toIndentedString(revenueForTheReportTimePeriod)).append("\n");
    sb.append("    transactionAnalytics: ").append(toIndentedString(transactionAnalytics)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

