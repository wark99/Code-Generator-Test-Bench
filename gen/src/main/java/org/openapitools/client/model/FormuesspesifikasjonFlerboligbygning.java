/*
 * Formuesgrunnlag for eiendomsskatt API
 * Tjenesten leverer fastsatte formuesgrunnlag for fast eiendom som grunnlag for eiendomsskatt, og inneholder informasjon om eiendomsopplysninger, adresseopplysninger og eiendomsrelasjoner for fast eiendom, samt beregnede markedsverdier med tilhørende grunnlag for boliger
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UseksjonertBoenhet;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Opplysninger som har betydning for beregning av formuesverdi spesifikt for flerboligbygning
 */
@JsonPropertyOrder({
  FormuesspesifikasjonFlerboligbygning.JSON_PROPERTY_BELIGGENHETSKODE,
  FormuesspesifikasjonFlerboligbygning.JSON_PROPERTY_BEREGNET_MARKEDSVERDI,
  FormuesspesifikasjonFlerboligbygning.JSON_PROPERTY_USEKSJONERT_BOENHET
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:25:17.794277948Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class FormuesspesifikasjonFlerboligbygning {
  public static final String JSON_PROPERTY_BELIGGENHETSKODE = "beliggenhetskode";
  private String beliggenhetskode;

  public static final String JSON_PROPERTY_BEREGNET_MARKEDSVERDI = "beregnetMarkedsverdi";
  private Long beregnetMarkedsverdi;

  public static final String JSON_PROPERTY_USEKSJONERT_BOENHET = "useksjonertBoenhet";
  private List<UseksjonertBoenhet> useksjonertBoenhet;

  public FormuesspesifikasjonFlerboligbygning() {
  }

  public FormuesspesifikasjonFlerboligbygning beliggenhetskode(String beliggenhetskode) {
    
    this.beliggenhetskode = beliggenhetskode;
    return this;
  }

   /**
   * En verdi mellom 1-7 som angir hvor tettbygd området boligen ligger i er, basert på antall innbyggere (&lt;a href&#x3D;&#39;https://data.skatteetaten.no/web/datakatalog/kodeliste/20b4d3dc-2d8d-443e-ac66-6154dd92ad49&#39;&gt;Kodelistereferanse&lt;/a&gt;)
   * @return beliggenhetskode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BELIGGENHETSKODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBeliggenhetskode() {
    return beliggenhetskode;
  }


  @JsonProperty(JSON_PROPERTY_BELIGGENHETSKODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeliggenhetskode(String beliggenhetskode) {
    this.beliggenhetskode = beliggenhetskode;
  }


  public FormuesspesifikasjonFlerboligbygning beregnetMarkedsverdi(Long beregnetMarkedsverdi) {
    
    this.beregnetMarkedsverdi = beregnetMarkedsverdi;
    return this;
  }

   /**
   * en sum av penger i hele kroner brukt i en kontekst. Dette kan være en transaksjon, saldo o.l. (&lt;a href&#x3D;&#39;https://data.skatteetaten.no/web/datakatalog/begrep/20b2e146-9fe1-11e5-a9f8-e4115b280940&#39;&gt;Begrepsreferanse&lt;/a&gt;)
   * @return beregnetMarkedsverdi
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BEREGNET_MARKEDSVERDI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getBeregnetMarkedsverdi() {
    return beregnetMarkedsverdi;
  }


  @JsonProperty(JSON_PROPERTY_BEREGNET_MARKEDSVERDI)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBeregnetMarkedsverdi(Long beregnetMarkedsverdi) {
    this.beregnetMarkedsverdi = beregnetMarkedsverdi;
  }


  public FormuesspesifikasjonFlerboligbygning useksjonertBoenhet(List<UseksjonertBoenhet> useksjonertBoenhet) {
    
    this.useksjonertBoenhet = useksjonertBoenhet;
    return this;
  }

  public FormuesspesifikasjonFlerboligbygning addUseksjonertBoenhetItem(UseksjonertBoenhet useksjonertBoenhetItem) {
    if (this.useksjonertBoenhet == null) {
      this.useksjonertBoenhet = new ArrayList<>();
    }
    this.useksjonertBoenhet.add(useksjonertBoenhetItem);
    return this;
  }

   /**
   * Boenhet som ikke har seksjonsnummer. Disse boenhetene er ikke knyttet til andel i boligselskap. I en flerboligbygning vil det alltid være minst 5 useksjonerte boenheter (&lt;a href&#x3D;&#39;https://data.skatteetaten.no/web/datakatalog/begrep/9c33fd5f-2964-11e6-b2bc-96405985e0fa&#39;&gt;Begrepsreferanse&lt;/a&gt;)
   * @return useksjonertBoenhet
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USEKSJONERT_BOENHET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<UseksjonertBoenhet> getUseksjonertBoenhet() {
    return useksjonertBoenhet;
  }


  @JsonProperty(JSON_PROPERTY_USEKSJONERT_BOENHET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUseksjonertBoenhet(List<UseksjonertBoenhet> useksjonertBoenhet) {
    this.useksjonertBoenhet = useksjonertBoenhet;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormuesspesifikasjonFlerboligbygning formuesspesifikasjonFlerboligbygning = (FormuesspesifikasjonFlerboligbygning) o;
    return Objects.equals(this.beliggenhetskode, formuesspesifikasjonFlerboligbygning.beliggenhetskode) &&
        Objects.equals(this.beregnetMarkedsverdi, formuesspesifikasjonFlerboligbygning.beregnetMarkedsverdi) &&
        Objects.equals(this.useksjonertBoenhet, formuesspesifikasjonFlerboligbygning.useksjonertBoenhet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beliggenhetskode, beregnetMarkedsverdi, useksjonertBoenhet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormuesspesifikasjonFlerboligbygning {\n");
    sb.append("    beliggenhetskode: ").append(toIndentedString(beliggenhetskode)).append("\n");
    sb.append("    beregnetMarkedsverdi: ").append(toIndentedString(beregnetMarkedsverdi)).append("\n");
    sb.append("    useksjonertBoenhet: ").append(toIndentedString(useksjonertBoenhet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

