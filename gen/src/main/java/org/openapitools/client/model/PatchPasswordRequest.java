/*
 * Reference
 * The DoDays API reference.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@dodays.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PatchPasswordRequest
 */
@JsonPropertyOrder({
  PatchPasswordRequest.JSON_PROPERTY_CURRENT_PASSWORD,
  PatchPasswordRequest.JSON_PROPERTY_NEW_PASSWORD,
  PatchPasswordRequest.JSON_PROPERTY_NEW_PASSWORD_CONFIRMATION
})
@JsonTypeName("patch_password_request")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:23:35.686627593Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PatchPasswordRequest {
  public static final String JSON_PROPERTY_CURRENT_PASSWORD = "current_password";
  private String currentPassword;

  public static final String JSON_PROPERTY_NEW_PASSWORD = "new_password";
  private String newPassword;

  public static final String JSON_PROPERTY_NEW_PASSWORD_CONFIRMATION = "new_password_confirmation";
  private String newPasswordConfirmation;

  public PatchPasswordRequest() {
  }

  public PatchPasswordRequest currentPassword(String currentPassword) {
    
    this.currentPassword = currentPassword;
    return this;
  }

   /**
   * Get currentPassword
   * @return currentPassword
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENT_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCurrentPassword() {
    return currentPassword;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrentPassword(String currentPassword) {
    this.currentPassword = currentPassword;
  }


  public PatchPasswordRequest newPassword(String newPassword) {
    
    this.newPassword = newPassword;
    return this;
  }

   /**
   * Get newPassword
   * @return newPassword
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NEW_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNewPassword() {
    return newPassword;
  }


  @JsonProperty(JSON_PROPERTY_NEW_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNewPassword(String newPassword) {
    this.newPassword = newPassword;
  }


  public PatchPasswordRequest newPasswordConfirmation(String newPasswordConfirmation) {
    
    this.newPasswordConfirmation = newPasswordConfirmation;
    return this;
  }

   /**
   * Get newPasswordConfirmation
   * @return newPasswordConfirmation
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NEW_PASSWORD_CONFIRMATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNewPasswordConfirmation() {
    return newPasswordConfirmation;
  }


  @JsonProperty(JSON_PROPERTY_NEW_PASSWORD_CONFIRMATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNewPasswordConfirmation(String newPasswordConfirmation) {
    this.newPasswordConfirmation = newPasswordConfirmation;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatchPasswordRequest patchPasswordRequest = (PatchPasswordRequest) o;
    return Objects.equals(this.currentPassword, patchPasswordRequest.currentPassword) &&
        Objects.equals(this.newPassword, patchPasswordRequest.newPassword) &&
        Objects.equals(this.newPasswordConfirmation, patchPasswordRequest.newPasswordConfirmation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPassword, newPassword, newPasswordConfirmation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatchPasswordRequest {\n");
    sb.append("    currentPassword: ").append(toIndentedString(currentPassword)).append("\n");
    sb.append("    newPassword: ").append(toIndentedString(newPassword)).append("\n");
    sb.append("    newPasswordConfirmation: ").append(toIndentedString(newPasswordConfirmation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

