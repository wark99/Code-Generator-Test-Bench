/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Periodicity
 */
@JsonPropertyOrder({
  Periodicity.JSON_PROPERTY_ID,
  Periodicity.JSON_PROPERTY_UNITE,
  Periodicity.JSON_PROPERTY_VALUE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Periodicity {
  /**
   * Unique identifier of the resource &#x60;Periodicity&#x60;
   */
  public enum IdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    IdEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static IdEnum fromValue(Integer value) {
      for (IdEnum b : IdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ID = "id";
  private IdEnum id;

  public static final String JSON_PROPERTY_UNITE = "unite";
  private Integer unite;

  /**
   * The &#x60;PackPrice&#x60; time range
   */
  public enum ValueEnum {
    MONTH("MONTH"),
    
    YEAR("YEAR");

    private String value;

    ValueEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ValueEnum fromValue(String value) {
      for (ValueEnum b : ValueEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VALUE = "value";
  private ValueEnum value;

  public Periodicity() {
  }

  public Periodicity id(IdEnum id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;Periodicity&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public IdEnum getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(IdEnum id) {
    this.id = id;
  }


  public Periodicity unite(Integer unite) {
    
    this.unite = unite;
    return this;
  }

   /**
   * Get unite
   * @return unite
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNITE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUnite() {
    return unite;
  }


  @JsonProperty(JSON_PROPERTY_UNITE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnite(Integer unite) {
    this.unite = unite;
  }


  public Periodicity value(ValueEnum value) {
    
    this.value = value;
    return this;
  }

   /**
   * The &#x60;PackPrice&#x60; time range
   * @return value
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public ValueEnum getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(ValueEnum value) {
    this.value = value;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Periodicity periodicity = (Periodicity) o;
    return Objects.equals(this.id, periodicity.id) &&
        Objects.equals(this.unite, periodicity.unite) &&
        Objects.equals(this.value, periodicity.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, unite, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Periodicity {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    unite: ").append(toIndentedString(unite)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

