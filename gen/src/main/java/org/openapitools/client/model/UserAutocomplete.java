/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.User;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UserAutocomplete
 */
@JsonPropertyOrder({
  UserAutocomplete.JSON_PROPERTY_USERS,
  UserAutocomplete.JSON_PROPERTY_OUT_OF_CHANNEL
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class UserAutocomplete {
  public static final String JSON_PROPERTY_USERS = "users";
  private List<User> users;

  public static final String JSON_PROPERTY_OUT_OF_CHANNEL = "out_of_channel";
  private List<User> outOfChannel;

  public UserAutocomplete() {
  }

  public UserAutocomplete users(List<User> users) {
    
    this.users = users;
    return this;
  }

  public UserAutocomplete addUsersItem(User usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * A list of users that are the main result of the query
   * @return users
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<User> getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(List<User> users) {
    this.users = users;
  }


  public UserAutocomplete outOfChannel(List<User> outOfChannel) {
    
    this.outOfChannel = outOfChannel;
    return this;
  }

  public UserAutocomplete addOutOfChannelItem(User outOfChannelItem) {
    if (this.outOfChannel == null) {
      this.outOfChannel = new ArrayList<>();
    }
    this.outOfChannel.add(outOfChannelItem);
    return this;
  }

   /**
   * A special case list of users returned when autocompleting in a specific channel. Omitted when empty or not relevant
   * @return outOfChannel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OUT_OF_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<User> getOutOfChannel() {
    return outOfChannel;
  }


  @JsonProperty(JSON_PROPERTY_OUT_OF_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOutOfChannel(List<User> outOfChannel) {
    this.outOfChannel = outOfChannel;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserAutocomplete userAutocomplete = (UserAutocomplete) o;
    return Objects.equals(this.users, userAutocomplete.users) &&
        Objects.equals(this.outOfChannel, userAutocomplete.outOfChannel);
  }

  @Override
  public int hashCode() {
    return Objects.hash(users, outOfChannel);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserAutocomplete {\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    outOfChannel: ").append(toIndentedString(outOfChannel)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

