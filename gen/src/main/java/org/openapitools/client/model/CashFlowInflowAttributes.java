/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObbDateRangeAndAmount;
import org.openapitools.client.model.ObbDateRangeAndCount;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Inflow Attributes
 */
@JsonPropertyOrder({
  CashFlowInflowAttributes.JSON_PROPERTY_AVERAGE_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowInflowAttributes.JSON_PROPERTY_COUNT_DEPOSITS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowInflowAttributes.JSON_PROPERTY_HISTORIC_COUNT_OF_DEPOSIT_TRANSACTIONS,
  CashFlowInflowAttributes.JSON_PROPERTY_HISTORIC_SUM_OF_DEPOSITS,
  CashFlowInflowAttributes.JSON_PROPERTY_MAXIMUM_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowInflowAttributes.JSON_PROPERTY_MINIMUM_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowInflowAttributes.JSON_PROPERTY_SUM_DEPOSITS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T14:05:40.878624261Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CashFlowInflowAttributes {
  public static final String JSON_PROPERTY_AVERAGE_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "averageDepositByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> averageDepositByMonthForTheReportTimePeriod;

  public static final String JSON_PROPERTY_COUNT_DEPOSITS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "countDepositsByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndCount> countDepositsByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_HISTORIC_COUNT_OF_DEPOSIT_TRANSACTIONS = "historicCountOfDepositTransactions";
  private Integer historicCountOfDepositTransactions;

  public static final String JSON_PROPERTY_HISTORIC_SUM_OF_DEPOSITS = "historicSumOfDeposits";
  private BigDecimal historicSumOfDeposits;

  public static final String JSON_PROPERTY_MAXIMUM_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "maximumDepositByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> maximumDepositByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_MINIMUM_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "minimumDepositByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> minimumDepositByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_SUM_DEPOSITS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "sumDepositsByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> sumDepositsByMonthForTheReportTimePeriod = new ArrayList<>();

  public CashFlowInflowAttributes() {
  }

  public CashFlowInflowAttributes averageDepositByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageDepositByMonthForTheReportTimePeriod) {
    
    this.averageDepositByMonthForTheReportTimePeriod = averageDepositByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowInflowAttributes addAverageDepositByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount averageDepositByMonthForTheReportTimePeriodItem) {
    if (this.averageDepositByMonthForTheReportTimePeriod == null) {
      this.averageDepositByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.averageDepositByMonthForTheReportTimePeriod.add(averageDepositByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Average value of deposits during periods in the report
   * @return averageDepositByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDateRangeAndAmount> getAverageDepositByMonthForTheReportTimePeriod() {
    return averageDepositByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageDepositByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageDepositByMonthForTheReportTimePeriod) {
    this.averageDepositByMonthForTheReportTimePeriod = averageDepositByMonthForTheReportTimePeriod;
  }


  public CashFlowInflowAttributes countDepositsByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countDepositsByMonthForTheReportTimePeriod) {
    
    this.countDepositsByMonthForTheReportTimePeriod = countDepositsByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowInflowAttributes addCountDepositsByMonthForTheReportTimePeriodItem(ObbDateRangeAndCount countDepositsByMonthForTheReportTimePeriodItem) {
    if (this.countDepositsByMonthForTheReportTimePeriod == null) {
      this.countDepositsByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.countDepositsByMonthForTheReportTimePeriod.add(countDepositsByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Count of all deposits during periods in the report
   * @return countDepositsByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_DEPOSITS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndCount> getCountDepositsByMonthForTheReportTimePeriod() {
    return countDepositsByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_DEPOSITS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountDepositsByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countDepositsByMonthForTheReportTimePeriod) {
    this.countDepositsByMonthForTheReportTimePeriod = countDepositsByMonthForTheReportTimePeriod;
  }


  public CashFlowInflowAttributes historicCountOfDepositTransactions(Integer historicCountOfDepositTransactions) {
    
    this.historicCountOfDepositTransactions = historicCountOfDepositTransactions;
    return this;
  }

   /**
   * Count of ALL deposits over entire known history of the account (may exceed requested length of report)
   * @return historicCountOfDepositTransactions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HISTORIC_COUNT_OF_DEPOSIT_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getHistoricCountOfDepositTransactions() {
    return historicCountOfDepositTransactions;
  }


  @JsonProperty(JSON_PROPERTY_HISTORIC_COUNT_OF_DEPOSIT_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHistoricCountOfDepositTransactions(Integer historicCountOfDepositTransactions) {
    this.historicCountOfDepositTransactions = historicCountOfDepositTransactions;
  }


  public CashFlowInflowAttributes historicSumOfDeposits(BigDecimal historicSumOfDeposits) {
    
    this.historicSumOfDeposits = historicSumOfDeposits;
    return this;
  }

   /**
   * Sum of ALL deposits over entire known history of the account (may exceed requested length of report)
   * @return historicSumOfDeposits
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HISTORIC_SUM_OF_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHistoricSumOfDeposits() {
    return historicSumOfDeposits;
  }


  @JsonProperty(JSON_PROPERTY_HISTORIC_SUM_OF_DEPOSITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistoricSumOfDeposits(BigDecimal historicSumOfDeposits) {
    this.historicSumOfDeposits = historicSumOfDeposits;
  }


  public CashFlowInflowAttributes maximumDepositByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumDepositByMonthForTheReportTimePeriod) {
    
    this.maximumDepositByMonthForTheReportTimePeriod = maximumDepositByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowInflowAttributes addMaximumDepositByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount maximumDepositByMonthForTheReportTimePeriodItem) {
    if (this.maximumDepositByMonthForTheReportTimePeriod == null) {
      this.maximumDepositByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.maximumDepositByMonthForTheReportTimePeriod.add(maximumDepositByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Maximum deposit value for different periods in the report
   * @return maximumDepositByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAXIMUM_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndAmount> getMaximumDepositByMonthForTheReportTimePeriod() {
    return maximumDepositByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaximumDepositByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumDepositByMonthForTheReportTimePeriod) {
    this.maximumDepositByMonthForTheReportTimePeriod = maximumDepositByMonthForTheReportTimePeriod;
  }


  public CashFlowInflowAttributes minimumDepositByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumDepositByMonthForTheReportTimePeriod) {
    
    this.minimumDepositByMonthForTheReportTimePeriod = minimumDepositByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowInflowAttributes addMinimumDepositByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount minimumDepositByMonthForTheReportTimePeriodItem) {
    if (this.minimumDepositByMonthForTheReportTimePeriod == null) {
      this.minimumDepositByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.minimumDepositByMonthForTheReportTimePeriod.add(minimumDepositByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Minimum deposit value for different periods in the report
   * @return minimumDepositByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MINIMUM_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndAmount> getMinimumDepositByMonthForTheReportTimePeriod() {
    return minimumDepositByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_DEPOSIT_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinimumDepositByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumDepositByMonthForTheReportTimePeriod) {
    this.minimumDepositByMonthForTheReportTimePeriod = minimumDepositByMonthForTheReportTimePeriod;
  }


  public CashFlowInflowAttributes sumDepositsByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> sumDepositsByMonthForTheReportTimePeriod) {
    
    this.sumDepositsByMonthForTheReportTimePeriod = sumDepositsByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowInflowAttributes addSumDepositsByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount sumDepositsByMonthForTheReportTimePeriodItem) {
    if (this.sumDepositsByMonthForTheReportTimePeriod == null) {
      this.sumDepositsByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.sumDepositsByMonthForTheReportTimePeriod.add(sumDepositsByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Sum of all deposits during periods in the report
   * @return sumDepositsByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUM_DEPOSITS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndAmount> getSumDepositsByMonthForTheReportTimePeriod() {
    return sumDepositsByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_SUM_DEPOSITS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSumDepositsByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> sumDepositsByMonthForTheReportTimePeriod) {
    this.sumDepositsByMonthForTheReportTimePeriod = sumDepositsByMonthForTheReportTimePeriod;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowInflowAttributes cashFlowInflowAttributes = (CashFlowInflowAttributes) o;
    return Objects.equals(this.averageDepositByMonthForTheReportTimePeriod, cashFlowInflowAttributes.averageDepositByMonthForTheReportTimePeriod) &&
        Objects.equals(this.countDepositsByMonthForTheReportTimePeriod, cashFlowInflowAttributes.countDepositsByMonthForTheReportTimePeriod) &&
        Objects.equals(this.historicCountOfDepositTransactions, cashFlowInflowAttributes.historicCountOfDepositTransactions) &&
        Objects.equals(this.historicSumOfDeposits, cashFlowInflowAttributes.historicSumOfDeposits) &&
        Objects.equals(this.maximumDepositByMonthForTheReportTimePeriod, cashFlowInflowAttributes.maximumDepositByMonthForTheReportTimePeriod) &&
        Objects.equals(this.minimumDepositByMonthForTheReportTimePeriod, cashFlowInflowAttributes.minimumDepositByMonthForTheReportTimePeriod) &&
        Objects.equals(this.sumDepositsByMonthForTheReportTimePeriod, cashFlowInflowAttributes.sumDepositsByMonthForTheReportTimePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageDepositByMonthForTheReportTimePeriod, countDepositsByMonthForTheReportTimePeriod, historicCountOfDepositTransactions, historicSumOfDeposits, maximumDepositByMonthForTheReportTimePeriod, minimumDepositByMonthForTheReportTimePeriod, sumDepositsByMonthForTheReportTimePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowInflowAttributes {\n");
    sb.append("    averageDepositByMonthForTheReportTimePeriod: ").append(toIndentedString(averageDepositByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    countDepositsByMonthForTheReportTimePeriod: ").append(toIndentedString(countDepositsByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    historicCountOfDepositTransactions: ").append(toIndentedString(historicCountOfDepositTransactions)).append("\n");
    sb.append("    historicSumOfDeposits: ").append(toIndentedString(historicSumOfDeposits)).append("\n");
    sb.append("    maximumDepositByMonthForTheReportTimePeriod: ").append(toIndentedString(maximumDepositByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    minimumDepositByMonthForTheReportTimePeriod: ").append(toIndentedString(minimumDepositByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    sumDepositsByMonthForTheReportTimePeriod: ").append(toIndentedString(sumDepositsByMonthForTheReportTimePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

