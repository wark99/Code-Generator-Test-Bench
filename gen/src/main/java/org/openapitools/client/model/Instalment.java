/*
 * Drip - Merchant API
 * API Documentation of endpoints available to Merchants. All requests need to contain the `X-API-KEY` received during the initial Drip Merchant Onboarding. If you do not have it, contact one of the admins.
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Instalment
 */
@JsonPropertyOrder({
  Instalment.JSON_PROPERTY_DUE_DATE,
  Instalment.JSON_PROPERTY_AMOUNT,
  Instalment.JSON_PROPERTY_CASHBACK_AMOUNT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:11.928068984Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Instalment {
  public static final String JSON_PROPERTY_DUE_DATE = "dueDate";
  private LocalDate dueDate;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private String amount;

  public static final String JSON_PROPERTY_CASHBACK_AMOUNT = "cashbackAmount";
  private String cashbackAmount;

  public Instalment() {
  }

  public Instalment dueDate(LocalDate dueDate) {
    
    this.dueDate = dueDate;
    return this;
  }

   /**
   * Dia do vencimento da parcela
   * @return dueDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LocalDate getDueDate() {
    return dueDate;
  }


  @JsonProperty(JSON_PROPERTY_DUE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
  }


  public Instalment amount(String amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Valor da parcela
   * @return amount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(String amount) {
    this.amount = amount;
  }


  public Instalment cashbackAmount(String cashbackAmount) {
    
    this.cashbackAmount = cashbackAmount;
    return this;
  }

   /**
   * Valor de cashback aplicado na parcela.
   * @return cashbackAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CASHBACK_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCashbackAmount() {
    return cashbackAmount;
  }


  @JsonProperty(JSON_PROPERTY_CASHBACK_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCashbackAmount(String cashbackAmount) {
    this.cashbackAmount = cashbackAmount;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Instalment instalment = (Instalment) o;
    return Objects.equals(this.dueDate, instalment.dueDate) &&
        Objects.equals(this.amount, instalment.amount) &&
        Objects.equals(this.cashbackAmount, instalment.cashbackAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dueDate, amount, cashbackAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Instalment {\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    cashbackAmount: ").append(toIndentedString(cashbackAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

