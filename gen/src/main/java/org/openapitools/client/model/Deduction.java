/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Deduction
 */
@JsonPropertyOrder({
  Deduction.JSON_PROPERTY_NAME,
  Deduction.JSON_PROPERTY_DESCRIPTION,
  Deduction.JSON_PROPERTY_AMOUNT_CURRENT,
  Deduction.JSON_PROPERTY_AMOUNT_Y_T_D,
  Deduction.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T14:25:40.114879426Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Deduction {
  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_AMOUNT_CURRENT = "amountCurrent";
  private BigDecimal amountCurrent;

  public static final String JSON_PROPERTY_AMOUNT_Y_T_D = "amountYTD";
  private BigDecimal amountYTD;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public Deduction() {
  }

  public Deduction name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * The normalized category of the deductions in the format [type][number]. The number is the will be the iterating number of the type&#39;s occurrence starting at one.
   * @return name
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Deduction description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The deduction line&#39;s deduction type description
   * @return description
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Deduction amountCurrent(BigDecimal amountCurrent) {
    
    this.amountCurrent = amountCurrent;
    return this;
  }

   /**
   * The amount for the deduction line deducted from employee&#39;s pay for the specified pay period
   * @return amountCurrent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAmountCurrent() {
    return amountCurrent;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_CURRENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountCurrent(BigDecimal amountCurrent) {
    this.amountCurrent = amountCurrent;
  }


  public Deduction amountYTD(BigDecimal amountYTD) {
    
    this.amountYTD = amountYTD;
    return this;
  }

   /**
   * The amount for the deduction line being deducted from the employee&#39;s pay for the current pay year
   * @return amountYTD
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAmountYTD() {
    return amountYTD;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT_Y_T_D)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmountYTD(BigDecimal amountYTD) {
    this.amountYTD = amountYTD;
  }


  public Deduction type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * Categorization based on the deduction line&#39;s description
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Deduction deduction = (Deduction) o;
    return Objects.equals(this.name, deduction.name) &&
        Objects.equals(this.description, deduction.description) &&
        Objects.equals(this.amountCurrent, deduction.amountCurrent) &&
        Objects.equals(this.amountYTD, deduction.amountYTD) &&
        Objects.equals(this.type, deduction.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, description, amountCurrent, amountYTD, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Deduction {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    amountCurrent: ").append(toIndentedString(amountCurrent)).append("\n");
    sb.append("    amountYTD: ").append(toIndentedString(amountYTD)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

