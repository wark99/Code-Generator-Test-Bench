/*
 * NSA Client API
 * This is the official Client API To interact with National Service Alliance (NSA)  # Dates All dates are in the ISO 8601 format - YYYY-MM-DD - ex. 2021-12-31  See this article for more information: [ISO 8601 article](https://en.wikipedia.org/wiki/ISO_8601)  # Authenication Authenication is handled via basic authentication.   Dev and Production credentials will be provided during the implimentation process  See this article for more information: [basic auth article](https://en.wikipedia.org/wiki/Basic_access_authentication) 
 *
 * The version of the OpenAPI document: 1.0.17
 * Contact: rj.whitehead@nationalservicealliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StatusResponseClaimsInner;
import org.openapitools.client.model.StatusResponseEventsInner;
import org.openapitools.client.model.StatusResponseStatus;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StatusResponse
 */
@JsonPropertyOrder({
  StatusResponse.JSON_PROPERTY_CLIENT_CASE_NUMBER,
  StatusResponse.JSON_PROPERTY_NSA_DISPATCH_NUMBER,
  StatusResponse.JSON_PROPERTY_EXTERNAL_REFERENCE1,
  StatusResponse.JSON_PROPERTY_STATUS,
  StatusResponse.JSON_PROPERTY_CLAIMS,
  StatusResponse.JSON_PROPERTY_EVENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:53.009381485Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StatusResponse {
  public static final String JSON_PROPERTY_CLIENT_CASE_NUMBER = "clientCaseNumber";
  private String clientCaseNumber;

  public static final String JSON_PROPERTY_NSA_DISPATCH_NUMBER = "nsaDispatchNumber";
  private String nsaDispatchNumber;

  public static final String JSON_PROPERTY_EXTERNAL_REFERENCE1 = "externalReference1";
  private String externalReference1;

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusResponseStatus status;

  public static final String JSON_PROPERTY_CLAIMS = "claims";
  private List<StatusResponseClaimsInner> claims = new ArrayList<>();

  public static final String JSON_PROPERTY_EVENTS = "events";
  private List<StatusResponseEventsInner> events = new ArrayList<>();

  public StatusResponse() {
  }

  public StatusResponse clientCaseNumber(String clientCaseNumber) {
    
    this.clientCaseNumber = clientCaseNumber;
    return this;
  }

   /**
   * Get clientCaseNumber
   * @return clientCaseNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLIENT_CASE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getClientCaseNumber() {
    return clientCaseNumber;
  }


  @JsonProperty(JSON_PROPERTY_CLIENT_CASE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClientCaseNumber(String clientCaseNumber) {
    this.clientCaseNumber = clientCaseNumber;
  }


  public StatusResponse nsaDispatchNumber(String nsaDispatchNumber) {
    
    this.nsaDispatchNumber = nsaDispatchNumber;
    return this;
  }

   /**
   * Get nsaDispatchNumber
   * @return nsaDispatchNumber
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NSA_DISPATCH_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getNsaDispatchNumber() {
    return nsaDispatchNumber;
  }


  @JsonProperty(JSON_PROPERTY_NSA_DISPATCH_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNsaDispatchNumber(String nsaDispatchNumber) {
    this.nsaDispatchNumber = nsaDispatchNumber;
  }


  public StatusResponse externalReference1(String externalReference1) {
    
    this.externalReference1 = externalReference1;
    return this;
  }

   /**
   * Get externalReference1
   * @return externalReference1
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXTERNAL_REFERENCE1)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getExternalReference1() {
    return externalReference1;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_REFERENCE1)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExternalReference1(String externalReference1) {
    this.externalReference1 = externalReference1;
  }


  public StatusResponse status(StatusResponseStatus status) {
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusResponseStatus getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusResponseStatus status) {
    this.status = status;
  }


  public StatusResponse claims(List<StatusResponseClaimsInner> claims) {
    
    this.claims = claims;
    return this;
  }

  public StatusResponse addClaimsItem(StatusResponseClaimsInner claimsItem) {
    if (this.claims == null) {
      this.claims = new ArrayList<>();
    }
    this.claims.add(claimsItem);
    return this;
  }

   /**
   * Get claims
   * @return claims
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CLAIMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<StatusResponseClaimsInner> getClaims() {
    return claims;
  }


  @JsonProperty(JSON_PROPERTY_CLAIMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setClaims(List<StatusResponseClaimsInner> claims) {
    this.claims = claims;
  }


  public StatusResponse events(List<StatusResponseEventsInner> events) {
    
    this.events = events;
    return this;
  }

  public StatusResponse addEventsItem(StatusResponseEventsInner eventsItem) {
    if (this.events == null) {
      this.events = new ArrayList<>();
    }
    this.events.add(eventsItem);
    return this;
  }

   /**
   * Get events
   * @return events
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<StatusResponseEventsInner> getEvents() {
    return events;
  }


  @JsonProperty(JSON_PROPERTY_EVENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEvents(List<StatusResponseEventsInner> events) {
    this.events = events;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatusResponse statusResponse = (StatusResponse) o;
    return Objects.equals(this.clientCaseNumber, statusResponse.clientCaseNumber) &&
        Objects.equals(this.nsaDispatchNumber, statusResponse.nsaDispatchNumber) &&
        Objects.equals(this.externalReference1, statusResponse.externalReference1) &&
        Objects.equals(this.status, statusResponse.status) &&
        Objects.equals(this.claims, statusResponse.claims) &&
        Objects.equals(this.events, statusResponse.events);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientCaseNumber, nsaDispatchNumber, externalReference1, status, claims, events);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatusResponse {\n");
    sb.append("    clientCaseNumber: ").append(toIndentedString(clientCaseNumber)).append("\n");
    sb.append("    nsaDispatchNumber: ").append(toIndentedString(nsaDispatchNumber)).append("\n");
    sb.append("    externalReference1: ").append(toIndentedString(externalReference1)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    claims: ").append(toIndentedString(claims)).append("\n");
    sb.append("    events: ").append(toIndentedString(events)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

