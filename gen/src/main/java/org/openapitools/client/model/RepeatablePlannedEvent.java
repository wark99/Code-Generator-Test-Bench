/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RepeatablePlannedEvent
 */
@JsonPropertyOrder({
  RepeatablePlannedEvent.JSON_PROPERTY_PLANNED_EVENT_ID,
  RepeatablePlannedEvent.JSON_PROPERTY_STREAM_ID,
  RepeatablePlannedEvent.JSON_PROPERTY_STORAGE_MACHINE_ID,
  RepeatablePlannedEvent.JSON_PROPERTY_DELETED_AT,
  RepeatablePlannedEvent.JSON_PROPERTY_NAME,
  RepeatablePlannedEvent.JSON_PROPERTY_START_AT,
  RepeatablePlannedEvent.JSON_PROPERTY_STOP_AT,
  RepeatablePlannedEvent.JSON_PROPERTY_TIMEZONE,
  RepeatablePlannedEvent.JSON_PROPERTY_REPEAT_INTERVAL,
  RepeatablePlannedEvent.JSON_PROPERTY_REPEAT_UNTIL,
  RepeatablePlannedEvent.JSON_PROPERTY_WEEKENDS_ONLY,
  RepeatablePlannedEvent.JSON_PROPERTY_WEEKDAYS_ONLY,
  RepeatablePlannedEvent.JSON_PROPERTY_AUTHORIZE_COUNTRY,
  RepeatablePlannedEvent.JSON_PROPERTY_STOP_LIVE,
  RepeatablePlannedEvent.JSON_PROPERTY_ACCESS_COUNTRY,
  RepeatablePlannedEvent.JSON_PROPERTY_RECORD,
  RepeatablePlannedEvent.JSON_PROPERTY_RECORD_NAME,
  RepeatablePlannedEvent.JSON_PROPERTY_FRAGMENT_DURATION,
  RepeatablePlannedEvent.JSON_PROPERTY_DVR_WINDOW,
  RepeatablePlannedEvent.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RepeatablePlannedEvent {
  public static final String JSON_PROPERTY_PLANNED_EVENT_ID = "planned_event_id";
  private Integer plannedEventId;

  public static final String JSON_PROPERTY_STREAM_ID = "stream_id";
  private String streamId;

  public static final String JSON_PROPERTY_STORAGE_MACHINE_ID = "storage_machine_id";
  private Integer storageMachineId;

  public static final String JSON_PROPERTY_DELETED_AT = "deleted_at";
  private Integer deletedAt;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_START_AT = "start_at";
  private Integer startAt;

  public static final String JSON_PROPERTY_STOP_AT = "stop_at";
  private Integer stopAt;

  public static final String JSON_PROPERTY_TIMEZONE = "timezone";
  private String timezone;

  public static final String JSON_PROPERTY_REPEAT_INTERVAL = "repeat_interval";
  private Integer repeatInterval;

  public static final String JSON_PROPERTY_REPEAT_UNTIL = "repeat_until";
  private Integer repeatUntil;

  public static final String JSON_PROPERTY_WEEKENDS_ONLY = "weekends_only";
  private Boolean weekendsOnly;

  public static final String JSON_PROPERTY_WEEKDAYS_ONLY = "weekdays_only";
  private Boolean weekdaysOnly;

  public static final String JSON_PROPERTY_AUTHORIZE_COUNTRY = "authorize_country";
  private Boolean authorizeCountry;

  public static final String JSON_PROPERTY_STOP_LIVE = "stop_live";
  private Boolean stopLive;

  public static final String JSON_PROPERTY_ACCESS_COUNTRY = "access_country";
  private String accessCountry;

  public static final String JSON_PROPERTY_RECORD = "record";
  private Boolean record;

  public static final String JSON_PROPERTY_RECORD_NAME = "record_name";
  private String recordName;

  public static final String JSON_PROPERTY_FRAGMENT_DURATION = "fragment_duration";
  private Integer fragmentDuration;

  public static final String JSON_PROPERTY_DVR_WINDOW = "dvr_window";
  private Integer dvrWindow;

  /**
   * only&#x3D;&gt;Change only this event, all&#x3D;&gt;Change all event, from&#x3D;&gt;Change this event and recurrences
   */
  public enum TypeEnum {
    ALL("all"),
    
    FROM("from"),
    
    ONLY("only");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public RepeatablePlannedEvent() {
  }

  public RepeatablePlannedEvent plannedEventId(Integer plannedEventId) {
    
    this.plannedEventId = plannedEventId;
    return this;
  }

   /**
   * Get plannedEventId
   * @return plannedEventId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PLANNED_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getPlannedEventId() {
    return plannedEventId;
  }


  @JsonProperty(JSON_PROPERTY_PLANNED_EVENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPlannedEventId(Integer plannedEventId) {
    this.plannedEventId = plannedEventId;
  }


  public RepeatablePlannedEvent streamId(String streamId) {
    
    this.streamId = streamId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;stream&#x60; that is related to the resource &#x60;RepeatablePlannedEvent&#x60;
   * @return streamId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStreamId() {
    return streamId;
  }


  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStreamId(String streamId) {
    this.streamId = streamId;
  }


  public RepeatablePlannedEvent storageMachineId(Integer storageMachineId) {
    
    this.storageMachineId = storageMachineId;
    return this;
  }

   /**
   * Unique identifier of the &#x60;channel&#x60; that is related to the resource &#x60;RepeatablePlannedEvent&#x60;
   * @return storageMachineId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STORAGE_MACHINE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStorageMachineId() {
    return storageMachineId;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_MACHINE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStorageMachineId(Integer storageMachineId) {
    this.storageMachineId = storageMachineId;
  }


  public RepeatablePlannedEvent deletedAt(Integer deletedAt) {
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Timestamp &#x60;RepeatablePlannedEvent&#x60; has been deleted
   * @return deletedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DELETED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDeletedAt() {
    return deletedAt;
  }


  @JsonProperty(JSON_PROPERTY_DELETED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDeletedAt(Integer deletedAt) {
    this.deletedAt = deletedAt;
  }


  public RepeatablePlannedEvent name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the resource &#x60;RepeatablePlannedEvent&#x60;
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public RepeatablePlannedEvent startAt(Integer startAt) {
    
    this.startAt = startAt;
    return this;
  }

   /**
   * Get startAt
   * @return startAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStartAt() {
    return startAt;
  }


  @JsonProperty(JSON_PROPERTY_START_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStartAt(Integer startAt) {
    this.startAt = startAt;
  }


  public RepeatablePlannedEvent stopAt(Integer stopAt) {
    
    this.stopAt = stopAt;
    return this;
  }

   /**
   * Get stopAt
   * @return stopAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STOP_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStopAt() {
    return stopAt;
  }


  @JsonProperty(JSON_PROPERTY_STOP_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStopAt(Integer stopAt) {
    this.stopAt = stopAt;
  }


  public RepeatablePlannedEvent timezone(String timezone) {
    
    this.timezone = timezone;
    return this;
  }

   /**
   * Get timezone
   * @return timezone
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getTimezone() {
    return timezone;
  }


  @JsonProperty(JSON_PROPERTY_TIMEZONE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }


  public RepeatablePlannedEvent repeatInterval(Integer repeatInterval) {
    
    this.repeatInterval = repeatInterval;
    return this;
  }

   /**
   * Get repeatInterval
   * @return repeatInterval
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPEAT_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRepeatInterval() {
    return repeatInterval;
  }


  @JsonProperty(JSON_PROPERTY_REPEAT_INTERVAL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRepeatInterval(Integer repeatInterval) {
    this.repeatInterval = repeatInterval;
  }


  public RepeatablePlannedEvent repeatUntil(Integer repeatUntil) {
    
    this.repeatUntil = repeatUntil;
    return this;
  }

   /**
   * Get repeatUntil
   * @return repeatUntil
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REPEAT_UNTIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getRepeatUntil() {
    return repeatUntil;
  }


  @JsonProperty(JSON_PROPERTY_REPEAT_UNTIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRepeatUntil(Integer repeatUntil) {
    this.repeatUntil = repeatUntil;
  }


  public RepeatablePlannedEvent weekendsOnly(Boolean weekendsOnly) {
    
    this.weekendsOnly = weekendsOnly;
    return this;
  }

   /**
   * Get weekendsOnly
   * @return weekendsOnly
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WEEKENDS_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getWeekendsOnly() {
    return weekendsOnly;
  }


  @JsonProperty(JSON_PROPERTY_WEEKENDS_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWeekendsOnly(Boolean weekendsOnly) {
    this.weekendsOnly = weekendsOnly;
  }


  public RepeatablePlannedEvent weekdaysOnly(Boolean weekdaysOnly) {
    
    this.weekdaysOnly = weekdaysOnly;
    return this;
  }

   /**
   * Get weekdaysOnly
   * @return weekdaysOnly
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WEEKDAYS_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getWeekdaysOnly() {
    return weekdaysOnly;
  }


  @JsonProperty(JSON_PROPERTY_WEEKDAYS_ONLY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWeekdaysOnly(Boolean weekdaysOnly) {
    this.weekdaysOnly = weekdaysOnly;
  }


  public RepeatablePlannedEvent authorizeCountry(Boolean authorizeCountry) {
    
    this.authorizeCountry = authorizeCountry;
    return this;
  }

   /**
   * Get authorizeCountry
   * @return authorizeCountry
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AUTHORIZE_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getAuthorizeCountry() {
    return authorizeCountry;
  }


  @JsonProperty(JSON_PROPERTY_AUTHORIZE_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAuthorizeCountry(Boolean authorizeCountry) {
    this.authorizeCountry = authorizeCountry;
  }


  public RepeatablePlannedEvent stopLive(Boolean stopLive) {
    
    this.stopLive = stopLive;
    return this;
  }

   /**
   * Get stopLive
   * @return stopLive
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STOP_LIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getStopLive() {
    return stopLive;
  }


  @JsonProperty(JSON_PROPERTY_STOP_LIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStopLive(Boolean stopLive) {
    this.stopLive = stopLive;
  }


  public RepeatablePlannedEvent accessCountry(String accessCountry) {
    
    this.accessCountry = accessCountry;
    return this;
  }

   /**
   * Get accessCountry
   * @return accessCountry
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccessCountry() {
    return accessCountry;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_COUNTRY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccessCountry(String accessCountry) {
    this.accessCountry = accessCountry;
  }


  public RepeatablePlannedEvent record(Boolean record) {
    
    this.record = record;
    return this;
  }

   /**
   * Get record
   * @return record
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getRecord() {
    return record;
  }


  @JsonProperty(JSON_PROPERTY_RECORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecord(Boolean record) {
    this.record = record;
  }


  public RepeatablePlannedEvent recordName(String recordName) {
    
    this.recordName = recordName;
    return this;
  }

   /**
   * Get recordName
   * @return recordName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECORD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRecordName() {
    return recordName;
  }


  @JsonProperty(JSON_PROPERTY_RECORD_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRecordName(String recordName) {
    this.recordName = recordName;
  }


  public RepeatablePlannedEvent fragmentDuration(Integer fragmentDuration) {
    
    this.fragmentDuration = fragmentDuration;
    return this;
  }

   /**
   * Get fragmentDuration
   * @return fragmentDuration
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FRAGMENT_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFragmentDuration() {
    return fragmentDuration;
  }


  @JsonProperty(JSON_PROPERTY_FRAGMENT_DURATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFragmentDuration(Integer fragmentDuration) {
    this.fragmentDuration = fragmentDuration;
  }


  public RepeatablePlannedEvent dvrWindow(Integer dvrWindow) {
    
    this.dvrWindow = dvrWindow;
    return this;
  }

   /**
   * Get dvrWindow
   * @return dvrWindow
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DVR_WINDOW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDvrWindow() {
    return dvrWindow;
  }


  @JsonProperty(JSON_PROPERTY_DVR_WINDOW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDvrWindow(Integer dvrWindow) {
    this.dvrWindow = dvrWindow;
  }


  public RepeatablePlannedEvent type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * only&#x3D;&gt;Change only this event, all&#x3D;&gt;Change all event, from&#x3D;&gt;Change this event and recurrences
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RepeatablePlannedEvent repeatablePlannedEvent = (RepeatablePlannedEvent) o;
    return Objects.equals(this.plannedEventId, repeatablePlannedEvent.plannedEventId) &&
        Objects.equals(this.streamId, repeatablePlannedEvent.streamId) &&
        Objects.equals(this.storageMachineId, repeatablePlannedEvent.storageMachineId) &&
        Objects.equals(this.deletedAt, repeatablePlannedEvent.deletedAt) &&
        Objects.equals(this.name, repeatablePlannedEvent.name) &&
        Objects.equals(this.startAt, repeatablePlannedEvent.startAt) &&
        Objects.equals(this.stopAt, repeatablePlannedEvent.stopAt) &&
        Objects.equals(this.timezone, repeatablePlannedEvent.timezone) &&
        Objects.equals(this.repeatInterval, repeatablePlannedEvent.repeatInterval) &&
        Objects.equals(this.repeatUntil, repeatablePlannedEvent.repeatUntil) &&
        Objects.equals(this.weekendsOnly, repeatablePlannedEvent.weekendsOnly) &&
        Objects.equals(this.weekdaysOnly, repeatablePlannedEvent.weekdaysOnly) &&
        Objects.equals(this.authorizeCountry, repeatablePlannedEvent.authorizeCountry) &&
        Objects.equals(this.stopLive, repeatablePlannedEvent.stopLive) &&
        Objects.equals(this.accessCountry, repeatablePlannedEvent.accessCountry) &&
        Objects.equals(this.record, repeatablePlannedEvent.record) &&
        Objects.equals(this.recordName, repeatablePlannedEvent.recordName) &&
        Objects.equals(this.fragmentDuration, repeatablePlannedEvent.fragmentDuration) &&
        Objects.equals(this.dvrWindow, repeatablePlannedEvent.dvrWindow) &&
        Objects.equals(this.type, repeatablePlannedEvent.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(plannedEventId, streamId, storageMachineId, deletedAt, name, startAt, stopAt, timezone, repeatInterval, repeatUntil, weekendsOnly, weekdaysOnly, authorizeCountry, stopLive, accessCountry, record, recordName, fragmentDuration, dvrWindow, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RepeatablePlannedEvent {\n");
    sb.append("    plannedEventId: ").append(toIndentedString(plannedEventId)).append("\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    storageMachineId: ").append(toIndentedString(storageMachineId)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    stopAt: ").append(toIndentedString(stopAt)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("    repeatInterval: ").append(toIndentedString(repeatInterval)).append("\n");
    sb.append("    repeatUntil: ").append(toIndentedString(repeatUntil)).append("\n");
    sb.append("    weekendsOnly: ").append(toIndentedString(weekendsOnly)).append("\n");
    sb.append("    weekdaysOnly: ").append(toIndentedString(weekdaysOnly)).append("\n");
    sb.append("    authorizeCountry: ").append(toIndentedString(authorizeCountry)).append("\n");
    sb.append("    stopLive: ").append(toIndentedString(stopLive)).append("\n");
    sb.append("    accessCountry: ").append(toIndentedString(accessCountry)).append("\n");
    sb.append("    record: ").append(toIndentedString(record)).append("\n");
    sb.append("    recordName: ").append(toIndentedString(recordName)).append("\n");
    sb.append("    fragmentDuration: ").append(toIndentedString(fragmentDuration)).append("\n");
    sb.append("    dvrWindow: ").append(toIndentedString(dvrWindow)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

