/*
 * LiveFree Health Measurements API
 * The Health Measurements API enables partners to access data from the LiveFree Health Portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@lifebeacon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MeasurementWebhook
 */
@JsonPropertyOrder({
  MeasurementWebhook.JSON_PROPERTY_URL,
  MeasurementWebhook.JSON_PROPERTY_ACTIVE,
  MeasurementWebhook.JSON_PROPERTY_MIN_SECONDS_PER_CALL,
  MeasurementWebhook.JSON_PROPERTY_EVENT_TYPES,
  MeasurementWebhook.JSON_PROPERTY_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:30.476705269Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class MeasurementWebhook {
  public static final String JSON_PROPERTY_URL = "url";
  private Object url = null;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private JsonNullable<Object> active = JsonNullable.<Object>of(false);

  public static final String JSON_PROPERTY_MIN_SECONDS_PER_CALL = "minSecondsPerCall";
  private JsonNullable<Object> minSecondsPerCall = JsonNullable.<Object>of(0);

  public static final String JSON_PROPERTY_EVENT_TYPES = "eventTypes";
  private JsonNullable<Object> eventTypes = JsonNullable.<Object>of([]);

  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public MeasurementWebhook() {
  }

  public MeasurementWebhook url(Object url) {
    
    this.url = url;
    return this;
  }

   /**
   * The URL where notifications will be sent.
   * @return url
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(Object url) {
    this.url = url;
  }


  public MeasurementWebhook active(Object active) {
    this.active = JsonNullable.<Object>of(active);
    
    return this;
  }

   /**
   * Indicates whether notifications are enabled for this webhook.
   * @return active
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getActive() {
        return active.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getActive_JsonNullable() {
    return active;
  }
  
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  public void setActive_JsonNullable(JsonNullable<Object> active) {
    this.active = active;
  }

  public void setActive(Object active) {
    this.active = JsonNullable.<Object>of(active);
  }


  public MeasurementWebhook minSecondsPerCall(Object minSecondsPerCall) {
    this.minSecondsPerCall = JsonNullable.<Object>of(minSecondsPerCall);
    
    return this;
  }

   /**
   * The number of seconds to wait between notifications, or zero to trigger a notification on every event.
   * @return minSecondsPerCall
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMinSecondsPerCall() {
        return minSecondsPerCall.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MIN_SECONDS_PER_CALL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMinSecondsPerCall_JsonNullable() {
    return minSecondsPerCall;
  }
  
  @JsonProperty(JSON_PROPERTY_MIN_SECONDS_PER_CALL)
  public void setMinSecondsPerCall_JsonNullable(JsonNullable<Object> minSecondsPerCall) {
    this.minSecondsPerCall = minSecondsPerCall;
  }

  public void setMinSecondsPerCall(Object minSecondsPerCall) {
    this.minSecondsPerCall = JsonNullable.<Object>of(minSecondsPerCall);
  }


  public MeasurementWebhook eventTypes(Object eventTypes) {
    this.eventTypes = JsonNullable.<Object>of(eventTypes);
    
    return this;
  }

   /**
   * An optional array of measurement event types to limit which event types will trigger a notification. If no event types are specified then all events will trigger a notification.
   * @return eventTypes
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getEventTypes() {
        return eventTypes.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVENT_TYPES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getEventTypes_JsonNullable() {
    return eventTypes;
  }
  
  @JsonProperty(JSON_PROPERTY_EVENT_TYPES)
  public void setEventTypes_JsonNullable(JsonNullable<Object> eventTypes) {
    this.eventTypes = eventTypes;
  }

  public void setEventTypes(Object eventTypes) {
    this.eventTypes = JsonNullable.<Object>of(eventTypes);
  }


  public MeasurementWebhook id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * The unique identifier for the webhook.
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(UUID id) {
    this.id = id;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeasurementWebhook measurementWebhook = (MeasurementWebhook) o;
    return Objects.equals(this.url, measurementWebhook.url) &&
        equalsNullable(this.active, measurementWebhook.active) &&
        equalsNullable(this.minSecondsPerCall, measurementWebhook.minSecondsPerCall) &&
        equalsNullable(this.eventTypes, measurementWebhook.eventTypes) &&
        Objects.equals(this.id, measurementWebhook.id);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, hashCodeNullable(active), hashCodeNullable(minSecondsPerCall), hashCodeNullable(eventTypes), id);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeasurementWebhook {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    minSecondsPerCall: ").append(toIndentedString(minSecondsPerCall)).append("\n");
    sb.append("    eventTypes: ").append(toIndentedString(eventTypes)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

