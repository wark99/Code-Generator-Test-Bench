/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TransactionsFiltersFinicity
 */
@JsonPropertyOrder({
  TransactionsFiltersFinicity.JSON_PROPERTY_ACCOUNT_ID,
  TransactionsFiltersFinicity.JSON_PROPERTY_CONSUMER_ID,
  TransactionsFiltersFinicity.JSON_PROPERTY_FROM_DATE,
  TransactionsFiltersFinicity.JSON_PROPERTY_TO_DATE,
  TransactionsFiltersFinicity.JSON_PROPERTY_START,
  TransactionsFiltersFinicity.JSON_PROPERTY_LIMIT,
  TransactionsFiltersFinicity.JSON_PROPERTY_SORT,
  TransactionsFiltersFinicity.JSON_PROPERTY_INCLUDE_PENDING
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class TransactionsFiltersFinicity {
  public static final String JSON_PROPERTY_ACCOUNT_ID = "account_id";
  private Long accountId;

  public static final String JSON_PROPERTY_CONSUMER_ID = "consumer_id";
  private String consumerId;

  public static final String JSON_PROPERTY_FROM_DATE = "from_date";
  private Long fromDate;

  public static final String JSON_PROPERTY_TO_DATE = "to_date";
  private Long toDate;

  public static final String JSON_PROPERTY_START = "start";
  private Integer start;

  public static final String JSON_PROPERTY_LIMIT = "limit";
  private Integer limit;

  /**
   * Gets or Sets sort
   */
  public enum SortEnum {
    DESC("desc"),
    
    ASC("asc");

    private String value;

    SortEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SortEnum fromValue(String value) {
      for (SortEnum b : SortEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SORT = "sort";
  private SortEnum sort;

  public static final String JSON_PROPERTY_INCLUDE_PENDING = "include_pending";
  private Boolean includePending;

  public TransactionsFiltersFinicity() {
  }

  public TransactionsFiltersFinicity accountId(Long accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * Must be obtained from List ConsumerAccounts.
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(Long accountId) {
    this.accountId = accountId;
  }


  public TransactionsFiltersFinicity consumerId(String consumerId) {
    
    this.consumerId = consumerId;
    return this;
  }

   /**
   * Get consumerId
   * @return consumerId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CONSUMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getConsumerId() {
    return consumerId;
  }


  @JsonProperty(JSON_PROPERTY_CONSUMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setConsumerId(String consumerId) {
    this.consumerId = consumerId;
  }


  public TransactionsFiltersFinicity fromDate(Long fromDate) {
    
    this.fromDate = fromDate;
    return this;
  }

   /**
   * Epoch timestamp (seconds)
   * @return fromDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FROM_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getFromDate() {
    return fromDate;
  }


  @JsonProperty(JSON_PROPERTY_FROM_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFromDate(Long fromDate) {
    this.fromDate = fromDate;
  }


  public TransactionsFiltersFinicity toDate(Long toDate) {
    
    this.toDate = toDate;
    return this;
  }

   /**
   * Epoch timestamp (seconds)
   * @return toDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TO_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getToDate() {
    return toDate;
  }


  @JsonProperty(JSON_PROPERTY_TO_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setToDate(Long toDate) {
    this.toDate = toDate;
  }


  public TransactionsFiltersFinicity start(Integer start) {
    
    this.start = start;
    return this;
  }

   /**
   * Get start
   * minimum: 1
   * @return start
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(Integer start) {
    this.start = start;
  }


  public TransactionsFiltersFinicity limit(Integer limit) {
    
    this.limit = limit;
    return this;
  }

   /**
   * Get limit
   * maximum: 1000
   * @return limit
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLimit() {
    return limit;
  }


  @JsonProperty(JSON_PROPERTY_LIMIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public TransactionsFiltersFinicity sort(SortEnum sort) {
    
    this.sort = sort;
    return this;
  }

   /**
   * Get sort
   * @return sort
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public SortEnum getSort() {
    return sort;
  }


  @JsonProperty(JSON_PROPERTY_SORT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSort(SortEnum sort) {
    this.sort = sort;
  }


  public TransactionsFiltersFinicity includePending(Boolean includePending) {
    
    this.includePending = includePending;
    return this;
  }

   /**
   * Get includePending
   * @return includePending
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INCLUDE_PENDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIncludePending() {
    return includePending;
  }


  @JsonProperty(JSON_PROPERTY_INCLUDE_PENDING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIncludePending(Boolean includePending) {
    this.includePending = includePending;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsFiltersFinicity transactionsFiltersFinicity = (TransactionsFiltersFinicity) o;
    return Objects.equals(this.accountId, transactionsFiltersFinicity.accountId) &&
        Objects.equals(this.consumerId, transactionsFiltersFinicity.consumerId) &&
        Objects.equals(this.fromDate, transactionsFiltersFinicity.fromDate) &&
        Objects.equals(this.toDate, transactionsFiltersFinicity.toDate) &&
        Objects.equals(this.start, transactionsFiltersFinicity.start) &&
        Objects.equals(this.limit, transactionsFiltersFinicity.limit) &&
        Objects.equals(this.sort, transactionsFiltersFinicity.sort) &&
        Objects.equals(this.includePending, transactionsFiltersFinicity.includePending);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, consumerId, fromDate, toDate, start, limit, sort, includePending);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsFiltersFinicity {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    consumerId: ").append(toIndentedString(consumerId)).append("\n");
    sb.append("    fromDate: ").append(toIndentedString(fromDate)).append("\n");
    sb.append("    toDate: ").append(toIndentedString(toDate)).append("\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    sort: ").append(toIndentedString(sort)).append("\n");
    sb.append("    includePending: ").append(toIndentedString(includePending)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

