/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StatListenerByStation
 */
@JsonPropertyOrder({
  StatListenerByStation.JSON_PROPERTY_STREAM_ID,
  StatListenerByStation.JSON_PROPERTY_LISTENERS,
  StatListenerByStation.JSON_PROPERTY_LISTENERS30S,
  StatListenerByStation.JSON_PROPERTY_MAX_LISTENERS,
  StatListenerByStation.JSON_PROPERTY_MIN_LISTENERS,
  StatListenerByStation.JSON_PROPERTY_UNIQUES,
  StatListenerByStation.JSON_PROPERTY_AVERAGE_LISTENERS,
  StatListenerByStation.JSON_PROPERTY_LISTENING_TIME,
  StatListenerByStation.JSON_PROPERTY_MAX_LISTENING_TIME,
  StatListenerByStation.JSON_PROPERTY_MIN_LISTENING_TIME,
  StatListenerByStation.JSON_PROPERTY_AVERAGE_LISTENING_TIME,
  StatListenerByStation.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StatListenerByStation {
  public static final String JSON_PROPERTY_STREAM_ID = "stream_id";
  private Integer streamId;

  public static final String JSON_PROPERTY_LISTENERS = "listeners";
  private Integer listeners;

  public static final String JSON_PROPERTY_LISTENERS30S = "listeners_30s";
  private Integer listeners30s;

  public static final String JSON_PROPERTY_MAX_LISTENERS = "max_listeners";
  private Integer maxListeners;

  public static final String JSON_PROPERTY_MIN_LISTENERS = "min_listeners";
  private Integer minListeners;

  public static final String JSON_PROPERTY_UNIQUES = "uniques";
  private Integer uniques;

  public static final String JSON_PROPERTY_AVERAGE_LISTENERS = "average_listeners";
  private BigDecimal averageListeners;

  public static final String JSON_PROPERTY_LISTENING_TIME = "listening_time";
  private Integer listeningTime;

  public static final String JSON_PROPERTY_MAX_LISTENING_TIME = "max_listening_time";
  private Integer maxListeningTime;

  public static final String JSON_PROPERTY_MIN_LISTENING_TIME = "min_listening_time";
  private Integer minListeningTime;

  public static final String JSON_PROPERTY_AVERAGE_LISTENING_TIME = "average_listening_time";
  private BigDecimal averageListeningTime;

  /**
   * The type of stream
   */
  public enum TypeEnum {
    HLS("hls"),
    
    STREAM("stream");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public StatListenerByStation() {
  }

  public StatListenerByStation streamId(Integer streamId) {
    
    this.streamId = streamId;
    return this;
  }

   /**
   * The stream id related to this stat
   * @return streamId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStreamId() {
    return streamId;
  }


  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStreamId(Integer streamId) {
    this.streamId = streamId;
  }


  public StatListenerByStation listeners(Integer listeners) {
    
    this.listeners = listeners;
    return this;
  }

   /**
   * The number of listeners
   * @return listeners
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getListeners() {
    return listeners;
  }


  @JsonProperty(JSON_PROPERTY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setListeners(Integer listeners) {
    this.listeners = listeners;
  }


  public StatListenerByStation listeners30s(Integer listeners30s) {
    
    this.listeners30s = listeners30s;
    return this;
  }

   /**
   * The number of listeners will stay 30 seconds
   * @return listeners30s
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LISTENERS30S)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getListeners30s() {
    return listeners30s;
  }


  @JsonProperty(JSON_PROPERTY_LISTENERS30S)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setListeners30s(Integer listeners30s) {
    this.listeners30s = listeners30s;
  }


  public StatListenerByStation maxListeners(Integer maxListeners) {
    
    this.maxListeners = maxListeners;
    return this;
  }

   /**
   * The max listeners on the date range
   * @return maxListeners
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxListeners() {
    return maxListeners;
  }


  @JsonProperty(JSON_PROPERTY_MAX_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxListeners(Integer maxListeners) {
    this.maxListeners = maxListeners;
  }


  public StatListenerByStation minListeners(Integer minListeners) {
    
    this.minListeners = minListeners;
    return this;
  }

   /**
   * The min listeners on the date range
   * @return minListeners
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIN_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinListeners() {
    return minListeners;
  }


  @JsonProperty(JSON_PROPERTY_MIN_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinListeners(Integer minListeners) {
    this.minListeners = minListeners;
  }


  public StatListenerByStation uniques(Integer uniques) {
    
    this.uniques = uniques;
    return this;
  }

   /**
   * The number of unique listeners
   * @return uniques
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNIQUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUniques() {
    return uniques;
  }


  @JsonProperty(JSON_PROPERTY_UNIQUES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUniques(Integer uniques) {
    this.uniques = uniques;
  }


  public StatListenerByStation averageListeners(BigDecimal averageListeners) {
    
    this.averageListeners = averageListeners;
    return this;
  }

   /**
   * The average listeners on the date range
   * @return averageListeners
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageListeners() {
    return averageListeners;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageListeners(BigDecimal averageListeners) {
    this.averageListeners = averageListeners;
  }


  public StatListenerByStation listeningTime(Integer listeningTime) {
    
    this.listeningTime = listeningTime;
    return this;
  }

   /**
   * The number of seconds listened
   * @return listeningTime
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LISTENING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getListeningTime() {
    return listeningTime;
  }


  @JsonProperty(JSON_PROPERTY_LISTENING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setListeningTime(Integer listeningTime) {
    this.listeningTime = listeningTime;
  }


  public StatListenerByStation maxListeningTime(Integer maxListeningTime) {
    
    this.maxListeningTime = maxListeningTime;
    return this;
  }

   /**
   * The max of seconds listened
   * @return maxListeningTime
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_LISTENING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxListeningTime() {
    return maxListeningTime;
  }


  @JsonProperty(JSON_PROPERTY_MAX_LISTENING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxListeningTime(Integer maxListeningTime) {
    this.maxListeningTime = maxListeningTime;
  }


  public StatListenerByStation minListeningTime(Integer minListeningTime) {
    
    this.minListeningTime = minListeningTime;
    return this;
  }

   /**
   * The min of seconds listened
   * @return minListeningTime
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIN_LISTENING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinListeningTime() {
    return minListeningTime;
  }


  @JsonProperty(JSON_PROPERTY_MIN_LISTENING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinListeningTime(Integer minListeningTime) {
    this.minListeningTime = minListeningTime;
  }


  public StatListenerByStation averageListeningTime(BigDecimal averageListeningTime) {
    
    this.averageListeningTime = averageListeningTime;
    return this;
  }

   /**
   * The average of seconds listened on the date range
   * @return averageListeningTime
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_LISTENING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageListeningTime() {
    return averageListeningTime;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_LISTENING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageListeningTime(BigDecimal averageListeningTime) {
    this.averageListeningTime = averageListeningTime;
  }


  public StatListenerByStation type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of stream
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatListenerByStation statListenerByStation = (StatListenerByStation) o;
    return Objects.equals(this.streamId, statListenerByStation.streamId) &&
        Objects.equals(this.listeners, statListenerByStation.listeners) &&
        Objects.equals(this.listeners30s, statListenerByStation.listeners30s) &&
        Objects.equals(this.maxListeners, statListenerByStation.maxListeners) &&
        Objects.equals(this.minListeners, statListenerByStation.minListeners) &&
        Objects.equals(this.uniques, statListenerByStation.uniques) &&
        Objects.equals(this.averageListeners, statListenerByStation.averageListeners) &&
        Objects.equals(this.listeningTime, statListenerByStation.listeningTime) &&
        Objects.equals(this.maxListeningTime, statListenerByStation.maxListeningTime) &&
        Objects.equals(this.minListeningTime, statListenerByStation.minListeningTime) &&
        Objects.equals(this.averageListeningTime, statListenerByStation.averageListeningTime) &&
        Objects.equals(this.type, statListenerByStation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamId, listeners, listeners30s, maxListeners, minListeners, uniques, averageListeners, listeningTime, maxListeningTime, minListeningTime, averageListeningTime, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatListenerByStation {\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    listeners: ").append(toIndentedString(listeners)).append("\n");
    sb.append("    listeners30s: ").append(toIndentedString(listeners30s)).append("\n");
    sb.append("    maxListeners: ").append(toIndentedString(maxListeners)).append("\n");
    sb.append("    minListeners: ").append(toIndentedString(minListeners)).append("\n");
    sb.append("    uniques: ").append(toIndentedString(uniques)).append("\n");
    sb.append("    averageListeners: ").append(toIndentedString(averageListeners)).append("\n");
    sb.append("    listeningTime: ").append(toIndentedString(listeningTime)).append("\n");
    sb.append("    maxListeningTime: ").append(toIndentedString(maxListeningTime)).append("\n");
    sb.append("    minListeningTime: ").append(toIndentedString(minListeningTime)).append("\n");
    sb.append("    averageListeningTime: ").append(toIndentedString(averageListeningTime)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

