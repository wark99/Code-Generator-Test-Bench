/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * InvestmentAccountAkoyaHoldingsInnerSweepSecurity
 */
@JsonPropertyOrder({
  InvestmentAccountAkoyaHoldingsInnerSweepSecurity.JSON_PROPERTY_CURRENT_BALANCE,
  InvestmentAccountAkoyaHoldingsInnerSweepSecurity.JSON_PROPERTY_AVAILABLE_BALANCE,
  InvestmentAccountAkoyaHoldingsInnerSweepSecurity.JSON_PROPERTY_BALANCE_AS_OF,
  InvestmentAccountAkoyaHoldingsInnerSweepSecurity.JSON_PROPERTY_CHECKS
})
@JsonTypeName("InvestmentAccountAkoya_holdings_inner_sweepSecurity")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class InvestmentAccountAkoyaHoldingsInnerSweepSecurity {
  public static final String JSON_PROPERTY_CURRENT_BALANCE = "currentBalance";
  private BigDecimal currentBalance;

  public static final String JSON_PROPERTY_AVAILABLE_BALANCE = "availableBalance";
  private BigDecimal availableBalance;

  public static final String JSON_PROPERTY_BALANCE_AS_OF = "balanceAsOf";
  private String balanceAsOf;

  public static final String JSON_PROPERTY_CHECKS = "checks";
  private Boolean checks;

  public InvestmentAccountAkoyaHoldingsInnerSweepSecurity() {
  }

  public InvestmentAccountAkoyaHoldingsInnerSweepSecurity currentBalance(BigDecimal currentBalance) {
    
    this.currentBalance = currentBalance;
    return this;
  }

   /**
   * Get currentBalance
   * @return currentBalance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCurrentBalance() {
    return currentBalance;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentBalance(BigDecimal currentBalance) {
    this.currentBalance = currentBalance;
  }


  public InvestmentAccountAkoyaHoldingsInnerSweepSecurity availableBalance(BigDecimal availableBalance) {
    
    this.availableBalance = availableBalance;
    return this;
  }

   /**
   * Get availableBalance
   * @return availableBalance
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAvailableBalance() {
    return availableBalance;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE_BALANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAvailableBalance(BigDecimal availableBalance) {
    this.availableBalance = availableBalance;
  }


  public InvestmentAccountAkoyaHoldingsInnerSweepSecurity balanceAsOf(String balanceAsOf) {
    
    this.balanceAsOf = balanceAsOf;
    return this;
  }

   /**
   * Get balanceAsOf
   * @return balanceAsOf
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BALANCE_AS_OF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBalanceAsOf() {
    return balanceAsOf;
  }


  @JsonProperty(JSON_PROPERTY_BALANCE_AS_OF)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBalanceAsOf(String balanceAsOf) {
    this.balanceAsOf = balanceAsOf;
  }


  public InvestmentAccountAkoyaHoldingsInnerSweepSecurity checks(Boolean checks) {
    
    this.checks = checks;
    return this;
  }

   /**
   * Get checks
   * @return checks
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHECKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getChecks() {
    return checks;
  }


  @JsonProperty(JSON_PROPERTY_CHECKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChecks(Boolean checks) {
    this.checks = checks;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvestmentAccountAkoyaHoldingsInnerSweepSecurity investmentAccountAkoyaHoldingsInnerSweepSecurity = (InvestmentAccountAkoyaHoldingsInnerSweepSecurity) o;
    return Objects.equals(this.currentBalance, investmentAccountAkoyaHoldingsInnerSweepSecurity.currentBalance) &&
        Objects.equals(this.availableBalance, investmentAccountAkoyaHoldingsInnerSweepSecurity.availableBalance) &&
        Objects.equals(this.balanceAsOf, investmentAccountAkoyaHoldingsInnerSweepSecurity.balanceAsOf) &&
        Objects.equals(this.checks, investmentAccountAkoyaHoldingsInnerSweepSecurity.checks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentBalance, availableBalance, balanceAsOf, checks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvestmentAccountAkoyaHoldingsInnerSweepSecurity {\n");
    sb.append("    currentBalance: ").append(toIndentedString(currentBalance)).append("\n");
    sb.append("    availableBalance: ").append(toIndentedString(availableBalance)).append("\n");
    sb.append("    balanceAsOf: ").append(toIndentedString(balanceAsOf)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

