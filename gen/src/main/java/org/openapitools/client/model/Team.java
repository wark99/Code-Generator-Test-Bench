/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Team
 */
@JsonPropertyOrder({
  Team.JSON_PROPERTY_TO_EXECUTE,
  Team.JSON_PROPERTY_FILES_FOUND,
  Team.JSON_PROPERTY_TO_MOVE,
  Team.JSON_PROPERTY_TO_RENAME,
  Team.JSON_PROPERTY_TO_UPDATE,
  Team.JSON_PROPERTY_TO_ARCHIVE,
  Team.JSON_PROPERTY_NOT_HANDLED_VERSIONS,
  Team.JSON_PROPERTY_NOT_HANDLED_FILES
})
@JsonTypeName("team")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Team {
  public static final String JSON_PROPERTY_TO_EXECUTE = "to_execute";
  private Integer toExecute;

  public static final String JSON_PROPERTY_FILES_FOUND = "files_found";
  private Integer filesFound;

  public static final String JSON_PROPERTY_TO_MOVE = "to_move";
  private Integer toMove;

  public static final String JSON_PROPERTY_TO_RENAME = "to_rename";
  private Integer toRename;

  public static final String JSON_PROPERTY_TO_UPDATE = "to_update";
  private Integer toUpdate;

  public static final String JSON_PROPERTY_TO_ARCHIVE = "to_archive";
  private Integer toArchive;

  public static final String JSON_PROPERTY_NOT_HANDLED_VERSIONS = "not_handled_versions";
  private Integer notHandledVersions;

  public static final String JSON_PROPERTY_NOT_HANDLED_FILES = "not_handled_files";
  private Integer notHandledFiles;

  public Team() {
  }

  public Team toExecute(Integer toExecute) {
    
    this.toExecute = toExecute;
    return this;
  }

   /**
   * Get toExecute
   * @return toExecute
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_EXECUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getToExecute() {
    return toExecute;
  }


  @JsonProperty(JSON_PROPERTY_TO_EXECUTE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToExecute(Integer toExecute) {
    this.toExecute = toExecute;
  }


  public Team filesFound(Integer filesFound) {
    
    this.filesFound = filesFound;
    return this;
  }

   /**
   * Get filesFound
   * @return filesFound
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILES_FOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getFilesFound() {
    return filesFound;
  }


  @JsonProperty(JSON_PROPERTY_FILES_FOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFilesFound(Integer filesFound) {
    this.filesFound = filesFound;
  }


  public Team toMove(Integer toMove) {
    
    this.toMove = toMove;
    return this;
  }

   /**
   * Get toMove
   * @return toMove
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_MOVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getToMove() {
    return toMove;
  }


  @JsonProperty(JSON_PROPERTY_TO_MOVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToMove(Integer toMove) {
    this.toMove = toMove;
  }


  public Team toRename(Integer toRename) {
    
    this.toRename = toRename;
    return this;
  }

   /**
   * Get toRename
   * @return toRename
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_RENAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getToRename() {
    return toRename;
  }


  @JsonProperty(JSON_PROPERTY_TO_RENAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToRename(Integer toRename) {
    this.toRename = toRename;
  }


  public Team toUpdate(Integer toUpdate) {
    
    this.toUpdate = toUpdate;
    return this;
  }

   /**
   * Get toUpdate
   * @return toUpdate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getToUpdate() {
    return toUpdate;
  }


  @JsonProperty(JSON_PROPERTY_TO_UPDATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToUpdate(Integer toUpdate) {
    this.toUpdate = toUpdate;
  }


  public Team toArchive(Integer toArchive) {
    
    this.toArchive = toArchive;
    return this;
  }

   /**
   * Get toArchive
   * @return toArchive
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TO_ARCHIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getToArchive() {
    return toArchive;
  }


  @JsonProperty(JSON_PROPERTY_TO_ARCHIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setToArchive(Integer toArchive) {
    this.toArchive = toArchive;
  }


  public Team notHandledVersions(Integer notHandledVersions) {
    
    this.notHandledVersions = notHandledVersions;
    return this;
  }

   /**
   * Get notHandledVersions
   * @return notHandledVersions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOT_HANDLED_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNotHandledVersions() {
    return notHandledVersions;
  }


  @JsonProperty(JSON_PROPERTY_NOT_HANDLED_VERSIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotHandledVersions(Integer notHandledVersions) {
    this.notHandledVersions = notHandledVersions;
  }


  public Team notHandledFiles(Integer notHandledFiles) {
    
    this.notHandledFiles = notHandledFiles;
    return this;
  }

   /**
   * Get notHandledFiles
   * @return notHandledFiles
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NOT_HANDLED_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getNotHandledFiles() {
    return notHandledFiles;
  }


  @JsonProperty(JSON_PROPERTY_NOT_HANDLED_FILES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNotHandledFiles(Integer notHandledFiles) {
    this.notHandledFiles = notHandledFiles;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Team team = (Team) o;
    return Objects.equals(this.toExecute, team.toExecute) &&
        Objects.equals(this.filesFound, team.filesFound) &&
        Objects.equals(this.toMove, team.toMove) &&
        Objects.equals(this.toRename, team.toRename) &&
        Objects.equals(this.toUpdate, team.toUpdate) &&
        Objects.equals(this.toArchive, team.toArchive) &&
        Objects.equals(this.notHandledVersions, team.notHandledVersions) &&
        Objects.equals(this.notHandledFiles, team.notHandledFiles);
  }

  @Override
  public int hashCode() {
    return Objects.hash(toExecute, filesFound, toMove, toRename, toUpdate, toArchive, notHandledVersions, notHandledFiles);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Team {\n");
    sb.append("    toExecute: ").append(toIndentedString(toExecute)).append("\n");
    sb.append("    filesFound: ").append(toIndentedString(filesFound)).append("\n");
    sb.append("    toMove: ").append(toIndentedString(toMove)).append("\n");
    sb.append("    toRename: ").append(toIndentedString(toRename)).append("\n");
    sb.append("    toUpdate: ").append(toIndentedString(toUpdate)).append("\n");
    sb.append("    toArchive: ").append(toIndentedString(toArchive)).append("\n");
    sb.append("    notHandledVersions: ").append(toIndentedString(notHandledVersions)).append("\n");
    sb.append("    notHandledFiles: ").append(toIndentedString(notHandledFiles)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

