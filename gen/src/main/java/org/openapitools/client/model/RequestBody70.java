/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item3;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RequestBody70
 */
@JsonPropertyOrder({
  RequestBody70.JSON_PROPERTY_AUTO_TRANSCODE,
  RequestBody70.JSON_PROPERTY_NAME,
  RequestBody70.JSON_PROPERTY_REMEMBER_TO_CONFIG,
  RequestBody70.JSON_PROPERTY_SOURCE_TYPE,
  RequestBody70.JSON_PROPERTY_STREAMS,
  RequestBody70.JSON_PROPERTY_TRANSCODE,
  RequestBody70.JSON_PROPERTY_TYPE
})
@JsonTypeName("Request_body_70")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RequestBody70 {
  public static final String JSON_PROPERTY_AUTO_TRANSCODE = "auto_transcode";
  private Boolean autoTranscode;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_REMEMBER_TO_CONFIG = "remember_to_config";
  private Boolean rememberToConfig;

  /**
   * Gets or Sets sourceType
   */
  public enum SourceTypeEnum {
    CAMIP("camip"),
    
    ENCODER("encoder"),
    
    MANIAK("maniak"),
    
    MOBILE("mobile"),
    
    WEBCAM("webcam");

    private String value;

    SourceTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SourceTypeEnum fromValue(String value) {
      for (SourceTypeEnum b : SourceTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SOURCE_TYPE = "source_type";
  private SourceTypeEnum sourceType;

  public static final String JSON_PROPERTY_STREAMS = "streams";
  private List<Item3> streams = new ArrayList<>();

  public static final String JSON_PROPERTY_TRANSCODE = "transcode";
  private Boolean transcode;

  /**
   * Gets or Sets type
   */
  public enum TypeEnum {
    ABR("abr"),
    
    MONO("mono");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public RequestBody70() {
  }

  public RequestBody70 autoTranscode(Boolean autoTranscode) {
    
    this.autoTranscode = autoTranscode;
    return this;
  }

   /**
   * Get autoTranscode
   * @return autoTranscode
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_TRANSCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAutoTranscode() {
    return autoTranscode;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_TRANSCODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoTranscode(Boolean autoTranscode) {
    this.autoTranscode = autoTranscode;
  }


  public RequestBody70 name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the resource &#x60;{name}&#x60;
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public RequestBody70 rememberToConfig(Boolean rememberToConfig) {
    
    this.rememberToConfig = rememberToConfig;
    return this;
  }

   /**
   * Get rememberToConfig
   * @return rememberToConfig
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_REMEMBER_TO_CONFIG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getRememberToConfig() {
    return rememberToConfig;
  }


  @JsonProperty(JSON_PROPERTY_REMEMBER_TO_CONFIG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRememberToConfig(Boolean rememberToConfig) {
    this.rememberToConfig = rememberToConfig;
  }


  public RequestBody70 sourceType(SourceTypeEnum sourceType) {
    
    this.sourceType = sourceType;
    return this;
  }

   /**
   * Get sourceType
   * @return sourceType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceTypeEnum getSourceType() {
    return sourceType;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceType(SourceTypeEnum sourceType) {
    this.sourceType = sourceType;
  }


  public RequestBody70 streams(List<Item3> streams) {
    
    this.streams = streams;
    return this;
  }

  public RequestBody70 addStreamsItem(Item3 streamsItem) {
    if (this.streams == null) {
      this.streams = new ArrayList<>();
    }
    this.streams.add(streamsItem);
    return this;
  }

   /**
   * Get streams
   * @return streams
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STREAMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Item3> getStreams() {
    return streams;
  }


  @JsonProperty(JSON_PROPERTY_STREAMS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStreams(List<Item3> streams) {
    this.streams = streams;
  }


  public RequestBody70 transcode(Boolean transcode) {
    
    this.transcode = transcode;
    return this;
  }

   /**
   * Get transcode
   * @return transcode
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TRANSCODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getTranscode() {
    return transcode;
  }


  @JsonProperty(JSON_PROPERTY_TRANSCODE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTranscode(Boolean transcode) {
    this.transcode = transcode;
  }


  public RequestBody70 type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestBody70 requestBody70 = (RequestBody70) o;
    return Objects.equals(this.autoTranscode, requestBody70.autoTranscode) &&
        Objects.equals(this.name, requestBody70.name) &&
        Objects.equals(this.rememberToConfig, requestBody70.rememberToConfig) &&
        Objects.equals(this.sourceType, requestBody70.sourceType) &&
        Objects.equals(this.streams, requestBody70.streams) &&
        Objects.equals(this.transcode, requestBody70.transcode) &&
        Objects.equals(this.type, requestBody70.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoTranscode, name, rememberToConfig, sourceType, streams, transcode, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestBody70 {\n");
    sb.append("    autoTranscode: ").append(toIndentedString(autoTranscode)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rememberToConfig: ").append(toIndentedString(rememberToConfig)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    streams: ").append(toIndentedString(streams)).append("\n");
    sb.append("    transcode: ").append(toIndentedString(transcode)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

