/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DeviceRiskHistoryEvent
 */
@JsonPropertyOrder({
  DeviceRiskHistoryEvent.JSON_PROPERTY_RISK_EVENT,
  DeviceRiskHistoryEvent.JSON_PROPERTY_RISK_EVENT_COUNT,
  DeviceRiskHistoryEvent.JSON_PROPERTY_RISK_LEVEL,
  DeviceRiskHistoryEvent.JSON_PROPERTY_LAST_EVENT_DATE,
  DeviceRiskHistoryEvent.JSON_PROPERTY_RISK_SIGNALS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:12:42.105719365Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class DeviceRiskHistoryEvent {
  public static final String JSON_PROPERTY_RISK_EVENT = "riskEvent";
  private String riskEvent;

  public static final String JSON_PROPERTY_RISK_EVENT_COUNT = "riskEventCount";
  private Integer riskEventCount;

  public static final String JSON_PROPERTY_RISK_LEVEL = "riskLevel";
  private Integer riskLevel;

  public static final String JSON_PROPERTY_LAST_EVENT_DATE = "lastEventDate";
  private String lastEventDate;

  public static final String JSON_PROPERTY_RISK_SIGNALS = "riskSignals";
  private List<String> riskSignals;

  public DeviceRiskHistoryEvent() {
  }

  public DeviceRiskHistoryEvent riskEvent(String riskEvent) {
    
    this.riskEvent = riskEvent;
    return this;
  }

   /**
   * Event label associated with specific risk, for example: AD or ATO.
   * @return riskEvent
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RISK_EVENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRiskEvent() {
    return riskEvent;
  }


  @JsonProperty(JSON_PROPERTY_RISK_EVENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskEvent(String riskEvent) {
    this.riskEvent = riskEvent;
  }


  public DeviceRiskHistoryEvent riskEventCount(Integer riskEventCount) {
    
    this.riskEventCount = riskEventCount;
    return this;
  }

   /**
   * The number of times the risk insight of the given type was detected.
   * minimum: 1
   * @return riskEventCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RISK_EVENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRiskEventCount() {
    return riskEventCount;
  }


  @JsonProperty(JSON_PROPERTY_RISK_EVENT_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskEventCount(Integer riskEventCount) {
    this.riskEventCount = riskEventCount;
  }


  public DeviceRiskHistoryEvent riskLevel(Integer riskLevel) {
    
    this.riskLevel = riskLevel;
    return this;
  }

   /**
   * Risk level value between 0-5.
   * @return riskLevel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RISK_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getRiskLevel() {
    return riskLevel;
  }


  @JsonProperty(JSON_PROPERTY_RISK_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskLevel(Integer riskLevel) {
    this.riskLevel = riskLevel;
  }


  public DeviceRiskHistoryEvent lastEventDate(String lastEventDate) {
    
    this.lastEventDate = lastEventDate;
    return this;
  }

   /**
   * The day when the risk insight of the given type was detected last.
   * @return lastEventDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LAST_EVENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getLastEventDate() {
    return lastEventDate;
  }


  @JsonProperty(JSON_PROPERTY_LAST_EVENT_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLastEventDate(String lastEventDate) {
    this.lastEventDate = lastEventDate;
  }


  public DeviceRiskHistoryEvent riskSignals(List<String> riskSignals) {
    
    this.riskSignals = riskSignals;
    return this;
  }

  public DeviceRiskHistoryEvent addRiskSignalsItem(String riskSignalsItem) {
    if (this.riskSignals == null) {
      this.riskSignals = new ArrayList<>();
    }
    this.riskSignals.add(riskSignalsItem);
    return this;
  }

   /**
   * During the insight evaluation, risk signals are generated when a request triggers either the rules or machine learning model. Each risk signal and it&#39;s associated definition is shown below.   * &#x60;account_carrier_unknown&#x60; - Carrier information for account is unknown   * &#x60;account_carrier&#x60; - Carrier velocity attempts count more than or equal to 50 within 4 hours   * &#x60;account_city_unknown&#x60; - City information for account is unknown   * &#x60;account_city&#x60; - Account has not been seen using the City   * &#x60;account_state_unknown&#x60; - State/Province information for account is unknown   * &#x60;account_state&#x60; - Account has not been seen using the State/Province   * &#x60;account_country_unknown&#x60; - Country information for account is unknown   * &#x60;account_country&#x60; - Account has not been seen using the Country   * &#x60;account_ip&#x60; - Account has not been seen using the IP   * &#x60;account_ua&#x60; - Account has not been seen using the UA   * &#x60;device_velocity&#x60; - Device Fingerprint velocity attempts count more than 100   * &#x60;ip_velocity&#x60; - Current IP velocity greater than 50 in the past 4 hours   * &#x60;login_failures&#x60; - High failure rate for account login in the past 30 minutes   * &#x60;login_velocity&#x60; - The account has +30 login attempts in the past 30 minutes (overall login attempts)   * &#x60;account_velocity&#x60; - Account logins have exceeded 10 attempts   * &#x60;ip_blocklist&#x60; - IP is in block list  These risk signals are informational but may be useful for a service provider to understand a detailed view of the associated risk present in a request.
   * @return riskSignals
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RISK_SIGNALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRiskSignals() {
    return riskSignals;
  }


  @JsonProperty(JSON_PROPERTY_RISK_SIGNALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRiskSignals(List<String> riskSignals) {
    this.riskSignals = riskSignals;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceRiskHistoryEvent deviceRiskHistoryEvent = (DeviceRiskHistoryEvent) o;
    return Objects.equals(this.riskEvent, deviceRiskHistoryEvent.riskEvent) &&
        Objects.equals(this.riskEventCount, deviceRiskHistoryEvent.riskEventCount) &&
        Objects.equals(this.riskLevel, deviceRiskHistoryEvent.riskLevel) &&
        Objects.equals(this.lastEventDate, deviceRiskHistoryEvent.lastEventDate) &&
        Objects.equals(this.riskSignals, deviceRiskHistoryEvent.riskSignals);
  }

  @Override
  public int hashCode() {
    return Objects.hash(riskEvent, riskEventCount, riskLevel, lastEventDate, riskSignals);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceRiskHistoryEvent {\n");
    sb.append("    riskEvent: ").append(toIndentedString(riskEvent)).append("\n");
    sb.append("    riskEventCount: ").append(toIndentedString(riskEventCount)).append("\n");
    sb.append("    riskLevel: ").append(toIndentedString(riskLevel)).append("\n");
    sb.append("    lastEventDate: ").append(toIndentedString(lastEventDate)).append("\n");
    sb.append("    riskSignals: ").append(toIndentedString(riskSignals)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

