/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Item;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RequestBody13
 */
@JsonPropertyOrder({
  RequestBody13.JSON_PROPERTY_BACKGROUND_COLOR,
  RequestBody13.JSON_PROPERTY_BUTTON_COLOR,
  RequestBody13.JSON_PROPERTY_DISPLAY_NAME,
  RequestBody13.JSON_PROPERTY_DOMAINS,
  RequestBody13.JSON_PROPERTY_FACEBOOK_LINK,
  RequestBody13.JSON_PROPERTY_HEIGHT,
  RequestBody13.JSON_PROPERTY_IS_AUTO_START,
  RequestBody13.JSON_PROPERTY_IS_COVER,
  RequestBody13.JSON_PROPERTY_IS_EMBED,
  RequestBody13.JSON_PROPERTY_IS_FACEBOOK_EMBED,
  RequestBody13.JSON_PROPERTY_IS_LISTENERS,
  RequestBody13.JSON_PROPERTY_IS_LISTENERS_HOLD,
  RequestBody13.JSON_PROPERTY_IS_LOGO,
  RequestBody13.JSON_PROPERTY_IS_METADATA_DISPLAY,
  RequestBody13.JSON_PROPERTY_IS_SPECTRUM,
  RequestBody13.JSON_PROPERTY_IS_STATION_THUMBNAIL,
  RequestBody13.JSON_PROPERTY_IS_TWITTER_EMBED,
  RequestBody13.JSON_PROPERTY_LANGUAGE,
  RequestBody13.JSON_PROPERTY_LISTENERS_HOLD,
  RequestBody13.JSON_PROPERTY_NAME,
  RequestBody13.JSON_PROPERTY_SECONDARY_COLOR,
  RequestBody13.JSON_PROPERTY_STATIONS,
  RequestBody13.JSON_PROPERTY_TWITTER_ACCOUNT,
  RequestBody13.JSON_PROPERTY_TWITTER_BACKLINK,
  RequestBody13.JSON_PROPERTY_TWITTER_HASHTAG,
  RequestBody13.JSON_PROPERTY_TYPE,
  RequestBody13.JSON_PROPERTY_VOLUME,
  RequestBody13.JSON_PROPERTY_WIDTH
})
@JsonTypeName("Request_body_13")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RequestBody13 {
  public static final String JSON_PROPERTY_BACKGROUND_COLOR = "background_color";
  private String backgroundColor;

  public static final String JSON_PROPERTY_BUTTON_COLOR = "button_color";
  private String buttonColor;

  public static final String JSON_PROPERTY_DISPLAY_NAME = "display_name";
  private String displayName;

  public static final String JSON_PROPERTY_DOMAINS = "domains";
  private String domains;

  public static final String JSON_PROPERTY_FACEBOOK_LINK = "facebook_link";
  private String facebookLink;

  public static final String JSON_PROPERTY_HEIGHT = "height";
  private String height;

  public static final String JSON_PROPERTY_IS_AUTO_START = "is_auto_start";
  private Boolean isAutoStart;

  public static final String JSON_PROPERTY_IS_COVER = "is_cover";
  private Boolean isCover;

  public static final String JSON_PROPERTY_IS_EMBED = "is_embed";
  private Boolean isEmbed;

  public static final String JSON_PROPERTY_IS_FACEBOOK_EMBED = "is_facebook_embed";
  private Boolean isFacebookEmbed;

  public static final String JSON_PROPERTY_IS_LISTENERS = "is_listeners";
  private Boolean isListeners;

  public static final String JSON_PROPERTY_IS_LISTENERS_HOLD = "is_listeners_hold";
  private Boolean isListenersHold;

  public static final String JSON_PROPERTY_IS_LOGO = "is_logo";
  private Boolean isLogo;

  public static final String JSON_PROPERTY_IS_METADATA_DISPLAY = "is_metadata_display";
  private Boolean isMetadataDisplay;

  public static final String JSON_PROPERTY_IS_SPECTRUM = "is_spectrum";
  private Boolean isSpectrum;

  public static final String JSON_PROPERTY_IS_STATION_THUMBNAIL = "is_station_thumbnail";
  private Boolean isStationThumbnail;

  public static final String JSON_PROPERTY_IS_TWITTER_EMBED = "is_twitter_embed";
  private Boolean isTwitterEmbed;

  /**
   * Specify the language used in the player
   */
  public enum LanguageEnum {
    DE("de"),
    
    EN("en"),
    
    ES("es"),
    
    FR("fr"),
    
    IT("it");

    private String value;

    LanguageEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static LanguageEnum fromValue(String value) {
      for (LanguageEnum b : LanguageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_LANGUAGE = "language";
  private LanguageEnum language;

  public static final String JSON_PROPERTY_LISTENERS_HOLD = "listeners_hold";
  private Integer listenersHold;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SECONDARY_COLOR = "secondary_color";
  private String secondaryColor;

  public static final String JSON_PROPERTY_STATIONS = "stations";
  private List<Item> stations = new ArrayList<>();

  public static final String JSON_PROPERTY_TWITTER_ACCOUNT = "twitter_account";
  private String twitterAccount;

  public static final String JSON_PROPERTY_TWITTER_BACKLINK = "twitter_backlink";
  private String twitterBacklink;

  public static final String JSON_PROPERTY_TWITTER_HASHTAG = "twitter_hashtag";
  private String twitterHashtag;

  /**
   * Specify the type of player
   */
  public enum TypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_VOLUME = "volume";
  private Integer volume;

  public static final String JSON_PROPERTY_WIDTH = "width";
  private String width;

  public RequestBody13() {
  }

  public RequestBody13 backgroundColor(String backgroundColor) {
    
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * Specify the background color used in the player
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BACKGROUND_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getBackgroundColor() {
    return backgroundColor;
  }


  @JsonProperty(JSON_PROPERTY_BACKGROUND_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public RequestBody13 buttonColor(String buttonColor) {
    
    this.buttonColor = buttonColor;
    return this;
  }

   /**
   * Specify the button color used in the player
   * @return buttonColor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_BUTTON_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getButtonColor() {
    return buttonColor;
  }


  @JsonProperty(JSON_PROPERTY_BUTTON_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setButtonColor(String buttonColor) {
    this.buttonColor = buttonColor;
  }


  public RequestBody13 displayName(String displayName) {
    
    this.displayName = displayName;
    return this;
  }

   /**
   * Specify the name uses to display in the player
   * @return displayName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDisplayName() {
    return displayName;
  }


  @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public RequestBody13 domains(String domains) {
    
    this.domains = domains;
    return this;
  }

   /**
   * Specify the domains allow accessing to the player
   * @return domains
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DOMAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDomains() {
    return domains;
  }


  @JsonProperty(JSON_PROPERTY_DOMAINS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDomains(String domains) {
    this.domains = domains;
  }


  public RequestBody13 facebookLink(String facebookLink) {
    
    this.facebookLink = facebookLink;
    return this;
  }

   /**
   * Specify the Facebook link used in Facebook embed
   * @return facebookLink
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FACEBOOK_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFacebookLink() {
    return facebookLink;
  }


  @JsonProperty(JSON_PROPERTY_FACEBOOK_LINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFacebookLink(String facebookLink) {
    this.facebookLink = facebookLink;
  }


  public RequestBody13 height(String height) {
    
    this.height = height;
    return this;
  }

   /**
   * Specify the height in px for display the player
   * @return height
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getHeight() {
    return height;
  }


  @JsonProperty(JSON_PROPERTY_HEIGHT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHeight(String height) {
    this.height = height;
  }


  public RequestBody13 isAutoStart(Boolean isAutoStart) {
    
    this.isAutoStart = isAutoStart;
    return this;
  }

   /**
   * Specify if the auto start is enabled
   * @return isAutoStart
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_AUTO_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsAutoStart() {
    return isAutoStart;
  }


  @JsonProperty(JSON_PROPERTY_IS_AUTO_START)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsAutoStart(Boolean isAutoStart) {
    this.isAutoStart = isAutoStart;
  }


  public RequestBody13 isCover(Boolean isCover) {
    
    this.isCover = isCover;
    return this;
  }

   /**
   * Specify if the cover will be displayed
   * @return isCover
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_COVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsCover() {
    return isCover;
  }


  @JsonProperty(JSON_PROPERTY_IS_COVER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsCover(Boolean isCover) {
    this.isCover = isCover;
  }


  public RequestBody13 isEmbed(Boolean isEmbed) {
    
    this.isEmbed = isEmbed;
    return this;
  }

   /**
   * Specify if the embed url will be displayed int the player
   * @return isEmbed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_EMBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsEmbed() {
    return isEmbed;
  }


  @JsonProperty(JSON_PROPERTY_IS_EMBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsEmbed(Boolean isEmbed) {
    this.isEmbed = isEmbed;
  }


  public RequestBody13 isFacebookEmbed(Boolean isFacebookEmbed) {
    
    this.isFacebookEmbed = isFacebookEmbed;
    return this;
  }

   /**
   * Specify if the Facebook embed url will be displayed int the player
   * @return isFacebookEmbed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_FACEBOOK_EMBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsFacebookEmbed() {
    return isFacebookEmbed;
  }


  @JsonProperty(JSON_PROPERTY_IS_FACEBOOK_EMBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsFacebookEmbed(Boolean isFacebookEmbed) {
    this.isFacebookEmbed = isFacebookEmbed;
  }


  public RequestBody13 isListeners(Boolean isListeners) {
    
    this.isListeners = isListeners;
    return this;
  }

   /**
   * Specify if listeners information is displayed
   * @return isListeners
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsListeners() {
    return isListeners;
  }


  @JsonProperty(JSON_PROPERTY_IS_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsListeners(Boolean isListeners) {
    this.isListeners = isListeners;
  }


  public RequestBody13 isListenersHold(Boolean isListenersHold) {
    
    this.isListenersHold = isListenersHold;
    return this;
  }

   /**
   * Specify if listeners hold is used
   * @return isListenersHold
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_LISTENERS_HOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsListenersHold() {
    return isListenersHold;
  }


  @JsonProperty(JSON_PROPERTY_IS_LISTENERS_HOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsListenersHold(Boolean isListenersHold) {
    this.isListenersHold = isListenersHold;
  }


  public RequestBody13 isLogo(Boolean isLogo) {
    
    this.isLogo = isLogo;
    return this;
  }

   /**
   * Specify if the logo Infomaniak is displayed
   * @return isLogo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsLogo() {
    return isLogo;
  }


  @JsonProperty(JSON_PROPERTY_IS_LOGO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsLogo(Boolean isLogo) {
    this.isLogo = isLogo;
  }


  public RequestBody13 isMetadataDisplay(Boolean isMetadataDisplay) {
    
    this.isMetadataDisplay = isMetadataDisplay;
    return this;
  }

   /**
   * Specify if the metadata title and artist will be visible
   * @return isMetadataDisplay
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_METADATA_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsMetadataDisplay() {
    return isMetadataDisplay;
  }


  @JsonProperty(JSON_PROPERTY_IS_METADATA_DISPLAY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsMetadataDisplay(Boolean isMetadataDisplay) {
    this.isMetadataDisplay = isMetadataDisplay;
  }


  public RequestBody13 isSpectrum(Boolean isSpectrum) {
    
    this.isSpectrum = isSpectrum;
    return this;
  }

   /**
   * Specify if the spectrum will be displayed
   * @return isSpectrum
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_SPECTRUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsSpectrum() {
    return isSpectrum;
  }


  @JsonProperty(JSON_PROPERTY_IS_SPECTRUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsSpectrum(Boolean isSpectrum) {
    this.isSpectrum = isSpectrum;
  }


  public RequestBody13 isStationThumbnail(Boolean isStationThumbnail) {
    
    this.isStationThumbnail = isStationThumbnail;
    return this;
  }

   /**
   * Specify if the station thumbnail will be displayed
   * @return isStationThumbnail
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_STATION_THUMBNAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsStationThumbnail() {
    return isStationThumbnail;
  }


  @JsonProperty(JSON_PROPERTY_IS_STATION_THUMBNAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsStationThumbnail(Boolean isStationThumbnail) {
    this.isStationThumbnail = isStationThumbnail;
  }


  public RequestBody13 isTwitterEmbed(Boolean isTwitterEmbed) {
    
    this.isTwitterEmbed = isTwitterEmbed;
    return this;
  }

   /**
   * Specify if the Twitter embed url will be displayed int the player
   * @return isTwitterEmbed
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_TWITTER_EMBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsTwitterEmbed() {
    return isTwitterEmbed;
  }


  @JsonProperty(JSON_PROPERTY_IS_TWITTER_EMBED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsTwitterEmbed(Boolean isTwitterEmbed) {
    this.isTwitterEmbed = isTwitterEmbed;
  }


  public RequestBody13 language(LanguageEnum language) {
    
    this.language = language;
    return this;
  }

   /**
   * Specify the language used in the player
   * @return language
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public LanguageEnum getLanguage() {
    return language;
  }


  @JsonProperty(JSON_PROPERTY_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguage(LanguageEnum language) {
    this.language = language;
  }


  public RequestBody13 listenersHold(Integer listenersHold) {
    
    this.listenersHold = listenersHold;
    return this;
  }

   /**
   * Specify listeners hold for listeners information
   * @return listenersHold
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LISTENERS_HOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getListenersHold() {
    return listenersHold;
  }


  @JsonProperty(JSON_PROPERTY_LISTENERS_HOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setListenersHold(Integer listenersHold) {
    this.listenersHold = listenersHold;
  }


  public RequestBody13 name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Specify the name of the player, it is not used in the player
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public RequestBody13 secondaryColor(String secondaryColor) {
    
    this.secondaryColor = secondaryColor;
    return this;
  }

   /**
   * Specify the secondary color used in the player
   * @return secondaryColor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECONDARY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecondaryColor() {
    return secondaryColor;
  }


  @JsonProperty(JSON_PROPERTY_SECONDARY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecondaryColor(String secondaryColor) {
    this.secondaryColor = secondaryColor;
  }


  public RequestBody13 stations(List<Item> stations) {
    
    this.stations = stations;
    return this;
  }

  public RequestBody13 addStationsItem(Item stationsItem) {
    if (this.stations == null) {
      this.stations = new ArrayList<>();
    }
    this.stations.add(stationsItem);
    return this;
  }

   /**
   * Specify the list of stations used in the super player
   * @return stations
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Item> getStations() {
    return stations;
  }


  @JsonProperty(JSON_PROPERTY_STATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStations(List<Item> stations) {
    this.stations = stations;
  }


  public RequestBody13 twitterAccount(String twitterAccount) {
    
    this.twitterAccount = twitterAccount;
    return this;
  }

   /**
   * Specify the Twitter account will be used in Twitter embed
   * @return twitterAccount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TWITTER_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTwitterAccount() {
    return twitterAccount;
  }


  @JsonProperty(JSON_PROPERTY_TWITTER_ACCOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTwitterAccount(String twitterAccount) {
    this.twitterAccount = twitterAccount;
  }


  public RequestBody13 twitterBacklink(String twitterBacklink) {
    
    this.twitterBacklink = twitterBacklink;
    return this;
  }

   /**
   * Specify the Twitter backlink used in Twitter embed
   * @return twitterBacklink
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TWITTER_BACKLINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTwitterBacklink() {
    return twitterBacklink;
  }


  @JsonProperty(JSON_PROPERTY_TWITTER_BACKLINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTwitterBacklink(String twitterBacklink) {
    this.twitterBacklink = twitterBacklink;
  }


  public RequestBody13 twitterHashtag(String twitterHashtag) {
    
    this.twitterHashtag = twitterHashtag;
    return this;
  }

   /**
   * Specify the Twitter hashtag used in Twitter embed
   * @return twitterHashtag
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TWITTER_HASHTAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTwitterHashtag() {
    return twitterHashtag;
  }


  @JsonProperty(JSON_PROPERTY_TWITTER_HASHTAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTwitterHashtag(String twitterHashtag) {
    this.twitterHashtag = twitterHashtag;
  }


  public RequestBody13 type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Specify the type of player
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public RequestBody13 volume(Integer volume) {
    
    this.volume = volume;
    return this;
  }

   /**
   * Specify the default volume in the player
   * maximum: 100
   * @return volume
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getVolume() {
    return volume;
  }


  @JsonProperty(JSON_PROPERTY_VOLUME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVolume(Integer volume) {
    this.volume = volume;
  }


  public RequestBody13 width(String width) {
    
    this.width = width;
    return this;
  }

   /**
   * Specify the width in px for display the player
   * @return width
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWidth() {
    return width;
  }


  @JsonProperty(JSON_PROPERTY_WIDTH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWidth(String width) {
    this.width = width;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestBody13 requestBody13 = (RequestBody13) o;
    return Objects.equals(this.backgroundColor, requestBody13.backgroundColor) &&
        Objects.equals(this.buttonColor, requestBody13.buttonColor) &&
        Objects.equals(this.displayName, requestBody13.displayName) &&
        Objects.equals(this.domains, requestBody13.domains) &&
        Objects.equals(this.facebookLink, requestBody13.facebookLink) &&
        Objects.equals(this.height, requestBody13.height) &&
        Objects.equals(this.isAutoStart, requestBody13.isAutoStart) &&
        Objects.equals(this.isCover, requestBody13.isCover) &&
        Objects.equals(this.isEmbed, requestBody13.isEmbed) &&
        Objects.equals(this.isFacebookEmbed, requestBody13.isFacebookEmbed) &&
        Objects.equals(this.isListeners, requestBody13.isListeners) &&
        Objects.equals(this.isListenersHold, requestBody13.isListenersHold) &&
        Objects.equals(this.isLogo, requestBody13.isLogo) &&
        Objects.equals(this.isMetadataDisplay, requestBody13.isMetadataDisplay) &&
        Objects.equals(this.isSpectrum, requestBody13.isSpectrum) &&
        Objects.equals(this.isStationThumbnail, requestBody13.isStationThumbnail) &&
        Objects.equals(this.isTwitterEmbed, requestBody13.isTwitterEmbed) &&
        Objects.equals(this.language, requestBody13.language) &&
        Objects.equals(this.listenersHold, requestBody13.listenersHold) &&
        Objects.equals(this.name, requestBody13.name) &&
        Objects.equals(this.secondaryColor, requestBody13.secondaryColor) &&
        Objects.equals(this.stations, requestBody13.stations) &&
        Objects.equals(this.twitterAccount, requestBody13.twitterAccount) &&
        Objects.equals(this.twitterBacklink, requestBody13.twitterBacklink) &&
        Objects.equals(this.twitterHashtag, requestBody13.twitterHashtag) &&
        Objects.equals(this.type, requestBody13.type) &&
        Objects.equals(this.volume, requestBody13.volume) &&
        Objects.equals(this.width, requestBody13.width);
  }

  @Override
  public int hashCode() {
    return Objects.hash(backgroundColor, buttonColor, displayName, domains, facebookLink, height, isAutoStart, isCover, isEmbed, isFacebookEmbed, isListeners, isListenersHold, isLogo, isMetadataDisplay, isSpectrum, isStationThumbnail, isTwitterEmbed, language, listenersHold, name, secondaryColor, stations, twitterAccount, twitterBacklink, twitterHashtag, type, volume, width);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestBody13 {\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    buttonColor: ").append(toIndentedString(buttonColor)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    domains: ").append(toIndentedString(domains)).append("\n");
    sb.append("    facebookLink: ").append(toIndentedString(facebookLink)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    isAutoStart: ").append(toIndentedString(isAutoStart)).append("\n");
    sb.append("    isCover: ").append(toIndentedString(isCover)).append("\n");
    sb.append("    isEmbed: ").append(toIndentedString(isEmbed)).append("\n");
    sb.append("    isFacebookEmbed: ").append(toIndentedString(isFacebookEmbed)).append("\n");
    sb.append("    isListeners: ").append(toIndentedString(isListeners)).append("\n");
    sb.append("    isListenersHold: ").append(toIndentedString(isListenersHold)).append("\n");
    sb.append("    isLogo: ").append(toIndentedString(isLogo)).append("\n");
    sb.append("    isMetadataDisplay: ").append(toIndentedString(isMetadataDisplay)).append("\n");
    sb.append("    isSpectrum: ").append(toIndentedString(isSpectrum)).append("\n");
    sb.append("    isStationThumbnail: ").append(toIndentedString(isStationThumbnail)).append("\n");
    sb.append("    isTwitterEmbed: ").append(toIndentedString(isTwitterEmbed)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    listenersHold: ").append(toIndentedString(listenersHold)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    secondaryColor: ").append(toIndentedString(secondaryColor)).append("\n");
    sb.append("    stations: ").append(toIndentedString(stations)).append("\n");
    sb.append("    twitterAccount: ").append(toIndentedString(twitterAccount)).append("\n");
    sb.append("    twitterBacklink: ").append(toIndentedString(twitterBacklink)).append("\n");
    sb.append("    twitterHashtag: ").append(toIndentedString(twitterHashtag)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    volume: ").append(toIndentedString(volume)).append("\n");
    sb.append("    width: ").append(toIndentedString(width)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

