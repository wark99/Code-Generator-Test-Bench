/*
 * RPHaven Games Management
 * This is a sample Pet Store Server based on the OpenAPI 3.1 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * The version of the OpenAPI document: 1.0.2
 * Contact: apiteam@rphaven.co.uk
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * MeetDetailsAllOfEmbedded
 */
@JsonPropertyOrder({
  MeetDetailsAllOfEmbedded.JSON_PROPERTY_MEET_COLON_VENUE
})
@JsonTypeName("MeetDetails_allOf__embedded")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:25:40.667796194Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class MeetDetailsAllOfEmbedded {
  public static final String JSON_PROPERTY_MEET_COLON_VENUE = "meet:venue";
  private JsonNullable<Object> meetColonVenue = JsonNullable.<Object>of(null);

  public MeetDetailsAllOfEmbedded() {
  }

  public MeetDetailsAllOfEmbedded meetColonVenue(Object meetColonVenue) {
    this.meetColonVenue = JsonNullable.<Object>of(meetColonVenue);
    
    return this;
  }

   /**
   * Get meetColonVenue
   * @return meetColonVenue
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Object getMeetColonVenue() {
        return meetColonVenue.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_MEET_COLON_VENUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Object> getMeetColonVenue_JsonNullable() {
    return meetColonVenue;
  }
  
  @JsonProperty(JSON_PROPERTY_MEET_COLON_VENUE)
  public void setMeetColonVenue_JsonNullable(JsonNullable<Object> meetColonVenue) {
    this.meetColonVenue = meetColonVenue;
  }

  public void setMeetColonVenue(Object meetColonVenue) {
    this.meetColonVenue = JsonNullable.<Object>of(meetColonVenue);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MeetDetailsAllOfEmbedded meetDetailsAllOfEmbedded = (MeetDetailsAllOfEmbedded) o;
    return equalsNullable(this.meetColonVenue, meetDetailsAllOfEmbedded.meetColonVenue);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(meetColonVenue));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MeetDetailsAllOfEmbedded {\n");
    sb.append("    meetColonVenue: ").append(toIndentedString(meetColonVenue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

