/*
 * Perch API
 * Perch API for accessing data from Perch. See our [API Guide](https://docs.google.com/document/d/1ms6LFNwFN4C4WkrfWs8Hlu5igFBpNLhNr7uLEkGmvJA) for guidance on best practices. <br/> <br/> Find out more about Perch at [https://perch.fit](https://perch.fit) or by contacting us at [support@perch.fit](mailto:support@perch.fit).
 *
 * The version of the OpenAPI document: 1.2.0
 * Contact: support@perch.fit
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Exercise;
import org.openapitools.client.model.User;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * FilterSetsResponseAllOfRefs
 */
@JsonPropertyOrder({
  FilterSetsResponseAllOfRefs.JSON_PROPERTY_EXERCISES,
  FilterSetsResponseAllOfRefs.JSON_PROPERTY_USERS
})
@JsonTypeName("FilterSetsResponse_allOf_refs")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:20:41.221792118Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class FilterSetsResponseAllOfRefs {
  public static final String JSON_PROPERTY_EXERCISES = "exercises";
  private List<Exercise> exercises;

  public static final String JSON_PROPERTY_USERS = "users";
  private List<User> users;

  public FilterSetsResponseAllOfRefs() {
  }

  public FilterSetsResponseAllOfRefs exercises(List<Exercise> exercises) {
    
    this.exercises = exercises;
    return this;
  }

  public FilterSetsResponseAllOfRefs addExercisesItem(Exercise exercisesItem) {
    if (this.exercises == null) {
      this.exercises = new ArrayList<>();
    }
    this.exercises.add(exercisesItem);
    return this;
  }

   /**
   * Get exercises
   * @return exercises
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXERCISES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Exercise> getExercises() {
    return exercises;
  }


  @JsonProperty(JSON_PROPERTY_EXERCISES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExercises(List<Exercise> exercises) {
    this.exercises = exercises;
  }


  public FilterSetsResponseAllOfRefs users(List<User> users) {
    
    this.users = users;
    return this;
  }

  public FilterSetsResponseAllOfRefs addUsersItem(User usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Get users
   * @return users
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<User> getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(List<User> users) {
    this.users = users;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FilterSetsResponseAllOfRefs filterSetsResponseAllOfRefs = (FilterSetsResponseAllOfRefs) o;
    return Objects.equals(this.exercises, filterSetsResponseAllOfRefs.exercises) &&
        Objects.equals(this.users, filterSetsResponseAllOfRefs.users);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exercises, users);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FilterSetsResponseAllOfRefs {\n");
    sb.append("    exercises: ").append(toIndentedString(exercises)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

