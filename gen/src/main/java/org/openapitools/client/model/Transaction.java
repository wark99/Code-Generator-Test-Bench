/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import org.openapitools.client.model.Categorization;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Transaction
 */
@JsonPropertyOrder({
  Transaction.JSON_PROPERTY_ID,
  Transaction.JSON_PROPERTY_AMOUNT,
  Transaction.JSON_PROPERTY_ACCOUNT_ID,
  Transaction.JSON_PROPERTY_CUSTOMER_ID,
  Transaction.JSON_PROPERTY_STATUS,
  Transaction.JSON_PROPERTY_DESCRIPTION,
  Transaction.JSON_PROPERTY_MEMO,
  Transaction.JSON_PROPERTY_TYPE,
  Transaction.JSON_PROPERTY_TRANSACTION_DATE,
  Transaction.JSON_PROPERTY_POSTED_DATE,
  Transaction.JSON_PROPERTY_CREATED_DATE,
  Transaction.JSON_PROPERTY_FIRST_EFFECTIVE_DATE,
  Transaction.JSON_PROPERTY_EFFECTIVE_DATE,
  Transaction.JSON_PROPERTY_OPTION_EXPIRE_DATE,
  Transaction.JSON_PROPERTY_CHECK_NUM,
  Transaction.JSON_PROPERTY_ESCROW_AMOUNT,
  Transaction.JSON_PROPERTY_FEE_AMOUNT,
  Transaction.JSON_PROPERTY_SUSPENSE_AMOUNT,
  Transaction.JSON_PROPERTY_INTEREST_AMOUNT,
  Transaction.JSON_PROPERTY_PRINCIPAL_AMOUNT,
  Transaction.JSON_PROPERTY_OPTION_STRIKE_PRICE,
  Transaction.JSON_PROPERTY_UNIT_QUANTITY,
  Transaction.JSON_PROPERTY_UNIT_PRICE,
  Transaction.JSON_PROPERTY_CATEGORIZATION,
  Transaction.JSON_PROPERTY_RUNNING_BALANCE_AMOUNT,
  Transaction.JSON_PROPERTY_SUBACCOUNT_SECURITY_TYPE,
  Transaction.JSON_PROPERTY_COMMISSION_AMOUNT,
  Transaction.JSON_PROPERTY_TICKER,
  Transaction.JSON_PROPERTY_INVESTMENT_TRANSACTION_TYPE,
  Transaction.JSON_PROPERTY_TAXES_AMOUNT,
  Transaction.JSON_PROPERTY_CURRENCY_SYMBOL,
  Transaction.JSON_PROPERTY_INCOME_TYPE,
  Transaction.JSON_PROPERTY_SPLIT_DENOMINATOR,
  Transaction.JSON_PROPERTY_SPLIT_NUMERATOR,
  Transaction.JSON_PROPERTY_SHARES_PER_CONTRACT,
  Transaction.JSON_PROPERTY_SUB_ACCOUNT_FUND,
  Transaction.JSON_PROPERTY_SECURITY_ID,
  Transaction.JSON_PROPERTY_SECURITY_ID_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:12:42.105719365Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Transaction {
  public static final String JSON_PROPERTY_ID = "id";
  private Long id;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  public static final String JSON_PROPERTY_ACCOUNT_ID = "accountId";
  private Long accountId;

  public static final String JSON_PROPERTY_CUSTOMER_ID = "customerId";
  private Long customerId;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;

  public static final String JSON_PROPERTY_MEMO = "memo";
  private String memo;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_TRANSACTION_DATE = "transactionDate";
  private Long transactionDate;

  public static final String JSON_PROPERTY_POSTED_DATE = "postedDate";
  private Long postedDate;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private Long createdDate;

  public static final String JSON_PROPERTY_FIRST_EFFECTIVE_DATE = "firstEffectiveDate";
  private Long firstEffectiveDate;

  public static final String JSON_PROPERTY_EFFECTIVE_DATE = "effectiveDate";
  private Long effectiveDate;

  public static final String JSON_PROPERTY_OPTION_EXPIRE_DATE = "optionExpireDate";
  private Long optionExpireDate;

  public static final String JSON_PROPERTY_CHECK_NUM = "checkNum";
  private String checkNum;

  public static final String JSON_PROPERTY_ESCROW_AMOUNT = "escrowAmount";
  private BigDecimal escrowAmount;

  public static final String JSON_PROPERTY_FEE_AMOUNT = "feeAmount";
  private BigDecimal feeAmount;

  public static final String JSON_PROPERTY_SUSPENSE_AMOUNT = "suspenseAmount";
  private BigDecimal suspenseAmount;

  public static final String JSON_PROPERTY_INTEREST_AMOUNT = "interestAmount";
  private BigDecimal interestAmount;

  public static final String JSON_PROPERTY_PRINCIPAL_AMOUNT = "principalAmount";
  private BigDecimal principalAmount;

  public static final String JSON_PROPERTY_OPTION_STRIKE_PRICE = "optionStrikePrice";
  private BigDecimal optionStrikePrice;

  public static final String JSON_PROPERTY_UNIT_QUANTITY = "unitQuantity";
  private Integer unitQuantity;

  public static final String JSON_PROPERTY_UNIT_PRICE = "unitPrice";
  private BigDecimal unitPrice;

  public static final String JSON_PROPERTY_CATEGORIZATION = "categorization";
  private Categorization categorization;

  public static final String JSON_PROPERTY_RUNNING_BALANCE_AMOUNT = "runningBalanceAmount";
  private BigDecimal runningBalanceAmount;

  public static final String JSON_PROPERTY_SUBACCOUNT_SECURITY_TYPE = "subaccountSecurityType";
  private String subaccountSecurityType;

  public static final String JSON_PROPERTY_COMMISSION_AMOUNT = "commissionAmount";
  private Integer commissionAmount;

  public static final String JSON_PROPERTY_TICKER = "ticker";
  private String ticker;

  public static final String JSON_PROPERTY_INVESTMENT_TRANSACTION_TYPE = "investmentTransactionType";
  private String investmentTransactionType;

  public static final String JSON_PROPERTY_TAXES_AMOUNT = "taxesAmount";
  private Integer taxesAmount;

  public static final String JSON_PROPERTY_CURRENCY_SYMBOL = "currencySymbol";
  private String currencySymbol;

  public static final String JSON_PROPERTY_INCOME_TYPE = "incomeType";
  private String incomeType;

  public static final String JSON_PROPERTY_SPLIT_DENOMINATOR = "splitDenominator";
  private BigDecimal splitDenominator;

  public static final String JSON_PROPERTY_SPLIT_NUMERATOR = "splitNumerator";
  private BigDecimal splitNumerator;

  public static final String JSON_PROPERTY_SHARES_PER_CONTRACT = "sharesPerContract";
  private BigDecimal sharesPerContract;

  public static final String JSON_PROPERTY_SUB_ACCOUNT_FUND = "subAccountFund";
  private String subAccountFund;

  public static final String JSON_PROPERTY_SECURITY_ID = "securityId";
  private String securityId;

  public static final String JSON_PROPERTY_SECURITY_ID_TYPE = "securityIdType";
  private String securityIdType;

  public Transaction() {
  }

  public Transaction id(Long id) {
    
    this.id = id;
    return this;
  }

   /**
   * A transaction ID
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Long id) {
    this.id = id;
  }


  public Transaction amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * The total amount of the transaction. Transactions for deposits are positive values, withdrawals and debits are negative values.
   * @return amount
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Transaction accountId(Long accountId) {
    
    this.accountId = accountId;
    return this;
  }

   /**
   * An account ID represented as a number
   * @return accountId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getAccountId() {
    return accountId;
  }


  @JsonProperty(JSON_PROPERTY_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccountId(Long accountId) {
    this.accountId = accountId;
  }


  public Transaction customerId(Long customerId) {
    
    this.customerId = customerId;
    return this;
  }

   /**
   * A customer ID represented as a number. See Add Customer API for how to create a customer ID.
   * @return customerId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCustomerId() {
    return customerId;
  }


  @JsonProperty(JSON_PROPERTY_CUSTOMER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCustomerId(Long customerId) {
    this.customerId = customerId;
  }


  public Transaction status(String status) {
    
    this.status = status;
    return this;
  }

   /**
   * One of \&quot;active\&quot;, \&quot;pending\&quot;, or \&quot;shadow\&quot; (see [Transaction Status](https://developer.mastercard.com/open-banking-us/documentation/products/manage/transaction-data/#transaction-status))
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(String status) {
    this.status = status;
  }


  public Transaction description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * The description value is from the financial institution (FI), often known as the payee. The value \&quot;No description provided by institution\&quot; is returned when the FI doesn&#39;t provide one
   * @return description
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(String description) {
    this.description = description;
  }


  public Transaction memo(String memo) {
    
    this.memo = memo;
    return this;
  }

   /**
   * The institution must provide either a description, a memo, or both. We recommended concatenating the two fields into a single value.
   * @return memo
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMemo() {
    return memo;
  }


  @JsonProperty(JSON_PROPERTY_MEMO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMemo(String memo) {
    this.memo = memo;
  }


  public Transaction type(String type) {
    
    this.type = type;
    return this;
  }

   /**
   * If provided by the institution, the following values may be returned in the field of a record: * \&quot;atm\&quot;  * \&quot;cash\&quot;  * \&quot;check\&quot;  * \&quot;credit\&quot;  * \&quot;debit\&quot;  * \&quot;deposit\&quot;  * \&quot;directDebit\&quot;  * \&quot;directDeposit\&quot;  * \&quot;dividend\&quot;  * \&quot;fee\&quot;  * \&quot;interest\&quot;  * \&quot;other\&quot;  * \&quot;payment\&quot;  * \&quot;pointOfSale\&quot;  * \&quot;repeatPayment\&quot;  * \&quot;serviceCharge\&quot;  * \&quot;transfer\&quot;
   * @return type
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public Transaction transactionDate(Long transactionDate) {
    
    this.transactionDate = transactionDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it occurred. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return transactionDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSACTION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getTransactionDate() {
    return transactionDate;
  }


  @JsonProperty(JSON_PROPERTY_TRANSACTION_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransactionDate(Long transactionDate) {
    this.transactionDate = transactionDate;
  }


  public Transaction postedDate(Long postedDate) {
    
    this.postedDate = postedDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was posted or cleared by the institution. This value isn&#39;t required for student loan transaction data. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return postedDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getPostedDate() {
    return postedDate;
  }


  @JsonProperty(JSON_PROPERTY_POSTED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostedDate(Long postedDate) {
    this.postedDate = postedDate;
  }


  public Transaction createdDate(Long createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it was added to our platform. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return createdDate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Long getCreatedDate() {
    return createdDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedDate(Long createdDate) {
    this.createdDate = createdDate;
  }


  public Transaction firstEffectiveDate(Long firstEffectiveDate) {
    
    this.firstEffectiveDate = firstEffectiveDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the first timestamp of the transaction recorded in the &#x60;effectiveDate&#x60; field. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return firstEffectiveDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FIRST_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getFirstEffectiveDate() {
    return firstEffectiveDate;
  }


  @JsonProperty(JSON_PROPERTY_FIRST_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFirstEffectiveDate(Long firstEffectiveDate) {
    this.firstEffectiveDate = firstEffectiveDate;
  }


  public Transaction effectiveDate(Long effectiveDate) {
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction when it became effective on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getEffectiveDate() {
    return effectiveDate;
  }


  @JsonProperty(JSON_PROPERTY_EFFECTIVE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEffectiveDate(Long effectiveDate) {
    this.effectiveDate = effectiveDate;
  }


  public Transaction optionExpireDate(Long optionExpireDate) {
    
    this.optionExpireDate = optionExpireDate;
    return this;
  }

   /**
   * A date in Unix epoch time (in seconds). Represents the timestamp of the transaction expiration date when it became expires on an account by an institution. See: [Handling Epoch Dates and Times](https://developer.mastercard.com/open-banking-us/documentation/codes-and-formats/).
   * @return optionExpireDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTION_EXPIRE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getOptionExpireDate() {
    return optionExpireDate;
  }


  @JsonProperty(JSON_PROPERTY_OPTION_EXPIRE_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptionExpireDate(Long optionExpireDate) {
    this.optionExpireDate = optionExpireDate;
  }


  public Transaction checkNum(String checkNum) {
    
    this.checkNum = checkNum;
    return this;
  }

   /**
   * The check number of the transaction
   * @return checkNum
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHECK_NUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCheckNum() {
    return checkNum;
  }


  @JsonProperty(JSON_PROPERTY_CHECK_NUM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCheckNum(String checkNum) {
    this.checkNum = checkNum;
  }


  public Transaction escrowAmount(BigDecimal escrowAmount) {
    
    this.escrowAmount = escrowAmount;
    return this;
  }

   /**
   * The portion of the transaction allocated to escrow
   * @return escrowAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ESCROW_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getEscrowAmount() {
    return escrowAmount;
  }


  @JsonProperty(JSON_PROPERTY_ESCROW_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEscrowAmount(BigDecimal escrowAmount) {
    this.escrowAmount = escrowAmount;
  }


  public Transaction feeAmount(BigDecimal feeAmount) {
    
    this.feeAmount = feeAmount;
    return this;
  }

   /**
   * The portion of the overall transaction amount applied to fees
   * @return feeAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getFeeAmount() {
    return feeAmount;
  }


  @JsonProperty(JSON_PROPERTY_FEE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFeeAmount(BigDecimal feeAmount) {
    this.feeAmount = feeAmount;
  }


  public Transaction suspenseAmount(BigDecimal suspenseAmount) {
    
    this.suspenseAmount = suspenseAmount;
    return this;
  }

   /**
   * Temporarily hold funds if you overpay or underpay your monthly payment
   * @return suspenseAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUSPENSE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSuspenseAmount() {
    return suspenseAmount;
  }


  @JsonProperty(JSON_PROPERTY_SUSPENSE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSuspenseAmount(BigDecimal suspenseAmount) {
    this.suspenseAmount = suspenseAmount;
  }


  public Transaction interestAmount(BigDecimal interestAmount) {
    
    this.interestAmount = interestAmount;
    return this;
  }

   /**
   * The portion of the transaction allocated to interest
   * @return interestAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTEREST_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getInterestAmount() {
    return interestAmount;
  }


  @JsonProperty(JSON_PROPERTY_INTEREST_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterestAmount(BigDecimal interestAmount) {
    this.interestAmount = interestAmount;
  }


  public Transaction principalAmount(BigDecimal principalAmount) {
    
    this.principalAmount = principalAmount;
    return this;
  }

   /**
   * The portion of the transaction allocated to principal
   * @return principalAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRINCIPAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getPrincipalAmount() {
    return principalAmount;
  }


  @JsonProperty(JSON_PROPERTY_PRINCIPAL_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrincipalAmount(BigDecimal principalAmount) {
    this.principalAmount = principalAmount;
  }


  public Transaction optionStrikePrice(BigDecimal optionStrikePrice) {
    
    this.optionStrikePrice = optionStrikePrice;
    return this;
  }

   /**
   * The strike price of the option contract
   * @return optionStrikePrice
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_OPTION_STRIKE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getOptionStrikePrice() {
    return optionStrikePrice;
  }


  @JsonProperty(JSON_PROPERTY_OPTION_STRIKE_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOptionStrikePrice(BigDecimal optionStrikePrice) {
    this.optionStrikePrice = optionStrikePrice;
  }


  public Transaction unitQuantity(Integer unitQuantity) {
    
    this.unitQuantity = unitQuantity;
    return this;
  }

   /**
   * The number of units (individual shares) in the transaction
   * @return unitQuantity
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUnitQuantity() {
    return unitQuantity;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitQuantity(Integer unitQuantity) {
    this.unitQuantity = unitQuantity;
  }


  public Transaction unitPrice(BigDecimal unitPrice) {
    
    this.unitPrice = unitPrice;
    return this;
  }

   /**
   * Share price for the investment unit: stocks, mutual funds, ETFs
   * @return unitPrice
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getUnitPrice() {
    return unitPrice;
  }


  @JsonProperty(JSON_PROPERTY_UNIT_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
  }


  public Transaction categorization(Categorization categorization) {
    
    this.categorization = categorization;
    return this;
  }

   /**
   * Get categorization
   * @return categorization
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Categorization getCategorization() {
    return categorization;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIZATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategorization(Categorization categorization) {
    this.categorization = categorization;
  }


  public Transaction runningBalanceAmount(BigDecimal runningBalanceAmount) {
    
    this.runningBalanceAmount = runningBalanceAmount;
    return this;
  }

   /**
   * The ending balance after the transaction was posted
   * @return runningBalanceAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RUNNING_BALANCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getRunningBalanceAmount() {
    return runningBalanceAmount;
  }


  @JsonProperty(JSON_PROPERTY_RUNNING_BALANCE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRunningBalanceAmount(BigDecimal runningBalanceAmount) {
    this.runningBalanceAmount = runningBalanceAmount;
  }


  public Transaction subaccountSecurityType(String subaccountSecurityType) {
    
    this.subaccountSecurityType = subaccountSecurityType;
    return this;
  }

   /**
   * The type of sub account the funds came from
   * @return subaccountSecurityType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUBACCOUNT_SECURITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubaccountSecurityType() {
    return subaccountSecurityType;
  }


  @JsonProperty(JSON_PROPERTY_SUBACCOUNT_SECURITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubaccountSecurityType(String subaccountSecurityType) {
    this.subaccountSecurityType = subaccountSecurityType;
  }


  public Transaction commissionAmount(Integer commissionAmount) {
    
    this.commissionAmount = commissionAmount;
    return this;
  }

   /**
   * Transaction commission
   * @return commissionAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMISSION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getCommissionAmount() {
    return commissionAmount;
  }


  @JsonProperty(JSON_PROPERTY_COMMISSION_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommissionAmount(Integer commissionAmount) {
    this.commissionAmount = commissionAmount;
  }


  public Transaction ticker(String ticker) {
    
    this.ticker = ticker;
    return this;
  }

   /**
   * Ticker symbol for the investment related to the transaction
   * @return ticker
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTicker() {
    return ticker;
  }


  @JsonProperty(JSON_PROPERTY_TICKER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTicker(String ticker) {
    this.ticker = ticker;
  }


  public Transaction investmentTransactionType(String investmentTransactionType) {
    
    this.investmentTransactionType = investmentTransactionType;
    return this;
  }

   /**
   * Keywords in the &#x60;description&#x60; and &#x60;memo&#x60; fields were used to translate investment transactions into these types.  Possible values: * \&quot;cancel\&quot;  * \&quot;purchaseToClose\&quot;  * \&quot;purchaseToCover\&quot;  * \&quot;contribution\&quot;  * \&quot;optionExercise\&quot;  * \&quot;optionExpiration\&quot;  * \&quot;fee\&quot;  * \&quot;soldToClose\&quot;  * \&quot;soldToOpen\&quot;  * \&quot;split\&quot;  * \&quot;transfer\&quot;  * \&quot;returnOfCapital\&quot;  * \&quot;income\&quot;  * \&quot;purchased\&quot;  * \&quot;sold\&quot;  * \&quot;dividendReinvest\&quot;  * \&quot;tax\&quot;  * \&quot;dividend\&quot;  * \&quot;reinvestOfIncome\&quot;  * \&quot;interest\&quot;  * \&quot;deposit\&quot;  * \&quot;otherInfo\&quot;
   * @return investmentTransactionType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVESTMENT_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInvestmentTransactionType() {
    return investmentTransactionType;
  }


  @JsonProperty(JSON_PROPERTY_INVESTMENT_TRANSACTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvestmentTransactionType(String investmentTransactionType) {
    this.investmentTransactionType = investmentTransactionType;
  }


  public Transaction taxesAmount(Integer taxesAmount) {
    
    this.taxesAmount = taxesAmount;
    return this;
  }

   /**
   * Taxes applicable to the investment trade
   * @return taxesAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TAXES_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTaxesAmount() {
    return taxesAmount;
  }


  @JsonProperty(JSON_PROPERTY_TAXES_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTaxesAmount(Integer taxesAmount) {
    this.taxesAmount = taxesAmount;
  }


  public Transaction currencySymbol(String currencySymbol) {
    
    this.currencySymbol = currencySymbol;
    return this;
  }

   /**
   * If the foreign amount value is present then this is the currency code of that foreign amount
   * @return currencySymbol
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrencySymbol() {
    return currencySymbol;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrencySymbol(String currencySymbol) {
    this.currencySymbol = currencySymbol;
  }


  public Transaction incomeType(String incomeType) {
    
    this.incomeType = incomeType;
    return this;
  }

   /**
   * Capital gains applied in short, long, or miscellaneous terms for tax purposes
   * @return incomeType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCOME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIncomeType() {
    return incomeType;
  }


  @JsonProperty(JSON_PROPERTY_INCOME_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncomeType(String incomeType) {
    this.incomeType = incomeType;
  }


  public Transaction splitDenominator(BigDecimal splitDenominator) {
    
    this.splitDenominator = splitDenominator;
    return this;
  }

   /**
   * Denominator of the stock split for the transaction
   * @return splitDenominator
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPLIT_DENOMINATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSplitDenominator() {
    return splitDenominator;
  }


  @JsonProperty(JSON_PROPERTY_SPLIT_DENOMINATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSplitDenominator(BigDecimal splitDenominator) {
    this.splitDenominator = splitDenominator;
  }


  public Transaction splitNumerator(BigDecimal splitNumerator) {
    
    this.splitNumerator = splitNumerator;
    return this;
  }

   /**
   * Numerator of the stock split for the transaction
   * @return splitNumerator
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPLIT_NUMERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSplitNumerator() {
    return splitNumerator;
  }


  @JsonProperty(JSON_PROPERTY_SPLIT_NUMERATOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSplitNumerator(BigDecimal splitNumerator) {
    this.splitNumerator = splitNumerator;
  }


  public Transaction sharesPerContract(BigDecimal sharesPerContract) {
    
    this.sharesPerContract = sharesPerContract;
    return this;
  }

   /**
   * Shares per contract of the underlying stock option
   * @return sharesPerContract
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARES_PER_CONTRACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSharesPerContract() {
    return sharesPerContract;
  }


  @JsonProperty(JSON_PROPERTY_SHARES_PER_CONTRACT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharesPerContract(BigDecimal sharesPerContract) {
    this.sharesPerContract = sharesPerContract;
  }


  public Transaction subAccountFund(String subAccountFund) {
    
    this.subAccountFund = subAccountFund;
    return this;
  }

   /**
   * The sub account where the funds came from
   * @return subAccountFund
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SUB_ACCOUNT_FUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSubAccountFund() {
    return subAccountFund;
  }


  @JsonProperty(JSON_PROPERTY_SUB_ACCOUNT_FUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubAccountFund(String subAccountFund) {
    this.subAccountFund = subAccountFund;
  }


  public Transaction securityId(String securityId) {
    
    this.securityId = securityId;
    return this;
  }

   /**
   * The security ID of the transaction
   * @return securityId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecurityId() {
    return securityId;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityId(String securityId) {
    this.securityId = securityId;
  }


  public Transaction securityIdType(String securityIdType) {
    
    this.securityIdType = securityIdType;
    return this;
  }

   /**
   * The security type. This field is related to the &#x60;securityId&#x60; field. Possible values: * \&quot;CUSIP\&quot;  * \&quot;ISIN\&quot;  * \&quot;SEDOL\&quot;  * \&quot;SICC\&quot;  * \&quot;VALOR\&quot;  * \&quot;WKN\&quot;
   * @return securityIdType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecurityIdType() {
    return securityIdType;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_ID_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityIdType(String securityIdType) {
    this.securityIdType = securityIdType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transaction transaction = (Transaction) o;
    return Objects.equals(this.id, transaction.id) &&
        Objects.equals(this.amount, transaction.amount) &&
        Objects.equals(this.accountId, transaction.accountId) &&
        Objects.equals(this.customerId, transaction.customerId) &&
        Objects.equals(this.status, transaction.status) &&
        Objects.equals(this.description, transaction.description) &&
        Objects.equals(this.memo, transaction.memo) &&
        Objects.equals(this.type, transaction.type) &&
        Objects.equals(this.transactionDate, transaction.transactionDate) &&
        Objects.equals(this.postedDate, transaction.postedDate) &&
        Objects.equals(this.createdDate, transaction.createdDate) &&
        Objects.equals(this.firstEffectiveDate, transaction.firstEffectiveDate) &&
        Objects.equals(this.effectiveDate, transaction.effectiveDate) &&
        Objects.equals(this.optionExpireDate, transaction.optionExpireDate) &&
        Objects.equals(this.checkNum, transaction.checkNum) &&
        Objects.equals(this.escrowAmount, transaction.escrowAmount) &&
        Objects.equals(this.feeAmount, transaction.feeAmount) &&
        Objects.equals(this.suspenseAmount, transaction.suspenseAmount) &&
        Objects.equals(this.interestAmount, transaction.interestAmount) &&
        Objects.equals(this.principalAmount, transaction.principalAmount) &&
        Objects.equals(this.optionStrikePrice, transaction.optionStrikePrice) &&
        Objects.equals(this.unitQuantity, transaction.unitQuantity) &&
        Objects.equals(this.unitPrice, transaction.unitPrice) &&
        Objects.equals(this.categorization, transaction.categorization) &&
        Objects.equals(this.runningBalanceAmount, transaction.runningBalanceAmount) &&
        Objects.equals(this.subaccountSecurityType, transaction.subaccountSecurityType) &&
        Objects.equals(this.commissionAmount, transaction.commissionAmount) &&
        Objects.equals(this.ticker, transaction.ticker) &&
        Objects.equals(this.investmentTransactionType, transaction.investmentTransactionType) &&
        Objects.equals(this.taxesAmount, transaction.taxesAmount) &&
        Objects.equals(this.currencySymbol, transaction.currencySymbol) &&
        Objects.equals(this.incomeType, transaction.incomeType) &&
        Objects.equals(this.splitDenominator, transaction.splitDenominator) &&
        Objects.equals(this.splitNumerator, transaction.splitNumerator) &&
        Objects.equals(this.sharesPerContract, transaction.sharesPerContract) &&
        Objects.equals(this.subAccountFund, transaction.subAccountFund) &&
        Objects.equals(this.securityId, transaction.securityId) &&
        Objects.equals(this.securityIdType, transaction.securityIdType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, amount, accountId, customerId, status, description, memo, type, transactionDate, postedDate, createdDate, firstEffectiveDate, effectiveDate, optionExpireDate, checkNum, escrowAmount, feeAmount, suspenseAmount, interestAmount, principalAmount, optionStrikePrice, unitQuantity, unitPrice, categorization, runningBalanceAmount, subaccountSecurityType, commissionAmount, ticker, investmentTransactionType, taxesAmount, currencySymbol, incomeType, splitDenominator, splitNumerator, sharesPerContract, subAccountFund, securityId, securityIdType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transaction {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    memo: ").append(toIndentedString(memo)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    transactionDate: ").append(toIndentedString(transactionDate)).append("\n");
    sb.append("    postedDate: ").append(toIndentedString(postedDate)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    firstEffectiveDate: ").append(toIndentedString(firstEffectiveDate)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    optionExpireDate: ").append(toIndentedString(optionExpireDate)).append("\n");
    sb.append("    checkNum: ").append(toIndentedString(checkNum)).append("\n");
    sb.append("    escrowAmount: ").append(toIndentedString(escrowAmount)).append("\n");
    sb.append("    feeAmount: ").append(toIndentedString(feeAmount)).append("\n");
    sb.append("    suspenseAmount: ").append(toIndentedString(suspenseAmount)).append("\n");
    sb.append("    interestAmount: ").append(toIndentedString(interestAmount)).append("\n");
    sb.append("    principalAmount: ").append(toIndentedString(principalAmount)).append("\n");
    sb.append("    optionStrikePrice: ").append(toIndentedString(optionStrikePrice)).append("\n");
    sb.append("    unitQuantity: ").append(toIndentedString(unitQuantity)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("    categorization: ").append(toIndentedString(categorization)).append("\n");
    sb.append("    runningBalanceAmount: ").append(toIndentedString(runningBalanceAmount)).append("\n");
    sb.append("    subaccountSecurityType: ").append(toIndentedString(subaccountSecurityType)).append("\n");
    sb.append("    commissionAmount: ").append(toIndentedString(commissionAmount)).append("\n");
    sb.append("    ticker: ").append(toIndentedString(ticker)).append("\n");
    sb.append("    investmentTransactionType: ").append(toIndentedString(investmentTransactionType)).append("\n");
    sb.append("    taxesAmount: ").append(toIndentedString(taxesAmount)).append("\n");
    sb.append("    currencySymbol: ").append(toIndentedString(currencySymbol)).append("\n");
    sb.append("    incomeType: ").append(toIndentedString(incomeType)).append("\n");
    sb.append("    splitDenominator: ").append(toIndentedString(splitDenominator)).append("\n");
    sb.append("    splitNumerator: ").append(toIndentedString(splitNumerator)).append("\n");
    sb.append("    sharesPerContract: ").append(toIndentedString(sharesPerContract)).append("\n");
    sb.append("    subAccountFund: ").append(toIndentedString(subAccountFund)).append("\n");
    sb.append("    securityId: ").append(toIndentedString(securityId)).append("\n");
    sb.append("    securityIdType: ").append(toIndentedString(securityIdType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

