/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DriveDefaultLimits
 */
@JsonPropertyOrder({
  DriveDefaultLimits.JSON_PROPERTY_FILES_BY_FOLDERS,
  DriveDefaultLimits.JSON_PROPERTY_FILES_SIZE,
  DriveDefaultLimits.JSON_PROPERTY_SUB_FOLDERS,
  DriveDefaultLimits.JSON_PROPERTY_EMPTY_TRASH_DAYS,
  DriveDefaultLimits.JSON_PROPERTY_VERSIONING_DAYS,
  DriveDefaultLimits.JSON_PROPERTY_VERSIONING,
  DriveDefaultLimits.JSON_PROPERTY_FILES_BY_USER,
  DriveDefaultLimits.JSON_PROPERTY_SHARED_LINK,
  DriveDefaultLimits.JSON_PROPERTY_BANDWIDTH,
  DriveDefaultLimits.JSON_PROPERTY_ARCHIVE_FILES_DOWNLOAD,
  DriveDefaultLimits.JSON_PROPERTY_COMMENTS_PER_FILE,
  DriveDefaultLimits.JSON_PROPERTY_MIN_SIZE_FOR_HOTCACHE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class DriveDefaultLimits {
  public static final String JSON_PROPERTY_FILES_BY_FOLDERS = "files_by_folders";
  private Integer filesByFolders;

  public static final String JSON_PROPERTY_FILES_SIZE = "files_size";
  private Integer filesSize;

  public static final String JSON_PROPERTY_SUB_FOLDERS = "sub_folders";
  private Integer subFolders;

  public static final String JSON_PROPERTY_EMPTY_TRASH_DAYS = "empty_trash_days";
  private Integer emptyTrashDays;

  public static final String JSON_PROPERTY_VERSIONING_DAYS = "versioning_days";
  private Integer versioningDays;

  public static final String JSON_PROPERTY_VERSIONING = "versioning";
  private Integer versioning;

  public static final String JSON_PROPERTY_FILES_BY_USER = "files_by_user";
  private Integer filesByUser;

  public static final String JSON_PROPERTY_SHARED_LINK = "shared_link";
  private Integer sharedLink;

  public static final String JSON_PROPERTY_BANDWIDTH = "bandwidth";
  private Integer bandwidth;

  public static final String JSON_PROPERTY_ARCHIVE_FILES_DOWNLOAD = "archive_files_download";
  private Integer archiveFilesDownload;

  public static final String JSON_PROPERTY_COMMENTS_PER_FILE = "comments_per_file";
  private Integer commentsPerFile;

  public static final String JSON_PROPERTY_MIN_SIZE_FOR_HOTCACHE = "min_size_for_hotcache";
  private Integer minSizeForHotcache;

  public DriveDefaultLimits() {
  }

  public DriveDefaultLimits filesByFolders(Integer filesByFolders) {
    
    this.filesByFolders = filesByFolders;
    return this;
  }

   /**
   * Number of files/folders in the same folder
   * @return filesByFolders
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILES_BY_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFilesByFolders() {
    return filesByFolders;
  }


  @JsonProperty(JSON_PROPERTY_FILES_BY_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilesByFolders(Integer filesByFolders) {
    this.filesByFolders = filesByFolders;
  }


  public DriveDefaultLimits filesSize(Integer filesSize) {
    
    this.filesSize = filesSize;
    return this;
  }

   /**
   * Max file size
   * @return filesSize
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILES_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFilesSize() {
    return filesSize;
  }


  @JsonProperty(JSON_PROPERTY_FILES_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilesSize(Integer filesSize) {
    this.filesSize = filesSize;
  }


  public DriveDefaultLimits subFolders(Integer subFolders) {
    
    this.subFolders = subFolders;
    return this;
  }

   /**
   * Max depth of folder
   * @return subFolders
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUB_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSubFolders() {
    return subFolders;
  }


  @JsonProperty(JSON_PROPERTY_SUB_FOLDERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubFolders(Integer subFolders) {
    this.subFolders = subFolders;
  }


  public DriveDefaultLimits emptyTrashDays(Integer emptyTrashDays) {
    
    this.emptyTrashDays = emptyTrashDays;
    return this;
  }

   /**
   * Number of days a file is conserved when trashed
   * @return emptyTrashDays
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMPTY_TRASH_DAYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getEmptyTrashDays() {
    return emptyTrashDays;
  }


  @JsonProperty(JSON_PROPERTY_EMPTY_TRASH_DAYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmptyTrashDays(Integer emptyTrashDays) {
    this.emptyTrashDays = emptyTrashDays;
  }


  public DriveDefaultLimits versioningDays(Integer versioningDays) {
    
    this.versioningDays = versioningDays;
    return this;
  }

   /**
   * Number of days a version of a file is conserved
   * @return versioningDays
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSIONING_DAYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getVersioningDays() {
    return versioningDays;
  }


  @JsonProperty(JSON_PROPERTY_VERSIONING_DAYS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersioningDays(Integer versioningDays) {
    this.versioningDays = versioningDays;
  }


  public DriveDefaultLimits versioning(Integer versioning) {
    
    this.versioning = versioning;
    return this;
  }

   /**
   * Number of version of a fail
   * @return versioning
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VERSIONING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getVersioning() {
    return versioning;
  }


  @JsonProperty(JSON_PROPERTY_VERSIONING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersioning(Integer versioning) {
    this.versioning = versioning;
  }


  public DriveDefaultLimits filesByUser(Integer filesByUser) {
    
    this.filesByUser = filesByUser;
    return this;
  }

   /**
   * Max number of file for one user
   * @return filesByUser
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILES_BY_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFilesByUser() {
    return filesByUser;
  }


  @JsonProperty(JSON_PROPERTY_FILES_BY_USER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFilesByUser(Integer filesByUser) {
    this.filesByUser = filesByUser;
  }


  public DriveDefaultLimits sharedLink(Integer sharedLink) {
    
    this.sharedLink = sharedLink;
    return this;
  }

   /**
   * Max shared linkg
   * @return sharedLink
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SHARED_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getSharedLink() {
    return sharedLink;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_LINK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSharedLink(Integer sharedLink) {
    this.sharedLink = sharedLink;
  }


  public DriveDefaultLimits bandwidth(Integer bandwidth) {
    
    this.bandwidth = bandwidth;
    return this;
  }

   /**
   * Bandwidth authorize for a user in 24 hours
   * @return bandwidth
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBandwidth() {
    return bandwidth;
  }


  @JsonProperty(JSON_PROPERTY_BANDWIDTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBandwidth(Integer bandwidth) {
    this.bandwidth = bandwidth;
  }


  public DriveDefaultLimits archiveFilesDownload(Integer archiveFilesDownload) {
    
    this.archiveFilesDownload = archiveFilesDownload;
    return this;
  }

   /**
   * Max files downloadable in a archive
   * @return archiveFilesDownload
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ARCHIVE_FILES_DOWNLOAD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getArchiveFilesDownload() {
    return archiveFilesDownload;
  }


  @JsonProperty(JSON_PROPERTY_ARCHIVE_FILES_DOWNLOAD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setArchiveFilesDownload(Integer archiveFilesDownload) {
    this.archiveFilesDownload = archiveFilesDownload;
  }


  public DriveDefaultLimits commentsPerFile(Integer commentsPerFile) {
    
    this.commentsPerFile = commentsPerFile;
    return this;
  }

   /**
   * Max number of comments per file
   * @return commentsPerFile
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMMENTS_PER_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCommentsPerFile() {
    return commentsPerFile;
  }


  @JsonProperty(JSON_PROPERTY_COMMENTS_PER_FILE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCommentsPerFile(Integer commentsPerFile) {
    this.commentsPerFile = commentsPerFile;
  }


  public DriveDefaultLimits minSizeForHotcache(Integer minSizeForHotcache) {
    
    this.minSizeForHotcache = minSizeForHotcache;
    return this;
  }

   /**
   * Minimum size of a file to be cached on kCache before moving to a \&quot;cold\&quot; storage
   * @return minSizeForHotcache
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MIN_SIZE_FOR_HOTCACHE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMinSizeForHotcache() {
    return minSizeForHotcache;
  }


  @JsonProperty(JSON_PROPERTY_MIN_SIZE_FOR_HOTCACHE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinSizeForHotcache(Integer minSizeForHotcache) {
    this.minSizeForHotcache = minSizeForHotcache;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveDefaultLimits driveDefaultLimits = (DriveDefaultLimits) o;
    return Objects.equals(this.filesByFolders, driveDefaultLimits.filesByFolders) &&
        Objects.equals(this.filesSize, driveDefaultLimits.filesSize) &&
        Objects.equals(this.subFolders, driveDefaultLimits.subFolders) &&
        Objects.equals(this.emptyTrashDays, driveDefaultLimits.emptyTrashDays) &&
        Objects.equals(this.versioningDays, driveDefaultLimits.versioningDays) &&
        Objects.equals(this.versioning, driveDefaultLimits.versioning) &&
        Objects.equals(this.filesByUser, driveDefaultLimits.filesByUser) &&
        Objects.equals(this.sharedLink, driveDefaultLimits.sharedLink) &&
        Objects.equals(this.bandwidth, driveDefaultLimits.bandwidth) &&
        Objects.equals(this.archiveFilesDownload, driveDefaultLimits.archiveFilesDownload) &&
        Objects.equals(this.commentsPerFile, driveDefaultLimits.commentsPerFile) &&
        Objects.equals(this.minSizeForHotcache, driveDefaultLimits.minSizeForHotcache);
  }

  @Override
  public int hashCode() {
    return Objects.hash(filesByFolders, filesSize, subFolders, emptyTrashDays, versioningDays, versioning, filesByUser, sharedLink, bandwidth, archiveFilesDownload, commentsPerFile, minSizeForHotcache);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveDefaultLimits {\n");
    sb.append("    filesByFolders: ").append(toIndentedString(filesByFolders)).append("\n");
    sb.append("    filesSize: ").append(toIndentedString(filesSize)).append("\n");
    sb.append("    subFolders: ").append(toIndentedString(subFolders)).append("\n");
    sb.append("    emptyTrashDays: ").append(toIndentedString(emptyTrashDays)).append("\n");
    sb.append("    versioningDays: ").append(toIndentedString(versioningDays)).append("\n");
    sb.append("    versioning: ").append(toIndentedString(versioning)).append("\n");
    sb.append("    filesByUser: ").append(toIndentedString(filesByUser)).append("\n");
    sb.append("    sharedLink: ").append(toIndentedString(sharedLink)).append("\n");
    sb.append("    bandwidth: ").append(toIndentedString(bandwidth)).append("\n");
    sb.append("    archiveFilesDownload: ").append(toIndentedString(archiveFilesDownload)).append("\n");
    sb.append("    commentsPerFile: ").append(toIndentedString(commentsPerFile)).append("\n");
    sb.append("    minSizeForHotcache: ").append(toIndentedString(minSizeForHotcache)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

