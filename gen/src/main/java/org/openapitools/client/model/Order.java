/*
 * Drip - Merchant API
 * API Documentation of endpoints available to Merchants. All requests need to contain the `X-API-KEY` received during the initial Drip Merchant Onboarding. If you do not have it, contact one of the admins.
 *
 * The version of the OpenAPI document: 0.1.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Order
 */
@JsonPropertyOrder({
  Order.JSON_PROPERTY_ID,
  Order.JSON_PROPERTY_CANCELED_AMOUNT,
  Order.JSON_PROPERTY_AMOUNT,
  Order.JSON_PROPERTY_STATUS,
  Order.JSON_PROPERTY_CREATED_DATE,
  Order.JSON_PROPERTY_CLOSED_DATE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:11.928068984Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Order {
  public static final String JSON_PROPERTY_ID = "id";
  private UUID id;

  public static final String JSON_PROPERTY_CANCELED_AMOUNT = "canceledAmount";
  private BigDecimal canceledAmount;

  public static final String JSON_PROPERTY_AMOUNT = "amount";
  private BigDecimal amount;

  /**
   * ACTIVE &#x3D; Ordem foi criada e não foi totalmente paga ou cancelada
   */
  public enum StatusEnum {
    ACTIVE("ACTIVE"),
    
    CLOSED("CLOSED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_CREATED_DATE = "createdDate";
  private OffsetDateTime createdDate;

  public static final String JSON_PROPERTY_CLOSED_DATE = "closedDate";
  private OffsetDateTime closedDate;

  public Order() {
  }

  public Order id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UUID getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(UUID id) {
    this.id = id;
  }


  public Order canceledAmount(BigDecimal canceledAmount) {
    
    this.canceledAmount = canceledAmount;
    return this;
  }

   /**
   * O cancelamento na Drip pode ser total ou parcial, o atributo canceled amount retorna o valor de cancelamento solicitado  pelo parceiro. Uma ordem cancelada é uma ordem onde o status é CLOSED e o canceledAmount &#x3D; valor total da ordem, uma ordem paga por completo é uma ordem com status CLOSED e canceledAmount menor que o valor total da ordem
   * @return canceledAmount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CANCELED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCanceledAmount() {
    return canceledAmount;
  }


  @JsonProperty(JSON_PROPERTY_CANCELED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCanceledAmount(BigDecimal canceledAmount) {
    this.canceledAmount = canceledAmount;
  }


  public Order amount(BigDecimal amount) {
    
    this.amount = amount;
    return this;
  }

   /**
   * Valor da ordem aprovada
   * @return amount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getAmount() {
    return amount;
  }


  @JsonProperty(JSON_PROPERTY_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Order status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * ACTIVE &#x3D; Ordem foi criada e não foi totalmente paga ou cancelada
   * @return status
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Order createdDate(OffsetDateTime createdDate) {
    
    this.createdDate = createdDate;
    return this;
  }

   /**
   * Order created date in ISO 8601 format
   * @return createdDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedDate(OffsetDateTime createdDate) {
    this.createdDate = createdDate;
  }


  public Order closedDate(OffsetDateTime closedDate) {
    
    this.closedDate = closedDate;
    return this;
  }

   /**
   * Order closed date in ISO 8601 format
   * @return closedDate
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLOSED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getClosedDate() {
    return closedDate;
  }


  @JsonProperty(JSON_PROPERTY_CLOSED_DATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClosedDate(OffsetDateTime closedDate) {
    this.closedDate = closedDate;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Order order = (Order) o;
    return Objects.equals(this.id, order.id) &&
        Objects.equals(this.canceledAmount, order.canceledAmount) &&
        Objects.equals(this.amount, order.amount) &&
        Objects.equals(this.status, order.status) &&
        Objects.equals(this.createdDate, order.createdDate) &&
        Objects.equals(this.closedDate, order.closedDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, canceledAmount, amount, status, createdDate, closedDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Order {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    canceledAmount: ").append(toIndentedString(canceledAmount)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

