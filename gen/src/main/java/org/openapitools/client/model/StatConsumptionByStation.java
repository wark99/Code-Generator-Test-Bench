/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StatConsumptionByStation
 */
@JsonPropertyOrder({
  StatConsumptionByStation.JSON_PROPERTY_STATION_ID,
  StatConsumptionByStation.JSON_PROPERTY_TOTAL_BYTES,
  StatConsumptionByStation.JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS,
  StatConsumptionByStation.JSON_PROPERTY_AVERAGE_BYTES_BY_DAY,
  StatConsumptionByStation.JSON_PROPERTY_MAX_BYTES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StatConsumptionByStation {
  public static final String JSON_PROPERTY_STATION_ID = "station_id";
  private Integer stationId;

  public static final String JSON_PROPERTY_TOTAL_BYTES = "total_bytes";
  private Integer totalBytes;

  public static final String JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS = "average_bytes_by_listeners";
  private BigDecimal averageBytesByListeners;

  public static final String JSON_PROPERTY_AVERAGE_BYTES_BY_DAY = "average_bytes_by_day";
  private BigDecimal averageBytesByDay;

  public static final String JSON_PROPERTY_MAX_BYTES = "max_bytes";
  private Integer maxBytes;

  public StatConsumptionByStation() {
  }

  public StatConsumptionByStation stationId(Integer stationId) {
    
    this.stationId = stationId;
    return this;
  }

   /**
   * The station id related to this stat
   * @return stationId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStationId() {
    return stationId;
  }


  @JsonProperty(JSON_PROPERTY_STATION_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStationId(Integer stationId) {
    this.stationId = stationId;
  }


  public StatConsumptionByStation totalBytes(Integer totalBytes) {
    
    this.totalBytes = totalBytes;
    return this;
  }

   /**
   * The total of bytes consumed on the date range
   * @return totalBytes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalBytes() {
    return totalBytes;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalBytes(Integer totalBytes) {
    this.totalBytes = totalBytes;
  }


  public StatConsumptionByStation averageBytesByListeners(BigDecimal averageBytesByListeners) {
    
    this.averageBytesByListeners = averageBytesByListeners;
    return this;
  }

   /**
   * The average of bytes consumed by listeners
   * @return averageBytesByListeners
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageBytesByListeners() {
    return averageBytesByListeners;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageBytesByListeners(BigDecimal averageBytesByListeners) {
    this.averageBytesByListeners = averageBytesByListeners;
  }


  public StatConsumptionByStation averageBytesByDay(BigDecimal averageBytesByDay) {
    
    this.averageBytesByDay = averageBytesByDay;
    return this;
  }

   /**
   * The average of bytes consumed by day
   * @return averageBytesByDay
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_DAY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageBytesByDay() {
    return averageBytesByDay;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_DAY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageBytesByDay(BigDecimal averageBytesByDay) {
    this.averageBytesByDay = averageBytesByDay;
  }


  public StatConsumptionByStation maxBytes(Integer maxBytes) {
    
    this.maxBytes = maxBytes;
    return this;
  }

   /**
   * The max bytes consumed in one day
   * @return maxBytes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxBytes() {
    return maxBytes;
  }


  @JsonProperty(JSON_PROPERTY_MAX_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxBytes(Integer maxBytes) {
    this.maxBytes = maxBytes;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatConsumptionByStation statConsumptionByStation = (StatConsumptionByStation) o;
    return Objects.equals(this.stationId, statConsumptionByStation.stationId) &&
        Objects.equals(this.totalBytes, statConsumptionByStation.totalBytes) &&
        Objects.equals(this.averageBytesByListeners, statConsumptionByStation.averageBytesByListeners) &&
        Objects.equals(this.averageBytesByDay, statConsumptionByStation.averageBytesByDay) &&
        Objects.equals(this.maxBytes, statConsumptionByStation.maxBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(stationId, totalBytes, averageBytesByListeners, averageBytesByDay, maxBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatConsumptionByStation {\n");
    sb.append("    stationId: ").append(toIndentedString(stationId)).append("\n");
    sb.append("    totalBytes: ").append(toIndentedString(totalBytes)).append("\n");
    sb.append("    averageBytesByListeners: ").append(toIndentedString(averageBytesByListeners)).append("\n");
    sb.append("    averageBytesByDay: ").append(toIndentedString(averageBytesByDay)).append("\n");
    sb.append("    maxBytes: ").append(toIndentedString(maxBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

