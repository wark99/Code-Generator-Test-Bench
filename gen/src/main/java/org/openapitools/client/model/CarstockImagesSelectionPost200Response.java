/*
 * CIC-NEW
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2.0.7
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.CarstockImagesSelectionPost200ResponseImageSources;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CarstockImagesSelectionPost200Response
 */
@JsonPropertyOrder({
  CarstockImagesSelectionPost200Response.JSON_PROPERTY_CARSTOCK_ID,
  CarstockImagesSelectionPost200Response.JSON_PROPERTY_MANUAL_ADJUSTMENT,
  CarstockImagesSelectionPost200Response.JSON_PROPERTY_MANUALLY_OVERWRITTEN,
  CarstockImagesSelectionPost200Response.JSON_PROPERTY_UPDATER,
  CarstockImagesSelectionPost200Response.JSON_PROPERTY_IMAGE_SOURCES,
  CarstockImagesSelectionPost200Response.JSON_PROPERTY_ACTIVE,
  CarstockImagesSelectionPost200Response.JSON_PROPERTY_AVAILABLE
})
@JsonTypeName("_carstock_images_selection_post_200_response")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:13:48.943071954Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CarstockImagesSelectionPost200Response {
  public static final String JSON_PROPERTY_CARSTOCK_ID = "carstockId";
  private Integer carstockId;

  public static final String JSON_PROPERTY_MANUAL_ADJUSTMENT = "manualAdjustment";
  private Boolean manualAdjustment;

  public static final String JSON_PROPERTY_MANUALLY_OVERWRITTEN = "manuallyOverwritten";
  private Boolean manuallyOverwritten;

  public static final String JSON_PROPERTY_UPDATER = "updater";
  private Object updater = null;

  public static final String JSON_PROPERTY_IMAGE_SOURCES = "imageSources";
  private CarstockImagesSelectionPost200ResponseImageSources imageSources;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Integer active;

  public static final String JSON_PROPERTY_AVAILABLE = "available";
  private Integer available;

  public CarstockImagesSelectionPost200Response() {
  }

  public CarstockImagesSelectionPost200Response carstockId(Integer carstockId) {
    
    this.carstockId = carstockId;
    return this;
  }

   /**
   * Get carstockId
   * @return carstockId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CARSTOCK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCarstockId() {
    return carstockId;
  }


  @JsonProperty(JSON_PROPERTY_CARSTOCK_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCarstockId(Integer carstockId) {
    this.carstockId = carstockId;
  }


  public CarstockImagesSelectionPost200Response manualAdjustment(Boolean manualAdjustment) {
    
    this.manualAdjustment = manualAdjustment;
    return this;
  }

   /**
   * Get manualAdjustment
   * @return manualAdjustment
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MANUAL_ADJUSTMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getManualAdjustment() {
    return manualAdjustment;
  }


  @JsonProperty(JSON_PROPERTY_MANUAL_ADJUSTMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setManualAdjustment(Boolean manualAdjustment) {
    this.manualAdjustment = manualAdjustment;
  }


  public CarstockImagesSelectionPost200Response manuallyOverwritten(Boolean manuallyOverwritten) {
    
    this.manuallyOverwritten = manuallyOverwritten;
    return this;
  }

   /**
   * Get manuallyOverwritten
   * @return manuallyOverwritten
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MANUALLY_OVERWRITTEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getManuallyOverwritten() {
    return manuallyOverwritten;
  }


  @JsonProperty(JSON_PROPERTY_MANUALLY_OVERWRITTEN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setManuallyOverwritten(Boolean manuallyOverwritten) {
    this.manuallyOverwritten = manuallyOverwritten;
  }


  public CarstockImagesSelectionPost200Response updater(Object updater) {
    
    this.updater = updater;
    return this;
  }

   /**
   * Get updater
   * @return updater
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getUpdater() {
    return updater;
  }


  @JsonProperty(JSON_PROPERTY_UPDATER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdater(Object updater) {
    this.updater = updater;
  }


  public CarstockImagesSelectionPost200Response imageSources(CarstockImagesSelectionPost200ResponseImageSources imageSources) {
    
    this.imageSources = imageSources;
    return this;
  }

   /**
   * Get imageSources
   * @return imageSources
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IMAGE_SOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CarstockImagesSelectionPost200ResponseImageSources getImageSources() {
    return imageSources;
  }


  @JsonProperty(JSON_PROPERTY_IMAGE_SOURCES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setImageSources(CarstockImagesSelectionPost200ResponseImageSources imageSources) {
    this.imageSources = imageSources;
  }


  public CarstockImagesSelectionPost200Response active(Integer active) {
    
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setActive(Integer active) {
    this.active = active;
  }


  public CarstockImagesSelectionPost200Response available(Integer available) {
    
    this.available = available;
    return this;
  }

   /**
   * Get available
   * @return available
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAvailable() {
    return available;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvailable(Integer available) {
    this.available = available;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarstockImagesSelectionPost200Response carstockImagesSelectionPost200Response = (CarstockImagesSelectionPost200Response) o;
    return Objects.equals(this.carstockId, carstockImagesSelectionPost200Response.carstockId) &&
        Objects.equals(this.manualAdjustment, carstockImagesSelectionPost200Response.manualAdjustment) &&
        Objects.equals(this.manuallyOverwritten, carstockImagesSelectionPost200Response.manuallyOverwritten) &&
        Objects.equals(this.updater, carstockImagesSelectionPost200Response.updater) &&
        Objects.equals(this.imageSources, carstockImagesSelectionPost200Response.imageSources) &&
        Objects.equals(this.active, carstockImagesSelectionPost200Response.active) &&
        Objects.equals(this.available, carstockImagesSelectionPost200Response.available);
  }

  @Override
  public int hashCode() {
    return Objects.hash(carstockId, manualAdjustment, manuallyOverwritten, updater, imageSources, active, available);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarstockImagesSelectionPost200Response {\n");
    sb.append("    carstockId: ").append(toIndentedString(carstockId)).append("\n");
    sb.append("    manualAdjustment: ").append(toIndentedString(manualAdjustment)).append("\n");
    sb.append("    manuallyOverwritten: ").append(toIndentedString(manuallyOverwritten)).append("\n");
    sb.append("    updater: ").append(toIndentedString(updater)).append("\n");
    sb.append("    imageSources: ").append(toIndentedString(imageSources)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    available: ").append(toIndentedString(available)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

