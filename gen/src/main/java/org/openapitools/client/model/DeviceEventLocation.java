/*
 * LiveFree PERS API
 * The Personal Emergency Response System (PERS) API enables partners to receive PERS alarms and location data via HTTP webhook.  **Alarm Types**  | Code | Alarm Type | Description | |---|---|---| | E100 | Medical Alarm (Primary Button) | The medical alarm button was activated. | | E101 | Personal Emergency Alarm (Pendant Button) | The personal emergency button was activated. | | E111 | Smoke Alarm | Smoke was detected by a compatible smoke detector. | | E301 | AC Power Loss | The device has lost AC power. | | E302 | Low Battery | The device battery is low. | | E308 | System Shutdown | The device is powering off due to low battery. | | E601 | Manual Test | A manually triggered test signal. | | E602 | Periodic Test | The device sent a recurring test signal. | | E641 | Fall Alarm | The device detected a fall. | | E643 | Geofence Exit | The user has exited a geofence area. | | E644 | Geofence Enter | The user has entered a geofence area. | | E646 | Remote Patient Monitoring (RPM) Alarm | A compatible remote patient monitoring device reported an alarm. | | R100 | Medical Alarm Cancel | A medical alarm was cancelled by the user. | **Provisioning**  Webhooks must be configured by LiveFree support. To configure your webhook, contact support with your webhook URL and authentication info. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@lifebeacon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import org.openapitools.client.model.GpsFixType;
import org.openapitools.jackson.nullable.JsonNullable;
import com.fasterxml.jackson.annotation.JsonIgnore;
import org.openapitools.jackson.nullable.JsonNullable;
import java.util.NoSuchElementException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Information about the location where the device was located at the time of this event/alarm. Thie property may not be present for all events.
 */
@JsonPropertyOrder({
  DeviceEventLocation.JSON_PROPERTY_TIMESTAMP,
  DeviceEventLocation.JSON_PROPERTY_FIX_TYPE,
  DeviceEventLocation.JSON_PROPERTY_LATITUDE,
  DeviceEventLocation.JSON_PROPERTY_LONGITUDE,
  DeviceEventLocation.JSON_PROPERTY_SPEED,
  DeviceEventLocation.JSON_PROPERTY_HEADING,
  DeviceEventLocation.JSON_PROPERTY_GPS_TEXT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:36.505131168Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class DeviceEventLocation {
  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  private OffsetDateTime timestamp;

  public static final String JSON_PROPERTY_FIX_TYPE = "fixType";
  private GpsFixType fixType;

  public static final String JSON_PROPERTY_LATITUDE = "latitude";
  private Double latitude;

  public static final String JSON_PROPERTY_LONGITUDE = "longitude";
  private Double longitude;

  public static final String JSON_PROPERTY_SPEED = "speed";
  private JsonNullable<Double> speed = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_HEADING = "heading";
  private JsonNullable<Double> heading = JsonNullable.<Double>undefined();

  public static final String JSON_PROPERTY_GPS_TEXT = "gpsText";
  private JsonNullable<String> gpsText = JsonNullable.<String>undefined();

  public DeviceEventLocation() {
  }

  public DeviceEventLocation timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * The time when the event occurred.
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public DeviceEventLocation fixType(GpsFixType fixType) {
    
    this.fixType = fixType;
    return this;
  }

   /**
   * Get fixType
   * @return fixType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FIX_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public GpsFixType getFixType() {
    return fixType;
  }


  @JsonProperty(JSON_PROPERTY_FIX_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFixType(GpsFixType fixType) {
    this.fixType = fixType;
  }


  public DeviceEventLocation latitude(Double latitude) {
    
    this.latitude = latitude;
    return this;
  }

   /**
   * Get latitude
   * minimum: -90
   * maximum: 90
   * @return latitude
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getLatitude() {
    return latitude;
  }


  @JsonProperty(JSON_PROPERTY_LATITUDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLatitude(Double latitude) {
    this.latitude = latitude;
  }


  public DeviceEventLocation longitude(Double longitude) {
    
    this.longitude = longitude;
    return this;
  }

   /**
   * Get longitude
   * minimum: -180
   * maximum: 180
   * @return longitude
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Double getLongitude() {
    return longitude;
  }


  @JsonProperty(JSON_PROPERTY_LONGITUDE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLongitude(Double longitude) {
    this.longitude = longitude;
  }


  public DeviceEventLocation speed(Double speed) {
    this.speed = JsonNullable.<Double>of(speed);
    
    return this;
  }

   /**
   * Get speed
   * minimum: 0
   * @return speed
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Double getSpeed() {
        return speed.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_SPEED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getSpeed_JsonNullable() {
    return speed;
  }
  
  @JsonProperty(JSON_PROPERTY_SPEED)
  public void setSpeed_JsonNullable(JsonNullable<Double> speed) {
    this.speed = speed;
  }

  public void setSpeed(Double speed) {
    this.speed = JsonNullable.<Double>of(speed);
  }


  public DeviceEventLocation heading(Double heading) {
    this.heading = JsonNullable.<Double>of(heading);
    
    return this;
  }

   /**
   * Get heading
   * minimum: 0
   * maximum: 360
   * @return heading
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public Double getHeading() {
        return heading.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_HEADING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<Double> getHeading_JsonNullable() {
    return heading;
  }
  
  @JsonProperty(JSON_PROPERTY_HEADING)
  public void setHeading_JsonNullable(JsonNullable<Double> heading) {
    this.heading = heading;
  }

  public void setHeading(Double heading) {
    this.heading = JsonNullable.<Double>of(heading);
  }


  public DeviceEventLocation gpsText(String gpsText) {
    this.gpsText = JsonNullable.<String>of(gpsText);
    
    return this;
  }

   /**
   * The raw location data reported by the device. For GPS fix types this will be in NMEA message structure.
   * @return gpsText
  **/
  @javax.annotation.Nullable
  @JsonIgnore

  public String getGpsText() {
        return gpsText.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_GPS_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public JsonNullable<String> getGpsText_JsonNullable() {
    return gpsText;
  }
  
  @JsonProperty(JSON_PROPERTY_GPS_TEXT)
  public void setGpsText_JsonNullable(JsonNullable<String> gpsText) {
    this.gpsText = gpsText;
  }

  public void setGpsText(String gpsText) {
    this.gpsText = JsonNullable.<String>of(gpsText);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceEventLocation deviceEventLocation = (DeviceEventLocation) o;
    return Objects.equals(this.timestamp, deviceEventLocation.timestamp) &&
        Objects.equals(this.fixType, deviceEventLocation.fixType) &&
        Objects.equals(this.latitude, deviceEventLocation.latitude) &&
        Objects.equals(this.longitude, deviceEventLocation.longitude) &&
        equalsNullable(this.speed, deviceEventLocation.speed) &&
        equalsNullable(this.heading, deviceEventLocation.heading) &&
        equalsNullable(this.gpsText, deviceEventLocation.gpsText);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(timestamp, fixType, latitude, longitude, hashCodeNullable(speed), hashCodeNullable(heading), hashCodeNullable(gpsText));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceEventLocation {\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    fixType: ").append(toIndentedString(fixType)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    speed: ").append(toIndentedString(speed)).append("\n");
    sb.append("    heading: ").append(toIndentedString(heading)).append("\n");
    sb.append("    gpsText: ").append(toIndentedString(gpsText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

