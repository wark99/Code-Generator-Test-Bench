/*
 * SME Professional API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.15.0-oas3.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.MaintenancePost200ResponseValueCreatedDate;
import org.openapitools.client.model.PropertyAddressResponse;
import org.openapitools.client.model.UtilitiesExtendedLinkedPropertyResponseMeters;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UtilitiesExtendedLinkedPropertyResponse
 */
@JsonPropertyOrder({
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_ID,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_MANAGEMENT_TYPE,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_PRIMARY_STATUS,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_SECONDARY_STATUS,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_ADDRESS,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_ACCOMMODATION_TYPE,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_FURNISHED,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_COUNCIL_TAX,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_METERS,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_INTERIM_BILLING_RESPONSIBILITY,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_DATE_OF_ENTRY,
  UtilitiesExtendedLinkedPropertyResponse.JSON_PROPERTY_INTERNAL_REFERENCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:21:30.009582082Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class UtilitiesExtendedLinkedPropertyResponse {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  /**
   * 1 &#x3D; Managed let, 2 &#x3D; Let only, 3 &#x3D; Estate agency, 4 &#x3D; Short term let, 5 &#x3D; STL advertising, 6 &#x3D; Booking only, 7 &#x3D; STL Key holding, 9 &#x3D; Rental potential purchase, 10 &#x3D; Advertising only, 11 &#x3D; Lease only, 12 &#x3D; Rent collection, 13 &#x3D; Key holding, 15 &#x3D; Inspection only, 20 &#x3D; Block management, 30 &#x3D; Guaranteed rent
   */
  public enum ManagementTypeEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_9(9),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_13(13),
    
    NUMBER_15(15),
    
    NUMBER_20(20),
    
    NUMBER_30(30);

    private Integer value;

    ManagementTypeEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static ManagementTypeEnum fromValue(Integer value) {
      for (ManagementTypeEnum b : ManagementTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_MANAGEMENT_TYPE = "management_type";
  private ManagementTypeEnum managementType;

  /**
   * If management_type is not 3:  1 &#x3D; Void: general, 2 &#x3D; Unoccupied on market, 3 &#x3D; Occupied on market, 4 &#x3D; Tenant check period, 5 &#x3D; Await tenant move in, 6 &#x3D; Occupied, 7 &#x3D; Past property, 8 &#x3D; Notice given: not on market, 10 &#x3D; Eviction, 11 &#x3D; Pending: new property, 20 &#x3D; Occupied: pre let, 21 &#x3D; Occupied: on hold, 22 &#x3D; Occupied: pending withdrawal, 30 &#x3D; Unoccupied: pre let, 31 &#x3D; Unoccupied: on hold, 32 &#x3D; Unoccupied: pending withdrawal, 40 &#x3D; Void: in development, 41 &#x3D; Void: in refurbishment, 42 &#x3D; Void: in maintenance, 43 &#x3D; Awaiting tenant checks, 44 &#x3D; Awaiting lease.\\If management_type is 3:  0 &#x3D; Occupied on market, 1 &#x3D; Sold STC, 2 &#x3D; Sold STCM, 3 &#x3D; Under offer, 4 &#x3D; Reserved, 7 &#x3D; Past property, 8 &#x3D; Pending, 12 &#x3D; Viewings on hold, 20 &#x3D; Enquiry, 21 &#x3D; Exchanged, 22 &#x3D; Unoccupied on market, 23 &#x3D; Unoccupied off-market sale, 24 &#x3D; Occupied off-market sale.
   */
  public enum PrimaryStatusEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7),
    
    NUMBER_8(8),
    
    NUMBER_10(10),
    
    NUMBER_11(11),
    
    NUMBER_12(12),
    
    NUMBER_20(20),
    
    NUMBER_21(21),
    
    NUMBER_22(22),
    
    NUMBER_23(23),
    
    NUMBER_24(24),
    
    NUMBER_30(30),
    
    NUMBER_31(31),
    
    NUMBER_32(32),
    
    NUMBER_40(40),
    
    NUMBER_41(41),
    
    NUMBER_42(42),
    
    NUMBER_43(43),
    
    NUMBER_44(44);

    private Integer value;

    PrimaryStatusEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PrimaryStatusEnum fromValue(Integer value) {
      for (PrimaryStatusEnum b : PrimaryStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PRIMARY_STATUS = "primary_status";
  private PrimaryStatusEnum primaryStatus;

  public static final String JSON_PROPERTY_SECONDARY_STATUS = "secondary_status";
  private Integer secondaryStatus;

  public static final String JSON_PROPERTY_ADDRESS = "address";
  private PropertyAddressResponse address;

  /**
   * F &#x3D; Flat/Apartment, S &#x3D; Studio, H &#x3D; Detached House, SH &#x3D; Semi Detached House, TH &#x3D; Terraced House, T &#x3D; Town House, M &#x3D; Mews, B &#x3D; Bungalow, P &#x3D; Penthouse, SA &#x3D; Serviced Apartment, D &#x3D; Double Upper, I &#x3D; Single Room, J &#x3D; Double Room, V &#x3D; Villa, C &#x3D; Cottage, G &#x3D; Garage, Q &#x3D; Parking Space, CA1 &#x3D; Commercial 1, CA2 &#x3D; Commercial 2, CA3 &#x3D; Commercial 3, CA4 &#x3D; Commercial 4, CA5 &#x3D; Commercial 5, CA6 &#x3D; Commercial 6, CA7 &#x3D; Commercial 7, CA8 &#x3D; Commercial 8, CA9 &#x3D; Commercial 9, CA10 &#x3D; Commercial 10, CA11 &#x3D; Commercial 11, COT &#x3D; Commercial other, Land &#x3D; Land, N &#x3D; Unknown, ETH &#x3D; End of Terrace, GM &#x3D; Grand Maisonette, MA &#x3D; Maisonette, TB &#x3D; Terraced Bungalow, MH &#x3D; Mobile Home, BC &#x3D; Barn Conversion, SHH &#x3D; Sheltered Housing, RP &#x3D; Retirement Property, FH &#x3D; Farm House, BN &#x3D; Barn, HB &#x3D; House Boat, BF &#x3D; Block of flats
   */
  public enum AccommodationTypeEnum {
    F("F"),
    
    S("S"),
    
    H("H"),
    
    SH("SH"),
    
    TH("TH"),
    
    T("T"),
    
    M("M"),
    
    B("B"),
    
    P("P"),
    
    SA("SA"),
    
    D("D"),
    
    I("I"),
    
    J("J"),
    
    V("V"),
    
    C("C"),
    
    G("G"),
    
    Q("Q"),
    
    CA1("CA1"),
    
    CA2("CA2"),
    
    CA3("CA3"),
    
    CA4("CA4"),
    
    CA5("CA5"),
    
    CA6("CA6"),
    
    CA7("CA7"),
    
    CA8("CA8"),
    
    CA9("CA9"),
    
    CA10("CA10"),
    
    CA11("CA11"),
    
    COT("COT"),
    
    LAND("Land"),
    
    N("N"),
    
    ETH("ETH"),
    
    GM("GM"),
    
    MA("MA"),
    
    TB("TB"),
    
    MH("MH"),
    
    BC("BC"),
    
    SHH("SHH"),
    
    RP("RP"),
    
    FH("FH"),
    
    BN("BN"),
    
    HB("HB"),
    
    BF("BF");

    private String value;

    AccommodationTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AccommodationTypeEnum fromValue(String value) {
      for (AccommodationTypeEnum b : AccommodationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ACCOMMODATION_TYPE = "accommodation_type";
  private AccommodationTypeEnum accommodationType;

  /**
   * Y &#x3D; Yes, N &#x3D; No, P &#x3D; Part, A &#x3D; Any
   */
  public enum FurnishedEnum {
    Y("Y"),
    
    N("N"),
    
    P("P"),
    
    A("A");

    private String value;

    FurnishedEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FurnishedEnum fromValue(String value) {
      for (FurnishedEnum b : FurnishedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FURNISHED = "furnished";
  private FurnishedEnum furnished;

  public static final String JSON_PROPERTY_COUNCIL_TAX = "council_tax";
  private String councilTax;

  public static final String JSON_PROPERTY_METERS = "meters";
  private UtilitiesExtendedLinkedPropertyResponseMeters meters;

  /**
   * 1 &#x3D; Landlord, 2 &#x3D; Agent, 3 &#x3D; Landlord care of agent
   */
  public enum InterimBillingResponsibilityEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3);

    private Integer value;

    InterimBillingResponsibilityEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InterimBillingResponsibilityEnum fromValue(Integer value) {
      for (InterimBillingResponsibilityEnum b : InterimBillingResponsibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INTERIM_BILLING_RESPONSIBILITY = "interim_billing_responsibility";
  private InterimBillingResponsibilityEnum interimBillingResponsibility;

  public static final String JSON_PROPERTY_DATE_OF_ENTRY = "date_of_entry";
  private MaintenancePost200ResponseValueCreatedDate dateOfEntry;

  public static final String JSON_PROPERTY_INTERNAL_REFERENCE = "internal_reference";
  private String internalReference;

  public UtilitiesExtendedLinkedPropertyResponse() {
  }

  public UtilitiesExtendedLinkedPropertyResponse id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(Integer id) {
    this.id = id;
  }


  public UtilitiesExtendedLinkedPropertyResponse managementType(ManagementTypeEnum managementType) {
    
    this.managementType = managementType;
    return this;
  }

   /**
   * 1 &#x3D; Managed let, 2 &#x3D; Let only, 3 &#x3D; Estate agency, 4 &#x3D; Short term let, 5 &#x3D; STL advertising, 6 &#x3D; Booking only, 7 &#x3D; STL Key holding, 9 &#x3D; Rental potential purchase, 10 &#x3D; Advertising only, 11 &#x3D; Lease only, 12 &#x3D; Rent collection, 13 &#x3D; Key holding, 15 &#x3D; Inspection only, 20 &#x3D; Block management, 30 &#x3D; Guaranteed rent
   * @return managementType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MANAGEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ManagementTypeEnum getManagementType() {
    return managementType;
  }


  @JsonProperty(JSON_PROPERTY_MANAGEMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setManagementType(ManagementTypeEnum managementType) {
    this.managementType = managementType;
  }


  public UtilitiesExtendedLinkedPropertyResponse primaryStatus(PrimaryStatusEnum primaryStatus) {
    
    this.primaryStatus = primaryStatus;
    return this;
  }

   /**
   * If management_type is not 3:  1 &#x3D; Void: general, 2 &#x3D; Unoccupied on market, 3 &#x3D; Occupied on market, 4 &#x3D; Tenant check period, 5 &#x3D; Await tenant move in, 6 &#x3D; Occupied, 7 &#x3D; Past property, 8 &#x3D; Notice given: not on market, 10 &#x3D; Eviction, 11 &#x3D; Pending: new property, 20 &#x3D; Occupied: pre let, 21 &#x3D; Occupied: on hold, 22 &#x3D; Occupied: pending withdrawal, 30 &#x3D; Unoccupied: pre let, 31 &#x3D; Unoccupied: on hold, 32 &#x3D; Unoccupied: pending withdrawal, 40 &#x3D; Void: in development, 41 &#x3D; Void: in refurbishment, 42 &#x3D; Void: in maintenance, 43 &#x3D; Awaiting tenant checks, 44 &#x3D; Awaiting lease.\\If management_type is 3:  0 &#x3D; Occupied on market, 1 &#x3D; Sold STC, 2 &#x3D; Sold STCM, 3 &#x3D; Under offer, 4 &#x3D; Reserved, 7 &#x3D; Past property, 8 &#x3D; Pending, 12 &#x3D; Viewings on hold, 20 &#x3D; Enquiry, 21 &#x3D; Exchanged, 22 &#x3D; Unoccupied on market, 23 &#x3D; Unoccupied off-market sale, 24 &#x3D; Occupied off-market sale.
   * @return primaryStatus
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PRIMARY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PrimaryStatusEnum getPrimaryStatus() {
    return primaryStatus;
  }


  @JsonProperty(JSON_PROPERTY_PRIMARY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimaryStatus(PrimaryStatusEnum primaryStatus) {
    this.primaryStatus = primaryStatus;
  }


  public UtilitiesExtendedLinkedPropertyResponse secondaryStatus(Integer secondaryStatus) {
    
    this.secondaryStatus = secondaryStatus;
    return this;
  }

   /**
   * Get secondaryStatus
   * @return secondaryStatus
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECONDARY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSecondaryStatus() {
    return secondaryStatus;
  }


  @JsonProperty(JSON_PROPERTY_SECONDARY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecondaryStatus(Integer secondaryStatus) {
    this.secondaryStatus = secondaryStatus;
  }


  public UtilitiesExtendedLinkedPropertyResponse address(PropertyAddressResponse address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public PropertyAddressResponse getAddress() {
    return address;
  }


  @JsonProperty(JSON_PROPERTY_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAddress(PropertyAddressResponse address) {
    this.address = address;
  }


  public UtilitiesExtendedLinkedPropertyResponse accommodationType(AccommodationTypeEnum accommodationType) {
    
    this.accommodationType = accommodationType;
    return this;
  }

   /**
   * F &#x3D; Flat/Apartment, S &#x3D; Studio, H &#x3D; Detached House, SH &#x3D; Semi Detached House, TH &#x3D; Terraced House, T &#x3D; Town House, M &#x3D; Mews, B &#x3D; Bungalow, P &#x3D; Penthouse, SA &#x3D; Serviced Apartment, D &#x3D; Double Upper, I &#x3D; Single Room, J &#x3D; Double Room, V &#x3D; Villa, C &#x3D; Cottage, G &#x3D; Garage, Q &#x3D; Parking Space, CA1 &#x3D; Commercial 1, CA2 &#x3D; Commercial 2, CA3 &#x3D; Commercial 3, CA4 &#x3D; Commercial 4, CA5 &#x3D; Commercial 5, CA6 &#x3D; Commercial 6, CA7 &#x3D; Commercial 7, CA8 &#x3D; Commercial 8, CA9 &#x3D; Commercial 9, CA10 &#x3D; Commercial 10, CA11 &#x3D; Commercial 11, COT &#x3D; Commercial other, Land &#x3D; Land, N &#x3D; Unknown, ETH &#x3D; End of Terrace, GM &#x3D; Grand Maisonette, MA &#x3D; Maisonette, TB &#x3D; Terraced Bungalow, MH &#x3D; Mobile Home, BC &#x3D; Barn Conversion, SHH &#x3D; Sheltered Housing, RP &#x3D; Retirement Property, FH &#x3D; Farm House, BN &#x3D; Barn, HB &#x3D; House Boat, BF &#x3D; Block of flats
   * @return accommodationType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACCOMMODATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AccommodationTypeEnum getAccommodationType() {
    return accommodationType;
  }


  @JsonProperty(JSON_PROPERTY_ACCOMMODATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccommodationType(AccommodationTypeEnum accommodationType) {
    this.accommodationType = accommodationType;
  }


  public UtilitiesExtendedLinkedPropertyResponse furnished(FurnishedEnum furnished) {
    
    this.furnished = furnished;
    return this;
  }

   /**
   * Y &#x3D; Yes, N &#x3D; No, P &#x3D; Part, A &#x3D; Any
   * @return furnished
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FURNISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FurnishedEnum getFurnished() {
    return furnished;
  }


  @JsonProperty(JSON_PROPERTY_FURNISHED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFurnished(FurnishedEnum furnished) {
    this.furnished = furnished;
  }


  public UtilitiesExtendedLinkedPropertyResponse councilTax(String councilTax) {
    
    this.councilTax = councilTax;
    return this;
  }

   /**
   * Get councilTax
   * @return councilTax
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COUNCIL_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCouncilTax() {
    return councilTax;
  }


  @JsonProperty(JSON_PROPERTY_COUNCIL_TAX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCouncilTax(String councilTax) {
    this.councilTax = councilTax;
  }


  public UtilitiesExtendedLinkedPropertyResponse meters(UtilitiesExtendedLinkedPropertyResponseMeters meters) {
    
    this.meters = meters;
    return this;
  }

   /**
   * Get meters
   * @return meters
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public UtilitiesExtendedLinkedPropertyResponseMeters getMeters() {
    return meters;
  }


  @JsonProperty(JSON_PROPERTY_METERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMeters(UtilitiesExtendedLinkedPropertyResponseMeters meters) {
    this.meters = meters;
  }


  public UtilitiesExtendedLinkedPropertyResponse interimBillingResponsibility(InterimBillingResponsibilityEnum interimBillingResponsibility) {
    
    this.interimBillingResponsibility = interimBillingResponsibility;
    return this;
  }

   /**
   * 1 &#x3D; Landlord, 2 &#x3D; Agent, 3 &#x3D; Landlord care of agent
   * @return interimBillingResponsibility
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERIM_BILLING_RESPONSIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InterimBillingResponsibilityEnum getInterimBillingResponsibility() {
    return interimBillingResponsibility;
  }


  @JsonProperty(JSON_PROPERTY_INTERIM_BILLING_RESPONSIBILITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterimBillingResponsibility(InterimBillingResponsibilityEnum interimBillingResponsibility) {
    this.interimBillingResponsibility = interimBillingResponsibility;
  }


  public UtilitiesExtendedLinkedPropertyResponse dateOfEntry(MaintenancePost200ResponseValueCreatedDate dateOfEntry) {
    
    this.dateOfEntry = dateOfEntry;
    return this;
  }

   /**
   * Get dateOfEntry
   * @return dateOfEntry
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DATE_OF_ENTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public MaintenancePost200ResponseValueCreatedDate getDateOfEntry() {
    return dateOfEntry;
  }


  @JsonProperty(JSON_PROPERTY_DATE_OF_ENTRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDateOfEntry(MaintenancePost200ResponseValueCreatedDate dateOfEntry) {
    this.dateOfEntry = dateOfEntry;
  }


  public UtilitiesExtendedLinkedPropertyResponse internalReference(String internalReference) {
    
    this.internalReference = internalReference;
    return this;
  }

   /**
   * Get internalReference
   * @return internalReference
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERNAL_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getInternalReference() {
    return internalReference;
  }


  @JsonProperty(JSON_PROPERTY_INTERNAL_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInternalReference(String internalReference) {
    this.internalReference = internalReference;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UtilitiesExtendedLinkedPropertyResponse utilitiesExtendedLinkedPropertyResponse = (UtilitiesExtendedLinkedPropertyResponse) o;
    return Objects.equals(this.id, utilitiesExtendedLinkedPropertyResponse.id) &&
        Objects.equals(this.managementType, utilitiesExtendedLinkedPropertyResponse.managementType) &&
        Objects.equals(this.primaryStatus, utilitiesExtendedLinkedPropertyResponse.primaryStatus) &&
        Objects.equals(this.secondaryStatus, utilitiesExtendedLinkedPropertyResponse.secondaryStatus) &&
        Objects.equals(this.address, utilitiesExtendedLinkedPropertyResponse.address) &&
        Objects.equals(this.accommodationType, utilitiesExtendedLinkedPropertyResponse.accommodationType) &&
        Objects.equals(this.furnished, utilitiesExtendedLinkedPropertyResponse.furnished) &&
        Objects.equals(this.councilTax, utilitiesExtendedLinkedPropertyResponse.councilTax) &&
        Objects.equals(this.meters, utilitiesExtendedLinkedPropertyResponse.meters) &&
        Objects.equals(this.interimBillingResponsibility, utilitiesExtendedLinkedPropertyResponse.interimBillingResponsibility) &&
        Objects.equals(this.dateOfEntry, utilitiesExtendedLinkedPropertyResponse.dateOfEntry) &&
        Objects.equals(this.internalReference, utilitiesExtendedLinkedPropertyResponse.internalReference);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, managementType, primaryStatus, secondaryStatus, address, accommodationType, furnished, councilTax, meters, interimBillingResponsibility, dateOfEntry, internalReference);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UtilitiesExtendedLinkedPropertyResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    managementType: ").append(toIndentedString(managementType)).append("\n");
    sb.append("    primaryStatus: ").append(toIndentedString(primaryStatus)).append("\n");
    sb.append("    secondaryStatus: ").append(toIndentedString(secondaryStatus)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    accommodationType: ").append(toIndentedString(accommodationType)).append("\n");
    sb.append("    furnished: ").append(toIndentedString(furnished)).append("\n");
    sb.append("    councilTax: ").append(toIndentedString(councilTax)).append("\n");
    sb.append("    meters: ").append(toIndentedString(meters)).append("\n");
    sb.append("    interimBillingResponsibility: ").append(toIndentedString(interimBillingResponsibility)).append("\n");
    sb.append("    dateOfEntry: ").append(toIndentedString(dateOfEntry)).append("\n");
    sb.append("    internalReference: ").append(toIndentedString(internalReference)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

