/*
 * NSA Client API
 * This is the official Client API To interact with National Service Alliance (NSA)  # Dates All dates are in the ISO 8601 format - YYYY-MM-DD - ex. 2021-12-31  See this article for more information: [ISO 8601 article](https://en.wikipedia.org/wiki/ISO_8601)  # Authenication Authenication is handled via basic authentication.   Dev and Production credentials will be provided during the implimentation process  See this article for more information: [basic auth article](https://en.wikipedia.org/wiki/Basic_access_authentication) 
 *
 * The version of the OpenAPI document: 1.0.17
 * Contact: rj.whitehead@nationalservicealliance.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AvailabilityWithCODCostResponseCost;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * AvailabilityWithCODCostResponse
 */
@JsonPropertyOrder({
  AvailabilityWithCODCostResponse.JSON_PROPERTY_AVAILABILITY,
  AvailabilityWithCODCostResponse.JSON_PROPERTY_COST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:53.009381485Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class AvailabilityWithCODCostResponse {
  public static final String JSON_PROPERTY_AVAILABILITY = "availability";
  private List<String> availability = new ArrayList<>();

  public static final String JSON_PROPERTY_COST = "cost";
  private AvailabilityWithCODCostResponseCost cost;

  public AvailabilityWithCODCostResponse() {
  }

  public AvailabilityWithCODCostResponse availability(List<String> availability) {
    
    this.availability = availability;
    return this;
  }

  public AvailabilityWithCODCostResponse addAvailabilityItem(String availabilityItem) {
    if (this.availability == null) {
      this.availability = new ArrayList<>();
    }
    this.availability.add(availabilityItem);
    return this;
  }

   /**
   * Get availability
   * @return availability
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getAvailability() {
    return availability;
  }


  @JsonProperty(JSON_PROPERTY_AVAILABILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAvailability(List<String> availability) {
    this.availability = availability;
  }


  public AvailabilityWithCODCostResponse cost(AvailabilityWithCODCostResponseCost cost) {
    
    this.cost = cost;
    return this;
  }

   /**
   * Get cost
   * @return cost
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public AvailabilityWithCODCostResponseCost getCost() {
    return cost;
  }


  @JsonProperty(JSON_PROPERTY_COST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCost(AvailabilityWithCODCostResponseCost cost) {
    this.cost = cost;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailabilityWithCODCostResponse availabilityWithCODCostResponse = (AvailabilityWithCODCostResponse) o;
    return Objects.equals(this.availability, availabilityWithCODCostResponse.availability) &&
        Objects.equals(this.cost, availabilityWithCODCostResponse.cost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availability, cost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailabilityWithCODCostResponse {\n");
    sb.append("    availability: ").append(toIndentedString(availability)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

