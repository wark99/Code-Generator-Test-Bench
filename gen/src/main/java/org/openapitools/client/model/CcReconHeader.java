/*
 * Customer Payment Domain
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CcReconException;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CcReconHeader
 */
@JsonPropertyOrder({
  CcReconHeader.JSON_PROPERTY_FOP_CHANNEL,
  CcReconHeader.JSON_PROPERTY_MESSAGE_TYPE,
  CcReconHeader.JSON_PROPERTY_MISSING_CATALOG,
  CcReconHeader.JSON_PROPERTY_INCOMPLETE_PAYMENT_DETAILS_RETRY_COUNT,
  CcReconHeader.JSON_PROPERTY_PAYLOAD_DATA_SCHEMA,
  CcReconHeader.JSON_PROPERTY_EVENT_TYPE,
  CcReconHeader.JSON_PROPERTY_EVENT_STATE,
  CcReconHeader.JSON_PROPERTY_TOTAL_NUMBER_OF_C_C_RECORDS,
  CcReconHeader.JSON_PROPERTY_TOTAL_NUMBER_OF_RECORDS,
  CcReconHeader.JSON_PROPERTY_RECORD_LINE_NUMBER,
  CcReconHeader.JSON_PROPERTY_FILE_DETAILS_ID,
  CcReconHeader.JSON_PROPERTY_CC_RECON_EXCEPTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:16:54.275857511Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CcReconHeader {
  public static final String JSON_PROPERTY_FOP_CHANNEL = "fopChannel";
  private String fopChannel;

  public static final String JSON_PROPERTY_MESSAGE_TYPE = "messageType";
  private String messageType;

  public static final String JSON_PROPERTY_MISSING_CATALOG = "missingCatalog";
  private List<String> missingCatalog;

  public static final String JSON_PROPERTY_INCOMPLETE_PAYMENT_DETAILS_RETRY_COUNT = "incompletePaymentDetailsRetryCount";
  private BigDecimal incompletePaymentDetailsRetryCount;

  public static final String JSON_PROPERTY_PAYLOAD_DATA_SCHEMA = "payloadDataSchema";
  private String payloadDataSchema;

  public static final String JSON_PROPERTY_EVENT_TYPE = "eventType";
  private String eventType;

  /**
   * Gets or Sets eventState
   */
  public enum EventStateEnum {
    BEGIN("BEGIN"),
    
    TRANS("TRANS");

    private String value;

    EventStateEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static EventStateEnum fromValue(String value) {
      for (EventStateEnum b : EventStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_EVENT_STATE = "eventState";
  private EventStateEnum eventState;

  public static final String JSON_PROPERTY_TOTAL_NUMBER_OF_C_C_RECORDS = "totalNumberOfCCRecords";
  private String totalNumberOfCCRecords;

  public static final String JSON_PROPERTY_TOTAL_NUMBER_OF_RECORDS = "totalNumberOfRecords";
  private String totalNumberOfRecords;

  public static final String JSON_PROPERTY_RECORD_LINE_NUMBER = "recordLineNumber";
  private String recordLineNumber;

  public static final String JSON_PROPERTY_FILE_DETAILS_ID = "fileDetailsId";
  private String fileDetailsId;

  public static final String JSON_PROPERTY_CC_RECON_EXCEPTIONS = "ccReconExceptions";
  private List<CcReconException> ccReconExceptions;

  public CcReconHeader() {
  }

  public CcReconHeader fopChannel(String fopChannel) {
    
    this.fopChannel = fopChannel;
    return this;
  }

   /**
   * Get fopChannel
   * @return fopChannel
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOP_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFopChannel() {
    return fopChannel;
  }


  @JsonProperty(JSON_PROPERTY_FOP_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFopChannel(String fopChannel) {
    this.fopChannel = fopChannel;
  }


  public CcReconHeader messageType(String messageType) {
    
    this.messageType = messageType;
    return this;
  }

   /**
   * Get messageType
   * @return messageType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MESSAGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getMessageType() {
    return messageType;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessageType(String messageType) {
    this.messageType = messageType;
  }


  public CcReconHeader missingCatalog(List<String> missingCatalog) {
    
    this.missingCatalog = missingCatalog;
    return this;
  }

  public CcReconHeader addMissingCatalogItem(String missingCatalogItem) {
    if (this.missingCatalog == null) {
      this.missingCatalog = new ArrayList<>();
    }
    this.missingCatalog.add(missingCatalogItem);
    return this;
  }

   /**
   * Get missingCatalog
   * @return missingCatalog
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MISSING_CATALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getMissingCatalog() {
    return missingCatalog;
  }


  @JsonProperty(JSON_PROPERTY_MISSING_CATALOG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMissingCatalog(List<String> missingCatalog) {
    this.missingCatalog = missingCatalog;
  }


  public CcReconHeader incompletePaymentDetailsRetryCount(BigDecimal incompletePaymentDetailsRetryCount) {
    
    this.incompletePaymentDetailsRetryCount = incompletePaymentDetailsRetryCount;
    return this;
  }

   /**
   * Get incompletePaymentDetailsRetryCount
   * @return incompletePaymentDetailsRetryCount
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCOMPLETE_PAYMENT_DETAILS_RETRY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getIncompletePaymentDetailsRetryCount() {
    return incompletePaymentDetailsRetryCount;
  }


  @JsonProperty(JSON_PROPERTY_INCOMPLETE_PAYMENT_DETAILS_RETRY_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncompletePaymentDetailsRetryCount(BigDecimal incompletePaymentDetailsRetryCount) {
    this.incompletePaymentDetailsRetryCount = incompletePaymentDetailsRetryCount;
  }


  public CcReconHeader payloadDataSchema(String payloadDataSchema) {
    
    this.payloadDataSchema = payloadDataSchema;
    return this;
  }

   /**
   * Get payloadDataSchema
   * @return payloadDataSchema
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PAYLOAD_DATA_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPayloadDataSchema() {
    return payloadDataSchema;
  }


  @JsonProperty(JSON_PROPERTY_PAYLOAD_DATA_SCHEMA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPayloadDataSchema(String payloadDataSchema) {
    this.payloadDataSchema = payloadDataSchema;
  }


  public CcReconHeader eventType(String eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEventType() {
    return eventType;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventType(String eventType) {
    this.eventType = eventType;
  }


  public CcReconHeader eventState(EventStateEnum eventState) {
    
    this.eventState = eventState;
    return this;
  }

   /**
   * Get eventState
   * @return eventState
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EVENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public EventStateEnum getEventState() {
    return eventState;
  }


  @JsonProperty(JSON_PROPERTY_EVENT_STATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventState(EventStateEnum eventState) {
    this.eventState = eventState;
  }


  public CcReconHeader totalNumberOfCCRecords(String totalNumberOfCCRecords) {
    
    this.totalNumberOfCCRecords = totalNumberOfCCRecords;
    return this;
  }

   /**
   * Get totalNumberOfCCRecords
   * @return totalNumberOfCCRecords
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_NUMBER_OF_C_C_RECORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalNumberOfCCRecords() {
    return totalNumberOfCCRecords;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_NUMBER_OF_C_C_RECORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalNumberOfCCRecords(String totalNumberOfCCRecords) {
    this.totalNumberOfCCRecords = totalNumberOfCCRecords;
  }


  public CcReconHeader totalNumberOfRecords(String totalNumberOfRecords) {
    
    this.totalNumberOfRecords = totalNumberOfRecords;
    return this;
  }

   /**
   * Get totalNumberOfRecords
   * @return totalNumberOfRecords
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TOTAL_NUMBER_OF_RECORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTotalNumberOfRecords() {
    return totalNumberOfRecords;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_NUMBER_OF_RECORDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTotalNumberOfRecords(String totalNumberOfRecords) {
    this.totalNumberOfRecords = totalNumberOfRecords;
  }


  public CcReconHeader recordLineNumber(String recordLineNumber) {
    
    this.recordLineNumber = recordLineNumber;
    return this;
  }

   /**
   * Get recordLineNumber
   * @return recordLineNumber
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_RECORD_LINE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getRecordLineNumber() {
    return recordLineNumber;
  }


  @JsonProperty(JSON_PROPERTY_RECORD_LINE_NUMBER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecordLineNumber(String recordLineNumber) {
    this.recordLineNumber = recordLineNumber;
  }


  public CcReconHeader fileDetailsId(String fileDetailsId) {
    
    this.fileDetailsId = fileDetailsId;
    return this;
  }

   /**
   * Get fileDetailsId
   * @return fileDetailsId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FILE_DETAILS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFileDetailsId() {
    return fileDetailsId;
  }


  @JsonProperty(JSON_PROPERTY_FILE_DETAILS_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFileDetailsId(String fileDetailsId) {
    this.fileDetailsId = fileDetailsId;
  }


  public CcReconHeader ccReconExceptions(List<CcReconException> ccReconExceptions) {
    
    this.ccReconExceptions = ccReconExceptions;
    return this;
  }

  public CcReconHeader addCcReconExceptionsItem(CcReconException ccReconExceptionsItem) {
    if (this.ccReconExceptions == null) {
      this.ccReconExceptions = new ArrayList<>();
    }
    this.ccReconExceptions.add(ccReconExceptionsItem);
    return this;
  }

   /**
   * Get ccReconExceptions
   * @return ccReconExceptions
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CC_RECON_EXCEPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<CcReconException> getCcReconExceptions() {
    return ccReconExceptions;
  }


  @JsonProperty(JSON_PROPERTY_CC_RECON_EXCEPTIONS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCcReconExceptions(List<CcReconException> ccReconExceptions) {
    this.ccReconExceptions = ccReconExceptions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CcReconHeader ccReconHeader = (CcReconHeader) o;
    return Objects.equals(this.fopChannel, ccReconHeader.fopChannel) &&
        Objects.equals(this.messageType, ccReconHeader.messageType) &&
        Objects.equals(this.missingCatalog, ccReconHeader.missingCatalog) &&
        Objects.equals(this.incompletePaymentDetailsRetryCount, ccReconHeader.incompletePaymentDetailsRetryCount) &&
        Objects.equals(this.payloadDataSchema, ccReconHeader.payloadDataSchema) &&
        Objects.equals(this.eventType, ccReconHeader.eventType) &&
        Objects.equals(this.eventState, ccReconHeader.eventState) &&
        Objects.equals(this.totalNumberOfCCRecords, ccReconHeader.totalNumberOfCCRecords) &&
        Objects.equals(this.totalNumberOfRecords, ccReconHeader.totalNumberOfRecords) &&
        Objects.equals(this.recordLineNumber, ccReconHeader.recordLineNumber) &&
        Objects.equals(this.fileDetailsId, ccReconHeader.fileDetailsId) &&
        Objects.equals(this.ccReconExceptions, ccReconHeader.ccReconExceptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fopChannel, messageType, missingCatalog, incompletePaymentDetailsRetryCount, payloadDataSchema, eventType, eventState, totalNumberOfCCRecords, totalNumberOfRecords, recordLineNumber, fileDetailsId, ccReconExceptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CcReconHeader {\n");
    sb.append("    fopChannel: ").append(toIndentedString(fopChannel)).append("\n");
    sb.append("    messageType: ").append(toIndentedString(messageType)).append("\n");
    sb.append("    missingCatalog: ").append(toIndentedString(missingCatalog)).append("\n");
    sb.append("    incompletePaymentDetailsRetryCount: ").append(toIndentedString(incompletePaymentDetailsRetryCount)).append("\n");
    sb.append("    payloadDataSchema: ").append(toIndentedString(payloadDataSchema)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventState: ").append(toIndentedString(eventState)).append("\n");
    sb.append("    totalNumberOfCCRecords: ").append(toIndentedString(totalNumberOfCCRecords)).append("\n");
    sb.append("    totalNumberOfRecords: ").append(toIndentedString(totalNumberOfRecords)).append("\n");
    sb.append("    recordLineNumber: ").append(toIndentedString(recordLineNumber)).append("\n");
    sb.append("    fileDetailsId: ").append(toIndentedString(fileDetailsId)).append("\n");
    sb.append("    ccReconExceptions: ").append(toIndentedString(ccReconExceptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

