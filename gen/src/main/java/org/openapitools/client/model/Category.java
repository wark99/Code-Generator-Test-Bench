/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Category
 */
@JsonPropertyOrder({
  Category.JSON_PROPERTY_ID,
  Category.JSON_PROPERTY_NAME,
  Category.JSON_PROPERTY_COLOR,
  Category.JSON_PROPERTY_IS_PREDEFINED,
  Category.JSON_PROPERTY_CREATED_BY,
  Category.JSON_PROPERTY_CREATED_AT,
  Category.JSON_PROPERTY_USER_USES
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Category {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_COLOR = "color";
  private String color;

  public static final String JSON_PROPERTY_IS_PREDEFINED = "is_predefined";
  private Boolean isPredefined;

  public static final String JSON_PROPERTY_CREATED_BY = "created_by";
  private Integer createdBy;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_USER_USES = "user_uses";
  private Integer userUses;

  public Category() {
  }

  public Category id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Category identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public Category name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Category name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Category color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * Color the Category displays in
   * @return color
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getColor() {
    return color;
  }


  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setColor(String color) {
    this.color = color;
  }


  public Category isPredefined(Boolean isPredefined) {
    
    this.isPredefined = isPredefined;
    return this;
  }

   /**
   * If the Category is system or user defined
   * @return isPredefined
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_PREDEFINED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsPredefined() {
    return isPredefined;
  }


  @JsonProperty(JSON_PROPERTY_IS_PREDEFINED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsPredefined(Boolean isPredefined) {
    this.isPredefined = isPredefined;
  }


  public Category createdBy(Integer createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * Unique identifier of the creator of the resource &#x60;Category&#x60;
   * @return createdBy
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedBy() {
    return createdBy;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedBy(Integer createdBy) {
    this.createdBy = createdBy;
  }


  public Category createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Timestamp &#x60;Category&#x60; was created at
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public Category userUses(Integer userUses) {
    
    this.userUses = userUses;
    return this;
  }

   /**
   * Number of uses of the Category
   * @return userUses
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_USES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getUserUses() {
    return userUses;
  }


  @JsonProperty(JSON_PROPERTY_USER_USES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserUses(Integer userUses) {
    this.userUses = userUses;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Category category = (Category) o;
    return Objects.equals(this.id, category.id) &&
        Objects.equals(this.name, category.name) &&
        Objects.equals(this.color, category.color) &&
        Objects.equals(this.isPredefined, category.isPredefined) &&
        Objects.equals(this.createdBy, category.createdBy) &&
        Objects.equals(this.createdAt, category.createdAt) &&
        Objects.equals(this.userUses, category.userUses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, color, isPredefined, createdBy, createdAt, userUses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Category {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    isPredefined: ").append(toIndentedString(isPredefined)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    userUses: ").append(toIndentedString(userUses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

