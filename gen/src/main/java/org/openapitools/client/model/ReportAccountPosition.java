/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ReportAccountPosition
 */
@JsonPropertyOrder({
  ReportAccountPosition.JSON_PROPERTY_ID,
  ReportAccountPosition.JSON_PROPERTY_CURRENCY,
  ReportAccountPosition.JSON_PROPERTY_SYMBOL,
  ReportAccountPosition.JSON_PROPERTY_SECURITY_NAME,
  ReportAccountPosition.JSON_PROPERTY_UNITS,
  ReportAccountPosition.JSON_PROPERTY_MARKET_VALUE,
  ReportAccountPosition.JSON_PROPERTY_CURRENT_PRICE,
  ReportAccountPosition.JSON_PROPERTY_SECURITY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T12:57:35.632313798Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ReportAccountPosition {
  public static final String JSON_PROPERTY_ID = "id";
  private BigDecimal id;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;

  public static final String JSON_PROPERTY_SYMBOL = "symbol";
  private String symbol;

  public static final String JSON_PROPERTY_SECURITY_NAME = "securityName";
  private String securityName;

  public static final String JSON_PROPERTY_UNITS = "units";
  private BigDecimal units;

  public static final String JSON_PROPERTY_MARKET_VALUE = "marketValue";
  private BigDecimal marketValue;

  public static final String JSON_PROPERTY_CURRENT_PRICE = "currentPrice";
  private BigDecimal currentPrice;

  public static final String JSON_PROPERTY_SECURITY_TYPE = "securityType";
  private BigDecimal securityType;

  public ReportAccountPosition() {
  }

  public ReportAccountPosition id(BigDecimal id) {
    
    this.id = id;
    return this;
  }

   /**
   * The id of the investment position
   * @return id
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(BigDecimal id) {
    this.id = id;
  }


  public ReportAccountPosition currency(String currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * What currency the account operates in
   * @return currency
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public ReportAccountPosition symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The investment positionâ€™s market ticker symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSymbol() {
    return symbol;
  }


  @JsonProperty(JSON_PROPERTY_SYMBOL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public ReportAccountPosition securityName(String securityName) {
    
    this.securityName = securityName;
    return this;
  }

   /**
   * The security name for the investment holding
   * @return securityName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecurityName() {
    return securityName;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityName(String securityName) {
    this.securityName = securityName;
  }


  public ReportAccountPosition units(BigDecimal units) {
    
    this.units = units;
    return this;
  }

   /**
   * The number of units of the holding
   * @return units
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getUnits() {
    return units;
  }


  @JsonProperty(JSON_PROPERTY_UNITS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnits(BigDecimal units) {
    this.units = units;
  }


  public ReportAccountPosition marketValue(BigDecimal marketValue) {
    
    this.marketValue = marketValue;
    return this;
  }

   /**
   * Market value of an investment position at the time of retrieval
   * @return marketValue
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MARKET_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getMarketValue() {
    return marketValue;
  }


  @JsonProperty(JSON_PROPERTY_MARKET_VALUE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMarketValue(BigDecimal marketValue) {
    this.marketValue = marketValue;
  }


  public ReportAccountPosition currentPrice(BigDecimal currentPrice) {
    
    this.currentPrice = currentPrice;
    return this;
  }

   /**
   * The current price of the investment holding
   * @return currentPrice
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CURRENT_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getCurrentPrice() {
    return currentPrice;
  }


  @JsonProperty(JSON_PROPERTY_CURRENT_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrentPrice(BigDecimal currentPrice) {
    this.currentPrice = currentPrice;
  }


  public ReportAccountPosition securityType(BigDecimal securityType) {
    
    this.securityType = securityType;
    return this;
  }

   /**
   * Type of security of the investment position
   * @return securityType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getSecurityType() {
    return securityType;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurityType(BigDecimal securityType) {
    this.securityType = securityType;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportAccountPosition reportAccountPosition = (ReportAccountPosition) o;
    return Objects.equals(this.id, reportAccountPosition.id) &&
        Objects.equals(this.currency, reportAccountPosition.currency) &&
        Objects.equals(this.symbol, reportAccountPosition.symbol) &&
        Objects.equals(this.securityName, reportAccountPosition.securityName) &&
        Objects.equals(this.units, reportAccountPosition.units) &&
        Objects.equals(this.marketValue, reportAccountPosition.marketValue) &&
        Objects.equals(this.currentPrice, reportAccountPosition.currentPrice) &&
        Objects.equals(this.securityType, reportAccountPosition.securityType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, currency, symbol, securityName, units, marketValue, currentPrice, securityType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportAccountPosition {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    securityName: ").append(toIndentedString(securityName)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    marketValue: ").append(toIndentedString(marketValue)).append("\n");
    sb.append("    currentPrice: ").append(toIndentedString(currentPrice)).append("\n");
    sb.append("    securityType: ").append(toIndentedString(securityType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

