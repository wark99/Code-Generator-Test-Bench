/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StatConsumptionByStream
 */
@JsonPropertyOrder({
  StatConsumptionByStream.JSON_PROPERTY_STREAM_ID,
  StatConsumptionByStream.JSON_PROPERTY_TOTAL_BYTES,
  StatConsumptionByStream.JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS,
  StatConsumptionByStream.JSON_PROPERTY_AVERAGE_BYTES_BY_DAY,
  StatConsumptionByStream.JSON_PROPERTY_MAX_BYTES,
  StatConsumptionByStream.JSON_PROPERTY_TYPE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StatConsumptionByStream {
  public static final String JSON_PROPERTY_STREAM_ID = "stream_id";
  private Integer streamId;

  public static final String JSON_PROPERTY_TOTAL_BYTES = "total_bytes";
  private Integer totalBytes;

  public static final String JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS = "average_bytes_by_listeners";
  private BigDecimal averageBytesByListeners;

  public static final String JSON_PROPERTY_AVERAGE_BYTES_BY_DAY = "average_bytes_by_day";
  private BigDecimal averageBytesByDay;

  public static final String JSON_PROPERTY_MAX_BYTES = "max_bytes";
  private Integer maxBytes;

  /**
   * The type of stream
   */
  public enum TypeEnum {
    HLS("hls"),
    
    STREAM("stream");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public StatConsumptionByStream() {
  }

  public StatConsumptionByStream streamId(Integer streamId) {
    
    this.streamId = streamId;
    return this;
  }

   /**
   * The stream id related to this stat
   * @return streamId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getStreamId() {
    return streamId;
  }


  @JsonProperty(JSON_PROPERTY_STREAM_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStreamId(Integer streamId) {
    this.streamId = streamId;
  }


  public StatConsumptionByStream totalBytes(Integer totalBytes) {
    
    this.totalBytes = totalBytes;
    return this;
  }

   /**
   * The total of bytes consumed on the date range
   * @return totalBytes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TOTAL_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getTotalBytes() {
    return totalBytes;
  }


  @JsonProperty(JSON_PROPERTY_TOTAL_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTotalBytes(Integer totalBytes) {
    this.totalBytes = totalBytes;
  }


  public StatConsumptionByStream averageBytesByListeners(BigDecimal averageBytesByListeners) {
    
    this.averageBytesByListeners = averageBytesByListeners;
    return this;
  }

   /**
   * The average of bytes consumed by listeners
   * @return averageBytesByListeners
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageBytesByListeners() {
    return averageBytesByListeners;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_LISTENERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageBytesByListeners(BigDecimal averageBytesByListeners) {
    this.averageBytesByListeners = averageBytesByListeners;
  }


  public StatConsumptionByStream averageBytesByDay(BigDecimal averageBytesByDay) {
    
    this.averageBytesByDay = averageBytesByDay;
    return this;
  }

   /**
   * The average of bytes consumed by day
   * @return averageBytesByDay
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_DAY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getAverageBytesByDay() {
    return averageBytesByDay;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_BYTES_BY_DAY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAverageBytesByDay(BigDecimal averageBytesByDay) {
    this.averageBytesByDay = averageBytesByDay;
  }


  public StatConsumptionByStream maxBytes(Integer maxBytes) {
    
    this.maxBytes = maxBytes;
    return this;
  }

   /**
   * The max bytes consumed in one day
   * @return maxBytes
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAX_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getMaxBytes() {
    return maxBytes;
  }


  @JsonProperty(JSON_PROPERTY_MAX_BYTES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaxBytes(Integer maxBytes) {
    this.maxBytes = maxBytes;
  }


  public StatConsumptionByStream type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * The type of stream
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatConsumptionByStream statConsumptionByStream = (StatConsumptionByStream) o;
    return Objects.equals(this.streamId, statConsumptionByStream.streamId) &&
        Objects.equals(this.totalBytes, statConsumptionByStream.totalBytes) &&
        Objects.equals(this.averageBytesByListeners, statConsumptionByStream.averageBytesByListeners) &&
        Objects.equals(this.averageBytesByDay, statConsumptionByStream.averageBytesByDay) &&
        Objects.equals(this.maxBytes, statConsumptionByStream.maxBytes) &&
        Objects.equals(this.type, statConsumptionByStream.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(streamId, totalBytes, averageBytesByListeners, averageBytesByDay, maxBytes, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatConsumptionByStream {\n");
    sb.append("    streamId: ").append(toIndentedString(streamId)).append("\n");
    sb.append("    totalBytes: ").append(toIndentedString(totalBytes)).append("\n");
    sb.append("    averageBytesByListeners: ").append(toIndentedString(averageBytesByListeners)).append("\n");
    sb.append("    averageBytesByDay: ").append(toIndentedString(averageBytesByDay)).append("\n");
    sb.append("    maxBytes: ").append(toIndentedString(maxBytes)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

