/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Activity;
import org.openapitools.client.model.Capabilities2;
import org.openapitools.client.model.Dropbox;
import org.openapitools.client.model.ExternalImportFile;
import org.openapitools.client.model.FileCategory;
import org.openapitools.client.model.Lock;
import org.openapitools.client.model.Rewind;
import org.openapitools.client.model.ShareLink;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Directory
 */
@JsonPropertyOrder({
  Directory.JSON_PROPERTY_ID,
  Directory.JSON_PROPERTY_NAME,
  Directory.JSON_PROPERTY_SORTED_NAME,
  Directory.JSON_PROPERTY_PATH,
  Directory.JSON_PROPERTY_TYPE,
  Directory.JSON_PROPERTY_STATUS,
  Directory.JSON_PROPERTY_VISIBILITY,
  Directory.JSON_PROPERTY_DRIVE_ID,
  Directory.JSON_PROPERTY_DEPTH,
  Directory.JSON_PROPERTY_CREATED_BY,
  Directory.JSON_PROPERTY_CREATED_AT,
  Directory.JSON_PROPERTY_ADDED_AT,
  Directory.JSON_PROPERTY_LAST_MODIFIED_AT,
  Directory.JSON_PROPERTY_PARENT_ID,
  Directory.JSON_PROPERTY_DELETED_AT,
  Directory.JSON_PROPERTY_DELETED_BY,
  Directory.JSON_PROPERTY_SHARED_ROOT_ID,
  Directory.JSON_PROPERTY_PARENTS,
  Directory.JSON_PROPERTY_USERS,
  Directory.JSON_PROPERTY_TEAMS,
  Directory.JSON_PROPERTY_IS_FAVORITE,
  Directory.JSON_PROPERTY_ACTIVITY,
  Directory.JSON_PROPERTY_SHARELINK,
  Directory.JSON_PROPERTY_CAPABILITIES,
  Directory.JSON_PROPERTY_LOCK,
  Directory.JSON_PROPERTY_CATEGORIES,
  Directory.JSON_PROPERTY_ETAG,
  Directory.JSON_PROPERTY_COLOR,
  Directory.JSON_PROPERTY_DROPBOX,
  Directory.JSON_PROPERTY_EXTERNAL_IMPORT,
  Directory.JSON_PROPERTY_REWIND
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Directory {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_SORTED_NAME = "sorted_name";
  private String sortedName;

  public static final String JSON_PROPERTY_PATH = "path";
  private String path;

  /**
   * Type of returned element either a dir (Directory) or file (File)
   */
  public enum TypeEnum {
    DIR("dir"),
    
    FILE("file");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  /**
   * Current state of Directory. The state can be null meaning that the Directory has no specific state.&lt;note&gt;&lt;strong&gt;erasing&lt;/strong&gt;: Directory is currently being erased from the drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;locked&lt;/strong&gt;: Directory is currently locked. No action can be made except unlocking by the application which locked the File (such as office, webdav or external import).&lt;/note&gt;&lt;note&gt;&lt;strong&gt;trash_inherited&lt;/strong&gt;: Directory is currently in trash because a parent directory was trashed.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;trashed&lt;/strong&gt;: Directory is currently in trash and specifically trashed by the user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;uploading&lt;/strong&gt;: Directory is currently being uploaded. The Directory is locked and no action can be done excepting upload actions.&lt;/note&gt;
   */
  public enum StatusEnum {
    ERASING("erasing"),
    
    LOCKED("locked"),
    
    TRASH_INHERITED("trash_inherited"),
    
    TRASHED("trashed"),
    
    UPLOADING("uploading");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  /**
   * Visibility of Directory, empty string if no specific visibility. Add additional information about Directory to show different icons or more.&lt;note&gt;&lt;strong&gt;&lt;/strong&gt;: Empty visibility mean no special visibility.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_in_team_space_folder&lt;/strong&gt;: Is a Directory inside a Common Documents directory.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_root&lt;/strong&gt;: Is the root directory of the user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_shared_space&lt;/strong&gt;: Is the shared root directory, a special directory where the files inside are the private files of other user shared with the logged user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_team_space&lt;/strong&gt;: Is the Common Documents directory, a special directory where the files inside are common to all users by default.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_team_space_folder&lt;/strong&gt;: Is the root directory inside the Common Documents.&lt;/note&gt;
   */
  public enum VisibilityEnum {
    EMPTY(""),
    
    IS_IN_TEAM_SPACE_FOLDER("is_in_team_space_folder"),
    
    IS_ROOT("is_root"),
    
    IS_SHARED_SPACE("is_shared_space"),
    
    IS_TEAM_SPACE("is_team_space"),
    
    IS_TEAM_SPACE_FOLDER("is_team_space_folder");

    private String value;

    VisibilityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static VisibilityEnum fromValue(String value) {
      for (VisibilityEnum b : VisibilityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_VISIBILITY = "visibility";
  private VisibilityEnum visibility;

  public static final String JSON_PROPERTY_DRIVE_ID = "drive_id";
  private Integer driveId;

  public static final String JSON_PROPERTY_DEPTH = "depth";
  private Integer depth;

  public static final String JSON_PROPERTY_CREATED_BY = "created_by";
  private Integer createdBy;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_ADDED_AT = "added_at";
  private Integer addedAt;

  public static final String JSON_PROPERTY_LAST_MODIFIED_AT = "last_modified_at";
  private Integer lastModifiedAt;

  public static final String JSON_PROPERTY_PARENT_ID = "parent_id";
  private Integer parentId;

  public static final String JSON_PROPERTY_DELETED_AT = "deleted_at";
  private Integer deletedAt;

  public static final String JSON_PROPERTY_DELETED_BY = "deleted_by";
  private Integer deletedBy;

  public static final String JSON_PROPERTY_SHARED_ROOT_ID = "shared_root_id";
  private Integer sharedRootId;

  public static final String JSON_PROPERTY_PARENTS = "parents";
  private List<Directory> parents;

  public static final String JSON_PROPERTY_USERS = "users";
  private List<Integer> users;

  public static final String JSON_PROPERTY_TEAMS = "teams";
  private List<Integer> teams;

  public static final String JSON_PROPERTY_IS_FAVORITE = "is_favorite";
  private Boolean isFavorite;

  public static final String JSON_PROPERTY_ACTIVITY = "activity";
  private Activity activity;

  public static final String JSON_PROPERTY_SHARELINK = "sharelink";
  private ShareLink sharelink;

  public static final String JSON_PROPERTY_CAPABILITIES = "capabilities";
  private Capabilities2 capabilities;

  public static final String JSON_PROPERTY_LOCK = "lock";
  private Lock lock;

  public static final String JSON_PROPERTY_CATEGORIES = "categories";
  private List<FileCategory> categories;

  public static final String JSON_PROPERTY_ETAG = "etag";
  private String etag;

  public static final String JSON_PROPERTY_COLOR = "color";
  private String color;

  public static final String JSON_PROPERTY_DROPBOX = "dropbox";
  private Dropbox dropbox;

  public static final String JSON_PROPERTY_EXTERNAL_IMPORT = "external_import";
  private ExternalImportFile externalImport;

  public static final String JSON_PROPERTY_REWIND = "rewind";
  private Rewind rewind;

  public Directory() {
  }

  public Directory id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;Directory&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public Directory name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * File name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public Directory sortedName(String sortedName) {
    
    this.sortedName = sortedName;
    return this;
  }

   /**
   * Specific sortable name
   * @return sortedName
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SORTED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSortedName() {
    return sortedName;
  }


  @JsonProperty(JSON_PROPERTY_SORTED_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSortedName(String sortedName) {
    this.sortedName = sortedName;
  }


  public Directory path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Full path of the Directory
   * @return path
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getPath() {
    return path;
  }


  @JsonProperty(JSON_PROPERTY_PATH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPath(String path) {
    this.path = path;
  }


  public Directory type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of returned element either a dir (Directory) or file (File)
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public Directory status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Current state of Directory. The state can be null meaning that the Directory has no specific state.&lt;note&gt;&lt;strong&gt;erasing&lt;/strong&gt;: Directory is currently being erased from the drive.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;locked&lt;/strong&gt;: Directory is currently locked. No action can be made except unlocking by the application which locked the File (such as office, webdav or external import).&lt;/note&gt;&lt;note&gt;&lt;strong&gt;trash_inherited&lt;/strong&gt;: Directory is currently in trash because a parent directory was trashed.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;trashed&lt;/strong&gt;: Directory is currently in trash and specifically trashed by the user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;uploading&lt;/strong&gt;: Directory is currently being uploaded. The Directory is locked and no action can be done excepting upload actions.&lt;/note&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Directory visibility(VisibilityEnum visibility) {
    
    this.visibility = visibility;
    return this;
  }

   /**
   * Visibility of Directory, empty string if no specific visibility. Add additional information about Directory to show different icons or more.&lt;note&gt;&lt;strong&gt;&lt;/strong&gt;: Empty visibility mean no special visibility.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_in_team_space_folder&lt;/strong&gt;: Is a Directory inside a Common Documents directory.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_root&lt;/strong&gt;: Is the root directory of the user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_shared_space&lt;/strong&gt;: Is the shared root directory, a special directory where the files inside are the private files of other user shared with the logged user.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_team_space&lt;/strong&gt;: Is the Common Documents directory, a special directory where the files inside are common to all users by default.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;is_team_space_folder&lt;/strong&gt;: Is the root directory inside the Common Documents.&lt;/note&gt;
   * @return visibility
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public VisibilityEnum getVisibility() {
    return visibility;
  }


  @JsonProperty(JSON_PROPERTY_VISIBILITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVisibility(VisibilityEnum visibility) {
    this.visibility = visibility;
  }


  public Directory driveId(Integer driveId) {
    
    this.driveId = driveId;
    return this;
  }

   /**
   * Drive identifier
   * @return driveId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DRIVE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDriveId() {
    return driveId;
  }


  @JsonProperty(JSON_PROPERTY_DRIVE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDriveId(Integer driveId) {
    this.driveId = driveId;
  }


  public Directory depth(Integer depth) {
    
    this.depth = depth;
    return this;
  }

   /**
   * Current path depth of Directory
   * @return depth
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEPTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getDepth() {
    return depth;
  }


  @JsonProperty(JSON_PROPERTY_DEPTH)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDepth(Integer depth) {
    this.depth = depth;
  }


  public Directory createdBy(Integer createdBy) {
    
    this.createdBy = createdBy;
    return this;
  }

   /**
   * The identifier of the user who first uploaded the Directory
   * @return createdBy
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedBy() {
    return createdBy;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedBy(Integer createdBy) {
    this.createdBy = createdBy;
  }


  public Directory createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Directory creation timestamp (in seconds), if available in its metadata or specified on upload
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public Directory addedAt(Integer addedAt) {
    
    this.addedAt = addedAt;
    return this;
  }

   /**
   * The timestamp (in seconds) at which the Directory has been uploaded for the first time
   * @return addedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ADDED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getAddedAt() {
    return addedAt;
  }


  @JsonProperty(JSON_PROPERTY_ADDED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAddedAt(Integer addedAt) {
    this.addedAt = addedAt;
  }


  public Directory lastModifiedAt(Integer lastModifiedAt) {
    
    this.lastModifiedAt = lastModifiedAt;
    return this;
  }

   /**
   * Directory creation timestamp (in seconds), if available in its metadata or specified on upload
   * @return lastModifiedAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getLastModifiedAt() {
    return lastModifiedAt;
  }


  @JsonProperty(JSON_PROPERTY_LAST_MODIFIED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastModifiedAt(Integer lastModifiedAt) {
    this.lastModifiedAt = lastModifiedAt;
  }


  public Directory parentId(Integer parentId) {
    
    this.parentId = parentId;
    return this;
  }

   /**
   * Parent directory identifier
   * @return parentId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getParentId() {
    return parentId;
  }


  @JsonProperty(JSON_PROPERTY_PARENT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setParentId(Integer parentId) {
    this.parentId = parentId;
  }


  public Directory deletedAt(Integer deletedAt) {
    
    this.deletedAt = deletedAt;
    return this;
  }

   /**
   * Timestamp of deleted resource Directory, only visible when the Directory is trashed
   * @return deletedAt
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDeletedAt() {
    return deletedAt;
  }


  @JsonProperty(JSON_PROPERTY_DELETED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeletedAt(Integer deletedAt) {
    this.deletedAt = deletedAt;
  }


  public Directory deletedBy(Integer deletedBy) {
    
    this.deletedBy = deletedBy;
    return this;
  }

   /**
   * User identifier of deleted resource Directory, only visible when the Directory is trashed
   * @return deletedBy
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DELETED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDeletedBy() {
    return deletedBy;
  }


  @JsonProperty(JSON_PROPERTY_DELETED_BY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeletedBy(Integer deletedBy) {
    this.deletedBy = deletedBy;
  }


  public Directory sharedRootId(Integer sharedRootId) {
    
    this.sharedRootId = sharedRootId;
    return this;
  }

   /**
   * Root Directory identifier, only visible for shared user
   * @return sharedRootId
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARED_ROOT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSharedRootId() {
    return sharedRootId;
  }


  @JsonProperty(JSON_PROPERTY_SHARED_ROOT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharedRootId(Integer sharedRootId) {
    this.sharedRootId = sharedRootId;
  }


  public Directory parents(List<Directory> parents) {
    
    this.parents = parents;
    return this;
  }

  public Directory addParentsItem(Directory parentsItem) {
    if (this.parents == null) {
      this.parents = new ArrayList<>();
    }
    this.parents.add(parentsItem);
    return this;
  }

   /**
   * Get parents
   * @return parents
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_PARENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Directory> getParents() {
    return parents;
  }


  @JsonProperty(JSON_PROPERTY_PARENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParents(List<Directory> parents) {
    this.parents = parents;
  }


  public Directory users(List<Integer> users) {
    
    this.users = users;
    return this;
  }

  public Directory addUsersItem(Integer usersItem) {
    if (this.users == null) {
      this.users = new ArrayList<>();
    }
    this.users.add(usersItem);
    return this;
  }

   /**
   * Array of users identifiers that has access to the Directory
   * @return users
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getUsers() {
    return users;
  }


  @JsonProperty(JSON_PROPERTY_USERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUsers(List<Integer> users) {
    this.users = users;
  }


  public Directory teams(List<Integer> teams) {
    
    this.teams = teams;
    return this;
  }

  public Directory addTeamsItem(Integer teamsItem) {
    if (this.teams == null) {
      this.teams = new ArrayList<>();
    }
    this.teams.add(teamsItem);
    return this;
  }

   /**
   * Array of teams identifiers that has access to the Directory
   * @return teams
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Integer> getTeams() {
    return teams;
  }


  @JsonProperty(JSON_PROPERTY_TEAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTeams(List<Integer> teams) {
    this.teams = teams;
  }


  public Directory isFavorite(Boolean isFavorite) {
    
    this.isFavorite = isFavorite;
    return this;
  }

   /**
   * Is Directory pinned as favorite
   * @return isFavorite
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IS_FAVORITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getIsFavorite() {
    return isFavorite;
  }


  @JsonProperty(JSON_PROPERTY_IS_FAVORITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIsFavorite(Boolean isFavorite) {
    this.isFavorite = isFavorite;
  }


  public Directory activity(Activity activity) {
    
    this.activity = activity;
    return this;
  }

   /**
   * Get activity
   * @return activity
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Activity getActivity() {
    return activity;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActivity(Activity activity) {
    this.activity = activity;
  }


  public Directory sharelink(ShareLink sharelink) {
    
    this.sharelink = sharelink;
    return this;
  }

   /**
   * Get sharelink
   * @return sharelink
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SHARELINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ShareLink getSharelink() {
    return sharelink;
  }


  @JsonProperty(JSON_PROPERTY_SHARELINK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSharelink(ShareLink sharelink) {
    this.sharelink = sharelink;
  }


  public Directory capabilities(Capabilities2 capabilities) {
    
    this.capabilities = capabilities;
    return this;
  }

   /**
   * Get capabilities
   * @return capabilities
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CAPABILITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Capabilities2 getCapabilities() {
    return capabilities;
  }


  @JsonProperty(JSON_PROPERTY_CAPABILITIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCapabilities(Capabilities2 capabilities) {
    this.capabilities = capabilities;
  }


  public Directory lock(Lock lock) {
    
    this.lock = lock;
    return this;
  }

   /**
   * Get lock
   * @return lock
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LOCK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Lock getLock() {
    return lock;
  }


  @JsonProperty(JSON_PROPERTY_LOCK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLock(Lock lock) {
    this.lock = lock;
  }


  public Directory categories(List<FileCategory> categories) {
    
    this.categories = categories;
    return this;
  }

  public Directory addCategoriesItem(FileCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<FileCategory> getCategories() {
    return categories;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategories(List<FileCategory> categories) {
    this.categories = categories;
  }


  public Directory etag(String etag) {
    
    this.etag = etag;
    return this;
  }

   /**
   * ETag of the file
   * @return etag
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ETAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getEtag() {
    return etag;
  }


  @JsonProperty(JSON_PROPERTY_ETAG)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEtag(String etag) {
    this.etag = etag;
  }


  public Directory color(String color) {
    
    this.color = color;
    return this;
  }

   /**
   * Color of the directory for the user requesting it
   * @return color
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getColor() {
    return color;
  }


  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setColor(String color) {
    this.color = color;
  }


  public Directory dropbox(Dropbox dropbox) {
    
    this.dropbox = dropbox;
    return this;
  }

   /**
   * Get dropbox
   * @return dropbox
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DROPBOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Dropbox getDropbox() {
    return dropbox;
  }


  @JsonProperty(JSON_PROPERTY_DROPBOX)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDropbox(Dropbox dropbox) {
    this.dropbox = dropbox;
  }


  public Directory externalImport(ExternalImportFile externalImport) {
    
    this.externalImport = externalImport;
    return this;
  }

   /**
   * Get externalImport
   * @return externalImport
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTERNAL_IMPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public ExternalImportFile getExternalImport() {
    return externalImport;
  }


  @JsonProperty(JSON_PROPERTY_EXTERNAL_IMPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExternalImport(ExternalImportFile externalImport) {
    this.externalImport = externalImport;
  }


  public Directory rewind(Rewind rewind) {
    
    this.rewind = rewind;
    return this;
  }

   /**
   * Get rewind
   * @return rewind
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REWIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Rewind getRewind() {
    return rewind;
  }


  @JsonProperty(JSON_PROPERTY_REWIND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRewind(Rewind rewind) {
    this.rewind = rewind;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Directory directory = (Directory) o;
    return Objects.equals(this.id, directory.id) &&
        Objects.equals(this.name, directory.name) &&
        Objects.equals(this.sortedName, directory.sortedName) &&
        Objects.equals(this.path, directory.path) &&
        Objects.equals(this.type, directory.type) &&
        Objects.equals(this.status, directory.status) &&
        Objects.equals(this.visibility, directory.visibility) &&
        Objects.equals(this.driveId, directory.driveId) &&
        Objects.equals(this.depth, directory.depth) &&
        Objects.equals(this.createdBy, directory.createdBy) &&
        Objects.equals(this.createdAt, directory.createdAt) &&
        Objects.equals(this.addedAt, directory.addedAt) &&
        Objects.equals(this.lastModifiedAt, directory.lastModifiedAt) &&
        Objects.equals(this.parentId, directory.parentId) &&
        Objects.equals(this.deletedAt, directory.deletedAt) &&
        Objects.equals(this.deletedBy, directory.deletedBy) &&
        Objects.equals(this.sharedRootId, directory.sharedRootId) &&
        Objects.equals(this.parents, directory.parents) &&
        Objects.equals(this.users, directory.users) &&
        Objects.equals(this.teams, directory.teams) &&
        Objects.equals(this.isFavorite, directory.isFavorite) &&
        Objects.equals(this.activity, directory.activity) &&
        Objects.equals(this.sharelink, directory.sharelink) &&
        Objects.equals(this.capabilities, directory.capabilities) &&
        Objects.equals(this.lock, directory.lock) &&
        Objects.equals(this.categories, directory.categories) &&
        Objects.equals(this.etag, directory.etag) &&
        Objects.equals(this.color, directory.color) &&
        Objects.equals(this.dropbox, directory.dropbox) &&
        Objects.equals(this.externalImport, directory.externalImport) &&
        Objects.equals(this.rewind, directory.rewind);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, sortedName, path, type, status, visibility, driveId, depth, createdBy, createdAt, addedAt, lastModifiedAt, parentId, deletedAt, deletedBy, sharedRootId, parents, users, teams, isFavorite, activity, sharelink, capabilities, lock, categories, etag, color, dropbox, externalImport, rewind);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Directory {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sortedName: ").append(toIndentedString(sortedName)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("    driveId: ").append(toIndentedString(driveId)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    addedAt: ").append(toIndentedString(addedAt)).append("\n");
    sb.append("    lastModifiedAt: ").append(toIndentedString(lastModifiedAt)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    deletedAt: ").append(toIndentedString(deletedAt)).append("\n");
    sb.append("    deletedBy: ").append(toIndentedString(deletedBy)).append("\n");
    sb.append("    sharedRootId: ").append(toIndentedString(sharedRootId)).append("\n");
    sb.append("    parents: ").append(toIndentedString(parents)).append("\n");
    sb.append("    users: ").append(toIndentedString(users)).append("\n");
    sb.append("    teams: ").append(toIndentedString(teams)).append("\n");
    sb.append("    isFavorite: ").append(toIndentedString(isFavorite)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    sharelink: ").append(toIndentedString(sharelink)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    lock: ").append(toIndentedString(lock)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    etag: ").append(toIndentedString(etag)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    dropbox: ").append(toIndentedString(dropbox)).append("\n");
    sb.append("    externalImport: ").append(toIndentedString(externalImport)).append("\n");
    sb.append("    rewind: ").append(toIndentedString(rewind)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

