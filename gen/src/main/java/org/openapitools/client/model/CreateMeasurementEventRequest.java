/*
 * LiveFree Health Measurements API
 * The Health Measurements API enables partners to access data from the LiveFree Health Portal.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: engineering@lifebeacon.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CreateMeasurementEventDeviceRequest;
import org.openapitools.client.model.Measurement;
import org.openapitools.client.model.MeasurementEventRaw;
import org.openapitools.client.model.MeasurementEventType;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateMeasurementEventRequest
 */
@JsonPropertyOrder({
  CreateMeasurementEventRequest.JSON_PROPERTY_TYPE,
  CreateMeasurementEventRequest.JSON_PROPERTY_DEVICE,
  CreateMeasurementEventRequest.JSON_PROPERTY_RAW,
  CreateMeasurementEventRequest.JSON_PROPERTY_MEASUREMENTS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:24:30.476705269Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CreateMeasurementEventRequest {
  public static final String JSON_PROPERTY_TYPE = "type";
  private MeasurementEventType type;

  public static final String JSON_PROPERTY_DEVICE = "device";
  private CreateMeasurementEventDeviceRequest device;

  public static final String JSON_PROPERTY_RAW = "raw";
  private MeasurementEventRaw raw;

  public static final String JSON_PROPERTY_MEASUREMENTS = "measurements";
  private List<Measurement> measurements = new ArrayList<>();

  public CreateMeasurementEventRequest() {
  }

  public CreateMeasurementEventRequest type(MeasurementEventType type) {
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MeasurementEventType getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(MeasurementEventType type) {
    this.type = type;
  }


  public CreateMeasurementEventRequest device(CreateMeasurementEventDeviceRequest device) {
    
    this.device = device;
    return this;
  }

   /**
   * Get device
   * @return device
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CreateMeasurementEventDeviceRequest getDevice() {
    return device;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDevice(CreateMeasurementEventDeviceRequest device) {
    this.device = device;
  }


  public CreateMeasurementEventRequest raw(MeasurementEventRaw raw) {
    
    this.raw = raw;
    return this;
  }

   /**
   * Get raw
   * @return raw
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RAW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MeasurementEventRaw getRaw() {
    return raw;
  }


  @JsonProperty(JSON_PROPERTY_RAW)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRaw(MeasurementEventRaw raw) {
    this.raw = raw;
  }


  public CreateMeasurementEventRequest measurements(List<Measurement> measurements) {
    
    this.measurements = measurements;
    return this;
  }

  public CreateMeasurementEventRequest addMeasurementsItem(Measurement measurementsItem) {
    if (this.measurements == null) {
      this.measurements = new ArrayList<>();
    }
    this.measurements.add(measurementsItem);
    return this;
  }

   /**
   * Get measurements
   * @return measurements
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<Measurement> getMeasurements() {
    return measurements;
  }


  @JsonProperty(JSON_PROPERTY_MEASUREMENTS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMeasurements(List<Measurement> measurements) {
    this.measurements = measurements;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateMeasurementEventRequest createMeasurementEventRequest = (CreateMeasurementEventRequest) o;
    return Objects.equals(this.type, createMeasurementEventRequest.type) &&
        Objects.equals(this.device, createMeasurementEventRequest.device) &&
        Objects.equals(this.raw, createMeasurementEventRequest.raw) &&
        Objects.equals(this.measurements, createMeasurementEventRequest.measurements);
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, device, raw, measurements);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateMeasurementEventRequest {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    measurements: ").append(toIndentedString(measurements)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

