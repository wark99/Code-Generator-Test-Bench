/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PackPrice
 */
@JsonPropertyOrder({
  PackPrice.JSON_PROPERTY_ID,
  PackPrice.JSON_PROPERTY_PRICE_EXCLUDING_VAT,
  PackPrice.JSON_PROPERTY_CURRENCY,
  PackPrice.JSON_PROPERTY_PERIODICITY,
  PackPrice.JSON_PROPERTY_PERIODICITY_ID
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PackPrice {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_PRICE_EXCLUDING_VAT = "price_excluding_vat";
  private BigDecimal priceExcludingVat;

  /**
   * The &#x60;PackPrice&#x60; currency
   */
  public enum CurrencyEnum {
    CHF("CHF"),
    
    EUR("EUR");

    private String value;

    CurrencyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CurrencyEnum fromValue(String value) {
      for (CurrencyEnum b : CurrencyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private CurrencyEnum currency;

  /**
   * The &#x60;PackPrice&#x60; time range
   */
  public enum PeriodicityEnum {
    MONTH("MONTH"),
    
    YEAR("YEAR");

    private String value;

    PeriodicityEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PeriodicityEnum fromValue(String value) {
      for (PeriodicityEnum b : PeriodicityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PERIODICITY = "periodicity";
  private PeriodicityEnum periodicity;

  /**
   * Unique identifier of the resource &#x60;Periodicity&#x60;
   */
  public enum PeriodicityIdEnum {
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    PeriodicityIdEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static PeriodicityIdEnum fromValue(Integer value) {
      for (PeriodicityIdEnum b : PeriodicityIdEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_PERIODICITY_ID = "periodicity_id";
  private PeriodicityIdEnum periodicityId;

  public PackPrice() {
  }

  public PackPrice id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;PackPrice&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public PackPrice priceExcludingVat(BigDecimal priceExcludingVat) {
    
    this.priceExcludingVat = priceExcludingVat;
    return this;
  }

   /**
   * The &#x60;PackPrice&#x60; without vat
   * @return priceExcludingVat
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PRICE_EXCLUDING_VAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BigDecimal getPriceExcludingVat() {
    return priceExcludingVat;
  }


  @JsonProperty(JSON_PROPERTY_PRICE_EXCLUDING_VAT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPriceExcludingVat(BigDecimal priceExcludingVat) {
    this.priceExcludingVat = priceExcludingVat;
  }


  public PackPrice currency(CurrencyEnum currency) {
    
    this.currency = currency;
    return this;
  }

   /**
   * The &#x60;PackPrice&#x60; currency
   * @return currency
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CurrencyEnum getCurrency() {
    return currency;
  }


  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCurrency(CurrencyEnum currency) {
    this.currency = currency;
  }


  public PackPrice periodicity(PeriodicityEnum periodicity) {
    
    this.periodicity = periodicity;
    return this;
  }

   /**
   * The &#x60;PackPrice&#x60; time range
   * @return periodicity
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PeriodicityEnum getPeriodicity() {
    return periodicity;
  }


  @JsonProperty(JSON_PROPERTY_PERIODICITY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPeriodicity(PeriodicityEnum periodicity) {
    this.periodicity = periodicity;
  }


  public PackPrice periodicityId(PeriodicityIdEnum periodicityId) {
    
    this.periodicityId = periodicityId;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;Periodicity&#x60;
   * @return periodicityId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERIODICITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public PeriodicityIdEnum getPeriodicityId() {
    return periodicityId;
  }


  @JsonProperty(JSON_PROPERTY_PERIODICITY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPeriodicityId(PeriodicityIdEnum periodicityId) {
    this.periodicityId = periodicityId;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PackPrice packPrice = (PackPrice) o;
    return Objects.equals(this.id, packPrice.id) &&
        Objects.equals(this.priceExcludingVat, packPrice.priceExcludingVat) &&
        Objects.equals(this.currency, packPrice.currency) &&
        Objects.equals(this.periodicity, packPrice.periodicity) &&
        Objects.equals(this.periodicityId, packPrice.periodicityId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, priceExcludingVat, currency, periodicity, periodicityId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PackPrice {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    priceExcludingVat: ").append(toIndentedString(priceExcludingVat)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    periodicity: ").append(toIndentedString(periodicity)).append("\n");
    sb.append("    periodicityId: ").append(toIndentedString(periodicityId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

