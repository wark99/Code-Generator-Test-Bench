/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.LogicalServer;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * PhysicalServer
 */
@JsonPropertyOrder({
  PhysicalServer.JSON_PROPERTY_ID,
  PhysicalServer.JSON_PROPERTY_CPU_DESCRIPTION,
  PhysicalServer.JSON_PROPERTY_MEMORY_DESCRIPTION,
  PhysicalServer.JSON_PROPERTY_STORAGE_DESCRIPTION,
  PhysicalServer.JSON_PROPERTY_MAIN_SERVER,
  PhysicalServer.JSON_PROPERTY_SERVERS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class PhysicalServer {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_CPU_DESCRIPTION = "cpu_description";
  private String cpuDescription;

  public static final String JSON_PROPERTY_MEMORY_DESCRIPTION = "memory_description";
  private String memoryDescription;

  public static final String JSON_PROPERTY_STORAGE_DESCRIPTION = "storage_description";
  private String storageDescription;

  public static final String JSON_PROPERTY_MAIN_SERVER = "main_server";
  private LogicalServer mainServer;

  public static final String JSON_PROPERTY_SERVERS = "servers";
  private List<LogicalServer> servers = new ArrayList<>();

  public PhysicalServer() {
  }

  public PhysicalServer id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;PhysicalServer&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public PhysicalServer cpuDescription(String cpuDescription) {
    
    this.cpuDescription = cpuDescription;
    return this;
  }

   /**
   * Get cpuDescription
   * @return cpuDescription
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CPU_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getCpuDescription() {
    return cpuDescription;
  }


  @JsonProperty(JSON_PROPERTY_CPU_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCpuDescription(String cpuDescription) {
    this.cpuDescription = cpuDescription;
  }


  public PhysicalServer memoryDescription(String memoryDescription) {
    
    this.memoryDescription = memoryDescription;
    return this;
  }

   /**
   * Get memoryDescription
   * @return memoryDescription
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MEMORY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMemoryDescription() {
    return memoryDescription;
  }


  @JsonProperty(JSON_PROPERTY_MEMORY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMemoryDescription(String memoryDescription) {
    this.memoryDescription = memoryDescription;
  }


  public PhysicalServer storageDescription(String storageDescription) {
    
    this.storageDescription = storageDescription;
    return this;
  }

   /**
   * Get storageDescription
   * @return storageDescription
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STORAGE_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getStorageDescription() {
    return storageDescription;
  }


  @JsonProperty(JSON_PROPERTY_STORAGE_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStorageDescription(String storageDescription) {
    this.storageDescription = storageDescription;
  }


  public PhysicalServer mainServer(LogicalServer mainServer) {
    
    this.mainServer = mainServer;
    return this;
  }

   /**
   * Get mainServer
   * @return mainServer
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAIN_SERVER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public LogicalServer getMainServer() {
    return mainServer;
  }


  @JsonProperty(JSON_PROPERTY_MAIN_SERVER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMainServer(LogicalServer mainServer) {
    this.mainServer = mainServer;
  }


  public PhysicalServer servers(List<LogicalServer> servers) {
    
    this.servers = servers;
    return this;
  }

  public PhysicalServer addServersItem(LogicalServer serversItem) {
    if (this.servers == null) {
      this.servers = new ArrayList<>();
    }
    this.servers.add(serversItem);
    return this;
  }

   /**
   * Get servers
   * @return servers
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SERVERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<LogicalServer> getServers() {
    return servers;
  }


  @JsonProperty(JSON_PROPERTY_SERVERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServers(List<LogicalServer> servers) {
    this.servers = servers;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhysicalServer physicalServer = (PhysicalServer) o;
    return Objects.equals(this.id, physicalServer.id) &&
        Objects.equals(this.cpuDescription, physicalServer.cpuDescription) &&
        Objects.equals(this.memoryDescription, physicalServer.memoryDescription) &&
        Objects.equals(this.storageDescription, physicalServer.storageDescription) &&
        Objects.equals(this.mainServer, physicalServer.mainServer) &&
        Objects.equals(this.servers, physicalServer.servers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, cpuDescription, memoryDescription, storageDescription, mainServer, servers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhysicalServer {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    cpuDescription: ").append(toIndentedString(cpuDescription)).append("\n");
    sb.append("    memoryDescription: ").append(toIndentedString(memoryDescription)).append("\n");
    sb.append("    storageDescription: ").append(toIndentedString(storageDescription)).append("\n");
    sb.append("    mainServer: ").append(toIndentedString(mainServer)).append("\n");
    sb.append("    servers: ").append(toIndentedString(servers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

