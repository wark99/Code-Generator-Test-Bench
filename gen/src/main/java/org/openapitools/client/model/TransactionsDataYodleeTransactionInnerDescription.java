/*
 * Customer Authorization API
 *  # Introduction Customer Authorization API The Customer Authorization API is the web service that allows you to exchange your application's `Client ID` and `Client Secret` for an `Access Token`. You will need to use the `accessToken` as authentication for all the other web requests, in the form of a HTTP Header as it follows: ``` Authorization: Bearer {accessToken} ```   Data API The Data API is the web service that allows you to obtain three kinds of data related to your users:    - Bank Account data   - Bank Transactions data   - Credit Score (VS 4.0) data   - Credit Report (VS 4.0) data 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: vs4plus@vantagescore.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * TransactionsDataYodleeTransactionInnerDescription
 */
@JsonPropertyOrder({
  TransactionsDataYodleeTransactionInnerDescription.JSON_PROPERTY_SECURITY,
  TransactionsDataYodleeTransactionInnerDescription.JSON_PROPERTY_ORIGINAL,
  TransactionsDataYodleeTransactionInnerDescription.JSON_PROPERTY_SIMPLE,
  TransactionsDataYodleeTransactionInnerDescription.JSON_PROPERTY_CONSUMER
})
@JsonTypeName("TransactionsDataYodlee_transaction_inner_description")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:26:20.567624608Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class TransactionsDataYodleeTransactionInnerDescription {
  public static final String JSON_PROPERTY_SECURITY = "security";
  private String security;

  public static final String JSON_PROPERTY_ORIGINAL = "original";
  private String original;

  public static final String JSON_PROPERTY_SIMPLE = "simple";
  private String simple;

  public static final String JSON_PROPERTY_CONSUMER = "consumer";
  private String consumer;

  public TransactionsDataYodleeTransactionInnerDescription() {
  }

  public TransactionsDataYodleeTransactionInnerDescription security(String security) {
    
    this.security = security;
    return this;
  }

   /**
   * Get security
   * @return security
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSecurity() {
    return security;
  }


  @JsonProperty(JSON_PROPERTY_SECURITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecurity(String security) {
    this.security = security;
  }


  public TransactionsDataYodleeTransactionInnerDescription original(String original) {
    
    this.original = original;
    return this;
  }

   /**
   * Get original
   * @return original
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ORIGINAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getOriginal() {
    return original;
  }


  @JsonProperty(JSON_PROPERTY_ORIGINAL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOriginal(String original) {
    this.original = original;
  }


  public TransactionsDataYodleeTransactionInnerDescription simple(String simple) {
    
    this.simple = simple;
    return this;
  }

   /**
   * Get simple
   * @return simple
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIMPLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSimple() {
    return simple;
  }


  @JsonProperty(JSON_PROPERTY_SIMPLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSimple(String simple) {
    this.simple = simple;
  }


  public TransactionsDataYodleeTransactionInnerDescription consumer(String consumer) {
    
    this.consumer = consumer;
    return this;
  }

   /**
   * Get consumer
   * @return consumer
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONSUMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getConsumer() {
    return consumer;
  }


  @JsonProperty(JSON_PROPERTY_CONSUMER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConsumer(String consumer) {
    this.consumer = consumer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionsDataYodleeTransactionInnerDescription transactionsDataYodleeTransactionInnerDescription = (TransactionsDataYodleeTransactionInnerDescription) o;
    return Objects.equals(this.security, transactionsDataYodleeTransactionInnerDescription.security) &&
        Objects.equals(this.original, transactionsDataYodleeTransactionInnerDescription.original) &&
        Objects.equals(this.simple, transactionsDataYodleeTransactionInnerDescription.simple) &&
        Objects.equals(this.consumer, transactionsDataYodleeTransactionInnerDescription.consumer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(security, original, simple, consumer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionsDataYodleeTransactionInnerDescription {\n");
    sb.append("    security: ").append(toIndentedString(security)).append("\n");
    sb.append("    original: ").append(toIndentedString(original)).append("\n");
    sb.append("    simple: ").append(toIndentedString(simple)).append("\n");
    sb.append("    consumer: ").append(toIndentedString(consumer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

