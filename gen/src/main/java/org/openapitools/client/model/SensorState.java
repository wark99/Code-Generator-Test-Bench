/*
 * SDANet - OpenAPI 3.1
 * [WIP] API for third-party developers to interact with Anduril's SDANet system.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: nwagner@anduril.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * SensorState
 */
@JsonPropertyOrder({
  SensorState.JSON_PROPERTY_ID_SITE,
  SensorState.JSON_PROPERTY_SITE_TYPE,
  SensorState.JSON_PROPERTY_INST_STATUS,
  SensorState.JSON_PROPERTY_FPCON,
  SensorState.JSON_PROPERTY_HPCON,
  SensorState.JSON_PROPERTY_CPCON,
  SensorState.JSON_PROPERTY_REPORT_TIME,
  SensorState.JSON_PROPERTY_WEATHER_MESSAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:19:53.299039697Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class SensorState {
  public static final String JSON_PROPERTY_ID_SITE = "idSite";
  private String idSite;

  public static final String JSON_PROPERTY_SITE_TYPE = "siteType";
  private String siteType;

  /**
   * The status of the installation.  FMC - Fully Mission Capable   PMC - Partially Mission Capable  NMC - Non Mission Capable  UNK - Unknown.
   */
  public enum InstStatusEnum {
    FMC_PMC_NMC_UNK("FMC PMC NMC UNK");

    private String value;

    InstStatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static InstStatusEnum fromValue(String value) {
      for (InstStatusEnum b : InstStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_INST_STATUS = "instStatus";
  private InstStatusEnum instStatus;

  /**
   * Force Protection Condition (FPCON).    NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.  ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.  BRAVO - Applies when an increased or predictable threat of terrorist activity exists.  CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.  DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
   */
  public enum FpconEnum {
    NORMAL_ALPHA_BRAVO_CHARLIE_DELTA("NORMAL ALPHA BRAVO CHARLIE DELTA");

    private String value;

    FpconEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static FpconEnum fromValue(String value) {
      for (FpconEnum b : FpconEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_FPCON = "fpcon";
  private FpconEnum fpcon;

  /**
   * Health Protection Condition (HPCON).    0 - Routine no community transmission.  ALPHA - Limited community transmission beginning.  BRAVO - Moderate increased community transmission.  CHARLIE - Substantial sustained community transmission.  DELTA - Severe widespread community transmission.
   */
  public enum HpconEnum {
    _0_ALPHA_BRAVO_CHARLIE_DELTA("0 ALPHA BRAVO CHARLIE DELTA");

    private String value;

    HpconEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static HpconEnum fromValue(String value) {
      for (HpconEnum b : HpconEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_HPCON = "hpcon";
  private HpconEnum hpcon;

  /**
   * Cyberspace Protection Condition (CPCON).    1 - VERY HIGH - Critical functions.  2 - HIGH - Critical and essential functions.  3 - MEDIUM - Critical essential and support functions.  4 - LOW - All functions.  5 - VERY LOW - All functions.
   */
  public enum CpconEnum {
    _1_2_3_4_5("1 2 3 4 5");

    private String value;

    CpconEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CpconEnum fromValue(String value) {
      for (CpconEnum b : CpconEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CPCON = "cpcon";
  private CpconEnum cpcon;

  public static final String JSON_PROPERTY_REPORT_TIME = "reportTime";
  private OffsetDateTime reportTime;

  public static final String JSON_PROPERTY_WEATHER_MESSAGE = "weatherMessage";
  private String weatherMessage;

  public SensorState() {
  }

  public SensorState idSite(String idSite) {
    
    this.idSite = idSite;
    return this;
  }

   /**
   * The ID of the site, if this status is associated with a fixed site or platform.
   * @return idSite
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID_SITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getIdSite() {
    return idSite;
  }


  @JsonProperty(JSON_PROPERTY_ID_SITE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdSite(String idSite) {
    this.idSite = idSite;
  }


  public SensorState siteType(String siteType) {
    
    this.siteType = siteType;
    return this;
  }

   /**
   * Optional site type or further detail of type.  Intended for, but not limited to, Link-16 site type specifications (e.g. ADOC, GACC, SOC, TACC, etc.).
   * @return siteType
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SITE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSiteType() {
    return siteType;
  }


  @JsonProperty(JSON_PROPERTY_SITE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSiteType(String siteType) {
    this.siteType = siteType;
  }


  public SensorState instStatus(InstStatusEnum instStatus) {
    
    this.instStatus = instStatus;
    return this;
  }

   /**
   * The status of the installation.  FMC - Fully Mission Capable   PMC - Partially Mission Capable  NMC - Non Mission Capable  UNK - Unknown.
   * @return instStatus
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INST_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public InstStatusEnum getInstStatus() {
    return instStatus;
  }


  @JsonProperty(JSON_PROPERTY_INST_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInstStatus(InstStatusEnum instStatus) {
    this.instStatus = instStatus;
  }


  public SensorState fpcon(FpconEnum fpcon) {
    
    this.fpcon = fpcon;
    return this;
  }

   /**
   * Force Protection Condition (FPCON).    NORMAL - Applies when a general global threat of possible terrorist activity exists and warrants a routine security posture.  ALPHA - Applies when an increased general threat of possible terrorist activity against personnel or facilities. Nature and extent of threat are unpredictable.  BRAVO - Applies when an increased or predictable threat of terrorist activity exists.  CHARLIE - Applies when an incident occurs or intelligence is received indicating some form of terrorist action against personnel and facilities is imminent.  DELTA - Applies in the immediate area where an attack has occurred or when intelligence is received indicating terrorist action against a location is imminent.
   * @return fpcon
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FPCON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public FpconEnum getFpcon() {
    return fpcon;
  }


  @JsonProperty(JSON_PROPERTY_FPCON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFpcon(FpconEnum fpcon) {
    this.fpcon = fpcon;
  }


  public SensorState hpcon(HpconEnum hpcon) {
    
    this.hpcon = hpcon;
    return this;
  }

   /**
   * Health Protection Condition (HPCON).    0 - Routine no community transmission.  ALPHA - Limited community transmission beginning.  BRAVO - Moderate increased community transmission.  CHARLIE - Substantial sustained community transmission.  DELTA - Severe widespread community transmission.
   * @return hpcon
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HPCON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public HpconEnum getHpcon() {
    return hpcon;
  }


  @JsonProperty(JSON_PROPERTY_HPCON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHpcon(HpconEnum hpcon) {
    this.hpcon = hpcon;
  }


  public SensorState cpcon(CpconEnum cpcon) {
    
    this.cpcon = cpcon;
    return this;
  }

   /**
   * Cyberspace Protection Condition (CPCON).    1 - VERY HIGH - Critical functions.  2 - HIGH - Critical and essential functions.  3 - MEDIUM - Critical essential and support functions.  4 - LOW - All functions.  5 - VERY LOW - All functions.
   * @return cpcon
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CPCON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public CpconEnum getCpcon() {
    return cpcon;
  }


  @JsonProperty(JSON_PROPERTY_CPCON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCpcon(CpconEnum cpcon) {
    this.cpcon = cpcon;
  }


  public SensorState reportTime(OffsetDateTime reportTime) {
    
    this.reportTime = reportTime;
    return this;
  }

   /**
   * Time of report in ISO8601 UTC format.
   * @return reportTime
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REPORT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getReportTime() {
    return reportTime;
  }


  @JsonProperty(JSON_PROPERTY_REPORT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportTime(OffsetDateTime reportTime) {
    this.reportTime = reportTime;
  }


  public SensorState weatherMessage(String weatherMessage) {
    
    this.weatherMessage = weatherMessage;
    return this;
  }

   /**
   * Description of the current weather conditions over a site.
   * @return weatherMessage
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEATHER_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWeatherMessage() {
    return weatherMessage;
  }


  @JsonProperty(JSON_PROPERTY_WEATHER_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWeatherMessage(String weatherMessage) {
    this.weatherMessage = weatherMessage;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SensorState sensorState = (SensorState) o;
    return Objects.equals(this.idSite, sensorState.idSite) &&
        Objects.equals(this.siteType, sensorState.siteType) &&
        Objects.equals(this.instStatus, sensorState.instStatus) &&
        Objects.equals(this.fpcon, sensorState.fpcon) &&
        Objects.equals(this.hpcon, sensorState.hpcon) &&
        Objects.equals(this.cpcon, sensorState.cpcon) &&
        Objects.equals(this.reportTime, sensorState.reportTime) &&
        Objects.equals(this.weatherMessage, sensorState.weatherMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(idSite, siteType, instStatus, fpcon, hpcon, cpcon, reportTime, weatherMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SensorState {\n");
    sb.append("    idSite: ").append(toIndentedString(idSite)).append("\n");
    sb.append("    siteType: ").append(toIndentedString(siteType)).append("\n");
    sb.append("    instStatus: ").append(toIndentedString(instStatus)).append("\n");
    sb.append("    fpcon: ").append(toIndentedString(fpcon)).append("\n");
    sb.append("    hpcon: ").append(toIndentedString(hpcon)).append("\n");
    sb.append("    cpcon: ").append(toIndentedString(cpcon)).append("\n");
    sb.append("    reportTime: ").append(toIndentedString(reportTime)).append("\n");
    sb.append("    weatherMessage: ").append(toIndentedString(weatherMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

