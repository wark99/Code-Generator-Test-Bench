/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * RequestBody12
 */
@JsonPropertyOrder({
  RequestBody12.JSON_PROPERTY_BITRATE,
  RequestBody12.JSON_PROPERTY_CODEC
})
@JsonTypeName("Request_body_12")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class RequestBody12 {
  /**
   * Specify the bitrate for the new stream
   */
  public enum BitrateEnum {
    NUMBER_24(24),
    
    NUMBER_32(32),
    
    NUMBER_48(48),
    
    NUMBER_64(64),
    
    NUMBER_96(96),
    
    NUMBER_128(128),
    
    NUMBER_192(192),
    
    NUMBER_256(256),
    
    NUMBER_320(320),
    
    NUMBER_512(512);

    private Integer value;

    BitrateEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static BitrateEnum fromValue(Integer value) {
      for (BitrateEnum b : BitrateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_BITRATE = "bitrate";
  private BitrateEnum bitrate;

  /**
   * Specify the codec for the new stream
   */
  public enum CodecEnum {
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4);

    private Integer value;

    CodecEnum(Integer value) {
      this.value = value;
    }

    @JsonValue
    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodecEnum fromValue(Integer value) {
      for (CodecEnum b : CodecEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CODEC = "codec";
  private CodecEnum codec;

  public RequestBody12() {
  }

  public RequestBody12 bitrate(BitrateEnum bitrate) {
    
    this.bitrate = bitrate;
    return this;
  }

   /**
   * Specify the bitrate for the new stream
   * @return bitrate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public BitrateEnum getBitrate() {
    return bitrate;
  }


  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBitrate(BitrateEnum bitrate) {
    this.bitrate = bitrate;
  }


  public RequestBody12 codec(CodecEnum codec) {
    
    this.codec = codec;
    return this;
  }

   /**
   * Specify the codec for the new stream
   * @return codec
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public CodecEnum getCodec() {
    return codec;
  }


  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCodec(CodecEnum codec) {
    this.codec = codec;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RequestBody12 requestBody12 = (RequestBody12) o;
    return Objects.equals(this.bitrate, requestBody12.bitrate) &&
        Objects.equals(this.codec, requestBody12.codec);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bitrate, codec);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RequestBody12 {\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

