/*
 * AIRBIT IoT Workspace REST API
 * This API is intended to work with the application **AIRBIT IoT Workspace** .
 *
 * The version of the OpenAPI document: 2.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Comment3;
import org.openapitools.client.model.Expression;
import org.openapitools.client.model.MetricType;
import org.openapitools.client.model.MetricValues;
import org.openapitools.client.model.Unit3;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ObjectMetricScheme
 */
@JsonPropertyOrder({
  ObjectMetricScheme.JSON_PROPERTY_ID,
  ObjectMetricScheme.JSON_PROPERTY_MAIN,
  ObjectMetricScheme.JSON_PROPERTY_NAME,
  ObjectMetricScheme.JSON_PROPERTY_COMMENT,
  ObjectMetricScheme.JSON_PROPERTY_SLUG,
  ObjectMetricScheme.JSON_PROPERTY_UNIT,
  ObjectMetricScheme.JSON_PROPERTY_METRIC_TYPE,
  ObjectMetricScheme.JSON_PROPERTY_NUM_EXPR,
  ObjectMetricScheme.JSON_PROPERTY_OMV
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:23:05.417254227Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ObjectMetricScheme {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_MAIN = "main";
  private Boolean main = false;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_COMMENT = "comment";
  private Comment3 comment;

  public static final String JSON_PROPERTY_SLUG = "slug";
  private String slug;

  public static final String JSON_PROPERTY_UNIT = "unit";
  private Unit3 unit;

  public static final String JSON_PROPERTY_METRIC_TYPE = "metric_type";
  private MetricType metricType;

  public static final String JSON_PROPERTY_NUM_EXPR = "num_expr";
  private Expression numExpr;

  public static final String JSON_PROPERTY_OMV = "omv";
  private MetricValues omv;

  public ObjectMetricScheme() {
  }

  public ObjectMetricScheme id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * unique metric id
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public ObjectMetricScheme main(Boolean main) {
    
    this.main = main;
    return this;
  }

   /**
   * main
   * @return main
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getMain() {
    return main;
  }


  @JsonProperty(JSON_PROPERTY_MAIN)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMain(Boolean main) {
    this.main = main;
  }


  public ObjectMetricScheme name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * metric name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ObjectMetricScheme comment(Comment3 comment) {
    
    this.comment = comment;
    return this;
  }

   /**
   * Get comment
   * @return comment
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Comment3 getComment() {
    return comment;
  }


  @JsonProperty(JSON_PROPERTY_COMMENT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setComment(Comment3 comment) {
    this.comment = comment;
  }


  public ObjectMetricScheme slug(String slug) {
    
    this.slug = slug;
    return this;
  }

   /**
   * metric slug
   * @return slug
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SLUG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getSlug() {
    return slug;
  }


  @JsonProperty(JSON_PROPERTY_SLUG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSlug(String slug) {
    this.slug = slug;
  }


  public ObjectMetricScheme unit(Unit3 unit) {
    
    this.unit = unit;
    return this;
  }

   /**
   * Get unit
   * @return unit
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Unit3 getUnit() {
    return unit;
  }


  @JsonProperty(JSON_PROPERTY_UNIT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUnit(Unit3 unit) {
    this.unit = unit;
  }


  public ObjectMetricScheme metricType(MetricType metricType) {
    
    this.metricType = metricType;
    return this;
  }

   /**
   * metric type (1 - Constant, 2 - Device, 3 - Expression)
   * @return metricType
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METRIC_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MetricType getMetricType() {
    return metricType;
  }


  @JsonProperty(JSON_PROPERTY_METRIC_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMetricType(MetricType metricType) {
    this.metricType = metricType;
  }


  public ObjectMetricScheme numExpr(Expression numExpr) {
    
    this.numExpr = numExpr;
    return this;
  }

   /**
   * Get numExpr
   * @return numExpr
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NUM_EXPR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Expression getNumExpr() {
    return numExpr;
  }


  @JsonProperty(JSON_PROPERTY_NUM_EXPR)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNumExpr(Expression numExpr) {
    this.numExpr = numExpr;
  }


  public ObjectMetricScheme omv(MetricValues omv) {
    
    this.omv = omv;
    return this;
  }

   /**
   * Get omv
   * @return omv
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_OMV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public MetricValues getOmv() {
    return omv;
  }


  @JsonProperty(JSON_PROPERTY_OMV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setOmv(MetricValues omv) {
    this.omv = omv;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ObjectMetricScheme objectMetricScheme = (ObjectMetricScheme) o;
    return Objects.equals(this.id, objectMetricScheme.id) &&
        Objects.equals(this.main, objectMetricScheme.main) &&
        Objects.equals(this.name, objectMetricScheme.name) &&
        Objects.equals(this.comment, objectMetricScheme.comment) &&
        Objects.equals(this.slug, objectMetricScheme.slug) &&
        Objects.equals(this.unit, objectMetricScheme.unit) &&
        Objects.equals(this.metricType, objectMetricScheme.metricType) &&
        Objects.equals(this.numExpr, objectMetricScheme.numExpr) &&
        Objects.equals(this.omv, objectMetricScheme.omv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, main, name, comment, slug, unit, metricType, numExpr, omv);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ObjectMetricScheme {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    main: ").append(toIndentedString(main)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    metricType: ").append(toIndentedString(metricType)).append("\n");
    sb.append("    numExpr: ").append(toIndentedString(numExpr)).append("\n");
    sb.append("    omv: ").append(toIndentedString(omv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

