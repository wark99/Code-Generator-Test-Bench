/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * StreamStored
 */
@JsonPropertyOrder({
  StreamStored.JSON_PROPERTY_ID,
  StreamStored.JSON_PROPERTY_MOUNTPOINT,
  StreamStored.JSON_PROPERTY_CODEC,
  StreamStored.JSON_PROPERTY_BITRATE,
  StreamStored.JSON_PROPERTY_PASSWORD,
  StreamStored.JSON_PROPERTY_URL,
  StreamStored.JSON_PROPERTY_SERVER_ADDRESS,
  StreamStored.JSON_PROPERTY_FALLBACK_MOUNTPOINT,
  StreamStored.JSON_PROPERTY_IS_RELAY,
  StreamStored.JSON_PROPERTY_IS_SOURCE,
  StreamStored.JSON_PROPERTY_IS_TRANSCODING,
  StreamStored.JSON_PROPERTY_IS_FALLBACK
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class StreamStored {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_MOUNTPOINT = "mountpoint";
  private String mountpoint;

  public static final String JSON_PROPERTY_CODEC = "codec";
  private Integer codec;

  public static final String JSON_PROPERTY_BITRATE = "bitrate";
  private Integer bitrate;

  public static final String JSON_PROPERTY_PASSWORD = "password";
  private String password;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_SERVER_ADDRESS = "server_address";
  private String serverAddress;

  public static final String JSON_PROPERTY_FALLBACK_MOUNTPOINT = "fallback_mountpoint";
  private String fallbackMountpoint;

  public static final String JSON_PROPERTY_IS_RELAY = "is_relay";
  private Boolean isRelay;

  public static final String JSON_PROPERTY_IS_SOURCE = "is_source";
  private Boolean isSource;

  public static final String JSON_PROPERTY_IS_TRANSCODING = "is_transcoding";
  private Boolean isTranscoding;

  public static final String JSON_PROPERTY_IS_FALLBACK = "is_fallback";
  private Boolean isFallback;

  public StreamStored() {
  }

  public StreamStored id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;Stream&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public StreamStored mountpoint(String mountpoint) {
    
    this.mountpoint = mountpoint;
    return this;
  }

   /**
   * The mountpoint to access to the stream
   * @return mountpoint
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MOUNTPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMountpoint() {
    return mountpoint;
  }


  @JsonProperty(JSON_PROPERTY_MOUNTPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMountpoint(String mountpoint) {
    this.mountpoint = mountpoint;
  }


  public StreamStored codec(Integer codec) {
    
    this.codec = codec;
    return this;
  }

   /**
   * The codec used in the stream
   * @return codec
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCodec() {
    return codec;
  }


  @JsonProperty(JSON_PROPERTY_CODEC)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCodec(Integer codec) {
    this.codec = codec;
  }


  public StreamStored bitrate(Integer bitrate) {
    
    this.bitrate = bitrate;
    return this;
  }

   /**
   * The bitrate used to in the stream
   * @return bitrate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getBitrate() {
    return bitrate;
  }


  @JsonProperty(JSON_PROPERTY_BITRATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBitrate(Integer bitrate) {
    this.bitrate = bitrate;
  }


  public StreamStored password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * The password to access to the protected pages
   * @return password
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getPassword() {
    return password;
  }


  @JsonProperty(JSON_PROPERTY_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPassword(String password) {
    this.password = password;
  }


  public StreamStored url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * The url to listen the stream
   * @return url
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }


  public StreamStored serverAddress(String serverAddress) {
    
    this.serverAddress = serverAddress;
    return this;
  }

   /**
   * The server address to connect encoder
   * @return serverAddress
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SERVER_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getServerAddress() {
    return serverAddress;
  }


  @JsonProperty(JSON_PROPERTY_SERVER_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setServerAddress(String serverAddress) {
    this.serverAddress = serverAddress;
  }


  public StreamStored fallbackMountpoint(String fallbackMountpoint) {
    
    this.fallbackMountpoint = fallbackMountpoint;
    return this;
  }

   /**
   * The mountpoint used to fallback the stream
   * @return fallbackMountpoint
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FALLBACK_MOUNTPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getFallbackMountpoint() {
    return fallbackMountpoint;
  }


  @JsonProperty(JSON_PROPERTY_FALLBACK_MOUNTPOINT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFallbackMountpoint(String fallbackMountpoint) {
    this.fallbackMountpoint = fallbackMountpoint;
  }


  public StreamStored isRelay(Boolean isRelay) {
    
    this.isRelay = isRelay;
    return this;
  }

   /**
   * Define if the stream is a relay stream
   * @return isRelay
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_RELAY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsRelay() {
    return isRelay;
  }


  @JsonProperty(JSON_PROPERTY_IS_RELAY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsRelay(Boolean isRelay) {
    this.isRelay = isRelay;
  }


  public StreamStored isSource(Boolean isSource) {
    
    this.isSource = isSource;
    return this;
  }

   /**
   * Define if the stream is used like a source for HlsStream or Transcoding
   * @return isSource
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsSource() {
    return isSource;
  }


  @JsonProperty(JSON_PROPERTY_IS_SOURCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsSource(Boolean isSource) {
    this.isSource = isSource;
  }


  public StreamStored isTranscoding(Boolean isTranscoding) {
    
    this.isTranscoding = isTranscoding;
    return this;
  }

   /**
   * Define if the stream is a transcoded stream
   * @return isTranscoding
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_TRANSCODING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsTranscoding() {
    return isTranscoding;
  }


  @JsonProperty(JSON_PROPERTY_IS_TRANSCODING)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsTranscoding(Boolean isTranscoding) {
    this.isTranscoding = isTranscoding;
  }


  public StreamStored isFallback(Boolean isFallback) {
    
    this.isFallback = isFallback;
    return this;
  }

   /**
   * Is the &#x60;Stream&#x60; is a fallback?
   * @return isFallback
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_FALLBACK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsFallback() {
    return isFallback;
  }


  @JsonProperty(JSON_PROPERTY_IS_FALLBACK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsFallback(Boolean isFallback) {
    this.isFallback = isFallback;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StreamStored streamStored = (StreamStored) o;
    return Objects.equals(this.id, streamStored.id) &&
        Objects.equals(this.mountpoint, streamStored.mountpoint) &&
        Objects.equals(this.codec, streamStored.codec) &&
        Objects.equals(this.bitrate, streamStored.bitrate) &&
        Objects.equals(this.password, streamStored.password) &&
        Objects.equals(this.url, streamStored.url) &&
        Objects.equals(this.serverAddress, streamStored.serverAddress) &&
        Objects.equals(this.fallbackMountpoint, streamStored.fallbackMountpoint) &&
        Objects.equals(this.isRelay, streamStored.isRelay) &&
        Objects.equals(this.isSource, streamStored.isSource) &&
        Objects.equals(this.isTranscoding, streamStored.isTranscoding) &&
        Objects.equals(this.isFallback, streamStored.isFallback);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, mountpoint, codec, bitrate, password, url, serverAddress, fallbackMountpoint, isRelay, isSource, isTranscoding, isFallback);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StreamStored {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    mountpoint: ").append(toIndentedString(mountpoint)).append("\n");
    sb.append("    codec: ").append(toIndentedString(codec)).append("\n");
    sb.append("    bitrate: ").append(toIndentedString(bitrate)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    serverAddress: ").append(toIndentedString(serverAddress)).append("\n");
    sb.append("    fallbackMountpoint: ").append(toIndentedString(fallbackMountpoint)).append("\n");
    sb.append("    isRelay: ").append(toIndentedString(isRelay)).append("\n");
    sb.append("    isSource: ").append(toIndentedString(isSource)).append("\n");
    sb.append("    isTranscoding: ").append(toIndentedString(isTranscoding)).append("\n");
    sb.append("    isFallback: ").append(toIndentedString(isFallback)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

