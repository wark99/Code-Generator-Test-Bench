/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ObbDateRangeAndAmount;
import org.openapitools.client.model.ObbDateRangeAndCount;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Outflow attributes
 */
@JsonPropertyOrder({
  CashFlowOutflowAttributes.JSON_PROPERTY_AVERAGE_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowOutflowAttributes.JSON_PROPERTY_COUNT_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowOutflowAttributes.JSON_PROPERTY_HISTORIC_COUNT_OF_WITHDRAWAL_TRANSACTIONS,
  CashFlowOutflowAttributes.JSON_PROPERTY_HISTORIC_SUM_OF_WITHDRAWALS,
  CashFlowOutflowAttributes.JSON_PROPERTY_MAXIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowOutflowAttributes.JSON_PROPERTY_MINIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD,
  CashFlowOutflowAttributes.JSON_PROPERTY_SUM_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:12:42.105719365Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class CashFlowOutflowAttributes {
  public static final String JSON_PROPERTY_AVERAGE_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "averageWithdrawalByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> averageWithdrawalByMonthForTheReportTimePeriod;

  public static final String JSON_PROPERTY_COUNT_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "countWithdrawalsByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndCount> countWithdrawalsByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_HISTORIC_COUNT_OF_WITHDRAWAL_TRANSACTIONS = "historicCountOfWithdrawalTransactions";
  private Integer historicCountOfWithdrawalTransactions;

  public static final String JSON_PROPERTY_HISTORIC_SUM_OF_WITHDRAWALS = "historicSumOfWithdrawals";
  private BigDecimal historicSumOfWithdrawals;

  public static final String JSON_PROPERTY_MAXIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "maximumWithdrawalByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> maximumWithdrawalByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_MINIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "minimumWithdrawalByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> minimumWithdrawalByMonthForTheReportTimePeriod = new ArrayList<>();

  public static final String JSON_PROPERTY_SUM_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD = "sumWithdrawalsByMonthForTheReportTimePeriod";
  private List<ObbDateRangeAndAmount> sumWithdrawalsByMonthForTheReportTimePeriod = new ArrayList<>();

  public CashFlowOutflowAttributes() {
  }

  public CashFlowOutflowAttributes averageWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageWithdrawalByMonthForTheReportTimePeriod) {
    
    this.averageWithdrawalByMonthForTheReportTimePeriod = averageWithdrawalByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addAverageWithdrawalByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount averageWithdrawalByMonthForTheReportTimePeriodItem) {
    if (this.averageWithdrawalByMonthForTheReportTimePeriod == null) {
      this.averageWithdrawalByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.averageWithdrawalByMonthForTheReportTimePeriod.add(averageWithdrawalByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Average value of withdrawals during periods in the report
   * @return averageWithdrawalByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AVERAGE_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<ObbDateRangeAndAmount> getAverageWithdrawalByMonthForTheReportTimePeriod() {
    return averageWithdrawalByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_AVERAGE_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAverageWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> averageWithdrawalByMonthForTheReportTimePeriod) {
    this.averageWithdrawalByMonthForTheReportTimePeriod = averageWithdrawalByMonthForTheReportTimePeriod;
  }


  public CashFlowOutflowAttributes countWithdrawalsByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countWithdrawalsByMonthForTheReportTimePeriod) {
    
    this.countWithdrawalsByMonthForTheReportTimePeriod = countWithdrawalsByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addCountWithdrawalsByMonthForTheReportTimePeriodItem(ObbDateRangeAndCount countWithdrawalsByMonthForTheReportTimePeriodItem) {
    if (this.countWithdrawalsByMonthForTheReportTimePeriod == null) {
      this.countWithdrawalsByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.countWithdrawalsByMonthForTheReportTimePeriod.add(countWithdrawalsByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Count of all withdrawals during periods in the report
   * @return countWithdrawalsByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COUNT_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndCount> getCountWithdrawalsByMonthForTheReportTimePeriod() {
    return countWithdrawalsByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_COUNT_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCountWithdrawalsByMonthForTheReportTimePeriod(List<ObbDateRangeAndCount> countWithdrawalsByMonthForTheReportTimePeriod) {
    this.countWithdrawalsByMonthForTheReportTimePeriod = countWithdrawalsByMonthForTheReportTimePeriod;
  }


  public CashFlowOutflowAttributes historicCountOfWithdrawalTransactions(Integer historicCountOfWithdrawalTransactions) {
    
    this.historicCountOfWithdrawalTransactions = historicCountOfWithdrawalTransactions;
    return this;
  }

   /**
   * Count of ALL withdrawals over entire known history of the account (may exceed requested length of report)
   * @return historicCountOfWithdrawalTransactions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HISTORIC_COUNT_OF_WITHDRAWAL_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getHistoricCountOfWithdrawalTransactions() {
    return historicCountOfWithdrawalTransactions;
  }


  @JsonProperty(JSON_PROPERTY_HISTORIC_COUNT_OF_WITHDRAWAL_TRANSACTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHistoricCountOfWithdrawalTransactions(Integer historicCountOfWithdrawalTransactions) {
    this.historicCountOfWithdrawalTransactions = historicCountOfWithdrawalTransactions;
  }


  public CashFlowOutflowAttributes historicSumOfWithdrawals(BigDecimal historicSumOfWithdrawals) {
    
    this.historicSumOfWithdrawals = historicSumOfWithdrawals;
    return this;
  }

   /**
   * Sum of ALL withdrawals over entire known history of the account (may exceed requested length of report)
   * @return historicSumOfWithdrawals
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HISTORIC_SUM_OF_WITHDRAWALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public BigDecimal getHistoricSumOfWithdrawals() {
    return historicSumOfWithdrawals;
  }


  @JsonProperty(JSON_PROPERTY_HISTORIC_SUM_OF_WITHDRAWALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHistoricSumOfWithdrawals(BigDecimal historicSumOfWithdrawals) {
    this.historicSumOfWithdrawals = historicSumOfWithdrawals;
  }


  public CashFlowOutflowAttributes maximumWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumWithdrawalByMonthForTheReportTimePeriod) {
    
    this.maximumWithdrawalByMonthForTheReportTimePeriod = maximumWithdrawalByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addMaximumWithdrawalByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount maximumWithdrawalByMonthForTheReportTimePeriodItem) {
    if (this.maximumWithdrawalByMonthForTheReportTimePeriod == null) {
      this.maximumWithdrawalByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.maximumWithdrawalByMonthForTheReportTimePeriod.add(maximumWithdrawalByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Maximum withdrawal value for different periods in the report
   * @return maximumWithdrawalByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MAXIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndAmount> getMaximumWithdrawalByMonthForTheReportTimePeriod() {
    return maximumWithdrawalByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_MAXIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMaximumWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> maximumWithdrawalByMonthForTheReportTimePeriod) {
    this.maximumWithdrawalByMonthForTheReportTimePeriod = maximumWithdrawalByMonthForTheReportTimePeriod;
  }


  public CashFlowOutflowAttributes minimumWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumWithdrawalByMonthForTheReportTimePeriod) {
    
    this.minimumWithdrawalByMonthForTheReportTimePeriod = minimumWithdrawalByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addMinimumWithdrawalByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount minimumWithdrawalByMonthForTheReportTimePeriodItem) {
    if (this.minimumWithdrawalByMonthForTheReportTimePeriod == null) {
      this.minimumWithdrawalByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.minimumWithdrawalByMonthForTheReportTimePeriod.add(minimumWithdrawalByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Minimum withdrawal value for different periods in the report
   * @return minimumWithdrawalByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MINIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndAmount> getMinimumWithdrawalByMonthForTheReportTimePeriod() {
    return minimumWithdrawalByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_MINIMUM_WITHDRAWAL_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMinimumWithdrawalByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> minimumWithdrawalByMonthForTheReportTimePeriod) {
    this.minimumWithdrawalByMonthForTheReportTimePeriod = minimumWithdrawalByMonthForTheReportTimePeriod;
  }


  public CashFlowOutflowAttributes sumWithdrawalsByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> sumWithdrawalsByMonthForTheReportTimePeriod) {
    
    this.sumWithdrawalsByMonthForTheReportTimePeriod = sumWithdrawalsByMonthForTheReportTimePeriod;
    return this;
  }

  public CashFlowOutflowAttributes addSumWithdrawalsByMonthForTheReportTimePeriodItem(ObbDateRangeAndAmount sumWithdrawalsByMonthForTheReportTimePeriodItem) {
    if (this.sumWithdrawalsByMonthForTheReportTimePeriod == null) {
      this.sumWithdrawalsByMonthForTheReportTimePeriod = new ArrayList<>();
    }
    this.sumWithdrawalsByMonthForTheReportTimePeriod.add(sumWithdrawalsByMonthForTheReportTimePeriodItem);
    return this;
  }

   /**
   * Sum of all withdrawals during periods in the report
   * @return sumWithdrawalsByMonthForTheReportTimePeriod
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUM_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<ObbDateRangeAndAmount> getSumWithdrawalsByMonthForTheReportTimePeriod() {
    return sumWithdrawalsByMonthForTheReportTimePeriod;
  }


  @JsonProperty(JSON_PROPERTY_SUM_WITHDRAWALS_BY_MONTH_FOR_THE_REPORT_TIME_PERIOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSumWithdrawalsByMonthForTheReportTimePeriod(List<ObbDateRangeAndAmount> sumWithdrawalsByMonthForTheReportTimePeriod) {
    this.sumWithdrawalsByMonthForTheReportTimePeriod = sumWithdrawalsByMonthForTheReportTimePeriod;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CashFlowOutflowAttributes cashFlowOutflowAttributes = (CashFlowOutflowAttributes) o;
    return Objects.equals(this.averageWithdrawalByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.averageWithdrawalByMonthForTheReportTimePeriod) &&
        Objects.equals(this.countWithdrawalsByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.countWithdrawalsByMonthForTheReportTimePeriod) &&
        Objects.equals(this.historicCountOfWithdrawalTransactions, cashFlowOutflowAttributes.historicCountOfWithdrawalTransactions) &&
        Objects.equals(this.historicSumOfWithdrawals, cashFlowOutflowAttributes.historicSumOfWithdrawals) &&
        Objects.equals(this.maximumWithdrawalByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.maximumWithdrawalByMonthForTheReportTimePeriod) &&
        Objects.equals(this.minimumWithdrawalByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.minimumWithdrawalByMonthForTheReportTimePeriod) &&
        Objects.equals(this.sumWithdrawalsByMonthForTheReportTimePeriod, cashFlowOutflowAttributes.sumWithdrawalsByMonthForTheReportTimePeriod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageWithdrawalByMonthForTheReportTimePeriod, countWithdrawalsByMonthForTheReportTimePeriod, historicCountOfWithdrawalTransactions, historicSumOfWithdrawals, maximumWithdrawalByMonthForTheReportTimePeriod, minimumWithdrawalByMonthForTheReportTimePeriod, sumWithdrawalsByMonthForTheReportTimePeriod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CashFlowOutflowAttributes {\n");
    sb.append("    averageWithdrawalByMonthForTheReportTimePeriod: ").append(toIndentedString(averageWithdrawalByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    countWithdrawalsByMonthForTheReportTimePeriod: ").append(toIndentedString(countWithdrawalsByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    historicCountOfWithdrawalTransactions: ").append(toIndentedString(historicCountOfWithdrawalTransactions)).append("\n");
    sb.append("    historicSumOfWithdrawals: ").append(toIndentedString(historicSumOfWithdrawals)).append("\n");
    sb.append("    maximumWithdrawalByMonthForTheReportTimePeriod: ").append(toIndentedString(maximumWithdrawalByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    minimumWithdrawalByMonthForTheReportTimePeriod: ").append(toIndentedString(minimumWithdrawalByMonthForTheReportTimePeriod)).append("\n");
    sb.append("    sumWithdrawalsByMonthForTheReportTimePeriod: ").append(toIndentedString(sumWithdrawalsByMonthForTheReportTimePeriod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

