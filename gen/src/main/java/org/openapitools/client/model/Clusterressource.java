/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Clusterressource
 */
@JsonPropertyOrder({
  Clusterressource.JSON_PROPERTY_LOCATIONS,
  Clusterressource.JSON_PROPERTY_RESOLUTIONS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class Clusterressource {
  public static final String JSON_PROPERTY_LOCATIONS = "locations";
  private List<String> locations = new ArrayList<>();

  public static final String JSON_PROPERTY_RESOLUTIONS = "resolutions";
  private List<String> resolutions = new ArrayList<>();

  public Clusterressource() {
  }

  public Clusterressource locations(List<String> locations) {
    
    this.locations = locations;
    return this;
  }

  public Clusterressource addLocationsItem(String locationsItem) {
    if (this.locations == null) {
      this.locations = new ArrayList<>();
    }
    this.locations.add(locationsItem);
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getLocations() {
    return locations;
  }


  @JsonProperty(JSON_PROPERTY_LOCATIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLocations(List<String> locations) {
    this.locations = locations;
  }


  public Clusterressource resolutions(List<String> resolutions) {
    
    this.resolutions = resolutions;
    return this;
  }

  public Clusterressource addResolutionsItem(String resolutionsItem) {
    if (this.resolutions == null) {
      this.resolutions = new ArrayList<>();
    }
    this.resolutions.add(resolutionsItem);
    return this;
  }

   /**
   * Get resolutions
   * @return resolutions
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RESOLUTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getResolutions() {
    return resolutions;
  }


  @JsonProperty(JSON_PROPERTY_RESOLUTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setResolutions(List<String> resolutions) {
    this.resolutions = resolutions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Clusterressource clusterressource = (Clusterressource) o;
    return Objects.equals(this.locations, clusterressource.locations) &&
        Objects.equals(this.resolutions, clusterressource.resolutions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(locations, resolutions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Clusterressource {\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    resolutions: ").append(toIndentedString(resolutions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

