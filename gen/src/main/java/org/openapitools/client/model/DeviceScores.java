/*
 * Open Banking
 * OpenAPI specification for Finicity APIs.  Open Banking solutions in the US are provided by Finicity, a Mastercard company.
 *
 * The version of the OpenAPI document: 1.21.3
 * Contact: apisupport@mastercard.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * Scores that were calculated by analyzing the provided device data.
 */
@JsonPropertyOrder({
  DeviceScores.JSON_PROPERTY_DEVICE_RISK_FACTOR,
  DeviceScores.JSON_PROPERTY_DEVICE_INSIGHT_FACTOR,
  DeviceScores.JSON_PROPERTY_DEVICE_TRUST_FACTOR
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:05:06.990716937Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class DeviceScores {
  public static final String JSON_PROPERTY_DEVICE_RISK_FACTOR = "deviceRiskFactor";
  private Integer deviceRiskFactor;

  public static final String JSON_PROPERTY_DEVICE_INSIGHT_FACTOR = "deviceInsightFactor";
  private Integer deviceInsightFactor;

  public static final String JSON_PROPERTY_DEVICE_TRUST_FACTOR = "deviceTrustFactor";
  private Integer deviceTrustFactor;

  public DeviceScores() {
  }

  public DeviceScores deviceRiskFactor(Integer deviceRiskFactor) {
    
    this.deviceRiskFactor = deviceRiskFactor;
    return this;
  }

   /**
   * The calculated risk factor is represented numerically using a range from 1 (no/low risk) to 5 (high risk). Each numerical value and it&#39;s associated risk representation is shown below.   * &#x60;1&#x60; - Represents a no or low risk request.   * &#x60;2&#x60; - Represents a low risk request.   * &#x60;3&#x60; - Represents a medium risk request.   * &#x60;4&#x60; - Represents a high risk request.   * &#x60;5&#x60; - Represents a very high risk request.  The calculated risk factor is typically used to identify scenarios where a service provider may want to introduce consumer friction on the authorization process to validate the identity of the consumer. Example usage by a service provider may be to implement controls such as multifactor authentication for calculated risk factors of &#x60;3&#x60; or &#x60;4&#x60; and request blocking for risk factors of &#x60;5&#x60;.
   * minimum: 1
   * maximum: 5
   * @return deviceRiskFactor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_RISK_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDeviceRiskFactor() {
    return deviceRiskFactor;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_RISK_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceRiskFactor(Integer deviceRiskFactor) {
    this.deviceRiskFactor = deviceRiskFactor;
  }


  public DeviceScores deviceInsightFactor(Integer deviceInsightFactor) {
    
    this.deviceInsightFactor = deviceInsightFactor;
    return this;
  }

   /**
   * The calculated device risk is represented numerically using a range from 1 (no/low risk) to 5 (high risk). Each numerical value and it&#39;s associated risk representation is shown below.   * &#x60;1&#x60; - Represents a no or low risk request.   * &#x60;2&#x60; - Represents a low risk request.   * &#x60;3&#x60; - Represents a medium risk request.   * &#x60;4&#x60; - Represents a high risk request.   * &#x60;5&#x60; - Represents a very high risk request.  The calculated risk score is typically used to identify scenarios where a service provider may want to introduce consumer friction on the authorization process to validate the identity of the consumer. Example usage by a service provider may be to implement controls such as multifactor authentication for calculated risk factors of &#x60;3&#x60; or &#x60;4&#x60; and request blocking for risk factors of &#x60;5&#x60;.
   * minimum: 0
   * maximum: 5
   * @return deviceInsightFactor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_INSIGHT_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDeviceInsightFactor() {
    return deviceInsightFactor;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_INSIGHT_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceInsightFactor(Integer deviceInsightFactor) {
    this.deviceInsightFactor = deviceInsightFactor;
  }


  public DeviceScores deviceTrustFactor(Integer deviceTrustFactor) {
    
    this.deviceTrustFactor = deviceTrustFactor;
    return this;
  }

   /**
   * An integer between 1-5 (1 being no trust and 5 being high trust). The trust factor value reflects the trustworthiness of the attributes associated with this device.
   * minimum: 1
   * maximum: 5
   * @return deviceTrustFactor
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEVICE_TRUST_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDeviceTrustFactor() {
    return deviceTrustFactor;
  }


  @JsonProperty(JSON_PROPERTY_DEVICE_TRUST_FACTOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDeviceTrustFactor(Integer deviceTrustFactor) {
    this.deviceTrustFactor = deviceTrustFactor;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeviceScores deviceScores = (DeviceScores) o;
    return Objects.equals(this.deviceRiskFactor, deviceScores.deviceRiskFactor) &&
        Objects.equals(this.deviceInsightFactor, deviceScores.deviceInsightFactor) &&
        Objects.equals(this.deviceTrustFactor, deviceScores.deviceTrustFactor);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deviceRiskFactor, deviceInsightFactor, deviceTrustFactor);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeviceScores {\n");
    sb.append("    deviceRiskFactor: ").append(toIndentedString(deviceRiskFactor)).append("\n");
    sb.append("    deviceInsightFactor: ").append(toIndentedString(deviceInsightFactor)).append("\n");
    sb.append("    deviceTrustFactor: ").append(toIndentedString(deviceTrustFactor)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

