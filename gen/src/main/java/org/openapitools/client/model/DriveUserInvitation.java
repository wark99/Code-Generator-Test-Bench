/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import org.openapitools.client.model.Drive;
import org.openapitools.client.model.User;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * DriveUserInvitation
 */
@JsonPropertyOrder({
  DriveUserInvitation.JSON_PROPERTY_ID,
  DriveUserInvitation.JSON_PROPERTY_TYPE,
  DriveUserInvitation.JSON_PROPERTY_IS_PRIVATE,
  DriveUserInvitation.JSON_PROPERTY_USER_EXIST,
  DriveUserInvitation.JSON_PROPERTY_KEY,
  DriveUserInvitation.JSON_PROPERTY_FILE_ID,
  DriveUserInvitation.JSON_PROPERTY_LANG,
  DriveUserInvitation.JSON_PROPERTY_USER_ID,
  DriveUserInvitation.JSON_PROPERTY_USER,
  DriveUserInvitation.JSON_PROPERTY_INVITED_BY,
  DriveUserInvitation.JSON_PROPERTY_INVITED,
  DriveUserInvitation.JSON_PROPERTY_URL,
  DriveUserInvitation.JSON_PROPERTY_IS_VALID,
  DriveUserInvitation.JSON_PROPERTY_STATUS,
  DriveUserInvitation.JSON_PROPERTY_EMAIL,
  DriveUserInvitation.JSON_PROPERTY_MESSAGE,
  DriveUserInvitation.JSON_PROPERTY_EXPIRED_AT,
  DriveUserInvitation.JSON_PROPERTY_CREATED_AT,
  DriveUserInvitation.JSON_PROPERTY_ACCESS_NAME,
  DriveUserInvitation.JSON_PROPERTY_ROLE,
  DriveUserInvitation.JSON_PROPERTY_DRIVE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class DriveUserInvitation {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  /**
   * Type of &#x60;Invitation&#x60;
   */
  public enum TypeEnum {
    FILE("file"),
    
    USER("user");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type;

  public static final String JSON_PROPERTY_IS_PRIVATE = "is_private";
  private Boolean isPrivate;

  public static final String JSON_PROPERTY_USER_EXIST = "user_exist";
  private Boolean userExist;

  public static final String JSON_PROPERTY_KEY = "key";
  private String key;

  public static final String JSON_PROPERTY_FILE_ID = "file_id";
  private Integer fileId;

  public static final String JSON_PROPERTY_LANG = "lang";
  private String lang;

  public static final String JSON_PROPERTY_USER_ID = "user_id";
  private Integer userId;

  public static final String JSON_PROPERTY_USER = "user";
  private User user;

  public static final String JSON_PROPERTY_INVITED_BY = "invited_by";
  private Integer invitedBy;

  public static final String JSON_PROPERTY_INVITED = "invited";
  private User invited;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_IS_VALID = "is_valid";
  private Boolean isValid;

  /**
   * Status of the &#x60;Invitation&#x60;
   */
  public enum StatusEnum {
    ACCEPTED("accepted"),
    
    CANCELLED("cancelled"),
    
    PENDING("pending"),
    
    REJECTED("rejected");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_EMAIL = "email";
  private String email;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_EXPIRED_AT = "expired_at";
  private Integer expiredAt;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public static final String JSON_PROPERTY_ACCESS_NAME = "access_name";
  private String accessName;

  public static final String JSON_PROPERTY_ROLE = "role";
  private String role;

  public static final String JSON_PROPERTY_DRIVE = "drive";
  private Drive drive;

  public DriveUserInvitation() {
  }

  public DriveUserInvitation id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique identifier of the resource &#x60;Drive User Invitation&#x60;
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public DriveUserInvitation type(TypeEnum type) {
    
    this.type = type;
    return this;
  }

   /**
   * Type of &#x60;Invitation&#x60;
   * @return type
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public TypeEnum getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setType(TypeEnum type) {
    this.type = type;
  }


  public DriveUserInvitation isPrivate(Boolean isPrivate) {
    
    this.isPrivate = isPrivate;
    return this;
  }

   /**
   * Get isPrivate
   * @return isPrivate
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_PRIVATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsPrivate() {
    return isPrivate;
  }


  @JsonProperty(JSON_PROPERTY_IS_PRIVATE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsPrivate(Boolean isPrivate) {
    this.isPrivate = isPrivate;
  }


  public DriveUserInvitation userExist(Boolean userExist) {
    
    this.userExist = userExist;
    return this;
  }

   /**
   * Get userExist
   * @return userExist
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_EXIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getUserExist() {
    return userExist;
  }


  @JsonProperty(JSON_PROPERTY_USER_EXIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserExist(Boolean userExist) {
    this.userExist = userExist;
  }


  public DriveUserInvitation key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Random key used to uniquely identify the &#x60;Invitation&#x60;
   * @return key
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getKey() {
    return key;
  }


  @JsonProperty(JSON_PROPERTY_KEY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKey(String key) {
    this.key = key;
  }


  public DriveUserInvitation fileId(Integer fileId) {
    
    this.fileId = fileId;
    return this;
  }

   /**
   * Get fileId
   * @return fileId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_FILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getFileId() {
    return fileId;
  }


  @JsonProperty(JSON_PROPERTY_FILE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileId(Integer fileId) {
    this.fileId = fileId;
  }


  public DriveUserInvitation lang(String lang) {
    
    this.lang = lang;
    return this;
  }

   /**
   * Language to invite the &#x60;User&#x60; in
   * @return lang
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_LANG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getLang() {
    return lang;
  }


  @JsonProperty(JSON_PROPERTY_LANG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLang(String lang) {
    this.lang = lang;
  }


  public DriveUserInvitation userId(Integer userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * User identifier
   * @return userId
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getUserId() {
    return userId;
  }


  @JsonProperty(JSON_PROPERTY_USER_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public DriveUserInvitation user(User user) {
    
    this.user = user;
    return this;
  }

   /**
   * Get user
   * @return user
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public User getUser() {
    return user;
  }


  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(User user) {
    this.user = user;
  }


  public DriveUserInvitation invitedBy(Integer invitedBy) {
    
    this.invitedBy = invitedBy;
    return this;
  }

   /**
   * Identifier of &#x60;User&#x60; that sent the invitation
   * @return invitedBy
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_INVITED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getInvitedBy() {
    return invitedBy;
  }


  @JsonProperty(JSON_PROPERTY_INVITED_BY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInvitedBy(Integer invitedBy) {
    this.invitedBy = invitedBy;
  }


  public DriveUserInvitation invited(User invited) {
    
    this.invited = invited;
    return this;
  }

   /**
   * Get invited
   * @return invited
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INVITED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public User getInvited() {
    return invited;
  }


  @JsonProperty(JSON_PROPERTY_INVITED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInvited(User invited) {
    this.invited = invited;
  }


  public DriveUserInvitation url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * &#x60;Invitation&#x60; url
   * @return url
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
  }


  public DriveUserInvitation isValid(Boolean isValid) {
    
    this.isValid = isValid;
    return this;
  }

   /**
   * Whether the &#x60;Invitation&#x60; is still valid or not
   * @return isValid
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_IS_VALID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Boolean getIsValid() {
    return isValid;
  }


  @JsonProperty(JSON_PROPERTY_IS_VALID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIsValid(Boolean isValid) {
    this.isValid = isValid;
  }


  public DriveUserInvitation status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * Status of the &#x60;Invitation&#x60;
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public DriveUserInvitation email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email
   * @return email
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getEmail() {
    return email;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEmail(String email) {
    this.email = email;
  }


  public DriveUserInvitation message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * &#x60;Invitation&#x60; message
   * @return message
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }


  public DriveUserInvitation expiredAt(Integer expiredAt) {
    
    this.expiredAt = expiredAt;
    return this;
  }

   /**
   * When the invitation expire
   * @return expiredAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_EXPIRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getExpiredAt() {
    return expiredAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setExpiredAt(Integer expiredAt) {
    this.expiredAt = expiredAt;
  }


  public DriveUserInvitation createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the invitation was created
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }


  public DriveUserInvitation accessName(String accessName) {
    
    this.accessName = accessName;
    return this;
  }

   /**
   * &#x60;Drive&#x60; name displayed for user
   * @return accessName
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCESS_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getAccessName() {
    return accessName;
  }


  @JsonProperty(JSON_PROPERTY_ACCESS_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccessName(String accessName) {
    this.accessName = accessName;
  }


  public DriveUserInvitation role(String role) {
    
    this.role = role;
    return this;
  }

   /**
   * Role that will be assigned to invited &#x60;User&#x60;
   * @return role
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getRole() {
    return role;
  }


  @JsonProperty(JSON_PROPERTY_ROLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setRole(String role) {
    this.role = role;
  }


  public DriveUserInvitation drive(Drive drive) {
    
    this.drive = drive;
    return this;
  }

   /**
   * Get drive
   * @return drive
  **/
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DRIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Drive getDrive() {
    return drive;
  }


  @JsonProperty(JSON_PROPERTY_DRIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDrive(Drive drive) {
    this.drive = drive;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DriveUserInvitation driveUserInvitation = (DriveUserInvitation) o;
    return Objects.equals(this.id, driveUserInvitation.id) &&
        Objects.equals(this.type, driveUserInvitation.type) &&
        Objects.equals(this.isPrivate, driveUserInvitation.isPrivate) &&
        Objects.equals(this.userExist, driveUserInvitation.userExist) &&
        Objects.equals(this.key, driveUserInvitation.key) &&
        Objects.equals(this.fileId, driveUserInvitation.fileId) &&
        Objects.equals(this.lang, driveUserInvitation.lang) &&
        Objects.equals(this.userId, driveUserInvitation.userId) &&
        Objects.equals(this.user, driveUserInvitation.user) &&
        Objects.equals(this.invitedBy, driveUserInvitation.invitedBy) &&
        Objects.equals(this.invited, driveUserInvitation.invited) &&
        Objects.equals(this.url, driveUserInvitation.url) &&
        Objects.equals(this.isValid, driveUserInvitation.isValid) &&
        Objects.equals(this.status, driveUserInvitation.status) &&
        Objects.equals(this.email, driveUserInvitation.email) &&
        Objects.equals(this.message, driveUserInvitation.message) &&
        Objects.equals(this.expiredAt, driveUserInvitation.expiredAt) &&
        Objects.equals(this.createdAt, driveUserInvitation.createdAt) &&
        Objects.equals(this.accessName, driveUserInvitation.accessName) &&
        Objects.equals(this.role, driveUserInvitation.role) &&
        Objects.equals(this.drive, driveUserInvitation.drive);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, type, isPrivate, userExist, key, fileId, lang, userId, user, invitedBy, invited, url, isValid, status, email, message, expiredAt, createdAt, accessName, role, drive);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DriveUserInvitation {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    isPrivate: ").append(toIndentedString(isPrivate)).append("\n");
    sb.append("    userExist: ").append(toIndentedString(userExist)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    lang: ").append(toIndentedString(lang)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    invitedBy: ").append(toIndentedString(invitedBy)).append("\n");
    sb.append("    invited: ").append(toIndentedString(invited)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    expiredAt: ").append(toIndentedString(expiredAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    accessName: ").append(toIndentedString(accessName)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    drive: ").append(toIndentedString(drive)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

