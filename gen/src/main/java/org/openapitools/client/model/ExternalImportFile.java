/*
 * API Reference - Developer tools
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@infomaniak.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * ExternalImportFile
 */
@JsonPropertyOrder({
  ExternalImportFile.JSON_PROPERTY_ID,
  ExternalImportFile.JSON_PROPERTY_NAME,
  ExternalImportFile.JSON_PROPERTY_STATUS,
  ExternalImportFile.JSON_PROPERTY_MESSAGE,
  ExternalImportFile.JSON_PROPERTY_CREATED_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-13T19:18:35.261242100Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ExternalImportFile {
  public static final String JSON_PROPERTY_ID = "id";
  private Integer id;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * External file import status.&lt;note&gt;&lt;strong&gt;downloading&lt;/strong&gt;: External file is currently downloading.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;error&lt;/strong&gt;: External file import failed, additional information in the message field.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;finished&lt;/strong&gt;: External file was successfully imported.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;uploading&lt;/strong&gt;: External file is currently uploading.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;waiting&lt;/strong&gt;: External file is not upload, waiting to be imported.&lt;/note&gt;
   */
  public enum StatusEnum {
    DOWNLOADING("downloading"),
    
    ERROR("error"),
    
    FINISHED("finished"),
    
    UPLOADING("uploading"),
    
    WAITING("waiting");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private StatusEnum status;

  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private Integer createdAt;

  public ExternalImportFile() {
  }

  public ExternalImportFile id(Integer id) {
    
    this.id = id;
    return this;
  }

   /**
   * External file import identifier
   * @return id
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(Integer id) {
    this.id = id;
  }


  public ExternalImportFile name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * External file name
   * @return name
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }


  public ExternalImportFile status(StatusEnum status) {
    
    this.status = status;
    return this;
  }

   /**
   * External file import status.&lt;note&gt;&lt;strong&gt;downloading&lt;/strong&gt;: External file is currently downloading.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;error&lt;/strong&gt;: External file import failed, additional information in the message field.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;finished&lt;/strong&gt;: External file was successfully imported.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;uploading&lt;/strong&gt;: External file is currently uploading.&lt;/note&gt;&lt;note&gt;&lt;strong&gt;waiting&lt;/strong&gt;: External file is not upload, waiting to be imported.&lt;/note&gt;
   * @return status
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public StatusEnum getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public ExternalImportFile message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Message when error occur
   * @return message
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getMessage() {
    return message;
  }


  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMessage(String message) {
    this.message = message;
  }


  public ExternalImportFile createdAt(Integer createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * External file creation date
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Integer getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(Integer createdAt) {
    this.createdAt = createdAt;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExternalImportFile externalImportFile = (ExternalImportFile) o;
    return Objects.equals(this.id, externalImportFile.id) &&
        Objects.equals(this.name, externalImportFile.name) &&
        Objects.equals(this.status, externalImportFile.status) &&
        Objects.equals(this.message, externalImportFile.message) &&
        Objects.equals(this.createdAt, externalImportFile.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, status, message, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExternalImportFile {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

