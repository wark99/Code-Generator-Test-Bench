/*
 * GosuMailAPI
 * <img src=\"https://i.imgur.com/ddJowmh.jpeg\" width=\"100\"/> <br/> # API лучшего сервиса отправки писем во входящие! <br/> ## Удачного использования! <br/> <br/> **Во всех запросах указывайте параметр** key <br/> **Пример:** POST /api/send?key=ВАШ_ТОКЕН <br/> <br/> **Пример отправки на пару популярных языках:** > **NodeJs** ``` const axios = require('axios');   let data = JSON.stringify([     {       \"url\": \"https://url.com\",       \"to\": \"mail@mail.com\",       \"country_code\": \"cz\",       \"service_code\": \"post\",       \"product\": \"test\",       \"is_delay\": false,       \"notify_id\": 1234 // Telegram ID user      }   ]);    let config = {     method: 'post',     maxBodyLength: Infinity,     url: 'https://azmail.link/api/send?key=TOKEN',     headers: {        'Content-Type': 'application/json',        'Accept': 'application/json'     },     data : data   };    axios.request(config)   .then((response) => {     console.log(JSON.stringify(response.data));   })   .catch((error) => {     console.log(error);   }); ``` > **Python** ``` import requests import json  url = \"https://azmail.link/api/send?key=TOKEN\"  payload = json.dumps([     {       \"url\": \"https://url.com\",       \"to\": \"mail@mail.com\",       \"country_code\": \"cz\",       \"service_code\": \"post\",       \"product\": \"test\",       \"is_delay\": false,       \"notify_id\": 1234 // Telegram ID user      } ]) headers = {   'Content-Type': 'application/json',   'Accept': 'application/json' }  response = requests.request(\"POST\", url, headers=headers, data=payload)  print(response.json()) ```  
 *
 * The version of the OpenAPI document: 2.0.5
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client;

import com.fasterxml.jackson.databind.util.StdDateFormat;

import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.ParsePosition;
import java.util.Date;
import java.text.DecimalFormat;
import java.util.GregorianCalendar;
import java.util.TimeZone;

public class RFC3339DateFormat extends DateFormat {
  private static final long serialVersionUID = 1L;
  private static final TimeZone TIMEZONE_Z = TimeZone.getTimeZone("UTC");

  private final StdDateFormat fmt = new StdDateFormat()
          .withTimeZone(TIMEZONE_Z)
          .withColonInTimeZone(true);

  public RFC3339DateFormat() {
    this.calendar = new GregorianCalendar();
    this.numberFormat = new DecimalFormat();
  }

  @Override
  public Date parse(String source) {
    return parse(source, new ParsePosition(0));
  }

  @Override
  public Date parse(String source, ParsePosition pos) {
    return fmt.parse(source, pos);
  }

  @Override
  public StringBuffer format(Date date, StringBuffer toAppendTo, FieldPosition fieldPosition) {
    return fmt.format(date, toAppendTo, fieldPosition);
  }

  @Override
  public Object clone() {
    return super.clone();
  }
}