package org.openapitools.client.api;

import org.openapitools.client.ApiClient;

import org.openapitools.client.model.ErrorMessage;
import org.openapitools.client.model.Report;
import org.openapitools.client.model.ReportSummaries;
import org.openapitools.client.model.SecurityFreezeErrorMessage;

import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestClientException;
import org.springframework.web.client.HttpClientErrorException;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.core.io.FileSystemResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-06T13:26:42.703698393Z[Etc/UTC]", comments = "Generator version: 7.4.0")
public class ReportsApi {
    private ApiClient apiClient;

    public ReportsApi() {
        this(new ApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Get Report by Consumer and ID
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report&#39;s &#x60;status&#x60; field contains \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * <p><b>200</b> - The report was successfully retrieved
     * <p><b>400</b> - The request was rejected
     * <p><b>401</b> - The request lacks valid authentication credentials. Check \&quot;Finicity-App-Key\&quot; or \&quot;Finicity-App-Token\&quot;.
     * <p><b>403</b> - The active security freeze for this consumer exists.
     * <p><b>404</b> - The resource doesn&#39;t exist
     * @param consumerId The consumer ID (required)
     * @param reportId ID of the report (required)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
     * @param onBehalfOf The name of the entity you are retrieving the report on behalf of (optional)
     * @return Report
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public Report getReportByConsumer(String consumerId, String reportId, String purpose, String onBehalfOf) throws RestClientException {
        return getReportByConsumerWithHttpInfo(consumerId, reportId, purpose, onBehalfOf).getBody();
    }

    /**
     * Get Report by Consumer and ID
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report&#39;s &#x60;status&#x60; field contains \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * <p><b>200</b> - The report was successfully retrieved
     * <p><b>400</b> - The request was rejected
     * <p><b>401</b> - The request lacks valid authentication credentials. Check \&quot;Finicity-App-Key\&quot; or \&quot;Finicity-App-Token\&quot;.
     * <p><b>403</b> - The active security freeze for this consumer exists.
     * <p><b>404</b> - The resource doesn&#39;t exist
     * @param consumerId The consumer ID (required)
     * @param reportId ID of the report (required)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
     * @param onBehalfOf The name of the entity you are retrieving the report on behalf of (optional)
     * @return ResponseEntity&lt;Report&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Report> getReportByConsumerWithHttpInfo(String consumerId, String reportId, String purpose, String onBehalfOf) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'consumerId' is set
        if (consumerId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'consumerId' when calling getReportByConsumer");
        }
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'reportId' when calling getReportByConsumer");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("consumerId", consumerId);
        uriVariables.put("reportId", reportId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "purpose", purpose));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "onBehalfOf", onBehalfOf));
        

        final String[] localVarAccepts = { 
            "application/json", "text/plain"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "FinicityAppToken", "FinicityAppKey" };

        ParameterizedTypeReference<Report> localReturnType = new ParameterizedTypeReference<Report>() {};
        return apiClient.invokeAPI("/decisioning/v3/consumers/{consumerId}/reports/{reportId}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get Report by Customer and ID
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report&#39;s &#x60;status&#x60; field contains \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * <p><b>200</b> - The report was successfully retrieved
     * <p><b>400</b> - The request was rejected
     * <p><b>401</b> - The request lacks valid authentication credentials. Check \&quot;Finicity-App-Key\&quot; or \&quot;Finicity-App-Token\&quot;.
     * <p><b>403</b> - The active security freeze for this consumer exists.
     * <p><b>404</b> - The resource doesn&#39;t exist
     * @param customerId A customer ID (required)
     * @param reportId ID of the report (required)
     * @param onBehalfOf The name of the entity you are retrieving the report on behalf of (optional)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
     * @return Report
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public Report getReportByCustomer(String customerId, String reportId, String onBehalfOf, String purpose) throws RestClientException {
        return getReportByCustomerWithHttpInfo(customerId, reportId, onBehalfOf, purpose).getBody();
    }

    /**
     * Get Report by Customer and ID
     * Get a report that has been generated by a previous call to one of the Generate Report services.  The report&#39;s &#x60;status&#x60; field contains \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  Report data can either be retrieved as a JSON document or a PDF file.  To specify the format required, set the _Accept request header_ to either **application/json** or **application/pdf**. If neither is set, the report format will be returned as a JSON document.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * <p><b>200</b> - The report was successfully retrieved
     * <p><b>400</b> - The request was rejected
     * <p><b>401</b> - The request lacks valid authentication credentials. Check \&quot;Finicity-App-Key\&quot; or \&quot;Finicity-App-Token\&quot;.
     * <p><b>403</b> - The active security freeze for this consumer exists.
     * <p><b>404</b> - The resource doesn&#39;t exist
     * @param customerId A customer ID (required)
     * @param reportId ID of the report (required)
     * @param onBehalfOf The name of the entity you are retrieving the report on behalf of (optional)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
     * @return ResponseEntity&lt;Report&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<Report> getReportByCustomerWithHttpInfo(String customerId, String reportId, String onBehalfOf, String purpose) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'customerId' when calling getReportByCustomer");
        }
        
        // verify the required parameter 'reportId' is set
        if (reportId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'reportId' when calling getReportByCustomer");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("customerId", customerId);
        uriVariables.put("reportId", reportId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "onBehalfOf", onBehalfOf));
        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "purpose", purpose));
        

        final String[] localVarAccepts = { 
            "application/json", "text/plain"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "FinicityAppToken", "FinicityAppKey" };

        ParameterizedTypeReference<Report> localReturnType = new ParameterizedTypeReference<Report>() {};
        return apiClient.invokeAPI("/decisioning/v3/customers/{customerId}/reports/{reportId}", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get Reports by Consumer ID
     * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The &#x60;status&#x60; fields in the returned list contain \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * <p><b>200</b> - The reports summaries were successfully retrieved
     * <p><b>400</b> - The request was rejected
     * <p><b>401</b> - The request lacks valid authentication credentials. Check \&quot;Finicity-App-Key\&quot; or \&quot;Finicity-App-Token\&quot;.
     * <p><b>403</b> - The active security freeze for this consumer exists.
     * <p><b>404</b> - The resource doesn&#39;t exist
     * <p><b>429</b> - The service can&#39;t accept more requests or is not available from the Test Drive.
     * @param consumerId The consumer ID (required)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
     * @return ReportSummaries
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ReportSummaries getReportsByConsumerId(String consumerId, String purpose) throws RestClientException {
        return getReportsByConsumerIdWithHttpInfo(consumerId, purpose).getBody();
    }

    /**
     * Get Reports by Consumer ID
     * Get all reports that have been generated by previous calls to Generate Report services for the given consumer.  The &#x60;status&#x60; fields in the returned list contain \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * <p><b>200</b> - The reports summaries were successfully retrieved
     * <p><b>400</b> - The request was rejected
     * <p><b>401</b> - The request lacks valid authentication credentials. Check \&quot;Finicity-App-Key\&quot; or \&quot;Finicity-App-Token\&quot;.
     * <p><b>403</b> - The active security freeze for this consumer exists.
     * <p><b>404</b> - The resource doesn&#39;t exist
     * <p><b>429</b> - The service can&#39;t accept more requests or is not available from the Test Drive.
     * @param consumerId The consumer ID (required)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
     * @return ResponseEntity&lt;ReportSummaries&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<ReportSummaries> getReportsByConsumerIdWithHttpInfo(String consumerId, String purpose) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'consumerId' is set
        if (consumerId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'consumerId' when calling getReportsByConsumerId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("consumerId", consumerId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "purpose", purpose));
        

        final String[] localVarAccepts = { 
            "application/json", "text/plain"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "FinicityAppToken", "FinicityAppKey" };

        ParameterizedTypeReference<ReportSummaries> localReturnType = new ParameterizedTypeReference<ReportSummaries>() {};
        return apiClient.invokeAPI("/decisioning/v1/consumers/{consumerId}/reports", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
    /**
     * Get Reports by Customer ID
     * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The &#x60;status&#x60; fields in the returned list contain \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * <p><b>200</b> - The reports summaries were successfully retrieved
     * <p><b>400</b> - The request was rejected
     * <p><b>401</b> - The request lacks valid authentication credentials. Check \&quot;Finicity-App-Key\&quot; or \&quot;Finicity-App-Token\&quot;.
     * <p><b>403</b> - The active security freeze for this consumer exists.
     * <p><b>404</b> - The resource doesn&#39;t exist
     * <p><b>429</b> - The service can&#39;t accept more requests or is not available from the Test Drive.
     * @param customerId A customer ID (required)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
     * @return ReportSummaries
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ReportSummaries getReportsByCustomerId(String customerId, String purpose) throws RestClientException {
        return getReportsByCustomerIdWithHttpInfo(customerId, purpose).getBody();
    }

    /**
     * Get Reports by Customer ID
     * Get all reports that have been generated by previous calls to Generate Report services for the given customer.  The &#x60;status&#x60; fields in the returned list contain \&quot;inProgress\&quot;, \&quot;failure\&quot;, or \&quot;success\&quot;. If the status shows \&quot;inProgress\&quot;, the client app should wait 20 seconds and then call this API again.  _Supported regions_: ![ðŸ‡ºðŸ‡¸](https://flagcdn.com/20x15/us.png)
     * <p><b>200</b> - The reports summaries were successfully retrieved
     * <p><b>400</b> - The request was rejected
     * <p><b>401</b> - The request lacks valid authentication credentials. Check \&quot;Finicity-App-Key\&quot; or \&quot;Finicity-App-Token\&quot;.
     * <p><b>403</b> - The active security freeze for this consumer exists.
     * <p><b>404</b> - The resource doesn&#39;t exist
     * <p><b>429</b> - The service can&#39;t accept more requests or is not available from the Test Drive.
     * @param customerId A customer ID (required)
     * @param purpose 2-digit code from [Permissible Purpose Codes](https://developer.mastercard.com/open-banking-us/documentation/products/lend/report-handling/permissible-purpose-codes/), specifying the reason for retrieving this report. Required for retrieving some reports. (optional)
     * @return ResponseEntity&lt;ReportSummaries&gt;
     * @throws RestClientException if an error occurs while attempting to invoke the API
     */
    public ResponseEntity<ReportSummaries> getReportsByCustomerIdWithHttpInfo(String customerId, String purpose) throws RestClientException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'customerId' is set
        if (customerId == null) {
            throw new HttpClientErrorException(HttpStatus.BAD_REQUEST, "Missing the required parameter 'customerId' when calling getReportsByCustomerId");
        }
        
        // create path and map variables
        final Map<String, Object> uriVariables = new HashMap<String, Object>();
        uriVariables.put("customerId", customerId);

        final MultiValueMap<String, String> localVarQueryParams = new LinkedMultiValueMap<String, String>();
        final HttpHeaders localVarHeaderParams = new HttpHeaders();
        final MultiValueMap<String, String> localVarCookieParams = new LinkedMultiValueMap<String, String>();
        final MultiValueMap<String, Object> localVarFormParams = new LinkedMultiValueMap<String, Object>();

        localVarQueryParams.putAll(apiClient.parameterToMultiValueMap(null, "purpose", purpose));
        

        final String[] localVarAccepts = { 
            "application/json", "text/plain"
         };
        final List<MediaType> localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        final String[] localVarContentTypes = {  };
        final MediaType localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

        String[] localVarAuthNames = new String[] { "FinicityAppToken", "FinicityAppKey" };

        ParameterizedTypeReference<ReportSummaries> localReturnType = new ParameterizedTypeReference<ReportSummaries>() {};
        return apiClient.invokeAPI("/decisioning/v1/customers/{customerId}/reports", HttpMethod.GET, uriVariables, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAccept, localVarContentType, localVarAuthNames, localReturnType);
    }
}
