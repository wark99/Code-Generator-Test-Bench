openapi: 3.1.0
info:
  title: Standard Message Envelope
  version: 1.0.0
servers:
- description: SwaggerHub API Auto Mocking
  url: https://virtserver.swaggerhub.com/IT-Financial-Systems/composite-model/1.0.0
paths:
  /messageEnvelope:
    post:
      operationId: createStandardMessageEnvelope
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageEnvelope'
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageEnvelope'
          description: MessageEnvelope was successfully created
        "400":
          description: Bad Request
      summary: Create a Standard Message Envelope
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    MessageEnvelope:
      description: Standard MessageEnvelope for message based event driven system
        interactions
      example:
        messageHeader:
          messageContext:
            messageContentType: messageContentType
            payloadHashValue: payloadHashValue
            hashingAlgorithm: hashingAlgorithm
            messageContentEncoding: messageContentEncoding
          headerVersion: headerVersion
          MultiPartMessageContextType:
            messageSequenceSize: 6.027456183070403
            messageSequenceNumber: 0.8008281904610115
            messageCorrelationId: messageCorrelationId
          sourceContext:
            sourceId: sourceId
            applicationId: applicationId
            transactionId: transactionId
          timestamp: 2000-01-23T04:56:07.000+00:00
        payload: "{}"
        augmentationPoint: "{}"
      properties:
        messageHeader:
          $ref: '#/components/schemas/MessageHeader'
        augmentationPoint:
          description: Augmentation within the messages are undefined elements which
            allow any Implementer to add any structure within the message for any
            defined purpose.
          type: object
        payload:
          description: payload within the messages are domain specific elements which
            allow any Implementer to add any structure within the message for any
            business/technical purpose.
          type: object
      required:
      - messageHeader
      - payload
    MessageHeader:
      description: Message Header capture details of the source of message.
      example:
        messageContext:
          messageContentType: messageContentType
          payloadHashValue: payloadHashValue
          hashingAlgorithm: hashingAlgorithm
          messageContentEncoding: messageContentEncoding
        headerVersion: headerVersion
        MultiPartMessageContextType:
          messageSequenceSize: 6.027456183070403
          messageSequenceNumber: 0.8008281904610115
          messageCorrelationId: messageCorrelationId
        sourceContext:
          sourceId: sourceId
          applicationId: applicationId
          transactionId: transactionId
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        headerVersion:
          description: "The Universal MessageHeaderType version. Version should be\
            \ check by processing nodes to ensure compatability. [Major_Version.Minor_Version]"
          type: string
        timestamp:
          description: ISO Data Time Format.
          format: date-time
          type: string
        sourceContext:
          $ref: '#/components/schemas/SourceContext'
        messageContext:
          $ref: '#/components/schemas/MessageContext'
        MultiPartMessageContextType:
          $ref: '#/components/schemas/MultiPartMessageContextType'
      required:
      - headerVersion
      - messageContext
      - sourceContext
      - timestamp
    AugmentationPoint:
      description: Augmentation within the messages are undefined elements which allow
        any Implementer to add any structure within the message for any defined purpose.
      type: object
    Payload:
      description: payload within the messages are domain specific elements which
        allow any Implementer to add any structure within the message for any business/technical
        purpose.
      type: object
    SourceContext:
      example:
        sourceId: sourceId
        applicationId: applicationId
        transactionId: transactionId
      properties:
        sourceId:
          description: Meta information providing context about the client of this
            message. A client context represents the absolute originator of a distributed
            business transaction (e.g. sales channel in context of payment services
            transaction processing.)
          type: string
        applicationId:
          description: Provides the information about the application that created
            the message.
          type: string
        transactionId:
          description: "Unique transaction identifier generated and provided by the\
            \ absolute client. If the absolute client did not provide a transaction\
            \ Id then the first intermediate processing node might produce on client's\
            \ behalf. Various uses include - track, correlate, idempotency and troubleshoot\
            \ transaction instances."
          type: string
      required:
      - applicationId
      - sourceId
      - transactionId
    MultiPartMessageContextType:
      description: Meta information providing context about a multi part message exchange.
      example:
        messageSequenceSize: 6.027456183070403
        messageSequenceNumber: 0.8008281904610115
        messageCorrelationId: messageCorrelationId
      properties:
        messageCorrelationId:
          description: Used to correlate two or more messages.
          type: string
        messageSequenceNumber:
          description: Used to sequence a group of messages in messageSequenceSize.
          type: number
        messageSequenceSize:
          description: The number of messages within a group of correlated messages.
          type: number
      required:
      - messageCorrelationId
      - messageSequenceNumber
      - messageSequenceSize
    MessageContext:
      example:
        messageContentType: messageContentType
        payloadHashValue: payloadHashValue
        hashingAlgorithm: hashingAlgorithm
        messageContentEncoding: messageContentEncoding
      properties:
        messageContentType:
          description: Indicates the format of message payload.
          type: string
        messageContentEncoding:
          description: Indicates the content encoding of message payload.
          type: string
        payloadHashValue:
          description: Indicates the hash value of the below payload
          type: string
        hashingAlgorithm:
          description: Indicates hashing algorithm
          type: string
      required:
      - messageContentEncoding
      - messageContentType

