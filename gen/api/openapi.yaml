openapi: 3.1.0
info:
  description: |
    [Datasets](tables/index.html) | [Entity relationship diagram](erd/index.html) | [PostgreSQL schema](sql/postgresql.sql) | [MySQL schema](sql/mysql.sql) | [JSON schema](schema.json)

    # Data representation

    Snapshot and incremental queries in Data Access Platform (DAP) write output to AWS S3 buckets, and return pre-signed URLs to files (objects) in S3. Output comprises of records exported from data tables, and optional metadata associated with them.

    ## Data formats

    DAP API supports several output data formats, including text (TSV), CSV and JSON. Data in all formats is transferred with GZIP compression.

    ### Text (TSV)

    Text format is a simple tabular format in which each record (table row) occupies a single line.

    * Output always begins with a header row, which lists all metadata and data field names.
    * Fields (table columns) are delimited by *tab* characters.
    * Non-printable characters and special values are escaped with *backslash* (`\`), as shown below:

    | Escape | Interpretation               |
    | ------ | ---------------------------- |
    | `\N`   | NULL value                   |
    | `\b`   | Backspace (ASCII 8)          |
    | `\f`   | Form feed (ASCII 12)         |
    | `\n`   | Newline (ASCII 10)           |
    | `\r`   | Carriage return (ASCII 13)   |
    | `\t`   | Tab (ASCII 9)                |
    | `\v`   | Vertical tab (ASCII 11)      |
    | `\\`   | Backslash (single character) |

    This format allows data to be easily imported into a database engine, e.g. with PostgreSQL [COPY](https://www.postgresql.org/docs/current/sql-copy.html).

    Output in this format is transmitted as media type `text/plain` in UTF-8 encoding.

    ### Comma-separated values (CSV)

    Comma-separated values (CSV) output follows [RFC 4180](https://www.ietf.org/rfc/rfc4180.html) with a few extensions:

    * Output always begins with a header row, which lists all metadata and data field names.
    * Strings are quoted with double quotes (`"`) if they contain special characters such as the double quote itself, the comma delimiter, a newline, a carriage return, a tab character, etc.
    * Empty strings are always represented as `""` to avoid ambiguity with missing values.
    * Missing values (a.k.a. `NULL`) are represented with no data (no characters between delimiters).
    * Each row has the same number of fields.

    These extensions allow differentiating empty strings (`""`) from missing values (a.k.a. `NULL`, represented as no data), for which RFC 4180 defines no rules. If a field is missing, the comma separators are still included, i.e. multiple comma separators may follow one another in a row if there is no data in subsequent fields.

    Double quotes act as escape sequences inside a quoted string. If there are two consecutive double quote characters (i.e. `""`), the sequence is interpreted as a single double quote character (`"`). If a string contains newline or carriage return characters, they are emitted verbatim (in compliance with RFC 4180). As such, a record may be broken into several lines if the data contains newlines. (Some applications might not interpret these flawlessly, double-check your integration when you deal with CSV files.)

    The following example demonstrates some of the above:
    ```csv
    meta.action,key.pkey,value.prop1,value.prop2
    U,1,a string,42
    U,2,"a string, but in ""quotes"".",
    D,3,,
    U,4,"a multi-line
    string",
    ```

    Output in this format is transmitted as media type `text/csv` in UTF-8 encoding.

    ### JSON Lines

    When the output data is represented in the [JSON Lines](https://jsonlines.org/) format, each record (table row) occupies a single line. Each line is a JSON object, which can be validated against the JSON schema returned by DAP API.

    Output in this format is transmitted as media type `application/jsonlines` in UTF-8 encoding.

    ## Metadata

    Output of DAP API may include record-level metadata in addition to table data.

    In tabular formats (such as text and CSV), metadata are included in the output as additional columns. Consider the following example:
    ```csv
    meta.action,key.pkey,value.prop1,value.prop2
    U,1,"value1",42
    U,2,"value2",NULL
    D,3,,
    ```

    This CSV output has a metadata section (`meta`), a primary key section (`key`) and a record value section (`value`). The metadata section contains a single field called `action`. The key and value sections comprise of several fields: `pkey`, `prop1` and `prop2`.

    In the JSON Lines format, metadata, key and value sections are top-level properties `meta`, `key` and `value`, and have properties of their own:
    ```json
    { "meta": { "action": "U", ... }, "key": { "pkey": 1 }, "value": { "prop1": "value1", "prop2": 42 } }
    { "meta": { "action": "U", ... }, "key": { "pkey": 2 }, "value": { "prop1": "value2", "prop2": null } }
    { "meta": { "action": "D", ... }, "key": { "pkey": 3 } }
    ```

    The set of metadata fields returned depends on the context. Some contexts may produce fields that other contexts do not. If output would contain no metadata fields, the section is omitted entirely.

    ### Action

    The metadata field `action` identifies whether a record is *upserted* (inserted or updated) or *(hard) deleted* for an incremental query. In the result of a snapshot query, all records are to be understood as upserted.

    * Upserted records (denoted by `U`) have all fields present in the data.
    * Deleted records (denoted by `D`) only have the primary key field in their data, other field values are missing.

    Occasionally, the term *soft delete* is used, which in this context is equivalent to an update, and is denoted with a `U`, and all field values are included in the output.

    ### Timestamp

    The metadata field `ts` indicates when a record was last updated in the underlying transactional data lake table. For an incremental query with `since` and `until` timestamp parameters, `ts` for all returned records is always strictly greater than `since`, and always less than or equal to `until`.

    The timestamp may correlate to but does not correspond to the real time when the event took place (e.g. when a student enrolled to a course). If you need to know when the event happened, use the timestamp embedded in the data. Specifically, many tables have timestamp data columns such as `created_at` or `updated_at`, which are controlled by the product or application that generates the event (e.g. Canvas).

    Timestamps are stored in fields of JSON type `string`, are formatted as per ISO-8601, and are to be understood as in time zone UTC. This is aligned with how timestamps are represented in the OpenAPI format `date-time` as per [RFC 3339](https://xml2rfc.tools.ietf.org/public/rfc/html/rfc3339.html#anchor14).

    ## Format transformations

    Tabular data formats such as CSV cannot capture the hierarchy that JSON can represent easily. Nested JSON objects are flattened before they are included in the output. For example, consider the JSON data:
    ```json
    {
        "id": 1,
        "question": {
            "headline": "title",
            "text": "some text"
        },
        "answers": [
            { "answer": "A", "score": 0 },
            { "answer": "B", "score": 1 },
            { "answer": "C", "score": 0 }
        ]
    }
    ```
    Here, the property `question` with two fixed sub-properties can be flattened into CSV columns `question.headline` and `question.text`. However, the property `answers` cannot be flattened because the list has an indeterminate cardinality. Items with indeterminate cardinality are transmitted as a JSON string. (Cardinality check is performed on the data (JSON) schema, not the actual data.)

    This is how text output would look like after flattening (tabs are shown as four spaces):
    ```
    data.id    data.question.headline    data.question.text    data.answers
    1    title    some text    [{"answer":"A","score":0},{"answer":"B","score":1},{"answer":"C","score":0}]
    ```

    In a similar fashion, this is how CSV output would look after flattening:
    ```csv
    data.id,data.question.headline,data.question.text,data.answers
    1,title,some text,"[{""answer"":""A"",""score"":0},{""answer"":""B"",""score"":1},{""answer"":""C"",""score"":0}]"
    ```

    If you wish to avoid format transformations entirely, use the JSON Lines data format.
  title: Data Access Platform Query API
  version: 0.9.0
servers:
- url: https://api-gateway.instructure.com/dap
security:
- Default: []
tags:
- name: API
- description: |-
    An incremental query that has completed with success.

    <SchemaDefinition schemaRef="#/components/schemas/CompleteIncrementalJob" />
  name: CompleteIncrementalJob
- description: |-
    A snapshot query that has completed with success.

    <SchemaDefinition schemaRef="#/components/schemas/CompleteSnapshotJob" />
  name: CompleteSnapshotJob
- description: |-
    A data access job that has terminated with failure.

    <SchemaDefinition schemaRef="#/components/schemas/FailedJob" />
  name: FailedJob
- description: |-
    A reference to a binary or text object persisted in object storage, such as a CSV, JSON, or Parquet file.

    The lifetime of the object depends on the operation that created it but typically lasts for 24 hours.
    Object identifiers can be traded for pre-signed URLs via an authenticated endpoint operation while the object exists.

    <SchemaDefinition schemaRef="#/components/schemas/Object" />
  name: Object
- description: |-
    Raised when a job has terminated due to an unexpected error.

    <SchemaDefinition schemaRef="#/components/schemas/ProcessingError" />
  name: ProcessingError
- description: |-
    A data access job in progress.

    <SchemaDefinition schemaRef="#/components/schemas/TableJob" />
  name: TableJob
- description: |-
    Raised when the client fails to provide valid authentication credentials.

    <SchemaDefinition schemaRef="#/components/schemas/AuthenticationError" />
  name: AuthenticationError
- description: |-
    Raised when an entity does not exist or has expired.

    <SchemaDefinition schemaRef="#/components/schemas/NotFoundError" />
  name: NotFoundError
- description: |-
    Raised when received timeout from gateway.

    <SchemaDefinition schemaRef="#/components/schemas/GatewayTimeoutError" />
  name: GatewayTimeoutError
- description: |-
    A pre-signed URL to a binary or text object persisted in object storage, such as a CSV, JSON or Parquet file.

    The lifetime of the pre-signed URL depends on the operation that created it but typically lasts for 15 minutes.
    No authentication is required to fetch the object via the pre-signed URL.

    <SchemaDefinition schemaRef="#/components/schemas/Resource" />
  name: Resource
- description: |-
    A Uniform Resource Locator (URL).

    <SchemaDefinition schemaRef="#/components/schemas/URL" />
  name: URL
- description: |-
    Associates object identifiers with pre-signed URLs to output resources.

    <SchemaDefinition schemaRef="#/components/schemas/ResourceResult" />
  name: ResourceResult
- description: |-
    Raised when a JSON validation error occurs.

    <SchemaDefinition schemaRef="#/components/schemas/ValidationError" />
  name: ValidationError
- description: |-
    Identifies a subset of data to fetch from a table.

    (This feature is not currently implemented.)

    Filter encompasses column-level (`select`) and row-level (`where`) filters.

    Column-level filters allow clients to include only those columns in the output they are interested in.
    Row-level filters let clients specify a condition that is applied to each record; if the condition is true,
    the record is included in the output, otherwise omitted. Row-level filters are inspired by the
    [where argument](https://hasura.io/docs/latest/queries/postgres/query-filters/#the-where-argument) in Hasura.

    Consider a table with the following columns:

    * `family_name` of type `string`,
    * `given_name` of type `string`,
    * `birth_date` of type `datetime`,
    * `height` of type `number`, representing a person's height in meters,
    * `status`, which is an enumeration that can take the values `active`, `inactive`, `pending`.

    Include only those people whose family name is `Smith`:

    ```json
    { "family_name": { "_eq": "Smith" } }
    ```

    Return people born in the 21st century:

    ```json
    { "birth_date": { "_gte": "2001-01-01" } }
    ```

    Include only those people whose height is between 1.6 and 1.7 meters:

    ```json
    { "height": { "_gt": 1.6, "_lt": 1.7 } }
    ```

    Return people whose status is `active` or `pending`:

    ```json
    { "status": { "_in": ["active", "pending"] } }
    ```

    Find people whose family name is `Smith` and given name starts with `L` or `K`:

    ```json
    { "family_name": { "_eq": "Smith" }, "given_name": { "_match": "^[LK]" } }
    ```

    Find people whose family name is `Smith` *or* whose given name starts with `L` or `K`:

    ```json
    { "_or": [
        { "family_name": { "_eq": "Smith" } },
        { "given_name": { "_match": "^[LK]" } }
    ] }
    ```

    The type of the value matched in the condition must be compatible with the type of the column.

    The following operators are generally available for all types:

    * `_eq` (equal to)
    * `_neq` (not equal to)

    Comparison operators for strings:

    * `_match` (value matches regular expression)

    Comparison operators for numbers, dates and timestamps:

    * `_gt` (greater than)
    * `_lt` (less than)
    * `_gte` (greater than or equal to)
    * `_lte` (less than or equal to)

    Comparison operators for enumerations:

    * `_in` (value in set of values)
    * `_nin` (value not in set of values)

    Operators to build composite Boolean expressions:

    * `_and`
    * `_or`
    * `_not`

    <SchemaDefinition schemaRef="#/components/schemas/Filter" />
  name: Filter
- description: |-
    Identifies the format of the data returned, e.g. TSV, CSV, JSON Lines, or Parquet.

    Tab-separated values (TSV) is a simple tabular format in which each record (table row) occupies a single line.

    * Output always begins with a header row, which lists all metadata and data field names.
    * Fields (table columns) are delimited by *tab* characters.
    * Non-printable characters and special values are escaped with *backslash* (`\`).

    Comma-separated values (CSV) output follows [RFC 4180](https://www.ietf.org/rfc/rfc4180.html) with a few extensions:

    * Output always begins with a header row, which lists all metadata and data field names.
    * Strings are quoted with double quotes (`"`) if they contain special characters such as the double quote itself,
      the comma delimiter, a newline, a carriage return, a tab character, etc., or if their string representation would
      be identical to a special value such as NULL.
    * Empty strings are always represented as `""`.
    * NULL values are represented with the unquoted literal string `NULL`.
    * Missing values are presented as an empty string (no characters between delimiters).
    * Each row has the same number of fields.

    When the output data is represented in the [JSON Lines](https://jsonlines.org/) format, each record (table row)
    occupies a single line. Each line is a JSON object, which can be validated against the corresponding JSON schema.

    Parquet files are compatible with Spark version 3.0 and later.

    <SchemaDefinition schemaRef="#/components/schemas/Format" />
  name: Format
- description: |-
    Incremental queries return consolidated updates to a table, and help update a previous state to the present state.

    If only a *since* timestamp is given (recommended), the operation returns all changes since the specified point in
    time. If multiple updates took place to a record since the specified time, only the most recent version of the
    record is returned.

    If both a *since* and an *until* timestamp is given, the operation returns all records that have changed since
    the start timestamp of the interval but have not been altered after the end timestamp of the interval. Any records
    that have been updated after the *until* timestamp are not included in the query result. This functionality is
    useful to break up larger batches of changes but cannot be reliably used as a means of reconstructing a database
    state in the past (i.e. a point-in-time query or a backup of a previous state).

    The range defined by *since* and *until* is inclusive for the *since* timestamp but exclusive for the *until*
    timestamp.

    You would normally use incremental queries to fetch changes since a snapshot query or a previous incremental query.
    If issued as a follow-up to a snapshot query, the *since* timestamp of the incremental query would be equal to the
    *at* timestamp of the snapshot query. If issued as a follow-up to an incremental query, you would chain the *until*
    timestamp returned by the previous query job with the *since* timestamp of the new query request.

    <SchemaDefinition schemaRef="#/components/schemas/IncrementalQuery" />
  name: IncrementalQuery
- description: <SchemaDefinition schemaRef="#/components/schemas/Query" />
  name: Query
- description: |-
    Snapshot queries return the present state of the table.

    Snapshot queries help populate an empty database. After the initial snapshot query, you would use incremental
    queries to get the most up-to-date version of the data.

    <SchemaDefinition schemaRef="#/components/schemas/SnapshotQuery" />
  name: SnapshotQuery
- description: |-
    Raised when data is queried outside of the allowed time range.

    <SchemaDefinition schemaRef="#/components/schemas/OutOfRangeError" />
  name: OutOfRangeError
- description: |-
    Raised when data is queried outside of the allowed time range, and the table was reloaded recently. A new snapshot is required to keep data consistency.

    <SchemaDefinition schemaRef="#/components/schemas/SnapshotRequiredError" />
  name: SnapshotRequiredError
- description: |-
    A list of tables that exist in the organization domain.

    <SchemaDefinition schemaRef="#/components/schemas/TableList" />
  name: TableList
- description: <SchemaDefinition schemaRef="#/components/schemas/JsonType" />
  name: JsonType
- description: |-
    The state of the schema at a specific point in time.

    Schemas are backwards compatible. They receive strictly monotonically increasing version numbers as schema
    evolution takes place.

    <SchemaDefinition schemaRef="#/components/schemas/VersionedSchema" />
  name: VersionedSchema
- description: |-
    Stores the access tokens for a user and developer tools.

    This table in Canvas Data 2 will only share developer tool specific token metadata. All users have an option to create an access token
    based on their role and level of data access.

    <SchemaDefinition schemaRef="#/components/schemas/access_tokens" />
  name: access_tokens
- description: |-
    Join table for accounts, users and roles.

    Contains users' roles within an account (this table includes the account admins).

    <SchemaDefinition schemaRef="#/components/schemas/account_users" />
  name: account_users
- description: |-
    Stores data about account objects in the Canvas system.

    Accounts are most often used to represent a hierarchy of colleges, schools, departments, campuses.

    <SchemaDefinition schemaRef="#/components/schemas/accounts" />
  name: accounts
- description: |-
    Stores data about question banks.

    Question Banks are a place to house questions that can be added to quizzes across courses or accounts.

    <SchemaDefinition schemaRef="#/components/schemas/assessment_question_banks" />
  name: assessment_question_banks
- description: |-
    Stores attributes of a question associated with a quiz.

    The column `question_data` stores a variety of question data related points such as:
        * `question_type` denotes the type of the question. Possible values are:
                - `calculated_question`
                - `essay_question`
                - `file_upload_question`
                - `fill_in_multiple_blanks_question`
                - `matching_question`
                - `multiple_answers_question`
                - `multiple_choice_question`
                - `multiple_dropdowns_question`
                - `numerical_question`,
                - `short_answer_question`
                - `text_only_question`
                - `true_false_question`
        * `question_text` is the text of the question.
        * `regrade_option` denotes if regrading is available for the question. Possible values are: `available`
          and `unavailable` for question types `multiple_answers_question`, `multiple_choice_question`,
          `true_false_question`, and NULL for others. Defaults to `available` for the allowed question types, and NULL
          for the rest.
        * `correct_comments` are comments to be displayed if the student answers the question correctly.
        * `incorrect_comments` are comments to be displayed if the student answers the question incorrectly.
        * `neutral_comments` are comments to be displayed regardless of how the student answers the question.
        * `answers` is a JSON array of all possible answers.

    <SchemaDefinition schemaRef="#/components/schemas/assessment_questions" />
  name: assessment_questions
- description: |-
    Stores rules associated with an assignment group.

    <SchemaDefinition schemaRef="#/components/schemas/assignment_groups" />
  name: assignment_groups
- description: |-
    Stores measures related to ad hoc users for whom an assignment override exists.

    <SchemaDefinition schemaRef="#/components/schemas/assignment_override_students" />
  name: assignment_override_students
- description: |-
    Stores records for assignment due date overrides.

    There may be many records in this table for each assignment. Use the data in this table to calculate actual due, all day, lock and
    unlock dates/times.

    <SchemaDefinition schemaRef="#/components/schemas/assignment_overrides" />
  name: assignment_overrides
- description: |-
    This table stores attributes for assignments.

    There is one record in this table for each assignment.

    <SchemaDefinition schemaRef="#/components/schemas/assignments" />
  name: assignments
- description: |-
    Links user files to an assignment to allow grader to see the student's submission.

    <SchemaDefinition schemaRef="#/components/schemas/attachment_associations" />
  name: attachment_associations
- description: |-
    Describes files in Canvas.

    <SchemaDefinition schemaRef="#/components/schemas/attachments" />
  name: attachments
- description: |-
    The model for calendar events in Canvas.

    These can be manually created, or automatically generated from other items like Assignments with a date attached.

    <SchemaDefinition schemaRef="#/components/schemas/calendar_events" />
  name: calendar_events
- description: |-
    Launch context associated with DocViewer when assignment is of type `Annotated_Document`.

    <SchemaDefinition schemaRef="#/components/schemas/canvadocs_annotation_contexts" />
  name: canvadocs_annotation_contexts
- description: |-
    Stores user comments that have been added to the comment bank.

    <SchemaDefinition schemaRef="#/components/schemas/comment_bank_items" />
  name: comment_bank_items
- description: |-
    Channels through which a user receives Canvas notifications.

    Examples include an email address, a phone number, a mobile device token for push notifications, etc.

    <SchemaDefinition schemaRef="#/components/schemas/communication_channels" />
  name: communication_channels
- description: |-
    Saves data about what and when was added to a course through a course copy or import.

    <SchemaDefinition schemaRef="#/components/schemas/content_migrations" />
  name: content_migrations
- description: |-
    Shows students a count of the number of submissions they have that have something unread.

    <SchemaDefinition schemaRef="#/components/schemas/content_participation_counts" />
  name: content_participation_counts
- description: |-
    Stores data related to students submission updates or feedback.

    Examples include new grade, new excused status, or new score.

    <SchemaDefinition schemaRef="#/components/schemas/content_participations" />
  name: content_participations
- description: |-
    Provides a link to a content export from a sender to a receiver.

    The receiver can use this link to import the content export into any of their courses.

    <SchemaDefinition schemaRef="#/components/schemas/content_shares" />
  name: content_shares
- description: |-
    In the context of LTI, joins `context_external_tools` to either `assignments` or to `context_modules`.

    Some of the ways to use this table would be to: identify the external tool that is used to submit an assignment, identify the items
    that are in modules (the IDs in this table are also referred to as `module_item_id`), identify the learning outcome group that an
    outcome is part of.

    <SchemaDefinition schemaRef="#/components/schemas/content_tags" />
  name: content_tags
- description: |-
    Stores data about installed LTI 1 and 1.3 tools.

    <SchemaDefinition schemaRef="#/components/schemas/context_external_tools" />
  name: context_external_tools
- description: |-
    Shows which items a student has completed, started and not started in a module.

    <SchemaDefinition schemaRef="#/components/schemas/context_module_progressions" />
  name: context_module_progressions
- description: |-
    Modules in Canvas.

    A place to link items so that students can proceed through course content in order.

    <SchemaDefinition schemaRef="#/components/schemas/context_modules" />
  name: context_modules
- description: |-
    The participants in a certain message in a Conversation.

    <SchemaDefinition schemaRef="#/components/schemas/conversation_message_participants" />
  name: conversation_message_participants
- description: |-
    The messages that belong to a certain Conversation, these are in the *Inbox*.

    <SchemaDefinition schemaRef="#/components/schemas/conversation_messages" />
  name: conversation_messages
- description: |-
    The participants in a Conversation.

    <SchemaDefinition schemaRef="#/components/schemas/conversation_participants" />
  name: conversation_participants
- description: |-
    Conversation threads from the Canvas Inbox.

    <SchemaDefinition schemaRef="#/components/schemas/conversations" />
  name: conversations
- description: |-
    An explicit place to keep track of all the the accounts in the account hierarchy that a course belongs to.

    <SchemaDefinition schemaRef="#/components/schemas/course_account_associations" />
  name: course_account_associations
- description: |-
    Stores attributes for a section of a course.

    Sections are a group of students that have been organized for administrative purposes.  When users are enrolled in a course, they are
    actually enrolled in one of the sections of that course. It is possible to place more than one section in course, but it is not
    possible to put sections within sections. All sections of a course share the same content. If a course is taught by one instructor,
    sections can remain under one course. However, if each section is taught by a different instructor, those sections will need to be
    housed under separate courses. Each section can have its own varied due dates for assignments, quizzes, and discussions. For example, a
    course may have sections that meet on different days of the week or in different formats (online vs. face-to-face). Sections are also
    beneficial when Teacher Assistants are assigned to help manage courses and oversee grading for a portion of a course enrollment. As
    part of SIS or manual enrollments, you can limit students to only see students in their section. Instructors can also limit students if
    you allow them to manually enroll users in their own courses.

    <SchemaDefinition schemaRef="#/components/schemas/course_sections" />
  name: course_sections
- description: |-
    Stores attributes for a course.

    <SchemaDefinition schemaRef="#/components/schemas/courses" />
  name: courses
- description: |-
    Contains per-user data for the custom columns defined in custom_gradebook_columns.

    <SchemaDefinition schemaRef="#/components/schemas/custom_gradebook_column_data" />
  name: custom_gradebook_column_data
- description: |-
    Contains configuration information for custom Gradebook columns defined for specific courses.

    <SchemaDefinition schemaRef="#/components/schemas/custom_gradebook_columns" />
  name: custom_gradebook_columns
- description: |-
    Joins the accounts table to developer_keys.

    Describes if the associated developer key is "on" or "off" for the associated account.

    <SchemaDefinition schemaRef="#/components/schemas/developer_key_account_bindings" />
  name: developer_key_account_bindings
- description: |-
    A table representing a set of credentials used for API access.

    Contains both normal API keys and the LTI keys used in LTI 1.3 apps.

    <SchemaDefinition schemaRef="#/components/schemas/developer_keys" />
  name: developer_keys
- description: |-
    Stores attributes for discussion entries.

    Discussion entries are replies in a discussion topic.

    <SchemaDefinition schemaRef="#/components/schemas/discussion_entries" />
  name: discussion_entries
- description: |-
    Tracks who has read a particular entry.

    <SchemaDefinition schemaRef="#/components/schemas/discussion_entry_participants" />
  name: discussion_entry_participants
- description: |-
    Links discussion topics to the users who have posted in them.

    If a user has posted to a discussion topic, there will be a row in this table.

    <SchemaDefinition schemaRef="#/components/schemas/discussion_topic_participants" />
  name: discussion_topic_participants
- description: |-
    This table stores attributes for discussion topics in Canvas.

    Discussion topics are logical discussion threads. They can have many discussion entries. They also have their own message text for the
    message that started the topic.

    <SchemaDefinition schemaRef="#/components/schemas/discussion_topics" />
  name: discussion_topics
- description: |-
    Supports allowing certain roles to have access to a term outside of term date boundaries.

    <SchemaDefinition schemaRef="#/components/schemas/enrollment_dates_overrides" />
  name: enrollment_dates_overrides
- description: |-
    Stores the state of an enrollment.

    <SchemaDefinition schemaRef="#/components/schemas/enrollment_states" />
  name: enrollment_states
- description: |-
    Stores enrollment term records that describe the term or semester associated with courses (e.g. Fall 2013).

    Use the dates in this table as a proxy for the course start/end dates if the `start_at` and `end_at` fields in the courses table are
    NULL.

    <SchemaDefinition schemaRef="#/components/schemas/enrollment_terms" />
  name: enrollment_terms
- description: |-
    This table stores user enrollments.

    An enrollment represents a user's association with a specific course and section. There may be multiple records associated with a
    `course_id` and `user_id` combination (records are unique on: `course_id`, `user_id`, `course_section_id`, `role_id`, `workflow_state`,
    `associated_user_id`).

    <SchemaDefinition schemaRef="#/components/schemas/enrollments" />
  name: enrollments
- description: |-
    A record of items that a user has favorited, such as a Course.

    This affects how items are displayed in places like the Dashboard.

    <SchemaDefinition schemaRef="#/components/schemas/favorites" />
  name: favorites
- description: |-
    A collection of files (attachments).

    <SchemaDefinition schemaRef="#/components/schemas/folders" />
  name: folders
- description: |-
    Stores attributes for grading period groups, which are a group of grading periods.

    <SchemaDefinition schemaRef="#/components/schemas/grading_period_groups" />
  name: grading_period_groups
- description: |-
    Stores attributes for grading period.

    A Grading period is like a "term", essentially used for splitting up the grade book into "periods".

    <SchemaDefinition schemaRef="#/components/schemas/grading_periods" />
  name: grading_periods
- description: |-
    Contains data for grading schemes defined for a course or account.

    <SchemaDefinition schemaRef="#/components/schemas/grading_standards" />
  name: grading_standards
- description: |-
    A container for a set of groups, since often you want everyone to be in exactly one group in a set.

    <SchemaDefinition schemaRef="#/components/schemas/group_categories" />
  name: group_categories
- description: |-
    A join table of users and groups. Like enrollments, but for groups instead of courses.

    <SchemaDefinition schemaRef="#/components/schemas/group_memberships" />
  name: group_memberships
- description: |-
    Stores attributes for groups in canvas.

    Groups contain two or more students enrolled in a particular course working on an assignment or project together.

    <SchemaDefinition schemaRef="#/components/schemas/groups" />
  name: groups
- description: |-
    Contains late/missing policy configurations for courses.

    <SchemaDefinition schemaRef="#/components/schemas/late_policies" />
  name: late_policies
- description: |-
    Learning outcome groups organize outcomes hierarchically within a context, such as an account, course or the global context.

    This table contains dimensions for learning outcome groups.

    <SchemaDefinition schemaRef="#/components/schemas/learning_outcome_groups" />
  name: learning_outcome_groups
- description: |-
    Attributes for the results of answered questions which have been associated with a learning outcome.

    <SchemaDefinition schemaRef="#/components/schemas/learning_outcome_question_results" />
  name: learning_outcome_question_results
- description: |-
    Learning outcome results are a student's mastery score on a given outcome.

    This table contains dimensions for learning outcome results.

    <SchemaDefinition schemaRef="#/components/schemas/learning_outcome_results" />
  name: learning_outcome_results
- description: |-
    Learning outcomes are measurable statements that express student knowledge or a student skill.

    This table contains dimensions for learning outcomes.

    <SchemaDefinition schemaRef="#/components/schemas/learning_outcomes" />
  name: learning_outcomes
- description: |-
    Represents a line item from the IMS Assignment and Grade service.

    LTI 1.3 tools that have been authorized by an admin may manage this table.

    See [Learning Tools Interoperability (LTI) Assignment and Grade Services
    Specification](https://www.imsglobal.org/spec/lti-ags/v2p0#line-item-service).

    <SchemaDefinition schemaRef="#/components/schemas/lti_line_items" />
  name: lti_line_items
- description: |-
    Joins `context_external_tools` to other resources in Canvas (assignments for example).

    Only used with LTI 1.3 `context_external_tools`.

    <SchemaDefinition schemaRef="#/components/schemas/lti_resource_links" />
  name: lti_resource_links
- description: |-
    Represents a result from the IMS Assignment and Grade service

    See [IMS Global](https://www.imsglobal.org/spec/lti-ags/v2p0#result-service). LTI 1.3 tools that have been authorized by an admin may
    read records from this table via API.

    <SchemaDefinition schemaRef="#/components/schemas/lti_results" />
  name: lti_results
- description: |-
    Links imported course content to the child subscription and keeps track of changes made to content.

    <SchemaDefinition schemaRef="#/components/schemas/master_courses_child_content_tags" />
  name: master_courses_child_content_tags
- description: |-
    Saves data about which child courses are linked to which master blueprint courses.

    <SchemaDefinition schemaRef="#/components/schemas/master_courses_child_subscriptions" />
  name: master_courses_child_subscriptions
- description: |-
    Links blueprint course content to the template and keeps track of their locked status.

    <SchemaDefinition schemaRef="#/components/schemas/master_courses_master_content_tags" />
  name: master_courses_master_content_tags
- description: |-
    Represents a blueprint course sync event.

    <SchemaDefinition schemaRef="#/components/schemas/master_courses_master_migrations" />
  name: master_courses_master_migrations
- description: |-
    Stores blueprint course specific data and links a course with all other blueprint models.

    <SchemaDefinition schemaRef="#/components/schemas/master_courses_master_templates" />
  name: master_courses_master_templates
- description: |-
    Stores results for individual associated courses for a blueprint sync event.

    <SchemaDefinition schemaRef="#/components/schemas/master_courses_migration_results" />
  name: master_courses_migration_results
- description: |-
    Represents an "originality score" for a submission.

    Rows in this table are managed solely by LTI 2 tool providers that leverage the Canvas plagiarism detection platform.

    <SchemaDefinition schemaRef="#/components/schemas/originality_reports" />
  name: originality_reports
- description: |-
    Outcome proficiencies, or learning mastery proficiency ratings, define a set of ratings, which together create a point scale and a mastery level.

    <SchemaDefinition schemaRef="#/components/schemas/outcome_proficiencies" />
  name: outcome_proficiencies
- description: |-
    Outcome proficiency ratings define the individual tiers of outcome proficiencies.

    <SchemaDefinition schemaRef="#/components/schemas/outcome_proficiency_ratings" />
  name: outcome_proficiency_ratings
- description: |-
    Contains post policy configurations for courses and individual assignments.

    <SchemaDefinition schemaRef="#/components/schemas/post_policies" />
  name: post_policies
- description: |-
    This table stores user pseudonyms.

    Pseudonyms are login profiles associated with users. Contains user / account relationship (may contain multiple records per `user_id`
    if that `user_id` is associated with multiple accounts); note: not all users can be found in the pseudonyms table.

    <SchemaDefinition schemaRef="#/components/schemas/pseudonyms" />
  name: pseudonyms
- description: |-
    This table stores attributes for quiz group.

    <SchemaDefinition schemaRef="#/components/schemas/quiz_groups" />
  name: quiz_groups
- description: |-
    This table stores attributes of a question associated with a quiz.

    <SchemaDefinition schemaRef="#/components/schemas/quiz_questions" />
  name: quiz_questions
- description: |-
    Stores attributes for the last submitted quiz.

    This tables persists one record per `user_id` and `quiz_id`.

    <SchemaDefinition schemaRef="#/components/schemas/quiz_submissions" />
  name: quiz_submissions
- description: |-
    Stores attributes for quizzes.

    Quizzes can also be assignments (`assignment_id` field will have a value).

    <SchemaDefinition schemaRef="#/components/schemas/quizzes" />
  name: quizzes
- description: |-
    A customization to the default permissions granted by a role.

    <SchemaDefinition schemaRef="#/components/schemas/role_overrides" />
  name: role_overrides
- description: |-
    A user is assigned a role which grants all the permissions associated with that role.

    Roles have a few implicit permissions and a large set of default permissions, which can be customized with RoleOverrides.

    <SchemaDefinition schemaRef="#/components/schemas/roles" />
  name: roles
- description: |-
    Shows the data that a teacher has entered in to a rubric while grading a student.

    <SchemaDefinition schemaRef="#/components/schemas/rubric_assessments" />
  name: rubric_assessments
- description: |-
    Links a rubric to an assignment.

    <SchemaDefinition schemaRef="#/components/schemas/rubric_associations" />
  name: rubric_associations
- description: |-
    List of criteria that describe how an assignment should be graded.

    <SchemaDefinition schemaRef="#/components/schemas/rubrics" />
  name: rubrics
- description: |-
    This table stores aggregate statistics for scores on individual assignments.

    <SchemaDefinition schemaRef="#/components/schemas/score_statistics" />
  name: score_statistics
- description: |-
    This table stores assignment group and course grades for students enrolled in a course.

    <SchemaDefinition schemaRef="#/components/schemas/scores" />
  name: scores
- description: |-
    This table contains attributes related to the submission comments feature in Canvas.

    <SchemaDefinition schemaRef="#/components/schemas/submission_comments" />
  name: submission_comments
- description: |-
    This table stores information describing previous versions of individual submission objects.

    <SchemaDefinition schemaRef="#/components/schemas/submission_versions" />
  name: submission_versions
- description: |-
    This table stores submission records for an assignment.

    <SchemaDefinition schemaRef="#/components/schemas/submissions" />
  name: submissions
- description: |-
    Stores data about user and account relationship, how "close" a user is related to an account.

    <SchemaDefinition schemaRef="#/components/schemas/user_account_associations" />
  name: user_account_associations
- description: |-
    Stores the data for the Faculty Journal feature.

    <SchemaDefinition schemaRef="#/components/schemas/user_notes" />
  name: user_notes
- description: |-
    This table stores attributes for users.

    <SchemaDefinition schemaRef="#/components/schemas/users" />
  name: users
- description: |-
    Links users to conferences they are invited to join.

    <SchemaDefinition schemaRef="#/components/schemas/web_conference_participants" />
  name: web_conference_participants
- description: |-
    Data model for Conferences in Canvas.

    Integrates with external conferencing solutions like BigBlueButton.

    <SchemaDefinition schemaRef="#/components/schemas/web_conferences" />
  name: web_conferences
- description: |-
    Stores text data that is linked to a wiki and a course.

    Also known as Pages. Pages store content and educational resources that are part of a course or group but don't necessarily belong in
    an assignment. Pages can include text, video, and links to files and other course or group content. Pages can also be linked to other
    pages. They can also be used as a collaboration tool for course or group wikis where only specific users can have access. Canvas keeps
    the entire history of the page to account for changes over time.

    <SchemaDefinition schemaRef="#/components/schemas/wiki_pages" />
  name: wiki_pages
- description: |-
    Links a course to its wiki pages.

    There's only ever one per course, it is not highly used any longer, Wiki pages object is linked directly to a course now.

    <SchemaDefinition schemaRef="#/components/schemas/wikis" />
  name: wikis
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/abstract_courses" />
  name: abstract_courses
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/appointment_groups" />
  name: appointment_groups
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/assessment_requests" />
  name: assessment_requests
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    Supports canvas page views feature.

    Logs view and participation counts for a user + asset combination. Contains information on users' usage of assets (assignments, files,
    etc.).

    <SchemaDefinition schemaRef="#/components/schemas/asset_user_accesses" />
  name: asset_user_accesses
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/authentication_providers" />
  name: authentication_providers
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/cloned_items" />
  name: cloned_items
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/content_exports" />
  name: content_exports
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/eportfolios" />
  name: eportfolios
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/epub_exports" />
  name: epub_exports
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/external_feeds" />
  name: external_feeds
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/gradebook_uploads" />
  name: gradebook_uploads
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/group_and_membership_importers" />
  name: group_and_membership_importers
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/live_assessments_assessments" />
  name: live_assessments_assessments
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/live_assessments_submissions" />
  name: live_assessments_submissions
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/lti_message_handlers" />
  name: lti_message_handlers
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/media_objects" />
  name: media_objects
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/moderated_grading_provisional_grades" />
  name: moderated_grading_provisional_grades
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/outcome_imports" />
  name: outcome_imports
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/purgatories" />
  name: purgatories
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/quiz_statistics" />
  name: quiz_statistics
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/sis_batches" />
  name: sis_batches
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/usage_rights" />
  name: usage_rights
- description: |-
    Data in this table is not exposed, the table is available only as the target of a foreign key or discriminated key relationship.

    <SchemaDefinition schemaRef="#/components/schemas/versions" />
  name: versions
- description: |-
    Type extracted from column `assignment_groups.rules`.

    <SchemaDefinition schemaRef="#/components/schemas/assignment_groups__rules" />
  name: assignment_groups__rules
- description: |-
    Type extracted from column `assignments.turnitin_settings`.

    <SchemaDefinition schemaRef="#/components/schemas/assignments__turnitin_settings" />
  name: assignments__turnitin_settings
- description: |-
    Type extracted from column `context_external_tools.settings`.

    <SchemaDefinition schemaRef="#/components/schemas/context_external_tools__settings" />
  name: context_external_tools__settings
- description: |-
    Type extracted from column `courses.settings`.

    <SchemaDefinition schemaRef="#/components/schemas/courses__settings" />
  name: courses__settings
- description: |-
    Type extracted from column `quiz_questions.question_data`.

    <SchemaDefinition schemaRef="#/components/schemas/quiz_questions__question_data" />
  name: quiz_questions__question_data
- description: |-
    User agent strings for the `web_logs` table.

    <SchemaDefinition schemaRef="#/components/schemas/user_agents" />
  name: user_agents
- description: |-
    Stores the Canvas web application server access/request logs.

    Note: Logs older than the retention limit of 30 days are no longer available via DAP API.

    <SchemaDefinition schemaRef="#/components/schemas/web_logs" />
  name: web_logs
paths:
  /job/{id}:
    get:
      description: Jobs (and all objects they created) are deleted 24 hours after
        the job was started. Deleted jobs are no longer returned by this endpoint.
      parameters:
      - description: Unique identifier returned when the job was started by querying
          data.
        explode: false
        in: path
        name: id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_200_response'
          description: A snapshot query that has completed with success. **OR** An
            incremental query that has completed with success. **OR** A data access
            job that has terminated with failure.
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableJob'
          description: A data access job in progress.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_401_response'
          description: Client lacks valid authentication credentials.
        "404":
          content:
            application/json:
              example:
                error:
                  type: ObjectNotFound
                  uuid: 123e4567-e89b-12d3-a456-426614174000
                  message: Job does not exist.
                  id: 12345678-1234-5678-1234-567812345678
                  kind: job
              schema:
                $ref: '#/components/schemas/_job__id__get_404_response'
          description: The job does not exist or has expired.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_500_response'
          description: The requested account has not been onboarded yet. **OR** The
            requested account has been onboarded but client access has been restricted.
            **OR** Internal server error.
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_504_response'
          description: "Gateway timeout error, usually should be handled with retry\
            \ logic."
      summary: Returns status information about a job.
      tags:
      - API
      x-accepts: application/json
  /object/url:
    post:
      description: |-
        In contrast to objects, which have a longer lifetime, pre-signed URLs are valid for a shorter duration,
        typically 15 minutes.

        File paths returned by this endpoint do not adhere to any specification. While they may contain auxiliary
        information such as job ID or part counter, these are only informative. Downstream systems should not depend
        on any specific patterns of file names, or make any assumptions how much data each file contains.
      parameters: []
      requestBody:
        content:
          application/json:
            example:
            - id: uuid-1
            - id: uuid-2
            schema:
              items:
                $ref: '#/components/schemas/Object'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceResult'
          description: A list of pre-signed URLs.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_object_url_post_400_response'
          description: The input is malformed.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_401_response'
          description: Client lacks valid authentication credentials.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_404_response'
          description: Objects do not exist or have expired.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_500_response'
          description: The requested account has not been onboarded yet. **OR** The
            requested account has been onboarded but client access has been restricted.
            **OR** Internal server error.
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_504_response'
          description: "Gateway timeout error, usually should be handled with retry\
            \ logic."
      summary: Produces a list of pre-signed URLs for a list of objects.
      tags:
      - API
      x-content-type: application/json
      x-accepts: application/json
  /query/{namespace}/table/{table}/data:
    post:
      description: |-
        This is an asynchronous operation. Calling this endpoint will start a new job and return immediately with status information.
        However, the operation will continue running on the server. The caller can poll the status of the job to find out when it is
        ready.

        If a job with the same query parameters already exists, its details are returned rather than starting a new job.

        If no scope is specified, then the endpoint uses the default scope of the authenticated user.
        Returns an error if the user has access to several scopes and the scope is not explicitly specified.

        For incremental queries, the output uses a special metadata field called `action` to identify whether a record is *upserted*
        (inserted or updated) or *(hard) deleted* (`U` corresponds to upsert, and `D` to delete):
        ```json
        { "meta": { "action": "U", ... }, "key": { "pkey": 1 }, "value": { "prop1": "value1", "prop2": 42 } }
        { "meta": { "action": "U", ... }, "key": { "pkey": 2 }, "value": { "prop1": "value2", "prop2": null } }
        { "meta": { "action": "D", ... }, "key": { "pkey": 3 } }
        ```
        Upserted records have the primary key fields present in the sub-object `key` and all other data fields in the sub-object `value`.
        Deleted records only have the primary key fields in the `key` property, and lack the `value` property.

        Hard deletes are infrequent. They only take place when a record is irreversibly deleted from the source database, e.g. to comply
        with privacy or legal requirements.

        In most cases, records are *soft-deleted*, i.e. they are updated in such a way as to be understood *deleted* or *inactive* though
        the record is retained in the database, e.g. by setting a `workflow_state` column to the value `inactive` or `deleted`. In this
        context, soft deletes are equivalent to an update, and are denoted with a `U`, and all field values are included in the output.

        In the rare event that inserting a record is quickly followed by a hard delete in the source database between two successive
        incremental queries, a record might appear with a new (so far unseen) `key`, no `value` and an `action` of `D`.

        For snapshot queries, deleted records are not included in the output:
        ```json
        { "meta": { ... }, "key": { "pkey": 1 }, "value": { "prop1": "value1", "prop2": 42 } }
        { "meta": { ... }, "key": { "pkey": 2 }, "value": { "prop1": "value2", "prop2": null } }
        ```

        This is a rate-limited endpoint. If excessive data volume is requested repeatedly using this endpoint (e.g. a full snapshot every
        hour), future requests may be denied. We encourage making use of incremental queries, which substantially reduce the amount of data
        returned.
      parameters:
      - description: "Identifies the domain or product that the request pertains to,\
          \ e.g. `canvas`."
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: Canonical name of the table whose data to return.
        explode: false
        in: path
        name: table
        required: true
        schema:
          type: string
        style: simple
      - description: "Identifies the scope to access, e.g. a root account UUID for\
          \ Canvas, or a district ID for Mastery."
        explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      requestBody:
        content:
          application/json:
            example:
              format: jsonl
              since: 2022-07-14T10:30:00Z
              until: 2022-07-14T14:30:00Z
            schema:
              $ref: '#/components/schemas/Query'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_200_response'
          description: A snapshot query that has completed with success. **OR** An
            incremental query that has completed with success. **OR** A data access
            job that has terminated with failure.
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TableJob'
          description: A data access job in progress.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_query__namespace__table__table__data_post_400_response'
          description: "The input is malformed. **OR** There is no data in the requested\
            \ range. **OR** Raised when data is queried outside of the allowed time\
            \ range, and the table was reloaded recently."
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_401_response'
          description: Client lacks valid authentication credentials.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_404_response'
          description: The namespace or table does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_500_response'
          description: The requested account has not been onboarded yet. **OR** The
            requested account has been onboarded but client access has been restricted.
            **OR** Internal server error.
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_504_response'
          description: "Gateway timeout error, usually should be handled with retry\
            \ logic."
      summary: Queries a table for data.
      tags:
      - API
      x-content-type: application/json
      x-accepts: application/json
  /query/{namespace}/table:
    get:
      description: |-
        If no scope is specified, then the endpoint uses the default scope of the authenticated user.
        Returns an error if the user has access to several scopes and the scope is not explicitly specified.
      parameters:
      - description: "Identifies the domain or product that the request pertains to,\
          \ e.g. `canvas`."
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: "Identifies the scope to access, e.g. a root account UUID for\
          \ Canvas, or a district ID for Mastery."
        explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              example:
                tables:
                - accounts
                - submissions
                - users
              schema:
                $ref: '#/components/schemas/TableList'
          description: A list of tables in the given scope.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_401_response'
          description: Client lacks valid authentication credentials.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_404_response'
          description: The namespace does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_500_response'
          description: The requested account has not been onboarded yet. **OR** The
            requested account has been onboarded but client access has been restricted.
            **OR** Internal server error.
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_504_response'
          description: "Gateway timeout error, usually should be handled with retry\
            \ logic."
      summary: Returns a list of table names that exist in the given scope (e.g. organization
        domain).
      tags:
      - API
      x-accepts: application/json
  /query/{namespace}/table/{table}/schema:
    get:
      description: |-
        If data is returned in JSON Lines format (`*.jsonl`) then the schema applies to the JSON object obtained by combining
        the sub-objects accessed via the `key` and `value` properties, respectively, of JSON items.

        Assume the schema reads as follows:
        ```json
        {
            "type": "object",
            "properties": {
                "pkey": {
                    "type": "integer",
                    "format": "int64"
                },
                "prop1": {
                    "type": "string"
                },
                "prop2": {
                    "type": "integer"
                },
                "additionalProperties": false,
                "required": [
                    "pkey",
                    "prop1"
                ]
            }
        }
        ```

        Suppose we have the following JSON output:
        ```json
        { "meta": { "action": "U", ... }, "key": { "pkey": 1 }, "value": { "prop1": "value1", "prop2": 42 } }
        { "meta": { "action": "U", ... }, "key": { "pkey": 2 }, "value": { "prop1": "value2", "prop2": null } }
        { "meta": { "action": "D", ... }, "key": { "pkey": 3 } }
        ```
        In the example directly above, the first and second items (`update` records) would both validate against the pre-defined schema.
        The validator would check the following synthesized JSON objects:
        ```json
        { "pkey": 1, "prop1": "value1", "prop2": 42 }
        { "pkey": 2, "prop1": "value2", "prop2": null }
        ```
        The third item (a `delete` record) does not have to validate because it indicates that the client is to remove the item.

        If data is returned in Comma-Separated Values format (`*.csv`) then the schema type constraints apply to CSV `key` and `value`
        columns, respectively, but not CSV `meta` columns. For example, assume we have the following CSV output:
        ```csv
        meta.action,key.pkey,value.prop1,value.prop2
        U,1,"value1",42
        U,2,"value2",
        D,3,,
        ```
        Then the schema would read the same as in the JSON example above.

        Nested JSON objects are flattened to simple fields, with composite names constructed using the dot notation (`parent.child`).

        If no scope is specified, then the endpoint uses the default scope of the authenticated user.
        Returns an error if the user has access to several scopes and the scope is not explicitly specified.
      parameters:
      - description: "Identifies the domain or product that the request pertains to,\
          \ e.g. `canvas`."
        explode: false
        in: path
        name: namespace
        required: true
        schema:
          type: string
        style: simple
      - description: Canonical name of the table whose schema to return.
        explode: false
        in: path
        name: table
        required: true
        schema:
          type: string
        style: simple
      - description: "Identifies the scope to access, e.g. a root account UUID for\
          \ Canvas, or a district ID for Mastery."
        explode: true
        in: query
        name: scope
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VersionedSchema'
          description: The versioned JSON schema specification for the table.
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_401_response'
          description: Client lacks valid authentication credentials.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_404_response'
          description: The namespace or table does not exist.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_500_response'
          description: The requested account has not been onboarded yet. **OR** The
            requested account has been onboarded but client access has been restricted.
            **OR** Internal server error.
        "504":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_job__id__get_504_response'
          description: "Gateway timeout error, usually should be handled with retry\
            \ logic."
      summary: Returns the JSON schema that records in the table conform to.
      tags:
      - API
      x-accepts: application/json
components:
  responses: {}
  schemas:
    CompleteIncrementalJob:
      additionalProperties: false
      properties:
        id:
          description: Opaque unique identifier of the job.
          type: string
        status:
          description: The current status of the job.
          enum:
          - waiting
          - running
          - complete
          - failed
          type: string
        expires_at:
          description: The time when job will no longer be available.
          format: date-time
          type: string
        objects:
          description: The list of objects generated by the job.
          items:
            $ref: '#/components/schemas/Object'
          type: array
        schema_version:
          description: Version of the schema that records in the table conform to.
          type: integer
        since:
          description: Start timestamp (in UTC); only those records are returned that
            have been persisted since the specified date and time.
          format: date-time
          type: string
        until:
          description: End timestamp (in UTC); only those records are returned that
            have been persisted before the specified date and time. This can be used
            as a starting point for future incremental queries.
          format: date-time
          type: string
      required:
      - id
      - objects
      - schema_version
      - since
      - status
      - until
      title: An incremental query that has completed with success.
    CompleteSnapshotJob:
      additionalProperties: false
      example:
        schema_version: 0
        expires_at: 2000-01-23T04:56:07.000+00:00
        at: 2000-01-23T04:56:07.000+00:00
        objects:
        - id: id
        - id: id
        id: id
        status: waiting
      properties:
        id:
          description: Opaque unique identifier of the job.
          type: string
        status:
          description: The current status of the job.
          enum:
          - waiting
          - running
          - complete
          - failed
          type: string
        expires_at:
          description: The time when job will no longer be available.
          format: date-time
          type: string
        objects:
          description: The list of objects generated by the job.
          items:
            $ref: '#/components/schemas/Object'
          type: array
        schema_version:
          description: Version of the schema that records in the table conform to.
          type: integer
        at:
          description: Timestamp (in UTC) that identifies the table state. This can
            be used as a starting point for future incremental queries.
          format: date-time
          type: string
      required:
      - at
      - id
      - objects
      - schema_version
      - status
      title: A snapshot query that has completed with success.
    FailedJob:
      additionalProperties: false
      properties:
        id:
          description: Opaque unique identifier of the job.
          type: string
        status:
          description: The current status of the job.
          enum:
          - waiting
          - running
          - complete
          - failed
          type: string
        expires_at:
          description: The time when job will no longer be available.
          format: date-time
          type: string
        error:
          $ref: '#/components/schemas/ProcessingError'
      required:
      - error
      - id
      - status
      title: A data access job that has terminated with failure.
    Object:
      additionalProperties: false
      description: |-
        The lifetime of the object depends on the operation that created it but typically lasts for 24 hours.
        Object identifiers can be traded for pre-signed URLs via an authenticated endpoint operation while the object exists.
      example:
        id: id
      properties:
        id:
          description: Uniquely identifies the object.
          type: string
      required:
      - id
      title: "A reference to a binary or text object persisted in object storage,\
        \ such as a CSV, JSON, or Parquet file."
    ProcessingError:
      additionalProperties: false
      properties:
        type:
          description: "A machine-processable identifier for the error. Typically\
            \ corresponds to the fully-qualified exception class, as per the type\
            \ system of the language that emitted the message (e.g. Java, Python or\
            \ Scala exception type)."
          type: string
        uuid:
          description: Unique identifier of the error. This identifier helps locate
            the exact source of the error (e.g. find the log entry in the server log
            stream). Make sure to include this identifier when contacting support.
          type: string
        message:
          description: "A human-readable description for the error for informational\
            \ purposes. The exact format of the message is unspecified, and implementations\
            \ should not rely on the presence of any specific information."
          type: string
      required:
      - message
      - type
      - uuid
      title: Raised when a job has terminated due to an unexpected error.
    TableJob:
      additionalProperties: false
      example:
        expires_at: 2000-01-23T04:56:07.000+00:00
        id: id
        status: waiting
      properties:
        id:
          description: Opaque unique identifier of the job.
          type: string
        status:
          description: The current status of the job.
          enum:
          - waiting
          - running
          - complete
          - failed
          type: string
        expires_at:
          description: The time when job will no longer be available.
          format: date-time
          type: string
      required:
      - id
      - status
      title: A data access job in progress.
    AuthenticationError:
      additionalProperties: false
      example:
        type: type
        message: message
        uuid: uuid
      properties:
        type:
          description: "A machine-processable identifier for the error. Typically\
            \ corresponds to the fully-qualified exception class, as per the type\
            \ system of the language that emitted the message (e.g. Java, Python or\
            \ Scala exception type)."
          type: string
        uuid:
          description: Unique identifier of the error. This identifier helps locate
            the exact source of the error (e.g. find the log entry in the server log
            stream). Make sure to include this identifier when contacting support.
          type: string
        message:
          description: "A human-readable description for the error for informational\
            \ purposes. The exact format of the message is unspecified, and implementations\
            \ should not rely on the presence of any specific information."
          type: string
      required:
      - message
      - type
      - uuid
      title: Raised when the client fails to provide valid authentication credentials.
    NotFoundError:
      additionalProperties: false
      example:
        kind: kind
        id: id
        type: type
        message: message
        uuid: uuid
      properties:
        type:
          description: "A machine-processable identifier for the error. Typically\
            \ corresponds to the fully-qualified exception class, as per the type\
            \ system of the language that emitted the message (e.g. Java, Python or\
            \ Scala exception type)."
          type: string
        uuid:
          description: Unique identifier of the error. This identifier helps locate
            the exact source of the error (e.g. find the log entry in the server log
            stream). Make sure to include this identifier when contacting support.
          type: string
        message:
          description: "A human-readable description for the error for informational\
            \ purposes. The exact format of the message is unspecified, and implementations\
            \ should not rely on the presence of any specific information."
          type: string
        id:
          description: "The identifier of the entity not found, e.g. the name of a\
            \ table or the UUID of a job."
          type: string
        kind:
          description: "The entity that is not found such as a namespace, table, object\
            \ or job."
          type: string
      required:
      - id
      - kind
      - message
      - type
      - uuid
      title: Raised when an entity does not exist or has expired.
    GatewayTimeoutError:
      additionalProperties: false
      example:
        message: message
      properties:
        message:
          description: Always the same message signaling that a timeout received.
          type: string
      required:
      - message
      title: Raised when received timeout from gateway.
    Resource:
      additionalProperties: false
      description: |-
        The lifetime of the pre-signed URL depends on the operation that created it but typically lasts for 15 minutes.
        No authentication is required to fetch the object via the pre-signed URL.
      example:
        url: https://openapi-generator.tech
      properties:
        url:
          format: uri
          pattern: ^https?://
          title: A Uniform Resource Locator (URL).
          type: string
      required:
      - url
      title: "A pre-signed URL to a binary or text object persisted in object storage,\
        \ such as a CSV, JSON or Parquet file."
    URL:
      format: uri
      pattern: ^https?://
      title: A Uniform Resource Locator (URL).
      type: string
    ResourceResult:
      additionalProperties: false
      example:
        urls:
          key:
            url: https://openapi-generator.tech
      properties:
        urls:
          additionalProperties:
            $ref: '#/components/schemas/Resource'
          description: A dictionary of key-value pairs consisting of an ObjectID and
            the corresponding resource URL.
      required:
      - urls
      title: Associates object identifiers with pre-signed URLs to output resources.
    ValidationError:
      additionalProperties: {}
      example:
        location:
          character: ""
          line: ""
          column: ""
        type: ""
        message: ""
        uuid: ""
      properties:
        type:
          description: "A machine-processable identifier for the error. Typically\
            \ corresponds to the fully-qualified exception class, as per the type\
            \ system of the language that emitted the message (e.g. Java, Python or\
            \ Scala exception type)."
        uuid:
          description: Unique identifier of the error. This identifier helps locate
            the exact source of the error (e.g. find the log entry in the server log
            stream). Make sure to include this identifier when contacting support.
        message:
          description: "A human-readable description for the error for informational\
            \ purposes. The exact format of the message is unspecified, and implementations\
            \ should not rely on the presence of any specific information."
        location:
          $ref: '#/components/schemas/ValidationError_location'
      required:
      - location
      - message
      - type
      - uuid
      title: Raised when a JSON validation error occurs.
    Filter:
      additionalProperties: false
      description: |-
        (This feature is not currently implemented.)

        Filter encompasses column-level (`select`) and row-level (`where`) filters.

        Column-level filters allow clients to include only those columns in the output they are interested in.
        Row-level filters let clients specify a condition that is applied to each record; if the condition is true,
        the record is included in the output, otherwise omitted. Row-level filters are inspired by the
        [where argument](https://hasura.io/docs/latest/queries/postgres/query-filters/#the-where-argument) in Hasura.

        Consider a table with the following columns:

        * `family_name` of type `string`,
        * `given_name` of type `string`,
        * `birth_date` of type `datetime`,
        * `height` of type `number`, representing a person's height in meters,
        * `status`, which is an enumeration that can take the values `active`, `inactive`, `pending`.

        Include only those people whose family name is `Smith`:

        ```json
        { "family_name": { "_eq": "Smith" } }
        ```

        Return people born in the 21st century:

        ```json
        { "birth_date": { "_gte": "2001-01-01" } }
        ```

        Include only those people whose height is between 1.6 and 1.7 meters:

        ```json
        { "height": { "_gt": 1.6, "_lt": 1.7 } }
        ```

        Return people whose status is `active` or `pending`:

        ```json
        { "status": { "_in": ["active", "pending"] } }
        ```

        Find people whose family name is `Smith` and given name starts with `L` or `K`:

        ```json
        { "family_name": { "_eq": "Smith" }, "given_name": { "_match": "^[LK]" } }
        ```

        Find people whose family name is `Smith` *or* whose given name starts with `L` or `K`:

        ```json
        { "_or": [
            { "family_name": { "_eq": "Smith" } },
            { "given_name": { "_match": "^[LK]" } }
        ] }
        ```

        The type of the value matched in the condition must be compatible with the type of the column.

        The following operators are generally available for all types:

        * `_eq` (equal to)
        * `_neq` (not equal to)

        Comparison operators for strings:

        * `_match` (value matches regular expression)

        Comparison operators for numbers, dates and timestamps:

        * `_gt` (greater than)
        * `_lt` (less than)
        * `_gte` (greater than or equal to)
        * `_lte` (less than or equal to)

        Comparison operators for enumerations:

        * `_in` (value in set of values)
        * `_nin` (value not in set of values)

        Operators to build composite Boolean expressions:

        * `_and`
        * `_or`
        * `_not`
      example:
        select:
        - select
        - select
        where: "{}"
      properties:
        select:
          description: "A list of column names to include in the data set returned;\
            \ other columns are excluded. If omitted, return all columns."
          items:
            type: string
          type: array
        where:
          description: "A filter condition to apply to records; only records that\
            \ meet the condition are included. If omitted, return all records."
          type: object
      title: Identifies a subset of data to fetch from a table.
    Format:
      description: |-
        Tab-separated values (TSV) is a simple tabular format in which each record (table row) occupies a single line.

        * Output always begins with a header row, which lists all metadata and data field names.
        * Fields (table columns) are delimited by *tab* characters.
        * Non-printable characters and special values are escaped with *backslash* (`\`).

        Comma-separated values (CSV) output follows [RFC 4180](https://www.ietf.org/rfc/rfc4180.html) with a few extensions:

        * Output always begins with a header row, which lists all metadata and data field names.
        * Strings are quoted with double quotes (`"`) if they contain special characters such as the double quote itself,
          the comma delimiter, a newline, a carriage return, a tab character, etc., or if their string representation would
          be identical to a special value such as NULL.
        * Empty strings are always represented as `""`.
        * NULL values are represented with the unquoted literal string `NULL`.
        * Missing values are presented as an empty string (no characters between delimiters).
        * Each row has the same number of fields.

        When the output data is represented in the [JSON Lines](https://jsonlines.org/) format, each record (table row)
        occupies a single line. Each line is a JSON object, which can be validated against the corresponding JSON schema.

        Parquet files are compatible with Spark version 3.0 and later.
      enum:
      - tsv
      - csv
      - jsonl
      - parquet
      title: "Identifies the format of the data returned, e.g. TSV, CSV, JSON Lines,\
        \ or Parquet."
      type: string
    IncrementalQuery:
      additionalProperties: false
      description: |-
        If only a *since* timestamp is given (recommended), the operation returns all changes since the specified point in
        time. If multiple updates took place to a record since the specified time, only the most recent version of the
        record is returned.

        If both a *since* and an *until* timestamp is given, the operation returns all records that have changed since
        the start timestamp of the interval but have not been altered after the end timestamp of the interval. Any records
        that have been updated after the *until* timestamp are not included in the query result. This functionality is
        useful to break up larger batches of changes but cannot be reliably used as a means of reconstructing a database
        state in the past (i.e. a point-in-time query or a backup of a previous state).

        The range defined by *since* and *until* is inclusive for the *since* timestamp but exclusive for the *until*
        timestamp.

        You would normally use incremental queries to fetch changes since a snapshot query or a previous incremental query.
        If issued as a follow-up to a snapshot query, the *since* timestamp of the incremental query would be equal to the
        *at* timestamp of the snapshot query. If issued as a follow-up to an incremental query, you would chain the *until*
        timestamp returned by the previous query job with the *since* timestamp of the new query request.
      properties:
        format:
          $ref: '#/components/schemas/Format'
        filter:
          $ref: '#/components/schemas/Filter'
        since:
          description: "Start timestamp (in UTC); only those records are returned\
            \ that have been persisted since the specified date and time. This typically\
            \ equals `at` returned by a previous snapshot query job, or `until` returned\
            \ by a previous incremental query job."
          format: date-time
          type: string
        until:
          description: "End timestamp (in UTC); only those records are returned that\
            \ have not been changed after the specified date and time. If omitted\
            \ (recommended), defaults to the commit time of the latest record."
          format: date-time
          type: string
      required:
      - format
      - since
      title: "Incremental queries return consolidated updates to a table, and help\
        \ update a previous state to the present state."
    Query:
      oneOf:
      - $ref: '#/components/schemas/SnapshotQuery'
      - $ref: '#/components/schemas/IncrementalQuery'
    SnapshotQuery:
      additionalProperties: false
      description: |-
        Snapshot queries help populate an empty database. After the initial snapshot query, you would use incremental
        queries to get the most up-to-date version of the data.
      example:
        filter:
          select:
          - select
          - select
          where: "{}"
        format: null
      properties:
        format:
          $ref: '#/components/schemas/Format'
        filter:
          $ref: '#/components/schemas/Filter'
      required:
      - format
      title: Snapshot queries return the present state of the table.
    OutOfRangeError:
      additionalProperties: false
      properties:
        type:
          description: "A machine-processable identifier for the error. Typically\
            \ corresponds to the fully-qualified exception class, as per the type\
            \ system of the language that emitted the message (e.g. Java, Python or\
            \ Scala exception type)."
          type: string
        uuid:
          description: Unique identifier of the error. This identifier helps locate
            the exact source of the error (e.g. find the log entry in the server log
            stream). Make sure to include this identifier when contacting support.
          type: string
        message:
          description: "A human-readable description for the error for informational\
            \ purposes. The exact format of the message is unspecified, and implementations\
            \ should not rely on the presence of any specific information."
          type: string
        since:
          description: The earliest permitted timestamp.
          format: date-time
          type: string
        until:
          description: The latest permitted timestamp.
          format: date-time
          type: string
      required:
      - message
      - since
      - type
      - uuid
      title: Raised when data is queried outside of the allowed time range.
    SnapshotRequiredError:
      additionalProperties: false
      properties:
        type:
          description: "A machine-processable identifier for the error. Typically\
            \ corresponds to the fully-qualified exception class, as per the type\
            \ system of the language that emitted the message (e.g. Java, Python or\
            \ Scala exception type)."
          type: string
        uuid:
          description: Unique identifier of the error. This identifier helps locate
            the exact source of the error (e.g. find the log entry in the server log
            stream). Make sure to include this identifier when contacting support.
          type: string
        message:
          description: "A human-readable description for the error for informational\
            \ purposes. The exact format of the message is unspecified, and implementations\
            \ should not rely on the presence of any specific information."
          type: string
        since:
          description: The earliest permitted timestamp.
          format: date-time
          type: string
        until:
          description: The latest permitted timestamp.
          format: date-time
          type: string
      required:
      - message
      - since
      - type
      - uuid
      title: "Raised when data is queried outside of the allowed time range, and the\
        \ table was reloaded recently. A new snapshot is required to keep data consistency."
    TableList:
      additionalProperties: false
      example:
        tables:
        - tables
        - tables
      properties:
        tables:
          items:
            type: string
          type: array
      required:
      - tables
      title: A list of tables that exist in the organization domain.
    JsonType:
      oneOf:
      - nullable: true
      - type: boolean
      - type: integer
      - type: number
      - type: string
      - additionalProperties:
          $ref: '#/components/schemas/JsonType'
      - items:
          $ref: '#/components/schemas/JsonType'
    VersionedSchema:
      additionalProperties: false
      description: |-
        Schemas are backwards compatible. They receive strictly monotonically increasing version numbers as schema
        evolution takes place.
      example:
        schema:
          key: ""
        version: 0
      properties:
        schema:
          additionalProperties:
            $ref: '#/components/schemas/JsonType'
          description: The JSON Schema object to validate against.
        version:
          description: The version of the schema.
          type: integer
      required:
      - schema
      - version
      title: The state of the schema at a specific point in time.
    access_tokens:
      additionalProperties: {}
      description: |-
        This table in Canvas Data 2 will only share developer tool specific token metadata. All users have an option to create an access token
        based on their role and level of data access.
      properties:
        id:
          description: The unique identifier for an access token record.
          format: int64
        developer_key_id:
          description: The unique identifier of a developer key.
          format: int64
        user_id:
          description: The unique ID of the user the token acts as.
          format: int64
        real_user_id:
          description: "If the token was created while masquerading, this is the real\
            \ user doing the masquerading. Used for auditing."
          format: int64
        last_used_at:
          description: Timestamp of last access using this access token.
          format: date-time
        expires_at:
          description: The expiration date/time for this token. This may be a NULL
            value.
          format: date-time
        purpose:
          description: "For user-generated tokens, purpose can be manually set. For\
            \ app-generated tokens, this should be generated based on the scope defined\
            \ in the authentication process."
          maxLength: 255
        created_at:
          description: Timestamp of when an `access_tokens` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when an `access_tokens` record was updated.
          format: date-time
        scopes:
          description: "A list of scopes that can be applied to access tokens. i.e.:\
            \ courses."
        workflow_state:
          description: The current state of the access token record.
          enum:
          - __dap_unspecified__
          - active
          - deleted
      required:
      - created_at
      - developer_key_id
      - id
      - updated_at
      - workflow_state
      title: Stores the access tokens for a user and developer tools.
    account_users:
      additionalProperties: {}
      description: Contains users' roles within an account (this table includes the
        account admins).
      properties:
        id:
          description: The unique identifier for the users account association record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp of when an `account_users` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when an `account_users` record was updated.
          format: date-time
        workflow_state:
          description: The current state of the account user record.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        account_id:
          description: The unique ID of an account.
          format: int64
        role_id:
          description: The unique ID of a role.
          format: int64
      required:
      - account_id
      - created_at
      - id
      - role_id
      - updated_at
      - user_id
      - workflow_state
      title: "Join table for accounts, users and roles."
    accounts:
      additionalProperties: {}
      description: "Accounts are most often used to represent a hierarchy of colleges,\
        \ schools, departments, campuses."
      properties:
        id:
          description: The ID of the Account object.
          format: int64
        name:
          description: The display name of the account.
          maxLength: 255
        deleted_at:
          description: Timestamp of when the account was deleted. Will only ever be
            NULL for end customers.
          format: date-time
        parent_account_id:
          description: "The account's parent ID, or NULL if this is the root account."
          format: int64
        current_sis_batch_id:
          description: "The ID of the currently processing SIS (Student Information\
            \ System) batch (if submitted via UI, not API)."
          format: int64
        storage_quota:
          description: "The storage quote for the account, in megabytes."
          format: int64
        default_storage_quota:
          description: "The storage quota for children accounts in megabytes, if not\
            \ otherwise specified."
          format: int64
        default_locale:
          description: Language for the account.
          maxLength: 255
        default_user_storage_quota:
          description: "The default storage quota for users in the account in megabytes,\
            \ if not otherwise specified."
          format: int64
        default_group_storage_quota:
          description: "The storage quota for a group in the account in megabytes,\
            \ if not otherwise specified."
          format: int64
        integration_id:
          description: The account's identifier in the Student Information System.
          maxLength: 255
        lti_context_id:
          description: "UUID of the Canvas context in LTI standard. Secondary ID for\
            \ this context, could be used in API to identify resource as well."
          maxLength: 255
        consortium_parent_account_id:
          description: "The root account of the consortium account, if this root account\
            \ is part of a consortium."
          format: int64
        course_template_id:
          description: "The course selected as a template for new courses created\
            \ in this account. 0 if a template should not be used, nor inherited."
          format: int64
        created_at:
          description: Timestamp of when the account was created.
          format: date-time
        updated_at:
          description: Timestamp of when the account was updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for account.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - suspended
        default_time_zone:
          description: "The default time zone of the account. Allowed time zones are\
            \ [IANA time zones](https://www.iana.org/time-zones) or friendlier [Ruby\
            \ on Rails time zones](https://api.rubyonrails.org/classes/ActiveSupport/TimeZone.html)."
          maxLength: 255
        uuid:
          description: The UUID of the account.
          maxLength: 255
        sis_source_id:
          description: Correlated id for the record for this course in the SIS system
            (assuming SIS integration is configured)
          maxLength: 255
      required:
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Stores data about account objects in the Canvas system.
    assessment_question_banks:
      additionalProperties: {}
      description: Question Banks are a place to house questions that can be added
        to quizzes across courses or accounts.
      properties:
        id:
          description: The unique identifier for the question bank.
          format: int64
        deleted_at:
          description: The time the question bank was deleted. If the question bank
            has not been deleted the value will be NULL.
          format: date-time
        created_at:
          description: The time the question bank was created.
          format: date-time
        updated_at:
          description: The time the question bank was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the question bank.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        context_id:
          description: The unique identifier for the question bank's context (account
            or course).
          format: int64
        context_type:
          description: The type of context the question bank is associated with.
          enum:
          - __dap_unspecified__
          - Account
          - Course
        migration_id:
          description: The unique identifier of the migration that imported this question
            bank.
          maxLength: 255
        title:
          $ref: '#/components/schemas/assessment_question_banks_title'
      required:
      - context_type
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Stores data about question banks.
    assessment_questions:
      additionalProperties: {}
      description: |-
        The column `question_data` stores a variety of question data related points such as:
            * `question_type` denotes the type of the question. Possible values are:
                    - `calculated_question`
                    - `essay_question`
                    - `file_upload_question`
                    - `fill_in_multiple_blanks_question`
                    - `matching_question`
                    - `multiple_answers_question`
                    - `multiple_choice_question`
                    - `multiple_dropdowns_question`
                    - `numerical_question`,
                    - `short_answer_question`
                    - `text_only_question`
                    - `true_false_question`
            * `question_text` is the text of the question.
            * `regrade_option` denotes if regrading is available for the question. Possible values are: `available`
              and `unavailable` for question types `multiple_answers_question`, `multiple_choice_question`,
              `true_false_question`, and NULL for others. Defaults to `available` for the allowed question types, and NULL
              for the rest.
            * `correct_comments` are comments to be displayed if the student answers the question correctly.
            * `incorrect_comments` are comments to be displayed if the student answers the question incorrectly.
            * `neutral_comments` are comments to be displayed regardless of how the student answers the question.
            * `answers` is a JSON array of all possible answers.
      properties:
        id:
          description: The unique identifier for the Assessment Question.
          format: int64
        name:
          $ref: '#/components/schemas/assessment_questions_name'
        deleted_at:
          description: The time the question was deleted. If the question has not
            been deleted the value will be NULL.
          format: date-time
        created_at:
          description: Time when the quiz question was created.
          format: date-time
        updated_at:
          description: Time when the quiz question was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the quiz question.
          enum:
          - __dap_unspecified__
          - active
          - independently_edited
          - deleted
        context_id:
          description: The unique identifier for the question bank's context (account
            or course). No longer used as Canvas delegates to `context_id` of the
            associated AssessmentQuestion.
          format: int64
        context_type:
          description: The type of context the question bank is associated with. No
            longer used as Canvas delegates to the context of the associated AssessmentQuestion.
          maxLength: 255
        question_data:
          description: A variety of question data related points.
        assessment_question_bank_id:
          description: The unique identifier for the assessment question bank this
            question is associated with.
          format: int64
        migration_id:
          description: The unique identifier of the migration that imported this assessment
            question.
          maxLength: 255
        position:
          description: The position of the question.
          format: int32
      required:
      - id
      title: Stores attributes of a question associated with a quiz.
    assignment_groups:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the assignment group.
          format: int64
        name:
          description: The name of the assignment group.
          maxLength: 255
        created_at:
          description: The time when the assignment group was created.
          format: date-time
        updated_at:
          description: The time when the assignment group was updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the assignment group.
          enum:
          - __dap_unspecified__
          - available
          - deleted
          - active
        context_id:
          description: The unique identifier for the assignments group context (course).
          format: int64
        context_type:
          description: The type of object represented by `context_id`.
          enum:
          - __dap_unspecified__
          - Course
        default_assignment_name:
          description: The default title for an assignment when it is created in this
            assignment group.
          maxLength: 255
        group_weight:
          description: The weight of the assignment group.
          format: float64
        migration_id:
          description: The unique identifier of the migration that imported this assignment
            group.
          maxLength: 255
        sis_source_id:
          description: The Student Information System source ID of the assignment
            group.
          maxLength: 255
        position:
          description: The position of the assignment group.
          format: int32
        rules:
          $ref: '#/components/schemas/Type_extracted_from_column__assignment_groups_rules__'
      required:
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Stores rules associated with an assignment group.
    assignment_override_students:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the Assignment Override Student.
          format: int64
        user_id:
          description: Identifies the user.
          format: int64
        created_at:
          description: Timestamp of when the `assignment_override_student` record
            was created.
          format: date-time
        updated_at:
          description: Timestamp of when the `assignment_override_student` was last
            updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for assignment override students record.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        assignment_id:
          description: Identifies the assignment the override is associated with.
          format: int64
        quiz_id:
          description: Identifies the quiz the override is associated with.
          format: int64
        assignment_override_id:
          description: Identifies the assignment override dimension.
          format: int64
      required:
      - assignment_override_id
      - created_at
      - id
      - updated_at
      - user_id
      - workflow_state
      title: Stores measures related to ad hoc users for whom an assignment override
        exists.
    assignment_overrides:
      additionalProperties: {}
      description: |-
        There may be many records in this table for each assignment. Use the data in this table to calculate actual due, all day, lock and
        unlock dates/times.
      properties:
        id:
          description: The ID of the `assignment_override`.
          format: int64
        created_at:
          description: Timestamp of when the `assignment_override` was created.
          format: date-time
        updated_at:
          description: Timestamp of when the `assignment_override` was last updated.
          format: date-time
        workflow_state:
          description: Gives the workflow state of this record.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        due_at:
          description: The new *due at* date-time for this group of users.
          format: date-time
        unlock_at:
          description: The new *unlock at* date-time for this group of users.
          format: date-time
        lock_at:
          description: The new *lock at* date-time for this group of users.
          format: date-time
        all_day:
          description: Indicates if the `all_day` field overrides the original `all_day`
            field in the table `assignment` for this group of users.
        assignment_version:
          description: The version of the assignment this override is applied to.
          format: int32
        set_type:
          description: "Used in conjunction with `set_id`, this field tells us what\
            \ type of foreign relation is used."
          enum:
          - __dap_unspecified__
          - Group
          - CourseSection
          - ADHOC
          - Noop
        set_id:
          description: The primary key for the object type described in `set_id`.
          format: int64
        due_at_overridden:
          description: Indicates if the `unlock_at` field overrides the original.
        unlock_at_overridden:
          description: Indicates if the `unlock_at` field overrides the original `unlock_at`
            field in the table `assignment` for this group of users.
        lock_at_overridden:
          description: Indicates if the `lock_at` field overrides the original `lock_at`
            field in the table `assignment` for this group of users.
        quiz_id:
          description: Identifies the quiz the override is associated with.
          format: int64
        quiz_version:
          description: The version of the quiz this override is applied to.
          format: int32
        assignment_id:
          description: Identifies the assignment the override is associated with.
          format: int64
        all_day_date:
          description: The new date version of the due date if the `all_day` flag
            is true.
          format: date
        title:
          description: The title for this `assignment_override`.
          maxLength: 255
      required:
      - created_at
      - due_at_overridden
      - id
      - lock_at_overridden
      - set_type
      - title
      - unlock_at_overridden
      - updated_at
      - workflow_state
      title: Stores records for assignment due date overrides.
    assignments:
      additionalProperties: {}
      description: There is one record in this table for each assignment.
      properties:
        id:
          description: Primary key for this record in the Canvas assignments table.
          format: int64
        integration_id:
          description: Third Party unique identifier for Assignments.
          maxLength: 255
        lti_context_id:
          $ref: '#/components/schemas/assignments_lti_context_id'
        created_at:
          description: The time at which this assignment was originally created.
          format: date-time
        updated_at:
          description: The time at which this assignment was last modified.
          format: date-time
        workflow_state:
          description: Current workflow state of the assignment.
          enum:
          - __dap_unspecified__
          - unpublished
          - published
          - deleted
          - duplicating
          - fail_to_import
          - failed_to_duplicate
          - failed_to_import
          - failed_to_migrate
          - importing
          - migrating
        due_at:
          description: The due date for the assignment. Returns NULL if not present.
          format: date-time
        unlock_at:
          description: "The unlock date, meaning that the assignment is unlocked after\
            \ this date. Returns NULL if not present."
          format: date-time
        lock_at:
          description: "The lock date, meaning that the assignment is locked after\
            \ this date. Returns NULL if not present."
          format: date-time
        points_possible:
          description: The maximum points possible for the assignment.
          format: float64
        grading_type:
          description: The type of grading the assignment receives.
          enum:
          - __dap_unspecified__
          - gpa_scale
          - letter_grade
          - not_graded
          - pass_fail
          - percent
          - points
          - default
        submission_types:
          description: The types of submissions allowed for this assignment.
          items:
            enum:
            - __dap_unspecified__
            - discussion_topic
            - online_quiz
            - on_paper
            - none
            - external_tool
            - online
            - online_text_entry
            - online_url
            - online_upload
            - media_recording
            - not_graded
            - wiki_page
            - student_annotation
            - default_external_tool
            title: Type for column `assignments.submission_types`.
        assignment_group_id:
          description: Identifies which assignment grouping the particular assignment
            is part of (assignment groups may have a scoring weight to determine how
            much of the assignment group contributes to the total grade).
          format: int64
        grading_standard_id:
          description: The ID of the grading standard being applied to this assignment.
            Valid if `grading_type` is `letter_grade` or `gpa_scale`.
          format: int64
        submissions_downloads:
          description: Number of times submissions have been downloaded in a zip bundle.
          format: int32
        peer_review_count:
          description: "Represents the amount of reviews each user is assigned. NOTE:\
            \ This key is NOT present unless you have automatic_peer_reviews set to\
            \ true."
          format: int32
        peer_reviews_due_at:
          description: Timestamp for when peer reviews should be completed.
          format: date-time
        peer_reviews_assigned:
          description: True if all peer reviews have been assigned.
        peer_reviews:
          description: Indicates if peer reviews are required for this assignment.
        context_id:
          description: The ID of the object this assignment belongs to. Typically
            course.
          format: int64
        context_type:
          description: The type of object this assignment belongs to.
          enum:
          - __dap_unspecified__
          - Course
        automatic_peer_reviews:
          description: "Indicates if peer reviews are assigned automatically. If false,\
            \ the teacher is expected to manually assign peer reviews."
        all_day:
          description: True if a specific time for when the assignment is due was
            not given. The effective due time will be 11:59pm.
        all_day_date:
          description: The date version of the due date if the `all_day` flag is true.
          format: date
        could_be_locked:
          description: True if the assignment is under a module that can be locked.
        migration_id:
          description: "The unique identifier of the migration that imported this\
            \ assignment. For assignments which have been imported via a content migration,\
            \ an opaque identifier for the assignment in its source. This field is\
            \ used by Canvas to identify when an assignment is being re-imported,\
            \ and can also be used to identify multiple assignments that have been\
            \ copied from the same source."
          maxLength: 255
        grade_group_students_individually:
          description: "If this is a group assignment, boolean flag indicating whether\
            \ or not students will be graded individually."
        anonymous_peer_reviews:
          description: "If true, hide the identities of peer-reviewing and peer-reviewed\
            \ students. Only relevant if `peer_reviews` is true."
        turnitin_enabled:
          description: "Flag indicating whether or not Turnitin has been enabled for\
            \ the assignment. NOTE: This flag will not appear unless your account\
            \ has the Turnitin plugin available."
        allowed_extensions:
          description: "Allowed file extensions, which take effect if `submission_types`\
            \ includes `online_upload`."
          maxLength: 255
        group_category_id:
          description: "The ID of the assignment’s group set, if this is a group assignment.\
            \ For group discussions, set `group_category_id` on the discussion topic,\
            \ not the linked assignment."
          format: int64
        freeze_on_copy:
          description: "Indicates if assignment will be frozen when it is copied.\
            \ NOTE: This field will only be present if the AssignmentFreezer plugin\
            \ is available for your account."
        only_visible_to_overrides:
          description: Indicates whether the assignment is only visible to overrides.
        post_to_sis:
          description: Present if Sync Grades to Student Information System feature
            is enabled.
        moderated_grading:
          description: Indicates if the assignment is moderated.
        grades_published_at:
          description: "For assignments with moderated grading, a timestamp identifying\
            \ when provisional grades were published."
          format: date-time
        omit_from_final_grade:
          description: "If true, the assignment will be omitted from the student's\
            \ final grade."
        intra_group_peer_reviews:
          description: Indicates whether or not members from within the same group
            on a group assignment can be assigned to peer review their own group's
            work.
        vericite_enabled:
          description: "Flag indicating whether or not VeriCite has been enabled for\
            \ the assignment. NOTE: This flag will not appear unless your account\
            \ has the VeriCite plugin available."
        anonymous_instructor_annotations:
          description: Flag indicating whether instructor annotations in document
            submissions for this assignment should be anonymous.
        duplicate_of_id:
          description: "If the assignment is a duplicate, the ID of the original assignment."
          format: int64
        anonymous_grading:
          description: "Indicates if the assignment is graded anonymously. If true,\
            \ graders cannot see student identities."
        graders_anonymous_to_graders:
          description: Indicates if provisional graders' identities are hidden from
            other provisional graders. Only relevant for moderated assignments with
            grader_comments_visible_to_graders set to true.
        grader_count:
          description: "The maximum number of provisional graders who may issue grades\
            \ for this assignment. Only relevant for moderated assignments. Must be\
            \ a positive value, and must be set to 1 if the course has fewer than\
            \ two active instructors. Otherwise, the maximum value is the number of\
            \ active instructors in the course minus one, or 10 if the course has\
            \ more than 11 active instructors."
          format: int32
        grader_comments_visible_to_graders:
          description: Indicates if provisional graders' comments are visible to other
            provisional graders. Only relevant for moderated assignments.
        grader_section_id:
          description: "Graders for an assignment with anonymous moderated marking\
            \ are assigned from this section if provided, or all sections otherwise."
          format: int64
        final_grader_id:
          description: User ID of the final grader.
          format: int64
        grader_names_visible_to_final_grader:
          description: Indicates if provisional grader identities are visible to the
            final grader. Only relevant for moderated assignments.
        allowed_attempts:
          description: The number of submission attempts a student can make for this
            assignment. -1 is considered unlimited.
          format: int32
        sis_source_id:
          $ref: '#/components/schemas/assignments_sis_source_id'
        annotatable_attachment_id:
          description: "For an `Annotated Document` type assignment, the ID of the\
            \ annotatable attachment."
          format: int64
        important_dates:
          description: Indicates if the assignment has important dates.
        description:
          $ref: '#/components/schemas/assignments_description'
        position:
          description: The sorting order of the assignment in the group.
          format: int32
        title:
          description: Title of the assignment.
          maxLength: 255
        turnitin_settings:
          $ref: '#/components/schemas/Type_extracted_from_column__assignments_turnitin_settings__'
      required:
      - all_day
      - anonymous_grading
      - anonymous_instructor_annotations
      - anonymous_peer_reviews
      - automatic_peer_reviews
      - context_id
      - context_type
      - could_be_locked
      - freeze_on_copy
      - grade_group_students_individually
      - grader_comments_visible_to_graders
      - grader_count
      - grader_names_visible_to_final_grader
      - graders_anonymous_to_graders
      - id
      - important_dates
      - intra_group_peer_reviews
      - moderated_grading
      - omit_from_final_grade
      - only_visible_to_overrides
      - peer_review_count
      - peer_reviews
      - peer_reviews_assigned
      - post_to_sis
      - submission_types
      - submissions_downloads
      - turnitin_enabled
      - vericite_enabled
      - workflow_state
      title: This table stores attributes for assignments.
    attachment_associations:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of an attachment associations record.
          format: int64
        attachment_id:
          description: The unique identifier of an attachment record.
          format: int64
        context_id:
          description: The unique identifier of the context of this attachment association.
          format: int64
        context_type:
          description: The type of the object represented by `context_id`.
          enum:
          - __dap_unspecified__
          - ConversationMessage
          - Submission
          - Course
          - Group
      required:
      - context_type
      - id
      title: Links user files to an assignment to allow grader to see the student's
        submission.
    attachments:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of an attachment record.
          format: int64
        deleted_at:
          description: Timestamp showing when this record was deleted. If the record
            has not been deleted the value will be NULL.
          format: date-time
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp showing when an attachments record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when an attachments record was updated.
          format: date-time
        workflow_state:
          description: Current workflow state of the attachment.
          enum:
          - __dap_unspecified__
          - deleted
          - errored
          - pending_upload
          - processed
          - processing
          - to_be_zipped
          - unattached
          - unattached_temporary
          - zipped
          - zipping
        unlock_at:
          description: The date-time to unlock the file at.
          format: date-time
        lock_at:
          description: The date-time to lock the file at.
          format: date-time
        context_id:
          description: The unique identifier of the attachments's context.
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Account
          - AssessmentQuestion
          - Assignment
          - Attachment
          - ContentExport
          - ContentMigration
          - Course
          - Eportfolio
          - EpubExport
          - Folder
          - GradebookUpload
          - Group
          - GroupAndMembershipImporter
          - OutcomeImport
          - Purgatory
          - Quizzes::Quiz
          - Quizzes::QuizStatistics
          - Quizzes::QuizSubmission
          - SisBatch
          - Submission
          - User
        folder_id:
          description: The unique identifier of a folder record.
          format: int64
        filename:
          $ref: '#/components/schemas/attachments_filename'
        locked:
          description: Flag if file is locked or available.
        file_state:
          description: Similar to `workflow_state` but for the file itself.
          enum:
          - __dap_unspecified__
          - unpublished
          - published
          - deleted
          - available
          - hidden
          - errored
          - broken
        media_entry_id:
          description: The ID of a Kaltura/Notorious media entry associated with the
            file.
          maxLength: 255
        md5:
          description: A hash of the file. Historically this was MD5 in Canvas Data
            1 and API but newer records store a SHA512 in this column.
          maxLength: 255
        replacement_attachment_id:
          description: The unique identifier of the attachment that this record replaced.
          format: int64
        usage_rights_id:
          description: The unique identifier for the `usage_rights` record.
          format: int64
        modified_at:
          description: Timestamp showing when an attachment record was updated.
          format: date-time
        viewed_at:
          description: Timestamp showing when an attachment record was last viewed.
          format: date-time
        could_be_locked:
          description: True if the file is in a lockable module item.
        migration_id:
          description: "Only applicable for files which have been imported via a content\
            \ migration, an opaque identifier for the file in its source. This field\
            \ is used by Canvas to identify when a file is being re-imported, and\
            \ can also be used to identify multiple files that have been copied from\
            \ the same source."
          maxLength: 255
        namespace:
          description: The asset string of the root account associated with the file's
            storage.
          maxLength: 255
        size:
          description: The size of the file in bytes.
          format: int64
        display_name:
          $ref: '#/components/schemas/attachments_display_name'
        content_type:
          description: MIME type of the associated file.
          maxLength: 255
        uuid:
          description: The UUID of the attachment.
          maxLength: 255
        root_attachment_id:
          description: Identifier of the source file from which this file was copied
            and created. Defaults to `NULL` when this is the only copy.
          format: int64
      required:
      - file_state
      - id
      - locked
      title: Describes files in Canvas.
    calendar_events:
      additionalProperties: {}
      description: "These can be manually created, or automatically generated from\
        \ other items like Assignments with a date attached."
      properties:
        id:
          description: The unique identifier for a calendar event record.
          format: int64
        deleted_at:
          description: Timestamp when this record was deleted. If the record has not
            been deleted the value will be NULL.
          format: date-time
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp of when a `calendar_events` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `calendar_events` record was updated.
          format: date-time
        workflow_state:
          description: Current state of the event.
          enum:
          - __dap_unspecified__
          - active
          - locked
          - deleted
        context_id:
          description: "The unique identifier for the context of this calendar event\
            \ (account, course, user)."
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - AppointmentGroup
          - Course
          - CourseSection
          - Group
          - User
          - Account
        location_address:
          $ref: '#/components/schemas/calendar_events_location_address'
        start_at:
          description: "The start date for the calendar event, if applicable."
          format: date-time
        end_at:
          description: "The end date for the calendar event, if applicable."
          format: date-time
        context_code:
          description: "The context code of the calendar this event belongs to (course,\
            \ user or group)."
          maxLength: 255
        time_zone_edited:
          description: Time zone of the user editing the event.
          maxLength: 255
        parent_calendar_event_id:
          description: "Normally NULL. If this is a reservation (see the Appointment\
            \ Groups API), the ID will indicate the time slot it is for. If this is\
            \ a section-level event, this will be the course-level parent event."
          format: int64
        effective_context_code:
          description: "If specified, it indicates which calendar this event should\
            \ be displayed on. For example, a section-level event would have the course's\
            \ context code here, while the section's context code would be returned\
            \ above."
          maxLength: 255
        participants_per_appointment:
          description: "If the event is a time slot, this is the participant limit."
          format: int32
        comments:
          $ref: '#/components/schemas/calendar_events_comments'
        web_conference_id:
          description: The ID of a web conference associated with the calendar event.
          format: int64
        all_day:
          description: Indicates whether this is an all-day event (midnight to midnight).
        all_day_date:
          description: The date of this event.
          format: date
        migration_id:
          description: The unique identifier of the migration that imported this calendar
            event.
          maxLength: 255
        important_dates:
          description: Indicates if the calendar event has important dates.
        location_name:
          $ref: '#/components/schemas/calendar_events_location_name'
        description:
          $ref: '#/components/schemas/calendar_events_description'
        title:
          description: The title of the calendar event.
          maxLength: 255
      required:
      - context_id
      - context_type
      - created_at
      - id
      - important_dates
      - updated_at
      - workflow_state
      title: The model for calendar events in Canvas.
    canvadocs_annotation_contexts:
      additionalProperties: {}
      properties:
        id:
          description: The ID of this record.
          format: int64
        created_at:
          description: When this record was created.
          format: date-time
        updated_at:
          description: When this record was last updated.
          format: date-time
        attachment_id:
          description: The attachment that this DocViewer launch is owned by.
          format: int64
        submission_id:
          description: The submission this DocViewer launch is associated with.
          format: int64
        launch_id:
          $ref: '#/components/schemas/canvadocs_annotation_contexts_launch_id'
        submission_attempt:
          description: The submission attempt associated with the launch_id.
          format: int32
      required:
      - attachment_id
      - created_at
      - id
      - launch_id
      - submission_id
      - updated_at
      title: Launch context associated with DocViewer when assignment is of type `Annotated_Document`.
    comment_bank_items:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the comment bank item.
          format: int64
        user_id:
          description: The ID of the user who created the comment bank item.
          format: int64
        created_at:
          description: Timestamp of when the comment_bank_item record was created.
          format: date-time
        updated_at:
          description: Timestamp of when the comment_bank_item record was updated.
          format: date-time
        workflow_state:
          description: Workflow status of the comment bank item.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        course_id:
          description: Identifies the course.
          format: int64
        comment:
          $ref: '#/components/schemas/comment_bank_items_comment'
      required:
      - comment
      - course_id
      - created_at
      - id
      - updated_at
      - user_id
      - workflow_state
      title: Stores user comments that have been added to the comment bank.
    communication_channels:
      additionalProperties: {}
      description: "Examples include an email address, a phone number, a mobile device\
        \ token for push notifications, etc."
      properties:
        id:
          description: The unique identifier for a user communication channel record.
          format: int64
        path:
          description: The address of the communication channel e.g. an email address
            or a phone number.
          maxLength: 255
        path_type:
          description: The type of communication channel being described. This field
            determines the type of value seen in `address`.
          maxLength: 255
        pseudonym_id:
          description: The unique ID of a user's pseudonym record.
          format: int64
        bounce_count:
          description: The number of times a communication channel has bounced when
            trying to deliver messages.
          format: int32
        confirmation_code_expires_at:
          description: The date-time when the issued confirmation code will expire.
          format: date-time
        confirmation_sent_count:
          description: The number of confirmations sent for the channel.
          format: int32
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp of when a `communication_channels` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `communication_channels` record was updated.
          format: date-time
        workflow_state:
          description: Current state of the communication channel.
          enum:
          - __dap_unspecified__
          - unconfirmed
          - active
          - retired
        position:
          description: The position of this communication channel relative to the
            user's other channels when they are ordered.
          format: int32
      required:
      - bounce_count
      - confirmation_sent_count
      - created_at
      - id
      - path
      - path_type
      - updated_at
      - user_id
      - workflow_state
      title: Channels through which a user receives Canvas notifications.
    content_migrations:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a content migration record.
          format: int64
        attachment_id:
          description: The unique ID of the package being imported.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp showing when a `content_migrations` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `content_migrations` record was updated.
          format: date-time
        workflow_state:
          description: Current state of the content migration.
          enum:
          - __dap_unspecified__
          - created
          - exported
          - exporting
          - failed
          - imported
          - importing
          - pre_process_error
          - pre_processed
          - pre_processing
          - queued
        context_id:
          description: The unique identifier of a `content_migrations` context.
          format: int64
        context_type:
          description: The type of the object represented by `context_id`.
          enum:
          - __dap_unspecified__
          - Course
          - Account
          - Group
          - User
        overview_attachment_id:
          description: The unique ID of the packages overview.json file.
          format: int64
        exported_attachment_id:
          description: The unique ID of the resulting exported package.
          format: int64
        source_course_id:
          description: The course to copy from for a course copy migration (required
            if doing course copy).
          format: int64
        migration_type:
          description: "The type of the migration. Use the Migrator endpoint to see\
            \ all available migrators. Examples include: `academic_benchmark_importer`,\
            \ `angel_exporter`, `blackboard_exporter`, `canvas_cartridge_importer`,\
            \ `common_cartridge_importer`, `course_copy_importer`, `d2l_exporter`,\
            \ `master_course_import`, `moodle_converter`, `qti_converter`, `webct_scraper`,\
            \ `zip_file_importer`, `context_external_tool_1234`."
          maxLength: 255
        child_subscription_id:
          description: The unique ID of the `master_courses_child_subscription` record
            indicating a blueprint association.
          format: int64
        migration_settings:
          description: Ruby hash of settings that determine what data will get imported
            for this migration.
        started_at:
          description: Timestamp showing when a content migration started.
          format: date-time
        finished_at:
          description: Timestamp showing when a content migration finished.
          format: date-time
        progress:
          description: Current migration progress. 100 indicates done at 100%.
          format: float64
      required:
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Saves data about what and when was added to a course through a course
        copy or import.
    content_participation_counts:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a content participation count record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp showing when a content_participation_counts record
            was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a content_participation_counts record
            was updated.
          format: date-time
        context_id:
          description: The unique identifier of a content_participation_counts's context
            (course).
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Course
        unread_count:
          description: The number of unread actions for this user on this course.
          format: int32
        content_type:
          description: The type of content.
          enum:
          - __dap_unspecified__
          - Submission
      required:
      - content_type
      - context_type
      - created_at
      - id
      - unread_count
      - updated_at
      title: Shows students a count of the number of submissions they have that have
        something unread.
    content_participations:
      additionalProperties: {}
      description: "Examples include new grade, new excused status, or new score."
      properties:
        id:
          description: The unique identifier of a content participation record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        workflow_state:
          description: Current state of the record.
          enum:
          - __dap_unspecified__
          - read
          - unread
        content_id:
          description: The unique identifier of a content record.
          format: int64
        content_type:
          description: The type of the object represented by `content_id`.
          enum:
          - __dap_unspecified__
          - Submission
      required:
      - content_id
      - content_type
      - id
      - user_id
      - workflow_state
      title: Stores data related to students submission updates or feedback.
    content_shares:
      additionalProperties: {}
      description: The receiver can use this link to import the content export into
        any of their courses.
      properties:
        id:
          description: The unique identifier of a content share.
          format: int64
        name:
          description: Name of the content item being shared.
          maxLength: 255
        type:
          description: Type of content share.
          enum:
          - __dap_unspecified__
          - SentContentShare
          - ReceivedContentShare
        user_id:
          description: The ID of the user who owns the content share.
          format: int64
        created_at:
          description: Timestamp showing when a `content_share` record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a `content_share` record was updated.
          format: date-time
        content_export_id:
          description: The ID of the ContentExport containing the content of the share.
          format: int64
        sender_id:
          description: The ID of the user who sent the content share. Only populated
            for ReceivedContentShare.
          format: int64
        read_state:
          description: State of the content shared.
          enum:
          - __dap_unspecified__
          - read
          - unread
      required:
      - content_export_id
      - created_at
      - id
      - name
      - read_state
      - type
      - updated_at
      - user_id
      title: Provides a link to a content export from a sender to a receiver.
    content_tags:
      additionalProperties: {}
      description: |-
        Some of the ways to use this table would be to: identify the external tool that is used to submit an assignment, identify the items
        that are in modules (the IDs in this table are also referred to as `module_item_id`), identify the learning outcome group that an
        outcome is part of.
      properties:
        id:
          description: The unique identifier for a content tag record.
          format: int64
        created_at:
          description: Timestamp of when a `content_tags` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `content_tags` record was updated.
          format: date-time
        workflow_state:
          description: The workflow state of the content tag.
          enum:
          - __dap_unspecified__
          - active
          - unpublished
          - deleted
        context_id:
          description: "The unique identifier for the `content_tags` context (account,\
            \ course, user). Depends on `context_type` value: `Course`: `courses.id`,\
            \ `Assignment`: `assignments.id`."
          format: int64
        context_type:
          description: "The type of the object represented by `context_id`, typically\
            \ `Course` or `Account` or `User`."
          enum:
          - __dap_unspecified__
          - Account
          - Assignment
          - Course
          - LearningOutcomeGroup
          - Quizzes::Quiz
          - User
        context_code:
          description: "An asset string describing the content tag context (for example:\
            \ `assignment_3`)."
          maxLength: 255
        comments:
          $ref: '#/components/schemas/content_tags_comments'
        migration_id:
          description: The ID of the migration that created the content tag.
          maxLength: 255
        content_id:
          description: Refers to the ID of the object that is linked to another object
            (`context_type`).
          format: int64
        tag_type:
          description: Identifies the type of tag.
          enum:
          - __dap_unspecified__
          - context_module
          - default
          - learning_outcome
          - learning_outcome_association
        context_module_id:
          description: The ID of the context module the content tag belongs to (if
            `tag_type` is `context_module`).
          format: int64
        learning_outcome_id:
          description: "Has a value if `tag_type` is `learning_outcome`, indicates\
            \ that the content (`content_type`, `content_id`) is aligned with the\
            \ given LearningOutcome."
          format: int64
        mastery_score:
          description: "when `tag_type` is `learning_outcome` and `content_type` is\
            \ `AssessmentQuestionBank`, indicates the required score on a set of bank\
            \ questions to show mastery."
          format: float64
        rubric_association_id:
          description: "(deprecated) when `tag_type` is `learning_outcome` and `content_type`\
            \ is `Assignment`, indicates the *RubricAssociation* which aligns the\
            \ *LearningOutcome* to the *Assignment*."
          format: int64
        associated_asset_id:
          description: "Associated asset, whose use varies by ContentTag use. When\
            \ `tag_type` is `learning_outcome_association`, then `content_type` is\
            \ `LearningOutcome` and `associated_asset_type` is `learning_outcome_group`\
            \ and indicates the *LearningOutcome* (`content_id`) is displayed within\
            \ the *LearningOutcomeGroup* (`associated_asset_id`). When `content_type`\
            \ is `ContextExternalTool` and `associated_asset_type` is `Lti::ResourceLink`,\
            \ indicates the resource link associated with an LTI tool link."
          format: int64
        associated_asset_type:
          description: "when `tag_type` is `learning_outcome_association`, then `content_type`\
            \ is `LearningOutcome` and `associated_asset_type` is `learning_outcome_group`\
            \ and indicates the *LearningOutcome* (`content_id`) is displayed within\
            \ the *LearningOutcomeGroup* (`associated_asset_id`)."
          enum:
          - __dap_unspecified__
          - LearningOutcomeGroup
          - Lti::ResourceLink
        link_settings:
          $ref: '#/components/schemas/content_tags_link_settings'
        new_tab:
          description: Whether or not the content should open in a new tab.
        position:
          description: The position of the content tag relative to other content tags
            when listed in a UI.
          format: int32
        content_type:
          description: "The type of the tag's content. Corresponds to the tables that\
            \ `content_id` is a foreign key for, the exceptions being: `Announcement`\
            \ (for which `content_id` references the `discussion_topics` table) and\
            \ `ContextModuleSubheader` and `ExternalUrl` (which have no tables)."
          enum:
          - __dap_unspecified__
          - Announcement
          - AssessmentQuestionBank
          - Assignment
          - Attachment
          - ContextExternalTool
          - ContextModuleSubHeader
          - DiscussionTopic
          - ExternalUrl
          - LearningOutcome
          - LearningOutcomeGroup
          - LiveAssessments::Assessment
          - Lti::MessageHandler
          - Quizzes::Quiz
          - Rubric
          - WikiPage
        url:
          $ref: '#/components/schemas/content_tags_url'
        title:
          $ref: '#/components/schemas/content_tags_title'
      required:
      - content_id
      - context_id
      - context_type
      - created_at
      - id
      - tag_type
      - updated_at
      - workflow_state
      title: "In the context of LTI, joins `context_external_tools` to either `assignments`\
        \ or to `context_modules`."
    context_external_tools:
      additionalProperties: {}
      properties:
        id:
          description: Primary key for this record in the `context_external_tools`
            table in the Canvas database.
          format: int64
        developer_key_id:
          description: The client ID of the tool provider. LTI 1.3 only.
          format: int64
        created_at:
          description: Timestamp when the activation was created.
          format: date-time
        updated_at:
          description: The time at which the tool was last updated.
          format: date-time
        workflow_state:
          description: "Workflow state for activation (active, deleted)."
          enum:
          - __dap_unspecified__
          - anonymous
          - deleted
          - disabled
          - email_only
          - name_only
          - public
        context_id:
          description: The ID of the context the tool is deployed to. Identifies either
            a course (`courses`.`id` if `context_type` is `Course`) or an account
            (`accounts`.`id` if `context_type` is `Account`).
          format: int64
        context_type:
          description: The type of object the tool was activated in.
          enum:
          - __dap_unspecified__
          - Account
          - Course
        migration_id:
          description: The unique identifier of the migration that imported the tool.
          maxLength: 255
        consumer_key:
          $ref: '#/components/schemas/context_external_tools_consumer_key'
        cloned_item_id:
          description: The Id of the item in which this context_external_tool was
            cloned from.
          format: int64
        tool_id:
          description: The tool ID received from the external tool. May be missing
            if the tool does not send an ID.
          maxLength: 255
        not_selectable:
          description: true - tool is selectable in all scenarios. false - not selectable
            for assignment or module selection menu.
        app_center_id:
          description: The tool ID from eduappcenter.com.
          maxLength: 255
        allow_membership_service_access:
          description: Indicates that the tool has access to the legacy membership
            service. LTI 1 only. This setting is set by the Canvas user who installs
            the tool.
        description:
          $ref: '#/components/schemas/context_external_tools_description'
        name:
          description: The name of tool activation as entered by the user.
          maxLength: 255
        domain:
          description: The domain for the tool launch URL (optional field). Canvas
            uses this domain to lookup the correct tool to launch when the tool ID
            is unknown.
          maxLength: 255
        url:
          description: "The URL to where the tool may launch to (if this value is\
            \ NULL, use the `domain` field)."
          maxLength: 4096
        settings:
          $ref: '#/components/schemas/Type_extracted_from_column__context_external_tools_settings__'
      required:
      - allow_membership_service_access
      - consumer_key
      - created_at
      - id
      - name
      - updated_at
      - workflow_state
      title: Stores data about installed LTI 1 and 1.3 tools.
    context_module_progressions:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a user module progression record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp showing when a context_module_progressions record
            was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a context_module_progressions record
            was updated.
          format: date-time
        workflow_state:
          description: The current state of the record.
          enum:
          - __dap_unspecified__
          - completed
          - locked
          - started
          - unlocked
        requirements_met:
          description: Object indicating which requirements have been met.
        collapsed:
          description: Flag indicating whether modules items are collapsed for user.
        current_position:
          description: "For sequential access, this is the current position of the\
            \ module item (ContentTag)."
          format: int32
        completed_at:
          description: Timestamp showing when this user completed this module progression.
          format: date-time
        current:
          description: Flag indicating that this progression is current and not outdated.
        evaluated_at:
          description: "Timestamp showing when this progression was last evaluated\
            \ for completion, lock, or unlock."
          format: date-time
        incomplete_requirements:
          description: Object that contains incomplete requirements related to min_score.
        context_module_id:
          description: The unique identifier of a associated context_module.
          format: int64
        lock_version:
          description: Lock version of the module progression.
          format: int32
      required:
      - created_at
      - id
      - lock_version
      - updated_at
      - workflow_state
      title: "Shows which items a student has completed, started and not started in\
        \ a module."
    context_modules:
      additionalProperties: {}
      description: A place to link items so that students can proceed through course
        content in order.
      properties:
        id:
          description: The unique identifier of a module record.
          format: int64
        name:
          $ref: '#/components/schemas/context_modules_name'
        deleted_at:
          description: "Timestamp showing when this record was deleted. If the record\
            \ has not been deleted, the value will be NULL."
          format: date-time
        created_at:
          description: Timestamp showing when a `context_modules` record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a `context_modules` record was updated.
          format: date-time
        workflow_state:
          description: Current state of the record.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - unpublished
        unlock_at:
          description: Module can be locked until this date.
          format: date-time
        context_id:
          description: The unique identifier for the context of `context_modules`
            (`courses`.`id` if `context_type` is `Course`).
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Course
        migration_id:
          description: An identifier used by the Blueprint system to match with the
            blueprint content.
          maxLength: 255
        prerequisites:
          description: "An object indicating which module(s) must be completed before\
            \ accessing this one. Has value if course module has prerequisites; field\
            \ contains ids (context_modules.id), type and name of prerequisites."
        completion_requirements:
          description: "An object indicating the requirements to complete this module.\
            \ Contains ids and types (the action required). Requirements can be \"\
            must_mark_done\" , \"must_view\", or \"must_contribute\"."
        require_sequential_progress:
          description: Indicates whether requirements must be completed in sequential
            order.
        completion_events:
          $ref: '#/components/schemas/context_modules_completion_events'
        requirement_count:
          description: "The number of requirements to be completed before marking\
            \ module as complete: can be 1 or NULL for all."
          format: int32
        position:
          description: Where the module should fall in the list of modules.
          format: int32
      required:
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Modules in Canvas.
    conversation_message_participants:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a conversation recipients record.
          format: int64
        deleted_at:
          description: Timestamp when this record was deleted. If the record has not
            been deleted the value will be NULL.
          format: date-time
        user_id:
          description: The unique ID of a user.
          format: int64
        workflow_state:
          description: The workflow state of the conversation participants.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        conversation_message_id:
          description: Identifies the messages dataset for the associated message.
          format: int64
        conversation_participant_id:
          description: Identifies the conversations dataset for the associated conversation.
          format: int64
        tags:
          $ref: '#/components/schemas/conversation_message_participants_tags'
      required:
      - id
      title: The participants in a certain message in a Conversation.
    conversation_messages:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a conversation message record.
          format: int64
        created_at:
          description: Timestamp of when a `conversation_messages` record was created.
          format: date-time
        context_id:
          description: "The unique identifier for the context of `conversation_messages`\
            \ (account, course, user)."
          format: int64
        context_type:
          description: "The type of the object represented by `context_id`, typically\
            \ `Course` or `Account` or `User`."
          enum:
          - __dap_unspecified__
          - Account
        conversation_id:
          description: The unique identifier for the conversation.
          format: int64
        author_id:
          description: User ID of the author of the message.
          format: int64
        generated:
          description: This attribute is true if the system generated this message
            (e.g. "John was added to this conversation").
        forwarded_message_ids:
          $ref: '#/components/schemas/conversation_messages_forwarded_message_ids'
        media_comment_id:
          description: Media comment ID of an audio of video file to be associated
            with this message.
          maxLength: 255
        media_comment_type:
          description: Type of the associated media file.
          enum:
          - __dap_unspecified__
          - audio
          - audio/*
          - video
          - video/*
        asset_id:
          description: "The ID of an attached asset, such as a submission."
          format: int64
        asset_type:
          description: The type of an attached asset.
          enum:
          - __dap_unspecified__
          - Submission
        attachment_ids:
          $ref: '#/components/schemas/conversation_messages_attachment_ids'
        has_attachments:
          description: True if the message has attachments.
        has_media_objects:
          description: True if the message has media objects.
        body:
          $ref: '#/components/schemas/conversation_messages_body'
      required:
      - id
      title: "The messages that belong to a certain Conversation, these are in the\
        \ *Inbox*."
    conversation_participants:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a conversation message participants
            record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        updated_at:
          description: Timestamp of when a `conversation_participants` record was
            updated.
          format: date-time
        workflow_state:
          description: The workflow state of the message.
          enum:
          - __dap_unspecified__
          - read
          - unread
          - archived
          - deleted
        has_attachments:
          description: If the conversation has attachments.
        has_media_objects:
          description: If the conversation has media objects associated.
        last_message_at:
          description: The timestamp of the latest message.
          format: date-time
        subscribed:
          description: Indicates whether the current user is subscribed to the conversation.
        message_count:
          description: The number of messages in the conversation.
          format: int32
        label:
          description: "Any label applied to the conversation, such as *starred*."
          maxLength: 255
        tags:
          $ref: '#/components/schemas/conversation_participants_tags'
      required:
      - has_attachments
      - has_media_objects
      - id
      - message_count
      - subscribed
      - user_id
      - workflow_state
      title: The participants in a Conversation.
    conversations:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a conversations record. Links to
            `conversation_messages.conversation_id`.
          format: int64
        updated_at:
          description: Timestamp of when a conversations record was updated.
          format: date-time
        context_id:
          description: "The unique identifier for the conversations's context (account,\
            \ course, user). ID associated with the `context_type`."
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Course
          - Group
          - Account
        has_attachments:
          description: If the conversation has attachments.
        has_media_objects:
          description: If the conversation has media objects associated.
        subject:
          description: The subject line of the conversation.
          maxLength: 255
        tags:
          $ref: '#/components/schemas/conversations_tags'
      required:
      - has_attachments
      - has_media_objects
      - id
      title: Conversation threads from the Canvas Inbox.
    course_account_associations:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a course account association record.
          format: int64
        course_id:
          description: Identifies the course.
          format: int64
        created_at:
          description: Timestamp of when the record was created.
          format: date-time
        updated_at:
          description: Timestamp of when the record was updated.
          format: date-time
        account_id:
          description: Identifies the accounts dataset. Points to the account associated
            with the course. Could be Canvas root account or sub-account ID.
          format: int64
        course_section_id:
          description: Identifies the course section.
          format: int64
        depth:
          description: How many steps in the account chain are between the courses'
            direct account (`course`.`account_id`) and the `account_id` of the association.
          format: int32
      required:
      - account_id
      - course_id
      - created_at
      - depth
      - id
      - updated_at
      title: An explicit place to keep track of all the the accounts in the account
        hierarchy that a course belongs to.
    course_sections:
      additionalProperties: {}
      description: |-
        Sections are a group of students that have been organized for administrative purposes.  When users are enrolled in a course, they are
        actually enrolled in one of the sections of that course. It is possible to place more than one section in course, but it is not
        possible to put sections within sections. All sections of a course share the same content. If a course is taught by one instructor,
        sections can remain under one course. However, if each section is taught by a different instructor, those sections will need to be
        housed under separate courses. Each section can have its own varied due dates for assignments, quizzes, and discussions. For example, a
        course may have sections that meet on different days of the week or in different formats (online vs. face-to-face). Sections are also
        beneficial when Teacher Assistants are assigned to help manage courses and oversee grading for a portion of a course enrollment. As
        part of SIS or manual enrollments, you can limit students to only see students in their section. Instructors can also limit students if
        you allow them to manually enroll users in their own courses.
      properties:
        id:
          description: The unique identifier for the section.
          format: int64
        name:
          description: The name of the section.
          maxLength: 255
        course_id:
          description: The unique Canvas identifier for the course in which the section
            belongs.
          format: int64
        integration_id:
          description: The integration ID of the section. This field is only included
            if there is an integration set up between Canvas and SIS.
          maxLength: 255
        created_at:
          description: Timestamp for when this section was entered into the system.
          format: date-time
        updated_at:
          description: Timestamp for when the last time the section was updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the section.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        sis_batch_id:
          description: The unique identifier for the SIS import if created through
            SIS.
          format: int64
        start_at:
          description: "The start date for the section, if applicable. When a user\
            \ is allowed to participate in a course. enrollment term dates, course\
            \ dates, and course section dates flow together in all aspects of Canvas.\
            \ Various dates allow different users to participate in the course. The\
            \ hierarchy of dates are: course section dates override course dates,\
            \ course dates override term dates."
          format: date-time
        end_at:
          description: "The end date for the section, if applicable. When a user is\
            \ allowed to participate in a course."
          format: date-time
        sis_source_id:
          description: Id for the correlated record for the section in the SIS (assuming
            SIS integration has been properly configured).
          maxLength: 255
        default_section:
          description: True if this is the default section.
        accepting_enrollments:
          description: True if this section is open for enrollment.
        restrict_enrollments_to_section_dates:
          description: Restrict user enrollments to the start and end dates of the
            section. True when "Users can only participate in the course between these
            dates" is checked.
        nonxlist_course_id:
          description: The unique identifier of the original course of a cross-listed
            section.
          format: int64
        enrollment_term_id:
          description: Identifies the associated enrollment term.
          format: int64
      required:
      - course_id
      - created_at
      - id
      - name
      - updated_at
      - workflow_state
      title: Stores attributes for a section of a course.
    courses:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for the course.
          format: int64
        storage_quota:
          description: The total amount of storage space (in bytes) allowed to be
            used by files in the course.
          format: int64
        integration_id:
          description: "the integration identifier for the course, if defined."
          maxLength: 255
        lti_context_id:
          description: "UUID of the Canvas context in LTI standard. secondary ID for\
            \ this context, could be used in API to identify resource as well."
          maxLength: 255
        sis_batch_id:
          description: The unique identifier for the SIS import.
          format: int64
        created_at:
          description: The date the course was created.
          format: date-time
        updated_at:
          description: The time the course was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the course.
          enum:
          - __dap_unspecified__
          - created
          - claimed
          - available
          - completed
          - deleted
        account_id:
          description: Points to the account associated with the course.
          format: int64
        grading_standard_id:
          description: The grading standard associated with the course.
          format: int64
        start_at:
          description: "The start date for the course, if applicable. If NULL, then\
            \ use `start_at` value from `enrollment_terms` table. Enrollment term\
            \ dates, course dates, and course section dates flow together in all aspects\
            \ of Canvas. Various dates allow different users to participate in the\
            \ course. The hierarchy of dates are: course section dates override course\
            \ dates, course dates override term dates."
          format: date-time
        sis_source_id:
          description: "The SIS identifier for the course, if defined."
          maxLength: 255
        group_weighting_scheme:
          description: Whether final grades will be weighted based on the `group_weight`
            value of assignment groups `percent` if weighted `equal` or NULL otherwise.
          maxLength: 255
        conclude_at:
          description: "The end date for the course, if applicable. If NULL, then\
            \ use `start_at` value from `enrollment_terms` table."
          format: date-time
        is_public:
          description: True if the course is publicly visible.
        allow_student_wiki_edits:
          description: Whether Pages in the course can be created and are editable
            by students.
        syllabus_body:
          $ref: '#/components/schemas/courses_syllabus_body'
        default_wiki_editing_roles:
          description: Comma-separated list used as the default `editing_roles` value
            for new `wiki_pages` in the course.
          maxLength: 255
        wiki_id:
          description: Foreign key to the `wikis` dataset.
          format: int64
        allow_student_organized_groups:
          description: Whether students are able to organize their own groups.
        course_code:
          description: The course code.
          maxLength: 255
        default_view:
          description: "the type of page that users will see when they first visit\
            \ the course - `feed`: Recent Activity Dashboard - `wiki`: Wiki Front\
            \ Page - `modules`: Course Modules/Sections Page - `assignments`: Course\
            \ Assignments List - `syllabus`: Course Syllabus Page other types may\
            \ be added in the future."
          maxLength: 255
        abstract_course_id:
          description: Foreign key to the `abstract_courses` table.
          format: int64
        enrollment_term_id:
          description: The enrollment term associated with the course.
          format: int64
        open_enrollment:
          description: Whether the course has enabled open enrollment.
        tab_configuration:
          description: A YAML serialized list detailing the order and visibility status
            of tabs in the left-hand navigation for the course.
        turnitin_comments:
          $ref: '#/components/schemas/courses_turnitin_comments'
        self_enrollment:
          description: Whether the course has enabled self enrollment.
        license:
          description: "The default license for content in the course; `private`:\
            \ Private (Copyrighted), `public_domain`: Public Domain, `cc_by`: CC Attribution,\
            \ `cc_by_sa`: CC Attribution Share Alike, `cc_by_nc`: CC Attribution Noncommercial,\
            \ `cc_by_nc_sa`: CC Attribution Noncommercial Share Alike, `cc_by_nd`:\
            \ CC Attribution No Derivatives, `cc_by_nc_nd`: CC Attribution Noncommercial\
            \ No Derivatives."
          maxLength: 255
        indexed:
          description: Whether the course is included in the public course index.
        restrict_enrollments_to_course_dates:
          description: Whether the course's start and end dates will override dates
            from the term when determining user access.
        template_course_id:
          description: "If set, this course was originally created via SIS when a\
            \ section was marked to be cross listed to a non-existent course, using\
            \ attributes from the original section's course and setting that course\
            \ ID here."
          format: int64
        replacement_course_id:
          description: The ID of the course created to replace this one when it had
            its content reset.
          format: int64
        public_description:
          $ref: '#/components/schemas/courses_public_description'
        self_enrollment_code:
          description: The alpha-numeric code students can use to enroll in the course
            through self enrollment.
          maxLength: 255
        self_enrollment_limit:
          description: The number of students that can enroll in the course through
            self enrollment.
          format: int32
        turnitin_id:
          description: A unique identifier for use with Turnitin.
          format: int64
        show_announcements_on_home_page:
          description: Whether announcements will be shown on the course home page.
        home_page_announcement_limit:
          description: The maximum number of announcements to show on the course home
            page.
          format: int32
        latest_outcome_import_id:
          description: The ID of the most recent Outcome Import for the course.
          format: int64
        grade_passback_setting:
          description: The grade_passback_setting set on the course.
          maxLength: 255
        template:
          description: Course is marked as a template for accounts to use.
        homeroom_course:
          description: Course is marked as a homeroom course.
        sync_enrollments_from_homeroom:
          description: Enrollments for this course will be synced from the associated
            homeroom.
        homeroom_course_id:
          description: Points to the homeroom course from which this course receives
            its enrollments.
          format: int64
        locale:
          description: "The course-set locale, if applicable."
          maxLength: 255
        name:
          description: The full name of the course.
          maxLength: 255
        time_zone:
          description: The course's IANA time zone name.
          maxLength: 255
        uuid:
          description: The UUID of the course.
          maxLength: 255
        settings:
          $ref: '#/components/schemas/Type_extracted_from_column__courses_settings__'
      required:
      - account_id
      - allow_student_organized_groups
      - created_at
      - enrollment_term_id
      - homeroom_course
      - id
      - sync_enrollments_from_homeroom
      - template
      - updated_at
      - workflow_state
      title: Stores attributes for a course.
    custom_gradebook_column_data:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a custom gradebook column data record.
          format: int64
        content:
          description: The particular value of the specified column for the user denoted
            by user_id.
          maxLength: 255
        user_id:
          description: The unique ID of the user to whom this data record applies.
          format: int64
        custom_gradebook_column_id:
          description: The ID of the associated custom column.
          format: int64
      required:
      - content
      - custom_gradebook_column_id
      - id
      - user_id
      title: Contains per-user data for the custom columns defined in custom_gradebook_columns.
    custom_gradebook_columns:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a custom Gradebook column data definition.
          format: int64
        created_at:
          description: Timestamp of when a custom_gradebook_columns record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a custom_gradebook_columns record was updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the custom gradebook column.
          enum:
          - __dap_unspecified__
          - active
          - hidden
          - deleted
        course_id:
          description: The ID of the course that defines this column.
          format: int64
        teacher_notes:
          description: True if this column represents the predefined *Notes* column
            in Gradebook.
        position:
          description: The ordering of this column among the columns defined for this
            course.
          format: int32
        read_only:
          description: "If true, the contents of this column cannot be edited from\
            \ Gradebook."
        title:
          description: "The title of the column, as displayed in Gradebook."
          maxLength: 255
      required:
      - course_id
      - created_at
      - id
      - position
      - read_only
      - teacher_notes
      - title
      - updated_at
      - workflow_state
      title: Contains configuration information for custom Gradebook columns defined
        for specific courses.
    developer_key_account_bindings:
      additionalProperties: {}
      description: Describes if the associated developer key is "on" or "off" for
        the associated account.
      properties:
        id:
          description: The unique identifier for a developer key and account association
            record.
          format: int64
        account_id:
          description: Points to the account associated with the course. Could be
            Canvas root account or sub-account ID.
          format: int64
        created_at:
          description: Timestamp of when a developer_key_account_bindings record was
            created.
          format: date-time
        updated_at:
          description: Timestamp of when a developer_key_account_bindings record was
            updated.
          format: date-time
        workflow_state:
          description: The workflow state of the binding.
          enum:
          - __dap_unspecified__
          - "on"
          - allow
          - "off"
        developer_key_id:
          description: The ID of the associated developer key.
          format: int64
      required:
      - account_id
      - created_at
      - developer_key_id
      - id
      - updated_at
      - workflow_state
      title: Joins the accounts table to developer_keys.
    developer_keys:
      additionalProperties: {}
      description: Contains both normal API keys and the LTI keys used in LTI 1.3
        apps.
      properties:
        id:
          description: The unique identifier for a developer key record.
          format: int64
        name:
          description: The name of the developer key.
          maxLength: 255
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp of when a `developer_keys` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `developer_keys` record was updated.
          format: date-time
        scopes:
          description: The list of scopes the developer key's access tokens may use.
        workflow_state:
          description: The workflow state of the developer key.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - inactive
        account_id:
          description: Points to the account associated with the course. Could be
            Canvas root account or sub-account ID.
          format: int64
        redirect_uri:
          description: (legacy) The valid redirect URI for the developer key.
          maxLength: 255
        icon_url:
          description: A URL pointing to the icon of the developer key.
          maxLength: 255
        redirect_uris:
          description: The list of valid redirect URIs for the developer key.
          items:
            maxLength: 255
        notes:
          $ref: '#/components/schemas/developer_keys_notes'
        access_token_count:
          description: The number of times the developer key has been used.
          format: int32
        require_scopes:
          description: Whether or not access token for the developer key are required
            to be scoped.
        test_cluster_only:
          description: "If true, the developer key's access tokens are only valid\
            \ on Canvas test and beta instances."
        public_jwk:
          $ref: '#/components/schemas/developer_keys_public_jwk'
        allow_includes:
          description: "If true, requests made with this key's access token can use\
            \ \"includes\" parameters to retrieve additional data in each request."
        is_lti_key:
          description: "If true, the developer key is intended to be used with LTI\
            \ 1.3 tools."
        client_credentials_audience:
          $ref: '#/components/schemas/developer_keys_client_credentials_audience'
        email:
          description: The email address of the developer key's owner.
          maxLength: 255
        user_name:
          description: the login ID of the user who originated developer key.
          maxLength: 255
      required:
      - access_token_count
      - allow_includes
      - created_at
      - id
      - is_lti_key
      - redirect_uris
      - require_scopes
      - test_cluster_only
      - updated_at
      - workflow_state
      title: A table representing a set of credentials used for API access.
    discussion_entries:
      additionalProperties: {}
      description: Discussion entries are replies in a discussion topic.
      properties:
        id:
          description: The unique identifier for the entry.
          format: int64
        message:
          $ref: '#/components/schemas/discussion_entries_message'
        attachment_id:
          description: "Representation of the attachment for the entry, if any. Present\
            \ only if there is an attachment."
          format: int64
        deleted_at:
          description: Timestamp when the discussion entry was deleted.
          format: date-time
        user_id:
          description: The unique identifier for the author of the entry.
          format: int64
        created_at:
          description: The creation time of the entry.
          format: date-time
        updated_at:
          description: "The updated time of the entry, in ISO8601 format."
          format: date-time
        workflow_state:
          description: Life-cycle state for the discussion message.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        migration_id:
          description: The unique identifier of the migration that imported the entry.
          maxLength: 255
        discussion_topic_id:
          description: The ID of the discussion topic that this entry is part of.
          format: int64
        parent_id:
          description: The parent discussion entry ID of this discussion entry. Has
            a value if the entry is a reply to another entry.
          format: int64
        editor_id:
          description: "The unique user ID of the person to last edit the entry, if\
            \ different than user_id."
          format: int64
        root_entry_id:
          description: The root discussion entry ID that this entry is a part of.
            Has a value if the entry is a reply to another entry.
          format: int64
        depth:
          description: Reply depth for this entry.
          format: int32
        rating_count:
          description: Rating count is the amount of people who have submitted a rating
            on a given discussion with the only rating being "like".
          format: int32
        rating_sum:
          description: The rating sum is the sum of the ratings which occurred.
          format: int32
      required:
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Stores attributes for discussion entries.
    discussion_entry_participants:
      additionalProperties: {}
      properties:
        id:
          description: The Id of the discussion entry participant.
          format: int64
        user_id:
          description: The ID of the user who participated in this discussion entry.
          format: int64
        workflow_state:
          description: "Life-cycle state for the entry record, could be \"read\" if\
            \ a participant read a discussion."
          enum:
          - __dap_unspecified__
          - read
          - unread
        forced_read_state:
          description: Allows for users to force a discussion entry to be unread.
        discussion_entry_id:
          description: The ID of the discussion entry that this participant participated
            in.
          format: int64
        rating:
          description: It is a number of 0 or 1 that indicates the rating providing
            to the linked entry.
          format: int32
      required:
      - discussion_entry_id
      - id
      - user_id
      - workflow_state
      title: Tracks who has read a particular entry.
    discussion_topic_participants:
      additionalProperties: {}
      description: "If a user has posted to a discussion topic, there will be a row\
        \ in this table."
      properties:
        id:
          description: The unique identifier of a discussion topic participants record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        workflow_state:
          description: Current state of the record.
          enum:
          - __dap_unspecified__
          - read
          - unread
        subscribed:
          description: Flag indicating that user is subscribed to discussion and will
            receive notifications for new comments.
        unread_entry_count:
          description: The count of discussion entries that this user has not yet
            read.
          format: int32
        discussion_topic_id:
          description: The unique identifier of a discussion topic record.
          format: int64
      required:
      - discussion_topic_id
      - id
      - unread_entry_count
      - user_id
      - workflow_state
      title: Links discussion topics to the users who have posted in them.
    discussion_topics:
      additionalProperties: {}
      description: |-
        Discussion topics are logical discussion threads. They can have many discussion entries. They also have their own message text for the
        message that started the topic.
      properties:
        id:
          description: The ID of this topic.
          format: int64
        message:
          $ref: '#/components/schemas/discussion_topics_message'
        type:
          description: Discussion topic type. Two types are default (blank) and Announcement.
          enum:
          - __dap_unspecified__
          - Announcement
        attachment_id:
          description: Has a value if the discussion topic is associated with an attachment
            (file).
          format: int64
        deleted_at:
          description: Timestamp when the discussion topic was deleted.
          format: date-time
        user_id:
          description: The username of the topic creator.
          format: int64
        created_at:
          description: The date the discussion topic was made.
          format: date-time
        updated_at:
          description: The date the discussion topic was updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the discussion topic.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - locked
          - post_delayed
          - unpublished
        lock_at:
          description: The datetime to lock the topic (if ever).
          format: date-time
        context_id:
          description: "The ID of the context that this discussion is used in, e.g.\
            \ `courses`.`id` if `context_type` is `Course`."
          format: int64
        context_type:
          description: The type of context this discussion is used with.
          enum:
          - __dap_unspecified__
          - Course
          - Group
        locked:
          description: Whether or not the discussion is *closed for comments*.
        assignment_id:
          description: "The unique identifier of the assignment if the topic is for\
            \ grading, otherwise NULL."
          format: int64
        migration_id:
          description: The unique identifier of the migration that imported this discussion
            topic.
          maxLength: 255
        group_category_id:
          description: "The unique identifier of the group category if the topic is\
            \ a group discussion, otherwise NULL."
          format: int64
        cloned_item_id:
          description: The ID of the item in which this discussion topic was cloned
            from.
          format: int64
        last_reply_at:
          description: The datetime for when the last reply was in the topic.
          format: date-time
        delayed_post_at:
          description: The datetime to publish the topic (if not right away).
          format: date-time
        posted_at:
          description: The datetime the topic was posted. If it is NULL it hasn't
            been posted yet.
          format: date-time
        root_topic_id:
          description: If the topic is for grading and a group assignment this will
            point to the original topic in the course.
          format: int64
        old_assignment_id:
          description: "the assignment ID after you change a topic from graded to\
            \ ungraded, then restores the old one if it goes back to graded."
          format: int64
        subtopics_refreshed_at:
          description: The time at which the subtopics for a group category discussion
            was refreshed at.
          format: date-time
        external_feed_id:
          description: The ID of the external feed that this discussion topic was
            created from.
          format: int64
        podcast_enabled:
          description: Boolean to determine if the podcast is enabled.
        podcast_has_student_posts:
          description: "If true, the podcast will include posts from students as well.\
            \ Implies podcast_enabled."
        require_initial_post:
          description: If true then a user may not respond to other replies until
            that user has made an initial reply.
        editor_id:
          description: The ID of the editor of the discussion.
          format: int64
        discussion_type:
          description: The type of discussion.
          enum:
          - __dap_unspecified__
          - side_comment
          - threaded
        pinned:
          description: Whether or not the discussion has been *pinned* by an instructor.
        allow_rating:
          description: Whether or not users can rate entries in this topic.
        only_graders_can_rate:
          description: Whether or not grade permissions are required to rate entries.
        sort_by_rating:
          description: Whether or not entries should be sorted by rating.
        todo_date:
          description: Date in which discussion topic will show up in the student
            planner feature.
          format: date-time
        is_section_specific:
          description: Boolean distinguishing if the topic is a section specific topic
            or not.
        position:
          description: The position on the discussions index page under pinned items.
          format: int32
        title:
          description: The topic title.
          maxLength: 255
      required:
      - allow_rating
      - context_id
      - context_type
      - created_at
      - id
      - is_section_specific
      - locked
      - only_graders_can_rate
      - pinned
      - podcast_enabled
      - podcast_has_student_posts
      - require_initial_post
      - sort_by_rating
      - updated_at
      - workflow_state
      title: This table stores attributes for discussion topics in Canvas.
    enrollment_dates_overrides:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for an enrollment date override record.
          format: int64
        created_at:
          description: Timestamp of when a enrollment_dates_overrides record was created.
          format: date-time
        updated_at:
          description: Timestamp of when an enrollment_dates_overrides record was
            updated.
          format: date-time
        context_id:
          description: "The unique ID of main Canvas account, always a root account\
            \ ID in this table."
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Account
        start_at:
          description: The start time of the enrollment.
          format: date-time
        end_at:
          description: "The end datetime for the enrollment date override, if applicable."
          format: date-time
        enrollment_term_id:
          description: The unique identifier for the enrollment term.
          format: int64
        enrollment_type:
          description: "The enrollment type. One of StudentEnrollment, TeacherEnrollment,\
            \ TaEnrollment, DesignerEnrollment, ObserverEnrollment."
          enum:
          - __dap_unspecified__
          - DesignerEnrollment
          - StudentEnrollment
          - TaEnrollment
          - TeacherEnrollment
      required:
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      title: Supports allowing certain roles to have access to a term outside of term
        date boundaries.
    enrollment_states:
      additionalProperties: {}
      properties:
        enrollment_id:
          description: The ID of the enrollment.
          format: int64
        updated_at:
          description: Timestamp of when an `enrollment_states` record was updated.
          format: date-time
        state_is_current:
          description: Indicates if the enrollment state is current or needs recalculation.
        state_started_at:
          description: Indicates the date that the enrollment state should take effect.
          format: date-time
        state_valid_until:
          description: Indicates the date that the enrollment state becomes stale.
          format: date-time
        restricted_access:
          description: Indicates if the enrollment is allowed to view the course.
        access_is_current:
          description: Indicates if the state is within the start and valid until
            bounds.
        state:
          description: State of the user enrollment.
          enum:
          - __dap_unspecified__
          - active
          - invited
          - creation_pending
          - deleted
          - rejected
          - completed
          - inactive
          - current_and_invited
          - current_and_future
          - current_and_concluded
          - pending_active
          - pending_invited
      required:
      - access_is_current
      - enrollment_id
      - restricted_access
      - state_is_current
      title: Stores the state of an enrollment.
    enrollment_terms:
      additionalProperties: {}
      description: |-
        Use the dates in this table as a proxy for the course start/end dates if the `start_at` and `end_at` fields in the courses table are
        NULL.
      properties:
        id:
          description: The unique identifier for the enrollment term.
          format: int64
        name:
          description: The name of the term.
          maxLength: 255
        integration_id:
          description: "The ID of the enrollment term in the external tools or SIS,\
            \ this ID usually gets populated via API or SIS import."
          maxLength: 255
        created_at:
          description: Timestamp of when the enrollment term was created.
          format: date-time
        updated_at:
          description: Timestamp of when the enrollment term was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the term.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        sis_batch_id:
          description: The unique identifier for the SIS import. This field is only
            included if the user has permission to manage SIS information.
          format: int64
        start_at:
          description: "The datetime of the start of the term. Set up by the administrator.\
            \ Enrollment term dates, course dates, and course section dates flow together\
            \ in all aspects of Canvas; various dates allow different users to participate\
            \ in the course. The hierarchy of dates are: course section dates override\
            \ course dates, course dates override term dates."
          format: date-time
        end_at:
          description: The datetime of the end of the term. Set up by the administrator.
          format: date-time
        sis_source_id:
          description: The SIS ID of the term. Only included if the user has permission
            to view SIS information.
          maxLength: 255
        term_code:
          description: Enrollment term code as viewed in the UI.
          maxLength: 255
        grading_period_group_id:
          description: Identifies the grading period group.
          format: int64
      required:
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Stores enrollment term records that describe the term or semester associated
        with courses (e.g. Fall 2013).
    enrollments:
      additionalProperties: {}
      description: |-
        An enrollment represents a user's association with a specific course and section. There may be multiple records associated with a
        `course_id` and `user_id` combination (records are unique on: `course_id`, `user_id`, `course_section_id`, `role_id`, `workflow_state`,
        `associated_user_id`).
      properties:
        id:
          description: The ID of the enrollment.
          format: int64
        sis_batch_id:
          description: The unique identifier for the SIS import. This field is only
            included if the user has permission to manage SIS information.
          format: int64
        user_id:
          description: The unique ID of the user.
          format: int64
        created_at:
          description: The created time of the enrollment.
          format: date-time
        updated_at:
          description: The updated time of the enrollment.
          format: date-time
        workflow_state:
          description: Life-cycle state for the user's enrollment in the course.
          enum:
          - __dap_unspecified__
          - creation_pending
          - invited
          - rejected
          - active
          - inactive
          - completed
          - deleted
        role_id:
          description: The ID of the enrollment role.
          format: int64
        start_at:
          description: "The start time of the enrollment, in ISO8601 format."
          format: date-time
        end_at:
          description: "The end time of the enrollment, in ISO8601 format."
          format: date-time
        course_id:
          description: The unique ID of the course.
          format: int64
        completed_at:
          description: Enrollment completed date.
          format: date-time
        course_section_id:
          description: The Section Integration ID in which the enrollment is associated.
            This field is only included if the user has permission to view SIS information.
          format: int64
        grade_publishing_status:
          description: Used internally with grade passback functionality.
          maxLength: 255
        associated_user_id:
          description: The unique ID of the associated user. Will be NULL unless type
            is ObserverEnrollment.
          format: int64
        self_enrolled:
          description: Enrollment was created via self-enrollment.
        limit_privileges_to_course_section:
          description: User can only access his or her own course section.
        last_activity_at:
          description: "The last activity time of the user for the enrollment. This\
            \ time stamp updates when a user navigates through the course using the\
            \ Course Navigation menu, replies to a discussion or submits an assignment\
            \ or quiz, and when they access course files and pages (does not include\
            \ mobile interactions or group participation)."
          format: date-time
        total_activity_time:
          description: "The total activity time of the user for the enrollment, in\
            \ seconds. If user is viewing a page and is enrolled in that particular\
            \ course, then the time is incremented. Requires at least 2 minutes, but\
            \ not more than 10 (for ex: if a student just checks their grade or due\
            \ date and was on the page for less than 2 min, it doesn't get counted).\
            \ May not be incremented for page views through mobile app (will get incremented\
            \ for page views through mobile browser); does not include group activity\
            \ or page views for videos that do not include intermediate page requests,\
            \ such as a half-hour recorded lecture."
          format: int32
        sis_pseudonym_id:
          description: "If enrolled via SIS import, which pseudonym was referenced\
            \ to create this enrollment. It's the user ID that was referenced when\
            \ an enrollment was created via SIS. it's used for some LTI calls to try\
            \ and send consistent IDs. also used for splitting accidentally-merged-users\
            \ to decide which way the enrollments should go."
          format: int64
        last_attended_at:
          description: The last attended date of the user for the enrollment in a
            course. The UI facing field that could be set by an end user or API call.
          format: date-time
        type:
          description: The base enrollment type.
          enum:
          - __dap_unspecified__
          - StudentEnrollment
          - TeacherEnrollment
          - TaEnrollment
          - DesignerEnrollment
          - ObserverEnrollment
          - StudentViewEnrollment
      required:
      - course_id
      - course_section_id
      - created_at
      - grade_publishing_status
      - id
      - limit_privileges_to_course_section
      - role_id
      - type
      - updated_at
      - user_id
      - workflow_state
      title: This table stores user enrollments.
    favorites:
      additionalProperties: {}
      description: This affects how items are displayed in places like the Dashboard.
      properties:
        id:
          description: The unique identifier for a favorite record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp of when a favorites record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a favorites record was updated.
          format: date-time
        context_id:
          description: "The unique identifier for the favorites's context (account,\
            \ course, user)."
          format: int64
        context_type:
          description: "The type of the object represented by `context_id`, typically\
            \ `Course` or `Account` or `User`."
          enum:
          - __dap_unspecified__
          - Course
          - Group
      required:
      - context_type
      - created_at
      - id
      - updated_at
      title: "A record of items that a user has favorited, such as a Course."
    folders:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a folder record.
          format: int64
        name:
          description: Name of the folder.
          maxLength: 255
        full_name:
          $ref: '#/components/schemas/folders_full_name'
        deleted_at:
          description: Timestamp when this record was deleted. If the record has not
            been deleted the value will be NULL.
          format: date-time
        created_at:
          description: Timestamp of when a folders record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a folders record was updated.
          format: date-time
        workflow_state:
          description: In this context the workflow state indicates the visibility
            of the folder.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - hidden
          - private
          - visible
        unlock_at:
          description: Indicates the date at which this folder should become accessible.
          format: date-time
        lock_at:
          description: Indicates the date at which this folder should no longer be
            accessible.
          format: date-time
        context_id:
          description: "The unique identifier for the folders's context (account,\
            \ course, user)."
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Account
          - Course
          - Group
          - User
        locked:
          description: "Indicates if the folder is currently accessible [NULL=false]."
        cloned_item_id:
          description: Unique identifier of the folder that this folder was cloned
            from.
          format: int64
        submission_context_code:
          description: A value indicating the context to which this folder should
            be submitted if it is for a submission.
          maxLength: 255
        parent_folder_id:
          description: Id of the parent folder.
          format: int64
        unique_type:
          description: "Value indicating what kind of files are stored in this folder.\
            \ NULL is the most common value, meaning this is a standard folder. `media`\
            \ is a special case where media files are stored."
          enum:
          - __dap_unspecified__
          - media
          - student annotation documents
          - icon maker icons
          - buttons and icons
        position:
          description: An integer value used for sorting the order in which the folder
            is listed.
          format: int32
      required:
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      - workflow_state
      title: A collection of files (attachments).
    grading_period_groups:
      additionalProperties: {}
      properties:
        id:
          description: Primary key for the grading period groups.
          format: int64
        account_id:
          description: Points to the account associated with the group.
          format: int64
        created_at:
          description: Timestamp when record was created.
          format: date-time
        updated_at:
          description: Timestamp when record was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the grading period group.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        course_id:
          description: Identifies the course.
          format: int64
        weighted:
          description: Whether to weight individual grading periods within this grading
            group.
        display_totals_for_all_grading_periods:
          description: "If set, shows the option to display the totals for all grading\
            \ periods within this group on the student grades page and the gradebook."
        title:
          description: The title for this grading period group.
          maxLength: 255
      required:
      - created_at
      - display_totals_for_all_grading_periods
      - id
      - updated_at
      - workflow_state
      title: "Stores attributes for grading period groups, which are a group of grading\
        \ periods."
    grading_periods:
      additionalProperties: {}
      description: "A Grading period is like a \"term\", essentially used for splitting\
        \ up the grade book into \"periods\"."
      properties:
        id:
          description: The unique identifier for the grading period.
          format: int64
        created_at:
          description: Timestamp when record was created.
          format: date-time
        updated_at:
          description: Timestamp when record was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the grading periods.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        grading_period_group_id:
          description: Surrogate ID to the grading period group dataset.
          format: int64
        start_date:
          description: The start date of the grading period.
          format: date-time
        end_date:
          description: The end date of the grading period.
          format: date-time
        close_date:
          description: Grades can only be changed before this close date of the grading
            period.
          format: date-time
        title:
          description: The title for the grading period.
          maxLength: 255
        weight:
          description: "A weight value that contributes to the overall weight of a\
            \ grading period set, used to calculate how much assignments in this period\
            \ contribute to the total grade."
          format: float64
      required:
      - created_at
      - end_date
      - grading_period_group_id
      - id
      - start_date
      - updated_at
      - workflow_state
      title: Stores attributes for grading period.
    grading_standards:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a grading standard record.
          format: int64
        version:
          description: "Either 1 or 2, as noted in the definition of `data`."
          format: int32
        context_code:
          description: "A value in string form representing the associated context\
            \ (e.g., `course_5`)."
          maxLength: 255
        user_id:
          description: The ID of the user who created this grading standard.
          format: int64
        created_at:
          description: Timestamp of when a `grading_standards` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `grading_standards` record was updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the grading standard.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        context_id:
          description: The ID of the account or course to which this grading standard
            belongs.
          format: int64
        context_type:
          description: "The type of the object represented by `context_id`, either\
            \ Account or Course."
          enum:
          - __dap_unspecified__
          - Account
          - Course
        migration_id:
          description: "The ID of the associated migration, if this grading standard\
            \ was created via a content migration."
          maxLength: 255
        title:
          description: The name for this grading standard.
          maxLength: 255
        data:
          description: "A stringified array representing the content of this grading\
            \ standard. If the `version` column is 1, each element is a tuple containing\
            \ a letter grade and the maximum value for that letter grade. If the `version`\
            \ column is 2, each element is a tuple containing a letter grade and the\
            \ minimum value for that letter grade."
      required:
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Contains data for grading schemes defined for a course or account.
    group_categories:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a group category record.
          format: int64
        name:
          description: The display name of the group category.
          maxLength: 255
        deleted_at:
          description: Timestamp when this record was deleted. If the record has not
            been deleted the value will be NULL.
          format: date-time
        created_at:
          description: Timestamp of when a `group_categories` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `group_categories` record was updated.
          format: date-time
        sis_batch_id:
          description: The unique identifier for the SIS import. This field is only
            included if the user has permission to manage SIS information.
          format: int64
        context_id:
          description: "The unique identifier for the context of `group_categories`\
            \ (account, course, user)."
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Account
          - Course
        sis_source_id:
          $ref: '#/components/schemas/group_categories_sis_source_id'
        role:
          description: "Certain types of group categories have special role designations.\
            \ Currently, these include: `communities`, `student_organized`, and `imported`.\
            \ Regular course/account group categories have a role of NULL."
          enum:
          - __dap_unspecified__
          - communities
          - student_organized
          - imported
        self_signup:
          description: "If the group category allows users to join a group themselves,\
            \ thought they may only be a member of one group per group category at\
            \ a time. Values include `restricted`, `enabled`, and NULL. `enabled`\
            \ allows students to assign themselves to a group, `restricted` restricts\
            \ them to only joining a group in their section, NULL disallows students\
            \ from joining groups."
          maxLength: 255
        group_limit:
          description: "If self-signup is enabled, this field can be set to cap the\
            \ number of users in each group. If NULL, there is no limit."
          format: int32
        auto_leader:
          description: "Gives instructors the ability to automatically have group\
            \ leaders assigned. Values include `random`, `first`, and NULL; `random`\
            \ picks a student from the group at random as the leader, `first` sets\
            \ the first student to be assigned to the group as the leader."
          maxLength: 255
      required:
      - context_type
      - id
      title: "A container for a set of groups, since often you want everyone to be\
        \ in exactly one group in a set."
    group_memberships:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a group membership record.
          format: int64
        user_id:
          description: The ID of the user object to which the membership belongs.
          format: int64
        created_at:
          description: Timestamp of when a `group_memberships` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `group_memberships` record was updated.
          format: date-time
        workflow_state:
          description: The current state of the membership.
          enum:
          - __dap_unspecified__
          - accepted
          - deleted
          - invited
          - rejected
          - requested
        sis_batch_id:
          description: The ID of the SIS import if created through SIS. Only included
            if the user has permission to manage SIS information.
          format: int64
        group_id:
          description: The ID of the group object to which the membership belongs.
          format: int64
        moderator:
          description: Whether or not the user is a moderator of the group (the must
            also be an active member of the group to moderate).
        uuid:
          description: UUID for a membership record.
          maxLength: 255
      required:
      - created_at
      - group_id
      - id
      - updated_at
      - user_id
      - uuid
      - workflow_state
      title: "A join table of users and groups. Like enrollments, but for groups instead\
        \ of courses."
    groups:
      additionalProperties: {}
      description: Groups contain two or more students enrolled in a particular course
        working on an assignment or project together.
      properties:
        id:
          description: The ID of the group.
          format: int64
        name:
          description: The display name of the group.
          maxLength: 255
        deleted_at:
          description: Timestamp when the group was deleted.
          format: date-time
        storage_quota:
          description: The storage quota for the group.
          format: int64
        lti_context_id:
          description: "UUID of the Canvas context in LTI standard. secondary ID for\
            \ this context, could be used in API to identify resource as well."
          maxLength: 255
        created_at:
          description: Timestamp when the group was first saved in the system.
          format: date-time
        updated_at:
          description: Timestamp when the group was last updated in the system.
          format: date-time
        workflow_state:
          description: Life-cycle state for the group.
          enum:
          - __dap_unspecified__
          - available
          - deleted
          - active
        account_id:
          description: "Identifies the associated account, groups could be owned by\
            \ sub-accounts."
          format: int64
        sis_batch_id:
          description: The ID of the SIS import if created through SIS.
          format: int64
        context_id:
          description: "The ID of the context (account or course) this group belongs\
            \ too. See also: context_type."
          format: int64
        context_type:
          description: "The course or account that the group belongs to. The pattern\
            \ here is that whatever the `context_type` is, there will be an `_id`\
            \ field named after that type. So if instead `context_type` was `account`,\
            \ the `course_id` field would be replaced by an `account_id` field."
          enum:
          - __dap_unspecified__
          - Account
          - Course
        migration_id:
          description: The unique identifier of the migration that imported this group.
          maxLength: 255
        group_category_id:
          description: The ID of the group's category.
          format: int64
        sis_source_id:
          description: The SIS ID of the group.
          maxLength: 255
        is_public:
          description: "Whether or not the group is public. Currently only community\
            \ groups can be made public. Also, once a group has been set to public,\
            \ it cannot be changed back to private."
        wiki_id:
          description: The ID of an associated wiki page.
          format: int64
        max_membership:
          description: The maximum number of participating users in the group.
          format: int32
        join_level:
          description: "How people are allowed to join the group. For all groups except\
            \ for community groups, the user must share the group's parent course\
            \ or account. For student organized or community groups, where a user\
            \ can be a member of as many or few as they want, the applicable levels\
            \ are `parent_context_auto_join`, `parent_context_request`, and `invitation_only`.\
            \ For class groups, where students are divided up and should only be part\
            \ of one group of the category, this value will always be `invitation_only`,\
            \ and is not relevant. If `parent_context_auto_join`, anyone can join\
            \ and will be automatically accepted. If `parent_context_request`, anyone\
            \ can request to join, which must be approved by a group moderator. If\
            \ `invitation_only`, only those how have received an invitation my join\
            \ the group, by accepting that invitation."
          maxLength: 255
        avatar_attachment_id:
          description: Foreign key to the `attachments` table for the avatar of this
            group.
          format: int64
        leader_id:
          description: Foreign key to the `users` table for the leader of this group.
          format: int64
        description:
          $ref: '#/components/schemas/groups_description'
        uuid:
          description: The UUID of the group.
          maxLength: 255
        default_view:
          description: Default view for groups is the feed.
          enum:
          - __dap_unspecified__
          - feed
      required:
      - account_id
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      - uuid
      - workflow_state
      title: Stores attributes for groups in canvas.
    late_policies:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a late policy record.
          format: int64
        course_id:
          description: The ID of the course this late policy references.
          format: int64
        created_at:
          description: Timestamp of when a `late_policies` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `late_policies` record was updated.
          format: date-time
        missing_submission_deduction_enabled:
          description: Whether to apply a deduction for submissions that have not
            been submitted as of their due date.
        missing_submission_deduction:
          description: "The amount to award for a missing submission, expressed as\
            \ a percentage (from 0 to 100) of the assignment's possible points."
          multipleOf: 0.01
        late_submission_deduction_enabled:
          description: Whether to apply a deduction for submissions submitted late.
        late_submission_deduction:
          description: "The amount to deduct from the submission for each interval\
            \ it is late, expressed as a percentage (from 0 to 100) of the assignment's\
            \ possible points."
          multipleOf: 0.01
        late_submission_interval:
          description: "The interval at which points should be deducted: valid values\
            \ are `day` and `hour`."
          maxLength: 16
        late_submission_minimum_percent_enabled:
          description: True if the points deducted for lateness should be capped.
        late_submission_minimum_percent:
          description: "If late_submission_minimum_percent_enabled is true, prevents\
            \ late deductions from bringing a submission below this percentage of\
            \ the total points. A value between 0 and 100."
          multipleOf: 0.01
      required:
      - course_id
      - created_at
      - id
      - late_submission_deduction
      - late_submission_deduction_enabled
      - late_submission_interval
      - late_submission_minimum_percent
      - late_submission_minimum_percent_enabled
      - missing_submission_deduction
      - missing_submission_deduction_enabled
      - updated_at
      title: Contains late/missing policy configurations for courses.
    learning_outcome_groups:
      additionalProperties: {}
      description: This table contains dimensions for learning outcome groups.
      properties:
        id:
          description: The unique identifier for a learning outcome group record.
          format: int64
        created_at:
          description: Timestamp of when a learning_outcome_groups record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a learning_outcome_groups record was updated.
          format: date-time
        workflow_state:
          description: Workflow status of the learning outcome.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        context_id:
          description: "The unique identifier for the learning_outcome_groups's context\
            \ (account, course)."
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Account
          - Course
          - College
          - Department
        migration_id:
          description: A GUID used to resolve outcomes during import and migration.
          maxLength: 255
        learning_outcome_group_id:
          description: ID associated with the parent of this group (NULL if it does
            not have parent). Refers to a learning_outcome_group record.
          format: int64
        root_learning_outcome_group_id:
          description: ID associated with the root group in the group hierarchy (NULL
            if it is the root). Refers to a learning_outcome_group record.
          format: int64
        vendor_guid:
          description: A custom GUID for the learning standard.
          maxLength: 255
        outcome_import_id:
          description: "Foreign key to the outcome import associated with this outcome\
            \ group, if this group was imported."
          format: int64
        source_outcome_group_id:
          description: Foreign key to the learning outcome group that the group was
            copied from.
          format: int64
        description:
          $ref: '#/components/schemas/learning_outcome_groups_description'
        title:
          description: Title of the learning outcome group.
          maxLength: 255
      required:
      - created_at
      - id
      - title
      - updated_at
      - workflow_state
      title: "Learning outcome groups organize outcomes hierarchically within a context,\
        \ such as an account, course or the global context."
    learning_outcome_question_results:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a learning outcome question result
            record.
          format: int64
        created_at:
          description: Timestamp of when a learning_outcome_question_results record
            was created.
          format: date-time
        updated_at:
          description: Timestamp of when a learning_outcome_question_results record
            was updated.
          format: date-time
        learning_outcome_id:
          description: Foreign key to the learning outcome this record is associated
            with.
          format: int64
        associated_asset_id:
          description: Polymorphic foreign key to the associated asset (currently
            always Assessment Question) used to generate this result.
          format: int64
        associated_asset_type:
          description: Type of the associated asset (currently always Assessment Question).
          enum:
          - __dap_unspecified__
          - AssessmentQuestion
        learning_outcome_result_id:
          description: Identifies the learning outcome result.
          format: int64
        score:
          description: The student's score.
          format: float64
        possible:
          description: Total number of points possible.
          format: float64
        mastery:
          description: Boolean indicating whether user achieved mastery.
        attempt:
          description: "The total number of attempts, or submissions."
          format: int32
        original_score:
          description: Score on the first attempt.
          format: float64
        original_possible:
          description: Possible points on the first attempt.
          format: float64
        original_mastery:
          description: Boolean indicating whether user achieved mastery.
        assessed_at:
          description: Time when answer was assessed.
          format: date-time
        submitted_at:
          description: Time when answer was submitted.
          format: date-time
        percent:
          description: "Score's percent of maximum points possible for outcome, scaled\
            \ to reflect any custom mastery levels that differ from the learning outcome."
          format: float64
        title:
          $ref: '#/components/schemas/learning_outcome_question_results_title'
      required:
      - associated_asset_type
      - created_at
      - id
      - updated_at
      title: Attributes for the results of answered questions which have been associated
        with a learning outcome.
    learning_outcome_results:
      additionalProperties: {}
      description: This table contains dimensions for learning outcome results.
      properties:
        id:
          description: The unique identifier for a learning outcome result record.
          format: int64
        user_id:
          description: The unique ID of a user who made the submission.
          format: int64
        created_at:
          description: Timestamp of when a learning_outcome_results record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a learning_outcome_results record was updated.
          format: date-time
        workflow_state:
          description: The current state of a learning outcome result record.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        context_id:
          description: "The unique identifier for the learning_outcome_results's context\
            \ (account, course, user)."
          format: int64
        context_type:
          description: "The type of the object represented by `context_id`, typically\
            \ `Course` or `Account` or `User`."
          enum:
          - __dap_unspecified__
          - Course
        context_code:
          description: Alternate specification of learning outcome result context
            as single string.
          maxLength: 255
        learning_outcome_id:
          description: Identifies the learning outcome this result is associated with.
          format: int64
        associated_asset_id:
          description: Polymorphic foreign key to the associated asset this result
            is associated with.
          format: int64
        associated_asset_type:
          description: Type of the associated asset this result is associated with.
          enum:
          - __dap_unspecified__
          - AssessmentQuestion
          - LiveAssessments::Assessment
          - Assignment
          - Quizzes::Quiz
        score:
          description: The student's score.
          format: float64
        possible:
          description: Total number of points possible.
          format: float64
        mastery:
          description: Boolean indicating whether user achieved mastery.
        attempt:
          description: "The total number of attempts, or submissions."
          format: int32
        original_score:
          description: Score on the first attempt.
          format: float64
        original_possible:
          description: Possible points on the first attempt.
          format: float64
        original_mastery:
          description: Boolean indicating whether user achieved mastery.
        assessed_at:
          description: Time when the result was assessed.
          format: date-time
        submitted_at:
          description: Time when the submission was submitted.
          format: date-time
        association_id:
          description: Polymorphic foreign key to the aligned learning object this
            result is associated with.
          format: int64
        association_type:
          description: Type of the aligned learning object this result is associated
            with.
          enum:
          - __dap_unspecified__
          - Assignment
          - Quizzes::Quiz
          - RubricAssociation
        content_tag_id:
          description: Foreign key to the content tag representing the learning outcome
            alignment this result is associated with.
          format: int64
        user_uuid:
          description: The uuid of the user who made the submission.
          maxLength: 255
        artifact_id:
          description: Polymorphic foreign key to the assessed artifact this result
            is associated with.
          format: int64
        artifact_type:
          description: Type of the assessed artifact this result is associated with.
          enum:
          - __dap_unspecified__
          - LiveAssessments::Submission
          - Quizzes::QuizSubmission
          - RubricAssessment
          - Submission
        hide_points:
          description: "Boolean indicating if outcome result points should be hidden\
            \ in the Learning Mastery Gradebook and reports. If enabled, replace points\
            \ with the description of the highest scoring outcome criterion rating."
        hidden:
          description: Boolean indicating if outcome result should be hidden from
            the Learning Mastery Gradebook and reports.
        percent:
          description: "Percent of maximum points possible for an outcome, scaled\
            \ to reflect any custom mastery levels that differ from the learning outcome."
          format: float64
        title:
          description: Title for identifying the result.
          maxLength: 255
      required:
      - created_at
      - hidden
      - hide_points
      - id
      - updated_at
      - workflow_state
      title: Learning outcome results are a student's mastery score on a given outcome.
    learning_outcomes:
      additionalProperties: {}
      description: This table contains dimensions for learning outcomes.
      properties:
        id:
          description: The unique identifier for a learning outcome record.
          format: int64
        display_name:
          description: Optional friendly name for reporting.
          maxLength: 255
        context_code:
          description: "Alternate specification of learning outcome context as single\
            \ string. Combination of `context_type` and `context_id` (ex: `course_34416`)."
          maxLength: 255
        created_at:
          description: Timestamp of when a `learning_outcomes` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `learning_outcomes` record was updated.
          format: date-time
        workflow_state:
          description: Workflow status of the learning outcome.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - retired
        context_id:
          description: "The unique identifier for the context of `learning_outcomes`\
            \ (account, course, user), may be NULL for global outcomes."
          format: int64
        context_type:
          description: The type of the object represented by `context_id`.
          enum:
          - __dap_unspecified__
          - Account
          - Course
        migration_id:
          description: A GUID used to resolve outcomes during import and migration.
          maxLength: 255
        vendor_guid:
          description: A custom GUID for the learning standard.
          maxLength: 255
        outcome_import_id:
          description: "Foreign key to the outcome import associated with this outcome,\
            \ if this outcome was imported."
          format: int64
        calculation_method:
          description: The method used to calculate student score.
          enum:
          - __dap_unspecified__
          - decaying_average
          - average
          - highest
          - latest
          - n_mastery
        calculation_int:
          description: Defines the variable value used by the calculation_method.
            included only if `calculation_method` uses it.
          format: int16
        short_description:
          description: Title of the outcome.
          maxLength: 255
        description:
          $ref: '#/components/schemas/learning_outcomes_description'
        data:
          description: YAML data specifying the scoring method and rubric criteria
            for this outcome.
      required:
      - created_at
      - id
      - short_description
      - updated_at
      - workflow_state
      title: Learning outcomes are measurable statements that express student knowledge
        or a student skill.
    lti_line_items:
      additionalProperties: {}
      description: |-
        LTI 1.3 tools that have been authorized by an admin may manage this table.

        See [Learning Tools Interoperability (LTI) Assignment and Grade Services
        Specification](https://www.imsglobal.org/spec/lti-ags/v2p0#line-item-service).
      properties:
        id:
          description: The unique identifier for an lti line item record.
          format: int64
        created_at:
          description: Timestamp of when a lti_line_items record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a lti_line_items record was updated.
          format: date-time
        workflow_state:
          description: The workflow state of the line item.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        assignment_id:
          description: The ID of the assignment associated with the line item.
          format: int64
        client_id:
          description: The client ID used to create the line item (developer key global
            id).
          format: int64
        coupled:
          description: True if the line item is the default one created when a user
            created an assignment; false if the line item was created via the API
            (regardless if it is the default line item or not).
        score_maximum:
          description: The maximum score for the line item.
          format: float64
        resource_id:
          $ref: '#/components/schemas/lti_line_items_resource_id'
        lti_resource_link_id:
          description: The resource link ID associated with the line item. This ID
            matches the associated assignments "lti_context_id".
          format: int64
        label:
          $ref: '#/components/schemas/lti_line_items_label'
        extensions:
          $ref: '#/components/schemas/lti_line_items_extensions'
        tag:
          $ref: '#/components/schemas/lti_line_items_tag'
      required:
      - assignment_id
      - client_id
      - coupled
      - created_at
      - extensions
      - id
      - label
      - score_maximum
      - updated_at
      - workflow_state
      title: Represents a line item from the IMS Assignment and Grade service.
    lti_resource_links:
      additionalProperties: {}
      description: Only used with LTI 1.3 `context_external_tools`.
      properties:
        id:
          description: The unique identifier for an lti resource link record.
          format: int64
        created_at:
          description: Timestamp of when a lti_resource_links record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a lti_resource_links record was updated.
          format: date-time
        workflow_state:
          description: The workflow state of the line item.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        context_id:
          description: The context the LTI resource link belongs to.
          format: int64
        context_type:
          description: The type of the context the LTI resource link belongs to.
          enum:
          - __dap_unspecified__
          - Account
          - Assignment
          - Course
          - Group
        context_external_tool_id:
          description: The ID of the context_external_tool associated to the resource.
          format: int64
        custom:
          $ref: '#/components/schemas/lti_resource_links_custom'
        resource_link_uuid:
          description: A UUID identifying the resource link.
          format: uuid
        lookup_uuid:
          description: "Used to identify the resource link to use in order to lookup\
            \ custom parameters in some scenarios, such as a link added from Deep\
            \ Linking into a Rich Content Editor."
          format: uuid
      required:
      - context_external_tool_id
      - context_id
      - context_type
      - created_at
      - id
      - lookup_uuid
      - resource_link_uuid
      - updated_at
      - workflow_state
      title: Joins `context_external_tools` to other resources in Canvas (assignments
        for example).
    lti_results:
      additionalProperties: {}
      description: |-
        See [IMS Global](https://www.imsglobal.org/spec/lti-ags/v2p0#result-service). LTI 1.3 tools that have been authorized by an admin may
        read records from this table via API.
      properties:
        id:
          description: The unique identifier for an lti result record.
          format: int64
        extensions:
          $ref: '#/components/schemas/lti_results_extensions'
        comment:
          $ref: '#/components/schemas/lti_results_comment'
        submission_id:
          description: the ID of the associated submission.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp of when a `lti_results` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `lti_results` record was updated.
          format: date-time
        workflow_state:
          description: The workflow state of the result.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        result_score:
          description: The score given for the the student (LTI AGS).
          format: float64
        result_maximum:
          description: The maximum score for the student (LTI AGS).
          format: float64
        activity_progress:
          $ref: '#/components/schemas/lti_results_activity_progress'
        grading_progress:
          $ref: '#/components/schemas/lti_results_grading_progress'
        lti_line_item_id:
          description: The ID of the associated line item.
          format: int64
      required:
      - created_at
      - extensions
      - id
      - lti_line_item_id
      - updated_at
      - user_id
      - workflow_state
      title: Represents a result from the IMS Assignment and Grade service
    master_courses_child_content_tags:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a master courses child content tag
            record.
          format: int64
        child_subscription_id:
          description: The ID of a subscription belonging to the associated course.
          format: int64
        content_id:
          description: The ID of an associated content object.
          format: int64
        migration_id:
          $ref: '#/components/schemas/master_courses_child_content_tags_migration_id'
        downstream_changes:
          description: The columns changed on the associated content.
        content_type:
          description: The class of the associated content object.
          enum:
          - __dap_unspecified__
          - AssessmentQuestionBank
          - Assignment
          - AssignmentGroup
          - Attachment
          - CalendarEvent
          - ContextExternalTool
          - ContextModule
          - ContentTag
          - CoursePace
          - DiscussionTopic
          - LearningOutcome
          - LearningOutcomeGroup
          - Rubric
          - Wiki
          - WikiPage
          - Quizzes::Quiz
      required:
      - child_subscription_id
      - content_id
      - content_type
      - id
      title: Links imported course content to the child subscription and keeps track
        of changes made to content.
    master_courses_child_subscriptions:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a master courses child subscription
            record.
          format: int64
        created_at:
          description: Timestamp showing when a master_courses_child_subscriptions
            record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a master_courses_child_subscriptions
            record was updated.
          format: date-time
        workflow_state:
          description: Whether the subscription is active or has been deleted.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        use_selective_copy:
          description: Whether the associated course can receive partial exports from
            the blueprint course for subsequent sync events.
        master_template_id:
          description: The ID of a template that belongs to the blueprint course.
          format: int64
        child_course_id:
          description: The ID of an associated course.
          format: int64
      required:
      - child_course_id
      - created_at
      - id
      - master_template_id
      - updated_at
      - use_selective_copy
      - workflow_state
      title: Saves data about which child courses are linked to which master blueprint
        courses.
    master_courses_master_content_tags:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a master courses master content tag
            record.
          format: int64
        content_id:
          description: The ID of an associated content object.
          format: int64
        migration_id:
          $ref: '#/components/schemas/master_courses_master_content_tags_migration_id'
        restrictions:
          description: The locked status of the associated content object.
        use_default_restrictions:
          description: Whether the content is using defaults set by the course or
            has been individually configured.
        master_template_id:
          description: The ID of a template belonging to the blueprint course.
          format: int64
        content_type:
          description: The class of the associated content object.
          enum:
          - __dap_unspecified__
          - AssessmentQuestionBank
          - Assignment
          - AssignmentGroup
          - Attachment
          - CalendarEvent
          - ContextExternalTool
          - ContextModule
          - ContentTag
          - CoursePace
          - DiscussionTopic
          - LearningOutcome
          - Rubric
          - Wiki
          - WikiPage
          - Quizzes::Quiz
      required:
      - content_id
      - content_type
      - id
      - master_template_id
      - use_default_restrictions
      title: Links blueprint course content to the template and keeps track of their
        locked status.
    master_courses_master_migrations:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a master courses master migrations
            record.
          format: int64
        comment:
          $ref: '#/components/schemas/master_courses_master_migrations_comment'
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp showing when a master_courses_master_migrations record
            was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a master_courses_master_migrations record
            was updated.
          format: date-time
        workflow_state:
          description: Current state of the sync event.
          enum:
          - __dap_unspecified__
          - completed
          - created
          - exporting
          - exports_failed
          - imports_failed
          - imports_queued
          - queued
        migration_settings:
          description: Optional settings for the sync event (such as whether to include
            course settings).
        export_results:
          description: Record of which associated courses received full exports and
            which ones received partial (selective) ones.
        exports_started_at:
          description: Timestamp showing when exports started being generated from
            the blueprint course.
          format: date-time
        imports_queued_at:
          description: Timestamp showing when imports started being queued into the
            associated courses.
          format: date-time
        imports_completed_at:
          description: Timestamp showing when all imports into associated courses
            completed.
          format: date-time
        send_notification:
          description: Whether to generate notifications around the sync event.
        master_template_id:
          description: The ID of a template that belongs to the blueprint course.
          format: int64
      required:
      - created_at
      - id
      - master_template_id
      - send_notification
      - updated_at
      - workflow_state
      title: Represents a blueprint course sync event.
    master_courses_master_templates:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a master courses template record.
          format: int64
        course_id:
          description: The ID of a blueprint course record.
          format: int64
        created_at:
          description: Timestamp showing when a master_courses_templates record was
            created.
          format: date-time
        updated_at:
          description: Timestamp showing when a master_courses_templates record was
            updated.
          format: date-time
        workflow_state:
          description: Whether the template is active or if it has been deleted (i.e.
            the course has been unset as a blueprint).
          enum:
          - __dap_unspecified__
          - active
          - deleted
        full_course:
          description: Whether all blueprint content in the course should be synced
            (always true for the time being).
        active_migration_id:
          description: The ID of a last migration to be run (used to ensure only one
            is running at a time).
          format: int64
        default_restrictions:
          description: The default locked status for all blueprint course content
            (unless using restrictions by type).
        use_default_restrictions_by_type:
          description: Whether to use default_restrictions_by_type to determine content
            locked status.
        default_restrictions_by_type:
          description: The default locked status for all blueprint course content
            depending on the type of content (unless not using restrictions by type).
      required:
      - course_id
      - created_at
      - full_course
      - id
      - updated_at
      - use_default_restrictions_by_type
      title: Stores blueprint course specific data and links a course with all other
        blueprint models.
    master_courses_migration_results:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a master courses migration result
            record.
          format: int64
        state:
          description: "The state of the import into the associated course (`failed`,\
            \ `completed` or `queued`)."
          enum:
          - __dap_unspecified__
          - failed
          - completed
          - queued
        child_subscription_id:
          description: The ID of a relevant associated course subscription record.
          format: int64
        master_migration_id:
          description: The ID of a relevant blueprint migration record (sync event).
          format: int64
        content_migration_id:
          description: The ID of a relevant import record on the associated course.
          format: int64
        import_type:
          description: Whether the blueprint export was for the entire course (`full`)
            or a partial (`selective`).
          enum:
          - __dap_unspecified__
          - full
          - selective
        results:
          description: Relevant results of the import (e.g. items that were not synced
            because they were modified by the associated course).
      required:
      - child_subscription_id
      - content_migration_id
      - id
      - import_type
      - master_migration_id
      - state
      title: Stores results for individual associated courses for a blueprint sync
        event.
    originality_reports:
      additionalProperties: {}
      description: Rows in this table are managed solely by LTI 2 tool providers that
        leverage the Canvas plagiarism detection platform.
      properties:
        id:
          description: The unique identifier for an originality report record.
          format: int64
        error_message:
          $ref: '#/components/schemas/originality_reports_error_message'
        attachment_id:
          description: The is of the attachment associated with the originality report.
          format: int64
        submission_id:
          description: ID of the submission associated with the originality report.
          format: int64
        created_at:
          description: Timestamp of when an `originality_reports` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when an `originality_reports` record was updated.
          format: date-time
        workflow_state:
          description: Workflow state of the originality report.
          enum:
          - __dap_unspecified__
          - error
          - pending
          - scored
        originality_score:
          description: A number ranging from 0-100 indicating the level of potential
            plagiarism.
          format: float64
        originality_report_url:
          $ref: '#/components/schemas/originality_reports_originality_report_url'
        originality_report_lti_url:
          $ref: '#/components/schemas/originality_reports_originality_report_lti_url'
        link_id:
          $ref: '#/components/schemas/originality_reports_link_id'
        submission_time:
          description: Time the submission was submitted.
          format: date-time
      required:
      - created_at
      - id
      - submission_id
      - updated_at
      - workflow_state
      title: Represents an "originality score" for a submission.
    outcome_proficiencies:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for an outcome proficiency record.
          format: int64
        created_at:
          description: Timestamp of when an `outcome_proficiencies` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when an `outcome_proficiencies` record was updated.
          format: date-time
        workflow_state:
          description: Workflow status of the outcome_proficiency. Defaults to `active`.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        context_id:
          description: The unique identifier for the context (account or course) of
            the outcome proficiency.
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Account
          - Course
      required:
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      - workflow_state
      title: "Outcome proficiencies, or learning mastery proficiency ratings, define\
        \ a set of ratings, which together create a point scale and a mastery level."
    outcome_proficiency_ratings:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for an outcome proficiency ratings record.
          format: int64
        created_at:
          description: Timestamp of when an outcome_proficiency_ratings record was
            created.
          format: date-time
        updated_at:
          description: Timestamp of when an outcome_proficiency_ratings record was
            updated.
          format: date-time
        workflow_state:
          description: Workflow status of the outcome_proficiency_rating. Defaults
            to `active`.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        mastery:
          description: Indicates the rating where mastery is first achieved.
        points:
          description: A non-negative number of points for the rating.
          format: float64
        outcome_proficiency_id:
          description: Unique ID of proficiency collection to which this rating belongs.
          format: int64
        color:
          $ref: '#/components/schemas/outcome_proficiency_ratings_color'
        description:
          description: The description of the rating.
          maxLength: 255
      required:
      - color
      - created_at
      - description
      - id
      - mastery
      - outcome_proficiency_id
      - points
      - updated_at
      - workflow_state
      title: Outcome proficiency ratings define the individual tiers of outcome proficiencies.
    post_policies:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a post policy record.
          format: int64
        course_id:
          description: The ID of the course referenced by this policy. Note that this
            is always set even if the policy refers to a specific assignment within
            a course.
          format: int64
        created_at:
          description: Timestamp of when a `post_policies` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `post_policies` record was updated.
          format: date-time
        assignment_id:
          description: "The ID of the assignment referenced by this policy, or NULL\
            \ if the policy refers to a course at large."
          format: int64
        post_manually:
          description: "For post policies associated with an assignment, whether submissions\
            \ receiving grades or comments should be posted to the student automatically.\
            \ For post policies associated with a course, this value will be applied\
            \ by default to assignments created in the course."
      required:
      - created_at
      - id
      - post_manually
      - updated_at
      title: Contains post policy configurations for courses and individual assignments.
    pseudonyms:
      additionalProperties: {}
      description: |-
        Pseudonyms are login profiles associated with users. Contains user / account relationship (may contain multiple records per `user_id`
        if that `user_id` is associated with multiple accounts); note: not all users can be found in the pseudonyms table.
      properties:
        id:
          description: Primary key for this pseudonym in the the Canvas database.
          format: int64
        deleted_at:
          description: Timestamp when the pseudonym was deleted (NULL if the pseudonym
            is still active).
          format: date-time
        integration_id:
          description: The `integration_id` associated with the user.
          maxLength: 255
        user_id:
          description: Id for the user associated with this pseudonym.
          format: int64
        created_at:
          description: Timestamp when this pseudonym was created in Canvas.
          format: date-time
        updated_at:
          description: Timestamp when this pseudonym was last updated in Canvas.
          format: date-time
        workflow_state:
          description: Life-cycle state for the pseudonym.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - suspended
        account_id:
          description: Identifies the account associated with this pseudonym. Typically
            root account ID unless account user belongs to trust/consortium based
            Canvas accounts.
          format: int64
        sis_batch_id:
          description: The ID of the SIS import.
          format: int64
        unique_id:
          description: The unique login ID for the user. This is what the user uses
            to log in to Canvas.
          maxLength: 255
        login_count:
          description: The count of all user logins.
          format: int32
        failed_login_count:
          description: Only applies to accounts that use Canvas authentication settings.
          format: int32
        last_request_at:
          description: Timestamp of when the user last logged in with this pseudonym.
          format: date-time
        last_login_at:
          description: Timestamp of last time a user logged in with this pseudonym.
          format: date-time
        current_login_at:
          description: Timestamp of when the user logged in.
          format: date-time
        last_login_ip:
          description: IP address recorded the last time a user logged in with this
            pseudonym.
          maxLength: 255
        current_login_ip:
          description: "IP address of user's previous login id, this value could be\
            \ the same as last_login_ip."
          maxLength: 255
        sis_user_id:
          description: The SIS ID associated with the user.
          maxLength: 255
        authentication_provider_id:
          description: "The authentication provider this login is associated with.\
            \ This can be the integer ID of the provider, or the type of the provider\
            \ (in which case, it will find the first matching provider)."
          format: int64
        position:
          description: Position of user's login credentials.
          format: int32
      required:
      - account_id
      - created_at
      - failed_login_count
      - id
      - login_count
      - unique_id
      - updated_at
      - user_id
      - workflow_state
      title: This table stores user pseudonyms.
    quiz_groups:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the question group.
          format: int64
        name:
          description: The name of the question group.
          maxLength: 255
        created_at:
          description: Time when the quiz question was created.
          format: date-time
        updated_at:
          description: Time when the quiz question was last updated.
          format: date-time
        assessment_question_bank_id:
          description: The ID of the Assessment question bank to pull questions from.
          format: int64
        quiz_id:
          description: The ID of the Quiz the question group belongs to.
          format: int64
        migration_id:
          description: The unique identifier of the migration that imported the quiz
            group.
          maxLength: 255
        pick_count:
          description: The number of questions to pick from the group to display to
            the student.
          format: int32
        question_points:
          description: The amount of points allotted to each question in the group.
          format: float64
        position:
          description: The order in which the question group will be retrieved and
            displayed.
          format: int32
      required:
      - created_at
      - id
      - quiz_id
      - updated_at
      title: This table stores attributes for quiz group.
    quiz_questions:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the quiz question.
          format: int64
        created_at:
          description: Time when the quiz question was created.
          format: date-time
        updated_at:
          description: Time when the quiz question was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the quiz question.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - generated
        quiz_id:
          description: The ID of the Quiz the question belongs to.
          format: int64
        migration_id:
          description: The unique identifier of the migration that imported the quiz
            question.
          maxLength: 255
        quiz_group_id:
          description: Identifies the quiz group.
          format: int64
        assessment_question_id:
          description: Identifies the assessment question.
          format: int64
        assessment_question_version:
          description: Version of the assessment question associated with the quiz
            question.
          format: int32
        position:
          description: The order in which the question will be retrieved and displayed.
          format: int32
        question_data:
          $ref: '#/components/schemas/Type_extracted_from_column__quiz_questions_question_data__'
      required:
      - id
      title: This table stores attributes of a question associated with a quiz.
    quiz_submissions:
      additionalProperties: {}
      description: This tables persists one record per `user_id` and `quiz_id`.
      properties:
        id:
          description: The ID of the quiz submission.
          format: int64
        submission_id:
          description: The ID of the Submission the quiz submission represents.
          format: int64
        user_id:
          description: The ID of the Student that made the quiz submission.
          format: int64
        created_at:
          description: Time when the quiz submission was created.
          format: date-time
        updated_at:
          description: Time when the quiz submission was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the quiz submission.
          enum:
          - __dap_unspecified__
          - complete
          - pending_review
          - preview
          - settings_only
          - untaken
        quiz_id:
          description: The ID of the Quiz the quiz submission belongs to.
          format: int64
        quiz_version:
          description: The version of the quiz this submission is related to.
          format: int32
        started_at:
          description: The time at which the student started the quiz submission.
          format: date-time
        finished_at:
          description: The time at which the student submitted the quiz submission.
          format: date-time
        end_at:
          description: "The time at which the quiz submission will be overdue, and\
            \ be flagged as a late submission."
          format: date-time
        score:
          description: "The score of the quiz submission, if graded."
          format: float64
        attempt:
          description: "For quizzes that allow multiple attempts, this field specifies\
            \ the quiz submission attempt number."
          format: int32
        submission_data:
          description: "Student answers to quiz, it shares JSON array of answers for\
            \ only graded quiz submissions, it has NULL if quiz hasn't been graded\
            \ yet. Contains the `question_id`, whether the question was answered correctly,\
            \ the `answer_id` and answer text."
        kept_score:
          description: "For quizzes that allow multiple attempts, this is the score\
            \ that will be used, which might be the score of the latest, or the highest,\
            \ quiz submission."
          format: float64
        fudge_points:
          description: Number of points the quiz submissions score was fudged by.
          format: float64
        quiz_points_possible:
          description: The amount of points possible for the quiz.
          format: float64
        extra_attempts:
          description: Number of times the student was allowed to retake the quiz
            over the multiple-attempt limit.
          format: int32
        temporary_user_code:
          description: Construct for previewing a quiz.
          maxLength: 255
        extra_time:
          description: "Amount of extra time allowed for the quiz submission, in minutes."
          format: int32
        manually_scored:
          description: Indicates if this submission was graded by the teacher.
        manually_unlocked:
          description: The student can take the quiz even if it's locked for everyone
            else.
        was_preview:
          description: Indicates if this submission was created from a teacher preview.
        score_before_regrade:
          description: The original score of the quiz submission prior to any re-grading.
          format: float64
        has_seen_results:
          description: Whether the student has viewed their results to the quiz.
      required:
      - created_at
      - fudge_points
      - id
      - quiz_id
      - updated_at
      - workflow_state
      title: Stores attributes for the last submitted quiz.
    quizzes:
      additionalProperties: {}
      description: Quizzes can also be assignments (`assignment_id` field will have
        a value).
      properties:
        id:
          description: the ID of the quiz.
          format: int64
        deleted_at:
          description: Timestamp when the quiz was deleted.
          format: date-time
        created_at:
          description: Time when the quiz was created.
          format: date-time
        updated_at:
          description: Time when the quiz was last updated.
          format: date-time
        workflow_state:
          description: "Denotes where the quiz is in the workflow. Possible values\
            \ are `unpublished`, `published` and `deleted`. Defaults to `unpublished`."
          enum:
          - __dap_unspecified__
          - created
          - edited
          - unpublished
          - deleted
          - available
        due_at:
          description: when the quiz is due.
          format: date-time
        unlock_at:
          description: when to unlock the quiz.
          format: date-time
        lock_at:
          description: when to lock the quiz.
          format: date-time
        points_possible:
          description: The total point value given to the quiz.
          format: float64
        assignment_group_id:
          description: the ID of the quizzes assignment group:.
          format: int64
        context_id:
          description: "The ID of the context (account or course) this group belongs\
            \ too. See also: context_type."
          format: int64
        context_type:
          description: The type of the context object (typically `Course`).
          enum:
          - __dap_unspecified__
          - Course
        assignment_id:
          description: Identifies the assignment the quiz belongs to (NULL if not
            an assignment).
          format: int64
        could_be_locked:
          description: Dictates if the quiz can be locked or not. Possible values
            are `allow_locking` and `disallow_locking`. Defaults to `disallow_locking`.
        migration_id:
          description: The unique identifier of the migration that imported the quiz.
          maxLength: 255
        only_visible_to_overrides:
          description: "This indicates the quiz is not visible to everyone in the\
            \ course, but only to those with an override."
        allowed_attempts:
          description: how many times a student can take the quiz -1 = unlimited attempts.
          format: int32
        published_at:
          description: whether the quiz has a published or unpublished draft state.
          format: date-time
        shuffle_answers:
          description: shuffle answers for students.
        show_correct_answers:
          description: show which answers were correct when results are shown? only
            valid if `hide_results` is NULL.
        time_limit:
          description: quiz time limit in minutes.
          format: int32
        scoring_policy:
          description: "which quiz score to keep (only if `allowed_attempts` != 1)\
            \ possible values: `keep_highest`, `keep_latest`."
          maxLength: 255
        quiz_type:
          description: type of quiz.
          enum:
          - __dap_unspecified__
          - assignment
          - practice_quiz
          - graded_survey
          - survey
        access_code:
          description: access code to restrict quiz access.
          maxLength: 255
        question_count:
          description: the number of questions in the quiz.
          format: int32
        anonymous_submissions:
          description: Dictates whether students are allowed to submit the quiz anonymously.
        hide_results:
          description: "let students see their quiz responses? possible values: NULL,\
            \ `always`, `until_after_last_attempt`."
          maxLength: 255
        ip_filter:
          description: IP address or range that quiz access is limited to.
          maxLength: 255
        require_lockdown_browser:
          description: Dictates whether the browser has locked-down when the quiz
            is being taken. Possible values are `required` and `not_required`. Defaults
            to `not_required`.
        require_lockdown_browser_for_results:
          description: Dictates whether the browser has to be locked-down to display
            the results. Is valid only if `hide_results` is set to `never` or `until_after_last_attempt`
            (for the results to be displayed after the last attempt). Possible values
            are `required` and `not_required`. Defaults to `not_required`.
        one_question_at_a_time:
          description: show one question at a time?
        cant_go_back:
          description: lock questions after answering? only valid if one_question_at_a_time=true.
        show_correct_answers_at:
          description: when should the correct answers be visible by students? only
            valid if show_correct_answers=true.
          format: date-time
        hide_correct_answers_at:
          description: prevent the students from seeing correct answers after the
            specified date has passed. only valid if show_correct_answers=true.
          format: date-time
        require_lockdown_browser_monitor:
          description: Dictates whether a browser lockdown monitor is required. Possible
            values are `required` and `not_required`. Defaults to `not_required`.
        one_time_results:
          description: prevent the students from seeing their results more than once
            (right after they submit the quiz).
        show_correct_answers_last_attempt:
          description: restrict the show_correct_answers option above to apply only
            to the last submitted attempt of a quiz that allows multiple attempts.
            only valid if show_correct_answers=true and `allowed_attempts` > 1.
        unpublished_question_count:
          description: The number of questions that have not been published.
          format: int32
        description:
          $ref: '#/components/schemas/quizzes_description'
        title:
          description: the title of the quiz.
          maxLength: 255
      required:
      - anonymous_submissions
      - cant_go_back
      - context_id
      - context_type
      - could_be_locked
      - created_at
      - id
      - one_question_at_a_time
      - one_time_results
      - only_visible_to_overrides
      - require_lockdown_browser
      - require_lockdown_browser_for_results
      - require_lockdown_browser_monitor
      - show_correct_answers
      - show_correct_answers_last_attempt
      - shuffle_answers
      - unpublished_question_count
      - updated_at
      - workflow_state
      title: Stores attributes for quizzes.
    role_overrides:
      additionalProperties: {}
      properties:
        id:
          description: unique identifier of a role permission.
          format: int64
        permission:
          description: "Permission assigned to a role, see the dictionary of permissions\
            \ keyed by name in Canvas Roles API documentation."
          maxLength: 255
        created_at:
          description: Timestamp of when this record was created.
          format: date-time
        updated_at:
          description: Timestamp of last update to this record.
          format: date-time
        role_id:
          description: Unique ID of a role.
          format: int64
        context_id:
          description: "The unique identifier for the folders's context (account,\
            \ course, user)."
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Account
        locked:
          description: Whether the permission is locked by this role.
        enabled:
          description: Whether the role has the permission.
        applies_to_self:
          description: Whether the permission applies to the account this role is
            in. Only present if enabled is true.
        applies_to_descendants:
          description: Whether the permission cascades down to sub accounts of the
            account this role is in. Only present if enabled is true.
      required:
      - applies_to_descendants
      - applies_to_self
      - context_id
      - context_type
      - enabled
      - id
      - locked
      - role_id
      title: A customization to the default permissions granted by a role.
    roles:
      additionalProperties: {}
      description: "Roles have a few implicit permissions and a large set of default\
        \ permissions, which can be customized with RoleOverrides."
      properties:
        id:
          description: The unique identifier for a user role record.
          format: int64
        name:
          description: The name of the role.
          maxLength: 255
        deleted_at:
          description: Timestamp when this record was deleted. If the record has not
            been deleted the value will be NULL.
          format: date-time
        created_at:
          description: Timestamp of when a roles record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a roles record was updated.
          format: date-time
        workflow_state:
          description: The state of the role.
          enum:
          - __dap_unspecified__
          - active
          - built_in
          - deleted
          - inactive
        account_id:
          description: Points to the account associated with the course. Could be
            Canvas root account or sub-account ID.
          format: int64
        base_role_type:
          description: "The role type that is being used as a base for this role.\
            \ For account-level roles, this is `AccountMembership`. For course-level\
            \ roles, it is an enrollment type."
          enum:
          - __dap_unspecified__
          - AccountAdmin
          - AccountMembership
          - DesignerEnrollment
          - NoPermissions
          - ObserverEnrollment
          - StudentEnrollment
          - TaEnrollment
          - TeacherEnrollment
      required:
      - base_role_type
      - created_at
      - id
      - name
      - updated_at
      - workflow_state
      title: A user is assigned a role which grants all the permissions associated
        with that role.
    rubric_assessments:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a rubric assessment record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp showing when a `rubric_assessment` record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a `rubric_assessment` record was updated.
          format: date-time
        rubric_association_id:
          description: The ID of a rubric association (which links the rubric to an
            assignment that uses the rubric).
          format: int64
        artifact_id:
          description: The submission or assignment identifier.
          format: int64
        artifact_type:
          description: The artifact type.
          enum:
          - __dap_unspecified__
          - Submission
          - Assignment
          - ModeratedGrading::ProvisionalGrade
        hide_points:
          description: Flag indicating a non-scoring rubric assessment.
        score:
          description: Score of the assessment.
          format: float64
        rubric_id:
          description: The unique ID of a rubric.
          format: int64
        assessment_type:
          description: Type of assessment.
          enum:
          - __dap_unspecified__
          - grading
          - invited_assessment
          - peer_review
        assessor_id:
          description: The unique ID of a user who assessed the submission.
          format: int64
        artifact_attempt:
          description: The current number of attempts made on the object of the assessment.
          format: int32
        data:
          description: Object containing all data related to assessment including
            score-break down and comments for each criterion.
      required:
      - artifact_id
      - artifact_type
      - assessment_type
      - created_at
      - hide_points
      - id
      - rubric_id
      - updated_at
      title: Shows the data that a teacher has entered in to a rubric while grading
        a student.
    rubric_associations:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a rubric association record.
          format: int64
        purpose:
          description: Whether or not the association is for grading (and thus linked
            to an assignment) or if it's to indicate the rubric should appear in its
            context. Values will be grading or bookmark.
          maxLength: 255
        created_at:
          description: Timestamp showing when a `rubric_associations` record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a `rubric_associations` record was updated.
          format: date-time
        workflow_state:
          description: The current state of a rubric association record.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        context_id:
          description: "The unique identifier for the context of `rubric_associations`\
            \ (account, course)."
          format: int64
        context_type:
          description: The type of the object represented by `context_id`.
          enum:
          - __dap_unspecified__
          - Course
          - Account
        association_id:
          description: The unique identifier of an associated object.
          format: int64
        association_type:
          description: The type of object associated.
          enum:
          - __dap_unspecified__
          - Account
          - Course
          - Assignment
        hide_points:
          description: Flag indication whether to hide points from rubric.
        rubric_id:
          description: The unique identifier of a rubric tied to this association.
          format: int64
        use_for_grading:
          description: Whether or not the associated rubric is used for grade calculation.
        summary_data:
          description: Object that stores reusable comments made during assessments.
        hide_score_total:
          description: Flag indicating whether to hide the score total for assessment
            results.
        bookmarked:
          description: Flag indication whether rubric is bookmarked.
        hide_outcome_results:
          description: Flag indicating to not post Outcomes results to Learning Mastery
            Gradebook.
        title:
          description: The name of the object this rubric is associated with.
          maxLength: 255
      required:
      - association_id
      - association_type
      - bookmarked
      - context_id
      - context_type
      - created_at
      - hide_outcome_results
      - hide_points
      - id
      - purpose
      - rubric_id
      - updated_at
      - workflow_state
      title: Links a rubric to an assignment.
    rubrics:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier of a rubric record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp showing when a rubrics record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a rubrics record was updated.
          format: date-time
        workflow_state:
          description: Current state of row.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        points_possible:
          description: Total points possible for the rubric.
          format: float64
        context_id:
          description: "The unique identifier of a rubric's context (account, course)."
          format: int64
        context_type:
          description: The type of the object represented by context_id.
          enum:
          - __dap_unspecified__
          - Account
          - Course
        migration_id:
          description: An identifier used by the Blueprint system to match with the
            blueprint content.
          maxLength: 255
        hide_score_total:
          description: Whether or not the score total is displayed within the rubric.
            This option is only available if the rubric is not used for grading.
        association_count:
          description: "The number of associated objects (accounts, courses, assignments)."
          format: int32
        free_form_criterion_comments:
          description: Whether or not you can write custom comments in the ratings
            field for a rubric.
        title:
          description: The Rubric name or title.
          maxLength: 255
        data:
          description: The data containing all the information for the rubric including
            each criterion.
      required:
      - association_count
      - context_id
      - context_type
      - created_at
      - id
      - updated_at
      - workflow_state
      title: List of criteria that describe how an assignment should be graded.
    score_statistics:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the statistics object.
          format: int64
        created_at:
          description: The date this statistics object was created.
          format: date-time
        updated_at:
          description: The date this statistics object was updated.
          format: date-time
        assignment_id:
          description: The ID of the assignment referred to by this object.
          format: int64
        mean:
          description: The mean score for all graded submissions on this assignment.
          format: float64
        count:
          description: "The number of submissions that have been graded for this assignment,\
            \ excluding excused submissions."
          format: int32
        minimum:
          description: The lowest score for any graded submission on this assignment.
          format: float64
        maximum:
          description: The highest score for any graded submission on this assignment.
          format: float64
      required:
      - assignment_id
      - count
      - created_at
      - id
      - maximum
      - mean
      - minimum
      - updated_at
      title: This table stores aggregate statistics for scores on individual assignments.
    scores:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the score.
          format: int64
        created_at:
          description: Time when the score was created.
          format: date-time
        updated_at:
          description: Time when the score was updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the score.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        assignment_group_id:
          description: "The ID of the assignment group this score refers to, or NULL\
            \ if it does not refer to a particular assignment group."
          format: int64
        enrollment_id:
          description: The ID of the enrollment object this score refers to.
          format: int64
        grading_period_id:
          description: "The ID of the grading period covered by this score, or NULL\
            \ if it does not apply to a specific grading period. If this is NULL,\
            \ this is the overall score for the course."
          format: int64
        current_score:
          description: The current score for the assignments represented by this Score
            object.
          format: float64
        final_score:
          description: "The final score for the assignments represented by this Score\
            \ object, calculated by treating ungraded assignments as though they received\
            \ zero points."
          format: float64
        course_score:
          description: "True if this score does not refer to a particular grading\
            \ period or assignment group (in other words, if it represents the overall\
            \ score for the course referred to in the enrollment)."
        unposted_current_score:
          description: "The current score, with muted/unposted assignments included."
          format: float64
        unposted_final_score:
          description: "The final score, with muted/unposted assignments included."
          format: float64
        current_points:
          description: "The number of points earned over all assignments covered by\
            \ this score, with dropped assignments excluded."
          format: float64
        unposted_current_points:
          description: "The total number of points earned over all assignments covered\
            \ by this score, including muted/unposted assignments."
          format: float64
        final_points:
          description: "The number of points earned over all assignments covered by\
            \ this score, with dropped assignments excluded and unposted submissions\
            \ treated as 0."
          format: float64
        unposted_final_points:
          description: "The number of points earned over all assignments covered by\
            \ this score, with dropped assignments excluded and unposted submissions\
            \ treated as 0, including muted/unposted assignments."
          format: float64
        override_score:
          description: "The override score, if one has been set."
          format: float64
      required:
      - course_score
      - enrollment_id
      - id
      - workflow_state
      title: This table stores assignment group and course grades for students enrolled
        in a course.
    submission_comments:
      additionalProperties: {}
      properties:
        id:
          description: The ID of this submission comment.
          format: int64
        comment:
          $ref: '#/components/schemas/submission_comments_comment'
        submission_id:
          description: The ID of the associated submission.
          format: int64
        created_at:
          description: The date this comment was created.
          format: date-time
        updated_at:
          description: The date this comment was updated.
          format: date-time
        context_id:
          description: The ID of the course this comment is associated with.
          format: int64
        context_type:
          description: "The type of the object represented by `context_id`, typically\
            \ `Course`."
          enum:
          - __dap_unspecified__
          - Course
        author_id:
          description: The ID of the commenting user.
          format: int64
        media_comment_id:
          description: "For media comments, the ID of the associated media object."
          maxLength: 255
        media_comment_type:
          description: "For media comments, the type of the associated media object."
          enum:
          - __dap_unspecified__
          - audio
          - video
        attachment_ids:
          $ref: '#/components/schemas/submission_comments_attachment_ids'
        attempt:
          description: The particular attempt (on the associated submission) that
            this comment pertains to.
          format: int32
        hidden:
          description: True if this comment is not visible to the owner of the submission.
        author_name:
          description: The name of the commenting user.
          maxLength: 255
        group_comment_id:
          description: "For group assignments, a value that is unique for all copies\
            \ of this comment on submissions in the same group."
          maxLength: 255
        assessment_request_id:
          description: "For peer-reviewed assignments, the ID of the Assessment Request\
            \ this comment is associated with."
          format: int64
        anonymous:
          description: True if this is a peer-reviewed comment for an assignment with
            anonymous peer reviews enabled. Does not apply to instructor comments
            for anonymously-graded assignments.
        teacher_only_comment:
          description: Indicates whether the comment was provided by a teacher.
        provisional_grade_id:
          description: "For moderated assignments, the provisional grade this comment\
            \ is tied to."
          format: int64
        draft:
          description: True if this comment was saved as a draft.
        edited_at:
          description: The date this comment was last edited.
          format: date-time
      required:
      - context_type
      - created_at
      - draft
      - hidden
      - id
      - teacher_only_comment
      - updated_at
      title: This table contains attributes related to the submission comments feature
        in Canvas.
    submission_versions:
      additionalProperties: {}
      properties:
        id:
          description: The ID of this version object.
          format: int64
        user_id:
          description: The ID of the submitter.
          format: int64
        context_id:
          description: The ID of the course this submission belongs to.
          format: int64
        context_type:
          description: The type of the context object (typically `Course`).
          enum:
          - __dap_unspecified__
          - Course
        assignment_id:
          description: The ID of the associated assignment.
          format: int64
        version_id:
          description: The ID of the corresponding object in the versions table.
          format: int64
      required:
      - context_type
      - id
      title: This table stores information describing previous versions of individual
        submission objects.
    submissions:
      additionalProperties: {}
      properties:
        id:
          description: Primary key of this record in the Canvas submissions dataset.
          format: int64
        attachment_id:
          description: The ID of an attachment belonging to this submission if `submission_type`
            is `online_url`. Generally superseded by `attachment_ids`.
          format: int64
        course_id:
          description: The ID of the associated assignment's course.
          format: int64
        user_id:
          description: The ID of the user who created the submission.
          format: int64
        created_at:
          description: Timestamp of when the submission was created.
          format: date-time
        updated_at:
          description: Timestamp of when the submission was last updated.
          format: date-time
        workflow_state:
          description: Life-cycle state for the submission.
          enum:
          - __dap_unspecified__
          - graded
          - pending_review
          - submitted
          - unsubmitted
          - deleted
        assignment_id:
          description: The ID of the associated assignment.
          format: int64
        media_comment_id:
          description: "For media comments, the ID of the media object associated\
            \ with this comment, as a string."
          maxLength: 255
        media_comment_type:
          description: "For media comments, the type of the media object associated\
            \ with this comment."
          enum:
          - __dap_unspecified__
          - audio
          - audio/*
          - video
          - video/*
        attachment_ids:
          $ref: '#/components/schemas/submissions_attachment_ids'
        posted_at:
          description: "The date this submission was posted to the student, or NULL\
            \ if it has not been posted."
          format: date-time
        group_id:
          description: Foreign key to the `groups` table.
          format: int64
        score:
          description: The raw score.
          format: float64
        attempt:
          description: The number of attempts made including this one.
          format: int32
        submitted_at:
          description: "The timestamp when the assignment was submitted. Note: this\
            \ date may be missing even though the assignment was submitted and graded\
            \ (example scenarios: paper assignments, submissions through external\
            \ tools, no submission required, etc.); additionally, if the student failed\
            \ to submit an assignment by the due date, the assignment can be graded\
            \ by the instructor (and will be missing a `submitted_at` date)."
          format: date-time
        quiz_submission_id:
          description: Foreign key to the `quiz_submissions` dataset (if `submission_type`
            is `online_quiz`). If this field contains a value it means that the assignment
            is a quiz.
          format: int64
        extra_attempts:
          description: Extra submission attempts allowed for the given user and assignment.
          format: int32
        grading_period_id:
          description: The ID of the grading period that this submission's assignment
            belongs to.
          format: int64
        grade:
          description: Letter grade mapped from the score by the grading scheme.
          maxLength: 255
        submission_type:
          description: The type of submission.
          enum:
          - __dap_unspecified__
          - basic_lti_launch
          - discussion_topic
          - external_tool
          - media_recording
          - online_file_upload
          - online_quiz
          - online_text_entry
          - online_upload
          - online_url
          - student_annotation
        processed:
          description: "Valid only when there is a file/attachment associated with\
            \ the submission. By default, this attribute is set to *false* when making\
            \ the assignment submission. When a submission has a file/attachment associated\
            \ with it, upon submitting the assignment a snapshot is saved and its\
            \ value is set to *true*. Defaults to NULL."
        grade_matches_current_submission:
          description: A boolean flag which is false if the student has re-submitted
            since the submission was last graded. Valid only when a score has been
            assigned to a submission. This is set to *false* if a student makes a
            new submission to an already graded assignment. This is done to indicate
            that the current grade given by the teacher is not for the most recent
            submission by the student. It is set to *true* if a score has been given
            and there is no new submission. Defaults to NULL.
        published_score:
          description: The raw score (identical to score).
          format: float64
        published_grade:
          description: "Valid only for a graded submission. The values are strings\
            \ that reflect the grading type used. For example, a scoring method of\
            \ `points` will show `4` if given a `4` out of `5`, and a scoring method\
            \ of `letter grade` will show `B` for the same score (assuming a grading\
            \ scale where 80-90% is a `B`). Defaults to NULL."
          maxLength: 255
        graded_at:
          description: Timestamp of when the submission was graded.
          format: date-time
        student_entered_score:
          description: A "what-if" score that the student has entered for this submission.
          format: float64
        grader_id:
          description: The ID of the user who graded the submission. This will be
            NULL for submissions that haven't been graded yet. It will be a positive
            number if a real user has graded the submission and a negative number
            if the submission was graded by a process (e.g. Quiz auto-grader and auto-grading
            LTI tools). Specifically auto-graded quizzes set `grader_id` to the negative
            of the quiz ID. Submissions auto-graded by LTI tools set `grader_id` to
            the negative of the tool ID.
          format: int64
        submission_comments_count:
          description: A count of the number of comments made on this submission.
          format: int32
        media_object_id:
          description: The ID of the associated MediaObject.
          format: int64
        turnitin_data:
          description: A YAML string representing plagiarism data associated with
            this submission.
        cached_due_date:
          description: The de-normalized cached due date for this submission.
          format: date-time
        excused:
          description: Whether the assignment is excused. Excused assignments have
            no impact on a user's grade.
        graded_anonymously:
          description: Denotes how the grading has been performed. Possible values
            are `graded_anonymously` and `not_graded_anonymously`.
        late_policy_status:
          description: "The status of the submission in relation to the late policy.\
            \ Only reflects statuses manually applied by a grader. Can be late, missing,\
            \ none, or NULL."
          maxLength: 16
        points_deducted:
          description: The amount of points automatically deducted from the score
            by the missing/late policy for a late or missing assignment.
          multipleOf: 0.01
        seconds_late_override:
          description: "For late submissions, the amount of time (in seconds) the\
            \ submission is late by."
          format: int64
        lti_user_id:
          $ref: '#/components/schemas/submissions_lti_user_id'
        anonymous_id:
          description: A unique short ID identifying this submission without reference
            to the owning user.
          maxLength: 5
        last_comment_at:
          description: The date of the last non-draft comment on this submission by
            a user other than the submitter.
          format: date-time
        cached_quiz_lti:
          description: True if the associated assignment is a Quizzes.Next assignment.
        cached_tardiness:
          description: "The status of the submission in relation to the late policy,\
            \ including automatically- applied statuses. Can be `late`, `missing`\
            \ or NULL."
          maxLength: 16
        resource_link_lookup_uuid:
          description: "When the submission is from an LTI tool, the resource link\
            \ lookup ID is assigned to the submission in order to recover the custom\
            \ parameters."
          format: uuid
        redo_request:
          description: True if the assignment has been reassigned to the student for
            resubmission.
        body:
          $ref: '#/components/schemas/submissions_body'
        url:
          description: URL content for the submission.
          maxLength: 255
      required:
      - assignment_id
      - cached_quiz_lti
      - course_id
      - id
      - redo_request
      - user_id
      - workflow_state
      title: This table stores submission records for an assignment.
    user_account_associations:
      additionalProperties: {}
      properties:
        id:
          description: The ID of a record.
          format: int64
        user_id:
          description: The foreign key for the users dataset.
          format: int64
        created_at:
          description: Timestamp of when the user association with an account was
            created.
          format: date-time
        updated_at:
          description: Timestamp that shows the last time the record was updated.
          format: date-time
        account_id:
          description: Identifies the account associated with this user.
          format: int64
        depth:
          description: "How \"close\" a user is related to an account. 1 if you have\
            \ a pseudonym or enrollment in a course in that account. 2 if it's the\
            \ parent account of a course you're enrolled in, etc."
          format: int32
      required:
      - account_id
      - created_at
      - id
      - updated_at
      - user_id
      title: "Stores data about user and account relationship, how \"close\" a user\
        \ is related to an account."
    user_notes:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a user journal record.
          format: int64
        deleted_at:
          description: Timestamp when this record was deleted. If the record has not
            been deleted the value will be NULL.
          format: date-time
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp of when a `user_notes` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when a `user_notes` record was updated.
          format: date-time
        workflow_state:
          description: the state of the entry record.
          enum:
          - __dap_unspecified__
          - active
          - deleted
        note:
          $ref: '#/components/schemas/user_notes_note'
        created_by_id:
          description: user ID the entry was created by.
          format: int64
        title:
          description: Faculty Journal entry title.
          maxLength: 255
      required:
      - created_at
      - id
      - updated_at
      - workflow_state
      title: Stores the data for the Faculty Journal feature.
    users:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the user.
          format: int64
        deleted_at:
          description: Timestamp that shows when a user was deleted at.
          format: date-time
        storage_quota:
          description: The storage quota for the users.
          format: int64
        lti_context_id:
          description: "UUID of the Canvas context in LTI standard. secondary ID for\
            \ this context, could be used in API to identify resource as well."
          maxLength: 255
        created_at:
          description: Timestamp when the user was created in the Canvas system.
          format: date-time
        updated_at:
          description: Timestamp that shows the last time the record was updated.
          format: date-time
        workflow_state:
          description: Workflow status indicating the status of the user.
          enum:
          - __dap_unspecified__
          - creation_pending
          - deleted
          - pending_approval
          - pre_registered
          - registered
        sortable_name:
          description: "The name of the user that is should be used for sorting groups\
            \ of users, such as in the gradebook. Format: \"lastname, firstname\"."
          maxLength: 255
        avatar_image_url:
          description: "If avatars are enabled, this field will be included and contain\
            \ a url to retrieve the user's avatar."
          maxLength: 255
        avatar_image_source:
          description: The source of a user avatar image.
          maxLength: 255
        avatar_image_updated_at:
          description: Timestamp that shows the last time the avatar image was updated.
          format: date-time
        short_name:
          description: "A short name the user has selected, for use in conversations\
            \ or other less formal places through the site."
          maxLength: 255
        last_logged_out:
          description: The last time the user explicitly logged out of Canvas.
          format: date-time
        pronouns:
          $ref: '#/components/schemas/users_pronouns'
        merged_into_user_id:
          description: "If this user was merged into another one, this is the foreign\
            \ key to that other user."
          format: int64
        locale:
          description: The user's locale. This is an optional field and may not be
            entered by the user.
          maxLength: 255
        name:
          description: The name of the user ("firstname lastname" format).
          maxLength: 255
        time_zone:
          description: "This field is only returned in certain API calls, and will\
            \ return the IANA time zone name of the user's preferred timezone."
          maxLength: 255
        uuid:
          description: UUID of the user.
          maxLength: 255
        school_name:
          description: "Used in Trial Versions of Canvas, the school the user is associated\
            \ with."
          maxLength: 255
        school_position:
          description: "Used in Trial Versions of Canvas, the position the user has\
            \ at the school. E.g. Admin"
          maxLength: 255
        public:
          description: "Used in Trial Versions of Canvas, the type of school the user\
            \ is associated with."
      required:
      - created_at
      - id
      - updated_at
      - workflow_state
      title: This table stores attributes for users.
    web_conference_participants:
      additionalProperties: {}
      properties:
        id:
          description: The ID of the web conference participant.
          format: int64
        web_conference_id:
          description: Foreign key to the `web_conferences` page.
          format: int64
        user_id:
          description: Identifies the user who is the conference participant.
          format: int64
        created_at:
          description: Timestamp when record was created.
          format: date-time
        updated_at:
          description: Timestamp when record was updated.
          format: date-time
        participation_type:
          description: "Type of participation e.g.: invitee or attendee."
          enum:
          - __dap_unspecified__
          - attendee
          - initiator
          - invitee
      required:
      - created_at
      - id
      - updated_at
      title: Links users to conferences they are invited to join.
    web_conferences:
      additionalProperties: {}
      description: Integrates with external conferencing solutions like BigBlueButton.
      properties:
        id:
          description: The ID of the conference.
          format: int64
        user_id:
          description: The ID of the user that created the conference.
          format: int64
        created_at:
          description: Timestamp when record was created.
          format: date-time
        updated_at:
          description: Timestamp when record was updated.
          format: date-time
        context_id:
          description: The ID of this conference's context.
          format: int64
        context_type:
          description: The type of this conference's context.
          enum:
          - __dap_unspecified__
          - Account
          - Course
          - Group
        start_at:
          description: "The date the conference started at, NULL if it hasn't started."
          format: date-time
        end_at:
          description: "The date that the conference ended at, NULL if it hasn't ended."
          format: date-time
        context_code:
          description: A string identifying the context.
          maxLength: 255
        started_at:
          description: "The time at which this conference actually started at, NULL\
            \ if it hasn't started."
          format: date-time
        user_ids:
          description: Array of user ids that are participants in the conference.
          maxLength: 255
        ended_at:
          description: "The time at which this conference actually ended, NULL if\
            \ it hasn't ended."
          format: date-time
        recording_ready:
          description: Whether the conference's recording has been processed.
        conference_type:
          description: The type of conference.
          enum:
          - __dap_unspecified__
          - AdobeConnect
          - BigBlueButton
          - CiscoWebex
          - DimDim
          - Wimba
          - Wiziq
          - dimdim
        conference_key:
          description: The 3rd party's ID for the conference.
          maxLength: 255
        description:
          $ref: '#/components/schemas/web_conferences_description'
        duration:
          description: The expected duration the conference is supposed to last.
          format: float64
        settings:
          description: Settings for the given conference.
        title:
          description: The title of the conference.
          maxLength: 255
        uuid:
          description: A unique ID used for integrations.
          maxLength: 255
      required:
      - conference_type
      - context_id
      - context_type
      - created_at
      - id
      - title
      - updated_at
      - user_id
      title: Data model for Conferences in Canvas.
    wiki_pages:
      additionalProperties: {}
      description: |-
        Also known as Pages. Pages store content and educational resources that are part of a course or group but don't necessarily belong in
        an assignment. Pages can include text, video, and links to files and other course or group content. Pages can also be linked to other
        pages. They can also be used as a collaboration tool for course or group wikis where only specific users can have access. Canvas keeps
        the entire history of the page to account for changes over time.
      properties:
        id:
          description: The unique identifier of a wiki page record.
          format: int64
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp showing when a `wiki_pages` record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a `wiki_pages` record was updated.
          format: date-time
        workflow_state:
          description: The state of a wiki page.
          enum:
          - __dap_unspecified__
          - active
          - deleted
          - post_delayed
          - unpublished
        context_id:
          description: "The unique identifier for the context of `wiki_pages` (account,\
            \ course, user)."
          format: int64
        context_type:
          description: The type of the object represented by `context_id`.
          enum:
          - __dap_unspecified__
          - Course
          - Group
        assignment_id:
          description: Assignment identifier when using `wiki_page` assignment type
            for an assignment.
          format: int64
        migration_id:
          description: An identifier used by the Blueprint system to match with the
            blueprint content.
          maxLength: 255
        wiki_id:
          description: The unique identifier of an associated wiki record.
          format: int64
        old_assignment_id:
          description: An old assignment identifier.
          format: int64
        todo_date:
          description: Date to set when setting this page as student to-do.
          format: date-time
        editing_roles:
          description: "CSV list of the roles that are allowed to edit this page.\
            \ Possible values are `teachers`, `students`, `public`."
          maxLength: 255
        revised_at:
          description: Timestamp showing when page was last revised.
          format: date-time
        body:
          $ref: '#/components/schemas/wiki_pages_body'
        url:
          $ref: '#/components/schemas/wiki_pages_url'
        title:
          description: The name of the wiki page record.
          maxLength: 255
        protected_editing:
          description: Editing protection for the wiki page. It is false by default.
        could_be_locked:
          description: True if the wiki page can be locked. This prevents it from
            being visible to others until ready.
      required:
      - context_id
      - context_type
      - created_at
      - id
      - protected_editing
      - updated_at
      - wiki_id
      - workflow_state
      title: Stores text data that is linked to a wiki and a course.
    wikis:
      additionalProperties: {}
      description: "There's only ever one per course, it is not highly used any longer,\
        \ Wiki pages object is linked directly to a course now."
      properties:
        id:
          description: The unique identifier of a wiki record.
          format: int64
        created_at:
          description: Timestamp showing when a wikis record was created.
          format: date-time
        updated_at:
          description: Timestamp showing when a wikis record was updated.
          format: date-time
        front_page_url:
          $ref: '#/components/schemas/wikis_front_page_url'
        has_no_front_page:
          description: Flag to determine if a course's wiki has a front page or not.
            No front page == true.
        title:
          description: The title of the wiki.
          maxLength: 255
      required:
      - created_at
      - id
      - updated_at
      title: Links a course to its wiki pages.
    abstract_courses:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    appointment_groups:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    assessment_requests:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    asset_user_accesses:
      additionalProperties: {}
      description: |-
        Supports canvas page views feature.

        Logs view and participation counts for a user + asset combination. Contains information on users' usage of assets (assignments, files,
        etc.).
      properties:
        id:
          description: The unique identifier for a user resource access record.
          format: int64
        display_name:
          $ref: '#/components/schemas/asset_user_accesses_display_name'
        user_id:
          description: The unique ID of a user.
          format: int64
        created_at:
          description: Timestamp of when an `asset_user_accesses` record was created.
          format: date-time
        updated_at:
          description: Timestamp of when an `asset_user_accesses` record was updated.
          format: date-time
        asset_code:
          description: "It is used to specify the *asset* or the idea of being accessed.\
            \ For example, `attachment_{id}` or `roster:course_{id}`."
          maxLength: 255
        asset_group_code:
          description: "asset_group_code is for the group. For example: calendar_event_{id}."
          maxLength: 255
        context_id:
          description: "The unique identifier for the asset_user_accesses's context\
            \ (account, course, user)."
          format: int64
        context_type:
          description: The type of the object represented by `context_id`.
          enum:
          - __dap_unspecified__
          - Account
          - AssessmentQuestion
          - Course
          - Group
          - User
        last_access:
          description: Timestamp of last access for a particular asset.
          format: date-time
        asset_category:
          description: Category of asset accessed.
          enum:
          - __dap_unspecified__
          - announcements
          - assignments
          - calendar_feed
          - collaborations
          - conferences
          - files
          - grades
          - home
          - modules
          - outcomes
          - pages
          - quizzes
          - roster
          - speed_grader
          - syllabus
          - topics
          - calendar
          - external_tools
          - wiki
          - external_urls
        view_score:
          description: The number of times this asset has been viewed by this user.
          format: float64
        participate_score:
          description: The number of times this asset has been interacted with by
            this user.
          format: float64
        action_level:
          description: If this access was viewed or participated with.
          enum:
          - __dap_unspecified__
          - view
          - participate
        membership_type:
          description: The role type of user/enrollment accessing this asset.
          enum:
          - __dap_unspecified__
          - TeacherEnrollment
          - AccountUser
          - Other
          - User
          - NilClass
          - TaEnrollment
          - DesignerEnrollment
          - ObserverEnrollment
          - GroupMembership
          - StudentEnrollment
          - StudentViewEnrollment
      required:
      - context_type
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    authentication_providers:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    cloned_items:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    content_exports:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    eportfolios:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    epub_exports:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    external_feeds:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    gradebook_uploads:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    group_and_membership_importers:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    live_assessments_assessments:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    live_assessments_submissions:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    lti_message_handlers:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    media_objects:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    moderated_grading_provisional_grades:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    outcome_imports:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    purgatories:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    quiz_statistics:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    sis_batches:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    usage_rights:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    versions:
      additionalProperties: {}
      properties:
        id:
          format: int64
      required:
      - id
      title: "Data in this table is not exposed, the table is available only as the\
        \ target of a foreign key or discriminated key relationship."
    assignment_groups__rules:
      additionalProperties: {}
      properties:
        drop_highest:
          description: Number of highest scores to be dropped for each user.
          format: int32
        drop_lowest:
          description: Number of lowest scores to be dropped for each user.
          format: int32
        never_drop:
          description: "Assignment IDs that should never be dropped. E.g.: [33, 17,\
            \ 24]."
          items:
            format: int32
      required:
      - never_drop
      title: Type extracted from column `assignment_groups.rules`.
    assignments__turnitin_settings:
      additionalProperties: {}
      properties:
        originality_report_visibility:
          description: Allows to set the timeframe when the report will become visible.
          enum:
          - __dap_unspecified__
          - immediate
          - after_grading
          - after_due_date
          - never
        exclude_small_matches_type:
          description: Exclude small sources from the Similarity Report by a set number
            of words or percentage.
          enum:
          - __dap_unspecified__
          - "off"
          - words
          - percent
        exclude_small_matches_value:
          description: If exclude_small_matches_type is set to percent or number then
            the value will be will be a number (of words or a percent).
          format: int32
        s_paper_check:
          description: "If set to TRUE, will allow to compare submission against other\
            \ students' papers."
        s_view_report:
          description: If set to TRUE students will be able to access their originality
            report.
        internet_check:
          description: "Select the content you'd like to compare papers against: current\
            \ and archived website content."
        journal_check:
          description: "Select the content you'd like to compare papers against: periodicals,\
            \ journals and publications."
        exclude_biblio:
          description: "Selecting this option will exclude text appearing in the bibliography,\
            \ works cited, or references sections of student papers from being checked\
            \ for matches when generating Similarity Reports."
        exclude_quoted:
          description: "Selecting this option will exclude text appearing in the bibliography,\
            \ works cited, or references sections of student papers from being checked\
            \ for matches when generating Similarity Reports."
        submit_papers_to:
          description: "If set to FALSE, a similarity report will still be generated\
            \ for paper submissions but students' papers will not be stored in the\
            \ Turnitin standard paper repository or the institution's paper repository\
            \ for future comparison."
      title: Type extracted from column `assignments.turnitin_settings`.
    context_external_tools__settings:
      additionalProperties: {}
      properties:
        course_home_sub_navigation:
          description: Course home sub navigation placement type.
        course_settings_sub_navigation:
          description: Course settings sub navigation placement type.
        custom_fields:
          description: "Custom parameters provider request to share on every single\
            \ LTI launch, each placement column might have its own set of custom_fields."
        discussion_menu:
          description: Discussion menu placement type.
        discussion_topic_index_menu:
          description: Discussion topic index menu placement type.
        discussion_topic_menu:
          description: Discussion topic menu placement type.
        editor_button:
          description: RCE placement type.
        enabled:
          description: "Controls if the tool is disabled for user to click on, typically\
            \ tool gets removed altogether but sometimes provider uses this setting\
            \ to just disable it in the UI."
        file_index_menu:
          description: File index menu placement type.
        file_menu:
          description: File menu placement type.
        global_navigation:
          description: Global navigation placement type.
        grade_passback:
          description: Grade pass-back placement type.
        homework_selection:
          description: Homework selection placement type.
        homework_submission:
          description: Homework submission placement type.
        launch_presentation_document_target:
          description: Tells us if it should be opened in another window.
        link_selection:
          description: Link selection placement type.
        migration_selection:
          description: Migration selection placement type.
        module_group_menu:
          description: Module group menu placement type.
        module_index_menu:
          description: Module index menu placement type.
        account_navigation:
          description: account navigation placement type.
        assignment_group_menu:
          description: Assignment group menu placement type.
        assignment_index_menu:
          description: Assignment index menu placement type.
        assignment_menu:
          description: Assignment menu placement type.
        assignment_selection:
          description: Assignment selection placement type.
        canvas_caliper_url:
          description: URL to caliper endpoint if supported by the tool.
        collaboration:
          description: Collaboration placement type.
        content_migration:
          description: Content migration placement type.
        course_assignments_menu:
          description: Course assignments menu placement type.
        course_navigation:
          description: Course navigation placement type.
        module_menu:
          description: Module menu placement type.
        post_grades:
          description: Post grades placement type.
        quiz_index_menu:
          description: Quiz index menu placement type.
        quiz_menu:
          description: Quiz menu placement type.
        similarity_detection:
          description: Plagiarism platform placement.
        student_context_card:
          description: Student context card placement type.
        text:
          description: "Identifies the name of the tool, default what the user can\
            \ see if no label is set."
        tool_configuration:
          description: Identifies the LTI tool configuration dataset.
        use_1_3:
          description: LTI 1.3 compliant tool.
        user_navigation:
          description: User navigation placement type.
        visibility:
          description: "Controls if it is an admin only tool, takes values of `admin`\
            \ and `members`."
        wiki_index_menu:
          description: Wiki index menu placement type.
        wiki_page_menu:
          description: Wiki page menu placement type.
      title: Type extracted from column `context_external_tools.settings`.
    courses__settings:
      additionalProperties: {}
      properties:
        allow_student_discussion_editing:
          description: Let students edit or delete their own discussion posts.
        allow_student_discussion_topics:
          description: Let students create discussion topics.
        course_format:
          description: "Format of a course, values include `blended`, `on_campus`,\
            \ `online`."
        filter_speed_grader_by_student_group:
          type: string
        hide_distribution_graphs:
          description: Hide grade distribution graphs from students.
        hide_final_grade:
          description: Hide totals in student grades summary.
        is_public_to_auth_users:
          description: Set to true if course is public only to authenticated users.
        lock_all_announcements:
          description: Disable comments on announcements.
        public_syllabus:
          description: "Set to true to make the course syllabus public. Values include\
            \ true, false."
        public_syllabus_to_auth:
          description: Set to true to make the course syllabus public for authenticated
            users.
        restrict_student_future_view:
          description: Restrict students from viewing courses before start date.
        restrict_student_past_view:
          description: Restrict students from viewing courses after end date.
        syllabus_updated_at:
          description: Timestamp when syllabus was updated in a course.
        usage_rights_required:
          description: Copyright and license information must be provided for files
            before they are published.
        allow_student_forum_attachments:
          description: Whether students can attach files to discussions.
      title: Type extracted from column `courses.settings`.
    quiz_questions__question_data:
      additionalProperties: {}
      properties:
        neutral_comments:
          description: Comments to be displayed regardless of how the student answers
            the question.
        answers:
          description: Collection of possible answers.
        name:
          description: Name of the question.
        question_type:
          description: Denotes the type of the question.
        question_text:
          description: Text of the question.
        regrade_option:
          description: Denotes if regrading is available for the question. Possible
            values are `available` and `unavailable` for question types. Defaults
            to `available` for the allowed question types and NULL for the rest.
          enum:
          - __dap_unspecified__
          - available
          - unavailable
          - multiple_answers_question
          - multiple_choice_question
          - true_false_question
          - current_and_previous_correct
          - no_regrade
          - current_correct_only
          - full_credit
          - disabled
        correct_comments:
          description: Comments to be displayed if the student answers the question
            correctly.
        incorrect_comments:
          description: "Comments to be displayed if the student answers the question\
            \ incorrectly neutral_comments: Comments to be displayed regardless of\
            \ how the student answers the question."
        text_after_answers:
          description: "(Used in *short_answer_question*, also known as *fill_in_the_blank*.\
            \ Omitted for other question types) Text following the missing word."
        matching_answer_incorrect_matches:
          description: "(Used in *matching_question*. Omitted for other question types)\
            \ List of distractors (incorrect answers), delimited by new lines, that\
            \ will be seeded with all the *answer_match_right* values."
        points_possible:
          description: Maximum number of points that can be awarded for answering
            the question correctly.
          format: float64
      title: Type extracted from column `quiz_questions.question_data`.
    user_agents:
      additionalProperties: {}
      properties:
        id:
          description: The unique identifier for a user agent.
          format: int32
        http_user_agent:
          description: The user agent string sent by the HTTP client.
      required:
      - id
      title: User agent strings for the `web_logs` table.
    IPv4Address:
      description: "IPv4 address, according to dotted-quad ABNF syntax as defined\
        \ in RFC 2673, section 3.2."
      format: ipv4
      title: Represent and manipulate single IPv4 Addresses.
      type: string
    IPv6Address:
      description: "IPv6 address, as defined in RFC 2373, section 2.2."
      format: ipv6
      title: Represent and manipulate single IPv6 Addresses.
      type: string
    web_logs:
      additionalProperties: {}
      description: "Note: Logs older than the retention limit of 30 days are no longer\
        \ available via DAP API."
      properties:
        id:
          description: The unique identifier for a logged web request.
          format: uuid
        timestamp:
          description: Timestamp when the request was made in UTC.
          format: date-time
        user_id:
          description: The unique ID of the user that made the request.
          format: int64
        real_user_id:
          description: "If the request was processed by one user masquerading as another,\
            \ then this column contains the real user ID of the user."
          format: int64
        course_id:
          description: Course that owned the request.
          format: int64
        quiz_id:
          description: Identifies the quiz if the request is for a quiz.
          format: int64
        discussion_id:
          description: Identifies the discussion if the request is for a discussion.
          format: int64
        conversation_id:
          description: Identifies the conversation if the request is for a conversation.
          format: int64
        assignment_id:
          description: Identifies the assignment if the request is for an assignment.
          format: int64
        url:
          description: The path and the query string components of the requested URL.
        user_agent_id:
          description: "Foreign key linking to the user_agent table. User agent, as\
            \ the header received from the user's browser/client software, will be\
            \ available in the user_agent table once exposed."
          format: int32
        http_method:
          description: "HTTP method/verb (GET, POST, PUT, etc.) that was sent with\
            \ the request."
          enum:
          - CONNECT
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          - TRACE
          - SEARCH
          - PROPFIND
          - LOCK
          - REPORT
          - PURGE
          - MKCOL
          - PROPPATCH
          - CHECKOUT
          - UNLOCK
        http_status:
          description: HTTP status code of the request (e.g. 200 OK).
          enum:
          - 100
          - 101
          - 102
          - 103
          - 200
          - 201
          - 202
          - 203
          - 204
          - 205
          - 206
          - 207
          - 208
          - 226
          - 300
          - 301
          - 302
          - 303
          - 304
          - 305
          - 307
          - 308
          - 400
          - 401
          - 402
          - 403
          - 404
          - 405
          - 406
          - 407
          - 408
          - 409
          - 410
          - 411
          - 412
          - 413
          - 414
          - 415
          - 416
          - 417
          - 418
          - 421
          - 422
          - 423
          - 424
          - 425
          - 426
          - 428
          - 429
          - 431
          - 451
          - 500
          - 501
          - 502
          - 503
          - 504
          - 505
          - 506
          - 507
          - 508
          - 510
          - 511
        http_version:
          description: HTTP protocol version (e.g. HTTP/2.0).
          enum:
          - "0.9"
          - "1.0"
          - "1.1"
          - "2.0"
        remote_ip:
          $ref: '#/components/schemas/web_logs_remote_ip'
        interaction_micros:
          description: Total time required to service the request in microseconds.
          format: int32
        web_application_controller:
          description: The controller that the Canvas web application used to service
            this request.
          enum:
          - account_calendars_api
          - account_domain_lookups
          - account_grading_settings
          - account_notifications
          - account_reports
          - accounts
          - admins
          - alerts
          - analytics
          - analytics_api
          - announcements
          - announcements_api
          - anonymous_provisional_grades
          - anonymous_submissions
          - api/v1/provisions
          - app_center
          - appointment_groups
          - assessment_questions
          - assignment_extensions
          - assignment_groups
          - assignment_groups_api
          - assignment_overrides
          - assignments
          - assignments_api
          - authentication_audit_api
          - authentication_providers
          - blackout_dates
          - bookmarks/bookmarks
          - brand_configs
          - brand_configs_api
          - calendar_events
          - calendar_events_api
          - calendars
          - canvadoc_sessions
          - catalog_accounts
          - collaborations
          - comm_messages_api
          - communication_channels
          - conditional_release/rules
          - conditional_release/stats
          - conferences
          - content_exports
          - content_exports_api
          - content_imports
          - content_migrations
          - content_shares
          - context
          - context_module_items_api
          - context_modules
          - context_modules_api
          - conversations
          - course_audit_api
          - course_nicknames
          - course_paces
          - course_pacing/pace_contexts_api
          - courses
          - crocodoc_sessions
          - csp_settings
          - custom_data
          - custom_gradebook_column_data_api
          - custom_gradebook_columns_api
          - demo_snapshots
          - developer_key_account_bindings
          - developer_keys
          - disable_post_to_sis_api
          - discussion_entries
          - discussion_topics
          - discussion_topics_api
          - docviewer_audit_events
          - enrollments_api
          - eportfolio_categories
          - eportfolio_entries
          - eportfolios
          - eportfolios_api
          - epub_exports
          - equation_images
          - errors
          - external_content
          - external_feeds
          - external_tools
          - favorites
          - feature_flags
          - file_previews
          - files
          - folders
          - grade_change_audit_api
          - gradebook_csvs
          - gradebook_filters_api
          - gradebook_history_api
          - gradebook_settings
          - gradebook_uploads
          - gradebooks
          - grading_period_sets
          - grading_periods
          - grading_schemes_json
          - grading_standards
          - grading_standards_api
          - graphql
          - group_categories
          - group_memberships
          - groups
          - history
          - immersive_reader
          - impact
          - info
          - inst_access_tokens
          - internal_analytics_api
          - internal_analytics_dashboards_api
          - jobs
          - jobs_v2
          - jwts
          - late_policy
          - legal_information
          - live_assessments/assessments
          - live_assessments/results
          - login
          - login/apple
          - login/canvas
          - login/cas
          - login/clever
          - login/facebook
          - login/github
          - login/google
          - login/ldap
          - login/linkedin
          - login/microsoft
          - login/oauth
          - login/oauth2
          - login/openid_connect
          - login/otp
          - login_redirect
          - login/saml
          - login/saml_idp_discovery
          - login/trust
          - login/twitter
          - lti_api
          - lti/data_services
          - lti/feature_flags
          - lti/ims/authentication
          - lti/ims/authorization
          - lti/ims/deep_linking
          - lti/ims/line_items
          - lti/ims/names_and_roles
          - lti/ims/results
          - lti/ims/scores
          - lti/ims/tool_consumer_profile
          - lti/ims/tool_proxy
          - lti/ims/tool_setting
          - lti/lti_apps
          - lti/membership_service
          - lti/message
          - lti/originality_reports_api
          - lti/plagiarism_assignments_api
          - lti/platform_storage
          - lti/submissions_api
          - lti/subscriptions_api
          - lti/token
          - lti/tool_configurations_api
          - lti/tool_proxy
          - lti/users_api
          - master_courses/master_templates
          - media_objects
          - media_tracks
          - messages
          - microsoft_sync/groups
          - migration_issues
          - moderation_set
          - mobile_verify
          - new_quizzes/quiz_items_api
          - new_quizzes/quizzes_api
          - notification_preferences
          - oauth_proxy
          - oauth2_provider
          - observer_alert_thresholds_api
          - observer_alerts_api
          - observer_pairing_codes_api
          - one_time_passwords
          - outcome_groups_api
          - outcome_imports_api
          - outcome_proficiency_api
          - outcome_results
          - outcomes
          - outcomes_academic_benchmark_import_api
          - outcomes_api
          - page_comments
          - page_views
          - peer_reviews_api
          - phone_home
          - planner
          - planner_notes
          - planner_overrides
          - plugins
          - polling/poll_choices
          - polling/poll_sessions
          - polling/poll_submissions
          - polling/polls
          - profile
          - progress
          - provisional_grades
          - pseudonyms
          - question_banks
          - quizzes/course_quiz_extensions
          - quizzes_next/quizzes_api
          - quizzes/outstanding_quiz_submissions
          - quizzes/quiz_assignment_overrides
          - quizzes/quiz_extensions
          - quizzes/quiz_groups
          - quizzes/quiz_ip_filters
          - quizzes/quiz_questions
          - quizzes/quiz_reports
          - quizzes/quiz_statistics
          - quizzes/quiz_submission_events
          - quizzes/quiz_submission_events_api
          - quizzes/quiz_submission_files
          - quizzes/quiz_submission_questions
          - quizzes/quiz_submission_users
          - quizzes/quiz_submissions
          - quizzes/quiz_submissions_api
          - quizzes/quizzes
          - quizzes/quizzes_api
          - quizzes_respondus/launch
          - quizzes_respondus/restart
          - quizzes_respondus/security
          - quizzes_respondus/session
          - release_notes
          - respondus_ldb_handshake
          - role_overrides
          - rubric_assessments
          - rubric_associations
          - rubrics
          - rubrics_api
          - saml_idp
          - scopes_api
          - search
          - sections
          - security
          - self_enrollments
          - services_api
          - sftp_users
          - shared_brand_configs
          - sis_api
          - sis_import_errors_api
          - sis_imports_api
          - site_admin
          - sub_accounts
          - submission_comments
          - submission_comments_api
          - submissions
          - submissions/anonymous_downloads
          - submissions/anonymous_previews
          - submissions_api
          - submissions/downloads
          - submissions/previews
          - support_helpers/due_date_cache
          - support_helpers/submission_lifecycle_manage
          - tabs
          - terms
          - terms_api
          - tokens
          - trust_links
          - usage_rights
          - user_lists
          - user_notes
          - user_observees
          - users
          - uuid_provisioners
          - webhooks
          - web_zip_exports
          - webct_exporter
          - wiki_pages
          - wiki_pages_api
        web_application_action:
          description: The action in the Canvas web application used to service this
            request.
          enum:
          - abort
          - abort_all_pending
          - accept
          - account_calendar_settings
          - account_chain
          - activate_role
          - activity_stream
          - activity_stream_summary
          - add_account_user
          - add_domain
          - add_entry
          - add_favorite_course
          - add_favorite_groups
          - add_item
          - add_message
          - add_rce_favorite
          - add_reply
          - add_role
          - add_sftp_key
          - add_users
          - admin_merge
          - admin_split
          - admin_tools
          - advantage_access_token
          - alerts_by_student
          - alerts_count
          - alignment_redirect
          - all_calendars
          - all_courses
          - all_visible_nav_tools
          - android_assetlinks
          - annotation_notification
          - answer
          - api_capture
          - api_create_success
          - api_destroy
          - api_file_status
          - api_index
          - api_quota
          - api_settings
          - api_show
          - api_update
          - apple_app_site_association
          - apply_score_to_ungraded_submissions
          - assessment_question_show
          - asset_id_mapping
          - assign_peer_review
          - assign_peer_reviews
          - assign_unassigned_members
          - associated_courses
          - attachment
          - attachment_content
          - audit_events
          - auth
          - authenticate
          - authorize
          - authorize_redirect
          - available
          - available_migrators
          - available_reports
          - avatar_image
          - avatars
          - backup
          - basic_lti_launch_request
          - batch_create
          - batch_retrieve
          - batch_update
          - batches
          - bookmark
          - bookmark_search
          - bouncing_channel_report
          - browserconfig
          - bulk_reset_bounce_counts
          - bulk_select
          - bulk_update
          - bulk_user_progress
          - cancel
          - category_index
          - change_gradebook_column_size
          - change_gradebook_version
          - change_password
          - check_account_permission
          - check_title_availability
          - choose_mastery_path
          - clear_cache
          - clear_file_session
          - clone_with_name
          - close
          - close_notification
          - closed
          - clusters
          - communication
          - complete
          - compress_dates
          - conclude_user
          - configuration
          - confirm
          - confirm_action
          - confirm_change_password
          - confirm_delete_user
          - confirmation_limit_reached
          - consortium_users
          - content_list
          - content_share_users
          - content_shares
          - content_tag_assignment_data
          - content_tag_master_course_data
          - content_tag_prerequisites_needing_finishing
          - context_index
          - context_show
          - copy
          - copy_course
          - copy_course_content
          - copy_course_status
          - copy_file
          - copy_folder
          - course
          - course_accounts
          - course_assignments
          - course_creation_accounts
          - course_index
          - course_participation
          - course_student_summaries
          - courses
          - courses_api
          - courses_redirect
          - create
          - create_file
          - create_media_object
          - create_or_update
          - create_pending
          - create_tool_with_verification
          - create_user_service
          - created_group_ids
          - cross_domain_login
          - crosslist
          - crosslist_check
          - dashboard_cards
          - dashboard_sidebar
          - dashboard_stream_items
          - dashboard_view
          - data
          - day_details
          - days
          - debug_data
          - deep
          - deep_linking_response
          - delegated_auth_pass_through
          - delete
          - delete_data
          - delete_for_all
          - delete_peer_review
          - delete_push_token
          - delete_recording
          - delete_user_service
          - deleted_index
          - deny
          - department
          - department_grades
          - department_participation
          - department_statistics
          - department_statistics_by_subaccount
          - destroy
          - destroy_all
          - detail_list
          - disable_post_to_sis
          - dismiss_migration_limitation_msg
          - domain_lookups
          - duplicate
          - edit
          - effective_due_dates
          - enabled_features
          - enroll_users
          - enrollment_invitation
          - entries
          - entry_list
          - environment
          - eportfolio_moderation
          - event_types_index
          - execute
          - export
          - extensions
          - external_tool
          - fail
          - feed
          - final_grade_overrides
          - flag
          - for_account
          - for_assignment
          - for_course
          - for_course_and_other_parameters
          - for_grader
          - for_login
          - for_student
          - for_students
          - for_user
          - formatted_answer
          - forgot_password
          - front_page
          - generate_sessionless_launch
          - get_course_timetable
          - get_courses
          - get_csp_settings
          - get_custom_color
          - get_custom_colors
          - get_dashboard_positions
          - get_data
          - get_new_user_tutorial_statuses
          - grade
          - grade_passback
          - grade_summary
          - gradeable_students
          - grades
          - grades_for_student
          - grading_period_assignments
          - grading_rubrics
          - graphiql
          - group_alias
          - group_index
          - grouped_info
          - groups
          - handshake
          - health_prognosis
          - help_links
          - history
          - html_message
          - icon_maker_folder
          - icon_metadata
          - iframe_media_player
          - ignore_item
          - ignore_stream_item
          - image_thumbnail
          - images
          - import
          - import_details
          - importing
          - imports_index
          - imports_show
          - inbox
          - index
          - internal_analytics
          - intro
          - invite
          - invite_users
          - item_details
          - item_redirect
          - item_redirect_mastery_paths
          - item_sequence
          - job_stats
          - join
          - jwks
          - jwt_token
          - landing
          - last_attended
          - latest
          - launch
          - launch_definitions
          - leave_student_view
          - legacy_grade_passback
          - licenses
          - limit_user
          - link
          - link_index
          - link_validation
          - link_validator
          - list
          - list_all_folders
          - list_favorite_courses
          - list_favorite_groups
          - list_google_docs
          - list_keys
          - lockdown_browser_required
          - logout_landing
          - logout_service
          - lookup
          - lti_index
          - manage
          - manageable_accounts
          - manageable_courses
          - managed_quiz_data
          - manually_created_courses_account
          - mark_all_as_read
          - mark_all_read
          - mark_all_unread
          - mark_as_done
          - mark_as_not_done
          - mark_bulk_submissions_as_read
          - mark_entry_read
          - mark_entry_unread
          - mark_item_read
          - mark_rubric_assessments_read
          - mark_submission_item_read
          - mark_submission_read
          - mark_submission_unread
          - mark_topic_read
          - mark_topic_unread
          - masquerade
          - media_download
          - media_folder
          - media_object_redirect
          - media_object_thumbnail
          - media_upload_url
          - members
          - merge
          - merge_into
          - message_redirect
          - metadata
          - migration_details
          - migration_status
          - migrations_index
          - migrations_show
          - missing_submissions
          - mobile_login_qr_code
          - moderate
          - module_redirect
          - move_questions
          - multiple_gradeable_students
          - new
          - new_quizzes
          - new_quizzes_selection_update
          - next_appointment
          - oauth
          - oauth_success
          - object_snippet
          - observees
          - observers
          - observer_pairing_codes_csv
          - oembed_retrieve
          - offline_web_exports
          - open
          - opened
          - originality_report
          - outcome_alignments
          - outcome_result
          - outcomes
          - pages
          - pandata_events_token
          - participants
          - peer_reviews
          - permissions
          - ping
          - post_message_forwarding
          - potential_collaborators
          - prestart
          - preview_html
          - prior_users
          - privacy_policy
          - profile_pics
          - progressions
          - public_feed
          - public_url
          - publish
          - publish_quizzes
          - publish_to_sis
          - qr_mobile_login
          - query
          - questions
          - queue_migration
          - quota
          - rate_entry
          - rce_config
          - re_send_confirmation
          - re_send_invitations
          - react_files
          - reactivate
          - read_only
          - readiness
          - recent_students
          - recipients
          - record_answer
          - recording_ready
          - redirect
          - redirect_proxy
          - redo_submission
          - refresh
          - registration
          - registration_return
          - reject
          - relock
          - remind_peer_review
          - remove_account_user
          - remove_alignment
          - remove_favorite_course
          - remove_favorite_groups
          - remove_item
          - remove_messages
          - remove_rce_favorite
          - remove_role
          - remove_user
          - render_past_global_announcements
          - reorder
          - reorder_assignments
          - reorder_categories
          - reorder_entries
          - reorder_items
          - replies
          - report_avatar_image
          - reports_tab
          - requeue
          - reserve
          - reset
          - reset_bounce_count
          - reset_content
          - reset_course_favorites
          - reset_test_student
          - reset_verifier
          - resolve_path
          - resource
          - resource_selection
          - restore_message
          - restore_states
          - restore_user
          - restrict_item
          - resubmit_to_turnitin
          - resubmit_to_vericite
          - retrieve
          - revert
          - revisions
          - revisions_redirect
          - rollups
          - root_accounts
          - roster
          - roster_user
          - roster_user_services
          - roster_user_usage
          - rubric
          - rubric_assessments_read_state
          - rubrics
          - save_assignment_order
          - save_enabled_account_calendars
          - save_gradebook_column_order
          - save_selected_contexts
          - save_to_account
          - save_to_user_session
          - search
          - section_alias
          - select
          - select_mastery_path
          - self_enrollment
          - self_unenrollment
          - send_via_sms
          - services
          - session_launch
          - session_token
          - sessionless_launch
          - set_custom_color
          - set_course_timetable
          - set_course_timetable_events
          - set_csp_setting
          - set_dashboard_positions
          - set_data
          - set_new_user_tutorial_status
          - set_usage_rights
          - settings
          - show
          - show_anonymous
          - show_default_grading_scheme
          - show_deprecated
          - show_front_page
          - show_k5_dashboard
          - show_kaltura_config
          - show_moderate
          - show_observer
          - show_redirect
          - show_relative
          - show_revision
          - show_settings
          - show_sso_settings
          - show_submissions_upload
          - sis_assignments
          - sis_import
          - sis_publish_status
          - speed_grader
          - speed_grader_settings
          - split
          - start
          - start_debugging
          - start_kaltura_session
          - start_link_validation
          - start_offline_web_export
          - statistics
          - statistics_graph
          - status
          - stop_debugging
          - store
          - stuck_singletons
          - stuck_strands
          - student_details
          - student_in_course
          - student_in_course_assignments
          - student_in_course_messaging
          - student_in_course_participation
          - student_view
          - student_view_student
          - students
          - students_per_range
          - styleguide
          - sub_accounts
          - subgraph_execute
          - subgroups
          - submission
          - submissions
          - submissions_clear_unread
          - submission_summary
          - submission_versions
          - submissions_zip_upload
          - subscribe_topic
          - subscriptions_index
          - success
          - summary_list
          - syllabus
          - sync
          - teacher_activity
          - terminate_sessions
          - terms_of_service
          - terms_of_service_custom_content
          - terms_of_use
          - test_ldap_bind
          - test_ldap_connection
          - test_ldap_login
          - test_ldap_search
          - time
          - todo_item_count
          - todo_items
          - toggle_collapse
          - toggle_collapse_all
          - toggle_disable_inbox
          - toggle_hide_dashcard_color_overlays
          - toggle_mute
          - token
          - turnitin_confirmation
          - turnitin_outcomes_placement
          - turnitin_report
          - unconclude
          - unconclude_user
          - unconfirmed_channel_report
          - uncrosslist
          - undelete_index
          - undelete_item
          - unenroll_user
          - unflag
          - universal_link_oauth2_dummy
          - unlink
          - unpublish
          - unpublish_quizzes
          - unread_count
          - unsubscribe_topic
          - unstuck
          - unsynced_changes
          - upcoming_events
          - update
          - update_all
          - update_anonymous
          - update_associations
          - update_avatar_image
          - update_front_page
          - update_final_grade_overrides
          - update_item
          - update_media_object
          - update_nav
          - update_preferences_by_category
          - update_profile
          - update_region
          - update_settings
          - update_sso_settings
          - update_submission
          - user
          - user_close_notification
          - user_close_notification_deprecated
          - user_dashboard
          - user_graded_submissions
          - user_ids
          - user_index
          - user_index_deprecated
          - user_notes
          - user_outcome_results
          - user_progress
          - users
          - validate_access_code
          - vericite_report
          - view
          - visible_calendars_count
          - visible_contexts
          - visible_course_nav_tools
          - web_app_manifest
          - webct_schools
          - xml_schema
        web_application_context_type:
          description: Containing object type that the Canvas web application used
            to service this request.
          enum:
          - Account
          - AssessmentQuestion
          - Assignment
          - ContentMigration
          - Course
          - CourseSection
          - Group
          - Quizzes::QuizSubmission
          - StudentEnrollment
          - User
          - UserProfile
        web_application_context_id:
          description: Containing object ID that the Canvas web application used to
            service this request.
          format: int64
        session_id:
          description: ID of the user's session where this request was made.
          format: uuid
        developer_key_id:
          description: ID of the developer who accessed this resource if the request
            was made by a developer.
          format: int64
        participated:
          description: Shows whether the HTTP request is considered a participation
            for the user.
      required:
      - http_method
      - http_status
      - http_version
      - id
      - interaction_micros
      - participated
      - remote_ip
      - timestamp
      - url
      title: Stores the Canvas web application server access/request logs.
    _job__id__get_200_response:
      oneOf:
      - $ref: '#/components/schemas/CompleteSnapshotJob'
      - $ref: '#/components/schemas/CompleteIncrementalJob'
      - $ref: '#/components/schemas/FailedJob'
    _job__id__get_401_response:
      additionalProperties: {}
      example:
        error:
          type: type
          message: message
          uuid: uuid
      properties:
        error:
          $ref: '#/components/schemas/AuthenticationError'
      required:
      - error
    _job__id__get_404_response:
      additionalProperties: {}
      example:
        error:
          kind: kind
          id: id
          type: type
          message: message
          uuid: uuid
      properties:
        error:
          $ref: '#/components/schemas/NotFoundError'
      required:
      - error
    Raised_when_the_client_is_not_onboarded_:
      additionalProperties: {}
      example:
        type: ""
        message: ""
        uuid: ""
      properties:
        type:
          description: "A machine-processable identifier for the error. Typically\
            \ corresponds to the fully-qualified exception class, as per the type\
            \ system of the language that emitted the message (e.g. Java, Python or\
            \ Scala exception type)."
        uuid:
          description: Unique identifier of the error. This identifier helps locate
            the exact source of the error (e.g. find the log entry in the server log
            stream). Make sure to include this identifier when contacting support.
        message:
          description: "A human-readable description for the error for informational\
            \ purposes. The exact format of the message is unspecified, and implementations\
            \ should not rely on the presence of any specific information."
      required:
      - message
      - type
      - uuid
      title: Raised when the client is not onboarded.
    Raised_when_the_client_is_onboarded_but_access_is_forbidden_:
      additionalProperties: {}
      properties:
        type:
          description: "A machine-processable identifier for the error. Typically\
            \ corresponds to the fully-qualified exception class, as per the type\
            \ system of the language that emitted the message (e.g. Java, Python or\
            \ Scala exception type)."
        uuid:
          description: Unique identifier of the error. This identifier helps locate
            the exact source of the error (e.g. find the log entry in the server log
            stream). Make sure to include this identifier when contacting support.
        message:
          description: "A human-readable description for the error for informational\
            \ purposes. The exact format of the message is unspecified, and implementations\
            \ should not rely on the presence of any specific information."
      required:
      - message
      - type
      - uuid
      title: Raised when the client is onboarded but access is forbidden.
    _job__id__get_500_response_error:
      oneOf:
      - $ref: '#/components/schemas/Raised_when_the_client_is_not_onboarded_'
      - $ref: '#/components/schemas/Raised_when_the_client_is_onboarded_but_access_is_forbidden_'
      - $ref: '#/components/schemas/ProcessingError'
    _job__id__get_500_response:
      additionalProperties: {}
      example:
        error:
          type: ""
          message: ""
          uuid: ""
      properties:
        error:
          $ref: '#/components/schemas/_job__id__get_500_response_error'
      required:
      - error
    _job__id__get_504_response:
      additionalProperties: {}
      example:
        error:
          message: message
      properties:
        error:
          $ref: '#/components/schemas/GatewayTimeoutError'
      required:
      - error
    _object_url_post_400_response:
      additionalProperties: {}
      example:
        error:
          location:
            character: ""
            line: ""
            column: ""
          type: ""
          message: ""
          uuid: ""
      properties:
        error:
          $ref: '#/components/schemas/ValidationError'
      required:
      - error
    _query__namespace__table__table__data_post_400_response_error:
      oneOf:
      - $ref: '#/components/schemas/ValidationError'
      - $ref: '#/components/schemas/OutOfRangeError'
      - $ref: '#/components/schemas/SnapshotRequiredError'
    _query__namespace__table__table__data_post_400_response:
      additionalProperties: {}
      example:
        error:
          location:
            character: ""
            line: ""
            column: ""
          type: ""
          message: ""
          uuid: ""
      properties:
        error:
          $ref: '#/components/schemas/_query__namespace__table__table__data_post_400_response_error'
      required:
      - error
    ValidationError_location:
      additionalProperties: false
      description: Location of where invalid input was found.
      example:
        character: ""
        line: ""
        column: ""
      properties:
        line:
          description: Line number (1-based).
        column:
          description: Column number w.r.t. the beginning of the line (1-based).
        character:
          description: Character number w.r.t. the beginning of the input (1-based).
      required:
      - character
      - column
      - line
    assessment_question_banks_title:
      description: The title for the question bank.
      oneOf:
      - {}
      - type: string
    assessment_questions_name:
      description: Name of the question.
      oneOf:
      - {}
      - type: string
    Type_extracted_from_column__assignment_groups_rules__:
      additionalProperties: {}
      properties:
        drop_highest:
          description: Number of highest scores to be dropped for each user.
          format: int32
        drop_lowest:
          description: Number of lowest scores to be dropped for each user.
          format: int32
        never_drop:
          description: "Assignment IDs that should never be dropped. E.g.: [33, 17,\
            \ 24]."
          items:
            format: int32
      required:
      - never_drop
      title: Type extracted from column `assignment_groups.rules`.
    assignments_lti_context_id:
      description: "UUID of the Canvas context in LTI standard. Secondary ID for this\
        \ context, could be used in API to identify resource as well."
      oneOf:
      - {}
      - type: string
    assignments_sis_source_id:
      description: ID for the correlated record for the assignment in the Student
        Information System. It can be NULL.
      oneOf:
      - {}
      - type: string
    assignments_description:
      description: The assignment description in an HTML fragment.
      oneOf:
      - {}
      - type: string
    Type_extracted_from_column__assignments_turnitin_settings__:
      additionalProperties: {}
      properties:
        originality_report_visibility:
          description: Allows to set the timeframe when the report will become visible.
          enum:
          - __dap_unspecified__
          - immediate
          - after_grading
          - after_due_date
          - never
        exclude_small_matches_type:
          description: Exclude small sources from the Similarity Report by a set number
            of words or percentage.
          enum:
          - __dap_unspecified__
          - "off"
          - words
          - percent
        exclude_small_matches_value:
          description: If exclude_small_matches_type is set to percent or number then
            the value will be will be a number (of words or a percent).
          format: int32
        s_paper_check:
          description: "If set to TRUE, will allow to compare submission against other\
            \ students' papers."
        s_view_report:
          description: If set to TRUE students will be able to access their originality
            report.
        internet_check:
          description: "Select the content you'd like to compare papers against: current\
            \ and archived website content."
        journal_check:
          description: "Select the content you'd like to compare papers against: periodicals,\
            \ journals and publications."
        exclude_biblio:
          description: "Selecting this option will exclude text appearing in the bibliography,\
            \ works cited, or references sections of student papers from being checked\
            \ for matches when generating Similarity Reports."
        exclude_quoted:
          description: "Selecting this option will exclude text appearing in the bibliography,\
            \ works cited, or references sections of student papers from being checked\
            \ for matches when generating Similarity Reports."
        submit_papers_to:
          description: "If set to FALSE, a similarity report will still be generated\
            \ for paper submissions but students' papers will not be stored in the\
            \ Turnitin standard paper repository or the institution's paper repository\
            \ for future comparison."
      title: Type extracted from column `assignments.turnitin_settings`.
    attachments_filename:
      description: The name of the actual file.
      oneOf:
      - {}
      - type: string
    attachments_display_name:
      description: The attachment name that is displayed.
      oneOf:
      - {}
      - type: string
    calendar_events_location_address:
      description: The address where the event is taking place.
      oneOf:
      - {}
      - type: string
    calendar_events_comments:
      description: Comments associate with this reservation.
      oneOf:
      - {}
      - type: string
    calendar_events_location_name:
      description: The location name of the event.
      oneOf:
      - {}
      - type: string
    calendar_events_description:
      description: The HTML description of the event.
      oneOf:
      - {}
      - type: string
    canvadocs_annotation_contexts_launch_id:
      description: The ID that differentiates a DocViewer launch from another using
        the same attachment.
      oneOf:
      - {}
      - type: string
    comment_bank_items_comment:
      description: The text of the comment bank item.
      oneOf:
      - {}
      - type: string
    content_tags_comments:
      description: Comments associated with the tag.
      oneOf:
      - {}
      - type: string
    content_tags_link_settings:
      description: "Settings for LTI links associated with the content tag (for example,\
        \ tool iframe width and height)."
      oneOf:
      - {}
      - type: string
    content_tags_url:
      description: "The URL of the content where applicable (for example: the launch\
        \ URL of a context_external_tool). Applicable when `content_type` is `ExternalUrl`,\
        \ `ContextExternalTool` or `Lti::MessageHandler`."
      oneOf:
      - {}
      - type: string
    content_tags_title:
      description: The title of the content tag.
      oneOf:
      - {}
      - type: string
    context_external_tools_consumer_key:
      description: A key used by the tool for validation at launch time. This value
        is set by the Canvas user who installs the tool.
      oneOf:
      - {}
      - type: string
    context_external_tools_description:
      description: The description of the tool activation as entered by the user.
      oneOf:
      - {}
      - type: string
    Type_extracted_from_column__context_external_tools_settings__:
      additionalProperties: {}
      properties:
        course_home_sub_navigation:
          description: Course home sub navigation placement type.
        course_settings_sub_navigation:
          description: Course settings sub navigation placement type.
        custom_fields:
          description: "Custom parameters provider request to share on every single\
            \ LTI launch, each placement column might have its own set of custom_fields."
        discussion_menu:
          description: Discussion menu placement type.
        discussion_topic_index_menu:
          description: Discussion topic index menu placement type.
        discussion_topic_menu:
          description: Discussion topic menu placement type.
        editor_button:
          description: RCE placement type.
        enabled:
          description: "Controls if the tool is disabled for user to click on, typically\
            \ tool gets removed altogether but sometimes provider uses this setting\
            \ to just disable it in the UI."
        file_index_menu:
          description: File index menu placement type.
        file_menu:
          description: File menu placement type.
        global_navigation:
          description: Global navigation placement type.
        grade_passback:
          description: Grade pass-back placement type.
        homework_selection:
          description: Homework selection placement type.
        homework_submission:
          description: Homework submission placement type.
        launch_presentation_document_target:
          description: Tells us if it should be opened in another window.
        link_selection:
          description: Link selection placement type.
        migration_selection:
          description: Migration selection placement type.
        module_group_menu:
          description: Module group menu placement type.
        module_index_menu:
          description: Module index menu placement type.
        account_navigation:
          description: account navigation placement type.
        assignment_group_menu:
          description: Assignment group menu placement type.
        assignment_index_menu:
          description: Assignment index menu placement type.
        assignment_menu:
          description: Assignment menu placement type.
        assignment_selection:
          description: Assignment selection placement type.
        canvas_caliper_url:
          description: URL to caliper endpoint if supported by the tool.
        collaboration:
          description: Collaboration placement type.
        content_migration:
          description: Content migration placement type.
        course_assignments_menu:
          description: Course assignments menu placement type.
        course_navigation:
          description: Course navigation placement type.
        module_menu:
          description: Module menu placement type.
        post_grades:
          description: Post grades placement type.
        quiz_index_menu:
          description: Quiz index menu placement type.
        quiz_menu:
          description: Quiz menu placement type.
        similarity_detection:
          description: Plagiarism platform placement.
        student_context_card:
          description: Student context card placement type.
        text:
          description: "Identifies the name of the tool, default what the user can\
            \ see if no label is set."
        tool_configuration:
          description: Identifies the LTI tool configuration dataset.
        use_1_3:
          description: LTI 1.3 compliant tool.
        user_navigation:
          description: User navigation placement type.
        visibility:
          description: "Controls if it is an admin only tool, takes values of `admin`\
            \ and `members`."
        wiki_index_menu:
          description: Wiki index menu placement type.
        wiki_page_menu:
          description: Wiki page menu placement type.
      title: Type extracted from column `context_external_tools.settings`.
    context_modules_name:
      description: The name of the module that shows up in the UI.
      oneOf:
      - {}
      - type: string
    context_modules_completion_events:
      description: "Events that can trigger module completion in CSV format: publish_final_grade."
      oneOf:
      - {}
      - type: string
    conversation_message_participants_tags:
      description: "Tags used to identify multiple contexts such as course, group,\
        \ etc."
      oneOf:
      - {}
      - type: string
    conversation_messages_forwarded_message_ids:
      description: The IDs of any messages that were created as a forward of the current
        message.
      oneOf:
      - {}
      - type: string
    conversation_messages_attachment_ids:
      description: Comma-separated list of attachments ids. These must be files that
        have been previously uploaded to the sender's "conversation attachments" folder.
      oneOf:
      - {}
      - type: string
    conversation_messages_body:
      description: The HTML content of the message.
      oneOf:
      - {}
      - type: string
    conversation_participants_tags:
      description: "Tags used to identify multiple contexts such as course, group,\
        \ etc."
      oneOf:
      - {}
      - {}
    conversations_tags:
      description: "Tags used to identify multiple contexts such as course, group,\
        \ etc. Contains a comma-delimited list of IDs of the course or group if the\
        \ conversation is associated with a course or group. The format of the values\
        \ are `course_12345` or `group_12345`."
      oneOf:
      - {}
      - type: string
    courses_syllabus_body:
      description: User-generated HTML for the course syllabus.
      oneOf:
      - {}
      - type: string
    courses_turnitin_comments:
      description: Comments to be shown to students when submitting a Turnitin-enabled
        assignment.
      oneOf:
      - {}
      - type: string
    courses_public_description:
      description: The public description of the course.
      oneOf:
      - {}
      - type: string
    Type_extracted_from_column__courses_settings__:
      additionalProperties: {}
      properties:
        allow_student_discussion_editing:
          description: Let students edit or delete their own discussion posts.
        allow_student_discussion_topics:
          description: Let students create discussion topics.
        course_format:
          description: "Format of a course, values include `blended`, `on_campus`,\
            \ `online`."
        filter_speed_grader_by_student_group:
          type: string
        hide_distribution_graphs:
          description: Hide grade distribution graphs from students.
        hide_final_grade:
          description: Hide totals in student grades summary.
        is_public_to_auth_users:
          description: Set to true if course is public only to authenticated users.
        lock_all_announcements:
          description: Disable comments on announcements.
        public_syllabus:
          description: "Set to true to make the course syllabus public. Values include\
            \ true, false."
        public_syllabus_to_auth:
          description: Set to true to make the course syllabus public for authenticated
            users.
        restrict_student_future_view:
          description: Restrict students from viewing courses before start date.
        restrict_student_past_view:
          description: Restrict students from viewing courses after end date.
        syllabus_updated_at:
          description: Timestamp when syllabus was updated in a course.
        usage_rights_required:
          description: Copyright and license information must be provided for files
            before they are published.
        allow_student_forum_attachments:
          description: Whether students can attach files to discussions.
      title: Type extracted from column `courses.settings`.
    developer_keys_notes:
      description: Any notes added to the developer key.
      oneOf:
      - {}
      - type: string
    developer_keys_public_jwk:
      description: The public key (in JWK format) for the developer key. Used if the
        developer key is associated with an LTI 1.3 tool.
      oneOf:
      - {}
      - type: string
    developer_keys_client_credentials_audience:
      description: "The intended audience of client credentials issued by the developer\
        \ key. If internal (default), credentials will be verified by Canvas; if external,\
        \ credentials will be verified by other parties using Canvas' public key."
      oneOf:
      - {}
      - type: string
    discussion_entries_message:
      description: The content of the entry. Contains html tags.
      oneOf:
      - {}
      - type: string
    discussion_topics_message:
      description: The HTML content of the message body.
      oneOf:
      - {}
      - type: string
    folders_full_name:
      description: Full path of the folder.
      oneOf:
      - {}
      - type: string
    group_categories_sis_source_id:
      description: The unique identifier for this group in the customer SIS.
      oneOf:
      - {}
      - type: string
    groups_description:
      description: A description of the group.
      oneOf:
      - {}
      - type: string
    learning_outcome_groups_description:
      description: Description of the learning outcome group.
      oneOf:
      - {}
      - type: string
    learning_outcome_question_results_title:
      description: Title for identifying the question result.
      oneOf:
      - {}
      - type: string
    learning_outcomes_description:
      description: Description of the outcome.
      oneOf:
      - {}
      - type: string
    lti_line_items_resource_id:
      description: A Tool Provider specified ID for the Line Item. Multiple line items
        may share the same resourceId within a given context.
      oneOf:
      - {}
      - type: string
    lti_line_items_label:
      description: The label of the line item.
      oneOf:
      - {}
      - type: string
    lti_line_items_extensions:
      description: "Contains canvas-specific line item extensions. For example: submission_type."
      oneOf:
      - {}
      - type: string
    lti_line_items_tag:
      description: A value used to qualify a line Item beyond its ids. Line Items
        may be queried by this value in the List endpoint. Multiple line items can
        share the same tag within a given context.
      oneOf:
      - {}
      - type: string
    lti_resource_links_custom:
      description: "Custom parameters that will be added to the LTI launch. These\
        \ are custom parameters returned from a Deep Linking response. These are merged\
        \ with tool/placement-level custom parameters, if any."
      oneOf:
      - {}
      - type: string
    lti_results_extensions:
      description: Platform-specific extensions for the result.
      oneOf:
      - {}
      - type: string
    lti_results_comment:
      description: Comment visible to the student about the result (LTI AGS).
      oneOf:
      - {}
      - type: string
    lti_results_activity_progress:
      description: "Indication to Canvas of the status of the user towards the activity's\
        \ completion. Must be one of Initialized, Started, InProgress, Submitted,\
        \ Completed (LTI AGS)."
      oneOf:
      - {}
      - type: string
    lti_results_grading_progress:
      description: "Indication to Canvas of the status of the grading process. A value\
        \ of PendingManual will require intervention by a grader. Values of NotReady,\
        \ Failed, and Pending will cause the scoreGiven to be ignored. FullyGraded\
        \ values will require no action. Possible values are NotReady, Failed, Pending,\
        \ PendingManual, FullyGraded (LTI AGS)."
      oneOf:
      - {}
      - type: string
    master_courses_child_content_tags_migration_id:
      description: An identifier used by the Blueprint system to match with the blueprint
        content.
      oneOf:
      - {}
      - type: string
    master_courses_master_content_tags_migration_id:
      description: An identifier used by the Blueprint system to match with associated
        content.
      oneOf:
      - {}
      - type: string
    master_courses_master_migrations_comment:
      description: An optional message to be displayed with the sync event.
      oneOf:
      - {}
      - type: string
    originality_reports_error_message:
      description: The error message provided by the tool provider. Only set if there
        was an error processing the submission.
      oneOf:
      - {}
      - type: string
    originality_reports_originality_report_url:
      description: The url pointing to the originality report from the tool provider.
      oneOf:
      - {}
      - type: string
    originality_reports_originality_report_lti_url:
      description: The LTI launch URL that allows a user to view the originality report
        in the tool.
      oneOf:
      - {}
      - type: string
    originality_reports_link_id:
      description: Resource link ID of the assignment associated with the submission.
      oneOf:
      - {}
      - type: string
    outcome_proficiency_ratings_color:
      description: The hex color code of the rating.
      oneOf:
      - {}
      - type: string
    Type_extracted_from_column__quiz_questions_question_data__:
      additionalProperties: {}
      properties:
        neutral_comments:
          description: Comments to be displayed regardless of how the student answers
            the question.
        answers:
          description: Collection of possible answers.
        name:
          description: Name of the question.
        question_type:
          description: Denotes the type of the question.
        question_text:
          description: Text of the question.
        regrade_option:
          description: Denotes if regrading is available for the question. Possible
            values are `available` and `unavailable` for question types. Defaults
            to `available` for the allowed question types and NULL for the rest.
          enum:
          - __dap_unspecified__
          - available
          - unavailable
          - multiple_answers_question
          - multiple_choice_question
          - true_false_question
          - current_and_previous_correct
          - no_regrade
          - current_correct_only
          - full_credit
          - disabled
        correct_comments:
          description: Comments to be displayed if the student answers the question
            correctly.
        incorrect_comments:
          description: "Comments to be displayed if the student answers the question\
            \ incorrectly neutral_comments: Comments to be displayed regardless of\
            \ how the student answers the question."
        text_after_answers:
          description: "(Used in *short_answer_question*, also known as *fill_in_the_blank*.\
            \ Omitted for other question types) Text following the missing word."
        matching_answer_incorrect_matches:
          description: "(Used in *matching_question*. Omitted for other question types)\
            \ List of distractors (incorrect answers), delimited by new lines, that\
            \ will be seeded with all the *answer_match_right* values."
        points_possible:
          description: Maximum number of points that can be awarded for answering
            the question correctly.
          format: float64
      title: Type extracted from column `quiz_questions.question_data`.
    quizzes_description:
      description: the description of the quiz.
      oneOf:
      - {}
      - type: string
    submission_comments_comment:
      description: The text of the submission comment.
      oneOf:
      - {}
      - type: string
    submission_comments_attachment_ids:
      description: A comma-separated list of attachment IDs associated with this comment.
      oneOf:
      - {}
      - type: string
    submissions_attachment_ids:
      description: A comma-delimited string representing the IDs of attachments belonging
        to this submission.
      oneOf:
      - {}
      - type: string
    submissions_lti_user_id:
      description: The LTI context ID of the submitter.
      oneOf:
      - {}
      - type: string
    submissions_body:
      description: "The content of the submission, if it was submitted directly in\
        \ a text field."
      oneOf:
      - {}
      - type: string
    user_notes_note:
      description: Faculty Journal entry text.
      oneOf:
      - {}
      - type: string
    users_pronouns:
      description: "stores a list of preferred gender pronouns i.e.: she/her; he/him;\
        \ they/them."
      oneOf:
      - {}
      - type: string
    web_conferences_description:
      description: The description for the conference.
      oneOf:
      - {}
      - type: string
    wiki_pages_body:
      description: The body of the wiki page record (includes html tags).
      oneOf:
      - {}
      - type: string
    wiki_pages_url:
      description: The HTML body of the page.
      oneOf:
      - {}
      - type: string
    wikis_front_page_url:
      description: Captures the URL of the front page (wiki page) record if one exists.
      oneOf:
      - {}
      - type: string
    asset_user_accesses_display_name:
      description: The user configured name of the accessed asset.
      oneOf:
      - {}
      - type: string
    web_logs_remote_ip:
      description: IP (IPv4 or IPv6) address that was recorded for the request.
      oneOf:
      - $ref: '#/components/schemas/IPv4Address'
      - $ref: '#/components/schemas/IPv6Address'
  securitySchemes:
    Default:
      bearerFormat: JWT
      description: Authenticates a request by verifying a JWT (JSON Web Token) passed
        in the `X-InstAuth` HTTP header.
      scheme: bearer
      type: http
x-tagGroups:
- name: Operations
  tags:
  - API
- name: API types
  tags:
  - AuthenticationError
  - CompleteIncrementalJob
  - CompleteSnapshotJob
  - FailedJob
  - Filter
  - Format
  - GatewayTimeoutError
  - IncrementalQuery
  - JsonType
  - NotFoundError
  - Object
  - OutOfRangeError
  - ProcessingError
  - Query
  - Resource
  - ResourceResult
  - SnapshotQuery
  - SnapshotRequiredError
  - TableJob
  - TableList
  - URL
  - ValidationError
  - VersionedSchema
- name: Canvas tables
  tags:
  - access_tokens
  - account_users
  - accounts
  - assessment_question_banks
  - assessment_questions
  - assignment_groups
  - assignment_override_students
  - assignment_overrides
  - assignments
  - attachment_associations
  - attachments
  - calendar_events
  - canvadocs_annotation_contexts
  - comment_bank_items
  - communication_channels
  - content_migrations
  - content_participation_counts
  - content_participations
  - content_shares
  - content_tags
  - context_external_tools
  - context_module_progressions
  - context_modules
  - conversation_message_participants
  - conversation_messages
  - conversation_participants
  - conversations
  - course_account_associations
  - course_sections
  - courses
  - custom_gradebook_column_data
  - custom_gradebook_columns
  - developer_key_account_bindings
  - developer_keys
  - discussion_entries
  - discussion_entry_participants
  - discussion_topic_participants
  - discussion_topics
  - enrollment_dates_overrides
  - enrollment_states
  - enrollment_terms
  - enrollments
  - favorites
  - folders
  - grading_period_groups
  - grading_periods
  - grading_standards
  - group_categories
  - group_memberships
  - groups
  - late_policies
  - learning_outcome_groups
  - learning_outcome_question_results
  - learning_outcome_results
  - learning_outcomes
  - lti_line_items
  - lti_resource_links
  - lti_results
  - master_courses_child_content_tags
  - master_courses_child_subscriptions
  - master_courses_master_content_tags
  - master_courses_master_migrations
  - master_courses_master_templates
  - master_courses_migration_results
  - originality_reports
  - outcome_proficiencies
  - outcome_proficiency_ratings
  - post_policies
  - pseudonyms
  - quiz_groups
  - quiz_questions
  - quiz_submissions
  - quizzes
  - role_overrides
  - roles
  - rubric_assessments
  - rubric_associations
  - rubrics
  - score_statistics
  - scores
  - submission_comments
  - submission_versions
  - submissions
  - user_account_associations
  - user_notes
  - users
  - web_conference_participants
  - web_conferences
  - wiki_pages
  - wikis
- name: Canvas tables not exposed
  tags:
  - abstract_courses
  - appointment_groups
  - assessment_requests
  - asset_user_accesses
  - authentication_providers
  - cloned_items
  - content_exports
  - eportfolios
  - epub_exports
  - external_feeds
  - gradebook_uploads
  - group_and_membership_importers
  - live_assessments_assessments
  - live_assessments_submissions
  - lti_message_handlers
  - media_objects
  - moderated_grading_provisional_grades
  - outcome_imports
  - purgatories
  - quiz_statistics
  - sis_batches
  - usage_rights
  - versions
- name: Auxiliary types for Canvas tables
  tags:
  - assignment_groups__rules
  - assignments__turnitin_settings
  - context_external_tools__settings
  - courses__settings
  - quiz_questions__question_data
- name: Log tables
  tags:
  - user_agents
  - web_logs

