openapi: 3.0.1
info:
  description: Spring PetClinic Sample Application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0
  title: Spring PetClinic
  version: "1.0"
servers:
- url: http://localhost:9966/petclinic/api
tags:
- description: Endpoint which always returns an error.
  name: failing
- description: Endpoints related to pet owners.
  name: owner
- description: Endpoints related to users.
  name: user
- description: Endpoints related to pets.
  name: pet
- description: Endpoints related to vets.
  name: vet
- description: Endpoints related to vet visits.
  name: visit
- description: Endpoints related to pet types.
  name: pettypes
- description: Endpoints related to vet specialties.
  name: specialty
paths:
  /oops:
    get:
      description: Produces sample error response.
      operationId: failingRequest
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: Never returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
      summary: Always fails
      tags:
      - failing
      x-accepts: "application/json,text/plain"
  /owners:
    get:
      description: Returns an array of pet owners.
      operationId: listOwners
      parameters:
      - description: Last name.
        explode: true
        in: query
        name: lastName
        required: false
        schema:
          example: Davis
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Owner'
                type: array
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Lists pet owners
      tags:
      - owner
      x-accepts: application/json
    post:
      description: Records the details of a new pet owner.
      operationId: addOwner
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerFields'
        description: The pet owner
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: The pet owner was sucessfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Adds a pet owner
      tags:
      - owner
      x-content-type: application/json
      x-accepts: application/json
  /owners/{ownerId}:
    delete:
      description: Returns the owner or a 404 error.
      operationId: deleteOwner
      parameters:
      - description: The ID of the owner.
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Owner  not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Delete an owner by ID
      tags:
      - owner
      x-accepts: application/json
    get:
      description: Returns the pet owner or a 404 error.
      operationId: getOwner
      parameters:
      - description: The ID of the pet owner.
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Owner not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Get a pet owner by ID
      tags:
      - owner
      x-accepts: application/json
    put:
      description: Updates the pet owner record with the specified details.
      operationId: updateOwner
      parameters:
      - description: The ID of the pet owner.
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerFields'
        description: The pet owner details to use for the update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: Update successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Owner not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Update a pet owner's details
      tags:
      - owner
      x-content-type: application/json
      x-accepts: application/json
  /owners/{ownerId}/pets:
    post:
      description: Records the details of a new pet.
      operationId: addPetToOwner
      parameters:
      - description: The ID of the pet owner.
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetFields'
        description: The details of the new pet.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: The pet was sucessfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Adds a pet to an owner
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
  /owners/{ownerId}/pets/{petId}:
    get:
      description: Returns the pet or a 404 error.
      operationId: getOwnersPet
      parameters:
      - description: The ID of the pet owner.
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      - description: The ID of the pet.
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Pet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Get a pet by ID
      tags:
      - pet
      x-accepts: application/json
    put:
      description: Updates the pet record with the specified details.
      operationId: updateOwnersPet
      parameters:
      - description: The ID of the pet owner.
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      - description: The ID of the pet.
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetFields'
        description: The pet details to use for the update.
        required: true
      responses:
        "204":
          description: Update successful.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet not found for this owner.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Update a pet's details
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
  /owners/{ownerId}/pets/{petId}/visits:
    post:
      description: Records the details of a new vet visit.
      operationId: addVisitToOwner
      parameters:
      - description: The ID of the pet owner.
        explode: false
        in: path
        name: ownerId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      - description: The ID of the pet.
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VisitFields'
        description: The details of the new vet visit.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
          description: The vet visit was sucessfully added.
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet not found for this owner.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Adds a vet visit
      tags:
      - visit
      x-content-type: application/json
      x-accepts: application/json
  /pettypes:
    get:
      description: Returns an array of pet types.
      operationId: listPetTypes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PetType'
                type: array
          description: Pet types found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Lists pet types
      tags:
      - pettypes
      x-accepts: application/json
    post:
      description: Creates a pet type .
      operationId: addPetType
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetType'
        description: The pet type
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetType'
          description: Pet type created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet Type not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Create a pet type
      tags:
      - pettypes
      x-content-type: application/json
      x-accepts: application/json
  /pettypes/{petTypeId}:
    delete:
      description: Returns the pet type or a 404 error.
      operationId: deletePetType
      parameters:
      - description: The ID of the pet type.
        explode: false
        in: path
        name: petTypeId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetType'
          description: Pet type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet type not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Delete a pet type by ID
      tags:
      - pettypes
      x-accepts: application/json
    get:
      description: Returns the pet type or a 404 error.
      operationId: getPetType
      parameters:
      - description: The ID of the pet type.
        explode: false
        in: path
        name: petTypeId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetType'
          description: Pet type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet Type not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Get a pet type by ID
      tags:
      - pettypes
      x-accepts: application/json
    put:
      description: Returns the pet type or a 404 error.
      operationId: updatePetType
      parameters:
      - description: The ID of the pet type.
        explode: false
        in: path
        name: petTypeId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetType'
        description: The pet type
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PetType'
          description: Pet type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet Type not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Update a pet type by ID
      tags:
      - pettypes
      x-content-type: application/json
      x-accepts: application/json
  /pets:
    get:
      description: Returns an array of pet .
      operationId: listPets
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Pet'
                type: array
          description: Pet types found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Lists pet
      tags:
      - pet
      x-accepts: application/json
    post:
      description: Creates a pet .
      operationId: addPet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        description: The pet
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Pet type created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Create a pet
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
  /pets/{petId}:
    delete:
      description: Returns the pet or a 404 error.
      operationId: deletePet
      parameters:
      - description: The ID of the pet.
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Pet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Delete a pet by ID
      tags:
      - pet
      x-accepts: application/json
    get:
      description: Returns the pet  or a 404 error.
      operationId: getPet
      parameters:
      - description: The ID of the pet.
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Pet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Get a pet by ID
      tags:
      - pet
      x-accepts: application/json
    put:
      description: Returns the pet or a 404 error.
      operationId: updatePet
      parameters:
      - description: The ID of the pet.
        explode: false
        in: path
        name: petId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
        description: The pet
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: Pet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Pet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Update a pet by ID
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
  /visits:
    get:
      description: Returns an array of visit .
      operationId: listVisits
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Visit'
                type: array
          description: visits found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Lists visits
      tags:
      - visit
      x-accepts: application/json
    post:
      description: Creates a visit.
      operationId: addVisit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visit'
        description: The visit
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
          description: visit created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Visit not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Create a visit
      tags:
      - visit
      x-content-type: application/json
      x-accepts: application/json
  /visits/{visitId}:
    delete:
      description: Returns the visit or a 404 error.
      operationId: deleteVisit
      parameters:
      - description: The ID of the visit.
        explode: false
        in: path
        name: visitId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
          description: Visit details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Visit not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Delete a visit by ID
      tags:
      - visit
      x-accepts: application/json
    get:
      description: Returns the visit or a 404 error.
      operationId: getVisit
      parameters:
      - description: The ID of the visit.
        explode: false
        in: path
        name: visitId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
          description: Visit details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Visit not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Get a visit by ID
      tags:
      - visit
      x-accepts: application/json
    put:
      description: Returns the visit or a 404 error.
      operationId: updateVisit
      parameters:
      - description: The ID of the visit.
        explode: false
        in: path
        name: visitId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Visit'
        description: The visit
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Visit'
          description: Visit details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Visit not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Update a visit by ID
      tags:
      - visit
      x-content-type: application/json
      x-accepts: application/json
  /specialties:
    get:
      description: Returns an array of specialty .
      operationId: listSpecialties
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Specialty'
                type: array
          description: Specialties found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Lists specialties
      tags:
      - specialty
      x-accepts: application/json
    post:
      description: Creates a specialty .
      operationId: addSpecialty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
        description: The specialty
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialty'
          description: Specialty created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Specialty not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Create a specialty
      tags:
      - specialty
      x-content-type: application/json
      x-accepts: application/json
  /specialties/{specialtyId}:
    delete:
      description: Returns the specialty or a 404 error.
      operationId: deleteSpecialty
      parameters:
      - description: The ID of the specialty.
        explode: false
        in: path
        name: specialtyId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialty'
          description: Specialty details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Specialty not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Delete a specialty by ID
      tags:
      - specialty
      x-accepts: application/json
    get:
      description: Returns the specialty or a 404 error.
      operationId: getSpecialty
      parameters:
      - description: The ID of the speciality.
        explode: false
        in: path
        name: specialtyId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialty'
          description: Specialty details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Specialty not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Get a specialty by ID
      tags:
      - specialty
      x-accepts: application/json
    put:
      description: Returns the specialty or a 404 error.
      operationId: updateSpecialty
      parameters:
      - description: The ID of the specialty.
        explode: false
        in: path
        name: specialtyId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Specialty'
        description: The pet
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Specialty'
          description: Specialty details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Specialty not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Update a specialty by ID
      tags:
      - specialty
      x-content-type: application/json
      x-accepts: application/json
  /vets:
    get:
      description: Returns an array of vets.
      operationId: listVets
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vet'
                type: array
          description: Vets found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Lists vets
      tags:
      - vet
      x-accepts: application/json
    post:
      description: Creates a vet .
      operationId: addVet
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vet'
        description: The vet
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vet'
          description: Vet created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Vet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Create a Vet
      tags:
      - vet
      x-content-type: application/json
      x-accepts: application/json
  /vets/{vetId}:
    delete:
      description: Returns the vet or a 404 error.
      operationId: deleteVet
      parameters:
      - description: The ID of the vet.
        explode: false
        in: path
        name: vetId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vet'
          description: Vet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Vet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Delete a vet by ID
      tags:
      - vet
      x-accepts: application/json
    get:
      description: Returns the vet or a 404 error.
      operationId: getVet
      parameters:
      - description: The ID of the vet.
        explode: false
        in: path
        name: vetId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vet'
          description: Vet details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Vet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Get a vet by ID
      tags:
      - vet
      x-accepts: application/json
    put:
      description: Returns the vet or a 404 error.
      operationId: updateVet
      parameters:
      - description: The ID of the vet.
        explode: false
        in: path
        name: vetId
        required: true
        schema:
          example: 1
          format: int32
          minimum: 0
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vet'
        description: The vet
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vet'
          description: Pet type details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Vet not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Update a vet  by ID
      tags:
      - vet
      x-content-type: application/json
      x-accepts: application/json
  /users:
    post:
      description: Creates a user.
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: The user
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: User created successfully.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "304":
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              explode: false
              schema:
                type: string
              style: simple
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Bad request.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: User not found.
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
          description: Server error.
      summary: Create a user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    RestError:
      description: The schema for all error responses.
      example:
        path: /api/owners
        trace: "com.atlassian.oai.validator.springmvc.InvalidRequestException: ..."
        schemaValidationErrors:
        - message: "[Path '/lastName'] Instance type (null) does not match any allowed\
            \ primitive type (allowed: [\"string\"])"
        - message: "[Path '/lastName'] Instance type (null) does not match any allowed\
            \ primitive type (allowed: [\"string\"])"
        error: Bad Request
        message: Request failed schema validation
        status: 400
        timestamp: 2000-01-23T04:56:07.000+00:00
      properties:
        status:
          description: The HTTP status code.
          example: 400
          format: int32
          readOnly: true
          title: Status
          type: integer
        error:
          description: The short error message.
          example: Bad Request
          readOnly: true
          title: Error
          type: string
        path:
          description: The path of the URL for this request.
          example: /api/owners
          format: uri
          readOnly: true
          title: Path
          type: string
        timestamp:
          description: The time the error occured.
          format: date-time
          readOnly: true
          title: Timestamp
          type: string
        message:
          description: The long error message.
          example: Request failed schema validation
          readOnly: true
          title: Message
          type: string
        schemaValidationErrors:
          description: Validation errors against the OpenAPI schema.
          items:
            $ref: '#/components/schemas/ValidationMessage'
          title: Schema validation errors
          type: array
        trace:
          description: The stacktrace for this error.
          example: "com.atlassian.oai.validator.springmvc.InvalidRequestException:\
            \ ..."
          readOnly: true
          title: Trace
          type: string
      required:
      - error
      - message
      - path
      - schemaValidationErrors
      - status
      - timestamp
      title: REST Error
      type: object
    ValidationMessage:
      additionalProperties: true
      description: Messages describing a validation error.
      example:
        message: "[Path '/lastName'] Instance type (null) does not match any allowed\
          \ primitive type (allowed: [\"string\"])"
      properties:
        message:
          description: The valiation message.
          example: "[Path '/lastName'] Instance type (null) does not match any allowed\
            \ primitive type (allowed: [\"string\"])"
          readOnly: true
          title: Message
          type: string
      required:
      - message
      title: Validation message
      type: object
    Specialty:
      description: Fields of specialty of vets.
      example:
        name: radiology
        id: 1
      properties:
        id:
          description: The ID of the specialty.
          example: 1
          format: int32
          minimum: 0
          readOnly: true
          title: ID
          type: integer
        name:
          description: The name of the specialty.
          example: radiology
          maxLength: 80
          minLength: 1
          title: Name
          type: string
      required:
      - id
      - name
      title: Specialty
      type: object
    OwnerFields:
      description: Editable fields of a pet owner.
      example:
        firstName: George
        lastName: Franklin
        address: 110 W. Liberty St.
        city: Madison
        telephone: "6085551023"
      properties:
        firstName:
          description: The first name of the pet owner.
          example: George
          maxLength: 30
          minLength: 1
          pattern: "^[a-zA-Z]*$"
          title: First name
          type: string
        lastName:
          description: The last name of the pet owner.
          example: Franklin
          maxLength: 30
          minLength: 1
          pattern: "^[a-zA-Z]*$"
          title: Last name
          type: string
        address:
          description: The postal address of the pet owner.
          example: 110 W. Liberty St.
          maxLength: 255
          minLength: 1
          title: Address
          type: string
        city:
          description: The city of the pet owner.
          example: Madison
          maxLength: 80
          minLength: 1
          title: City
          type: string
        telephone:
          description: The telephone number of the pet owner.
          example: "6085551023"
          maxLength: 20
          minLength: 1
          pattern: "^[0-9]*$"
          title: Telephone number
          type: string
      required:
      - address
      - city
      - firstName
      - lastName
      - telephone
      title: Owner fields
      type: object
    Owner:
      allOf:
      - $ref: '#/components/schemas/OwnerFields'
      - properties:
          id:
            description: The ID of the pet owner.
            example: 1
            format: int32
            minimum: 0
            readOnly: true
            title: ID
            type: integer
          pets:
            description: The pets owned by this individual including any booked vet
              visits.
            items:
              $ref: '#/components/schemas/Pet'
            readOnly: true
            title: Pets
            type: array
        required:
        - pets
        type: object
      description: A pet owner.
      example:
        pets:
        - visits:
          - date: 2013-01-01
            petId: 1
            description: rabies shot
            id: 1
          - date: 2013-01-01
            petId: 1
            description: rabies shot
            id: 1
          name: Leo
          id: 1
          type:
            name: cat
            id: 1
          ownerId: 1
          birthDate: 2010-09-07
        - visits:
          - date: 2013-01-01
            petId: 1
            description: rabies shot
            id: 1
          - date: 2013-01-01
            petId: 1
            description: rabies shot
            id: 1
          name: Leo
          id: 1
          type:
            name: cat
            id: 1
          ownerId: 1
          birthDate: 2010-09-07
        firstName: George
        lastName: Franklin
        address: 110 W. Liberty St.
        city: Madison
        telephone: "6085551023"
        id: 1
      title: Owner
    PetFields:
      description: Editable fields of a pet.
      example:
        name: Leo
        type:
          name: cat
          id: 1
        birthDate: 2010-09-07
      properties:
        name:
          description: The name of the pet.
          example: Leo
          maxLength: 30
          title: Name
          type: string
        birthDate:
          description: The date of birth of the pet.
          example: 2010-09-07
          format: date
          title: Birth date
          type: string
        type:
          $ref: '#/components/schemas/PetType'
      required:
      - birthDate
      - name
      - type
      title: Pet fields
      type: object
    Pet:
      allOf:
      - $ref: '#/components/schemas/PetFields'
      - properties:
          id:
            description: The ID of the pet.
            example: 1
            format: int32
            minimum: 0
            readOnly: true
            title: ID
            type: integer
          ownerId:
            description: The ID of the pet's owner.
            example: 1
            format: int32
            minimum: 0
            readOnly: true
            title: Owner ID
            type: integer
          visits:
            description: Vet visit bookings for this pet.
            items:
              $ref: '#/components/schemas/Visit'
            readOnly: true
            title: Visits
            type: array
        required:
        - id
        - type
        - visits
        type: object
      description: A pet.
      example:
        visits:
        - date: 2013-01-01
          petId: 1
          description: rabies shot
          id: 1
        - date: 2013-01-01
          petId: 1
          description: rabies shot
          id: 1
        name: Leo
        id: 1
        type:
          name: cat
          id: 1
        ownerId: 1
        birthDate: 2010-09-07
      title: Pet
    VetFields:
      description: Editable fields of a veterinarian.
      properties:
        firstName:
          description: The first name of the vet.
          example: James
          maxLength: 30
          minLength: 1
          pattern: "^[a-zA-Z]*$"
          title: First name
          type: string
        lastName:
          description: The last name of the vet.
          example: Carter
          maxLength: 30
          minLength: 1
          pattern: "^[a-zA-Z]*$"
          title: Last name
          type: string
        specialties:
          description: The specialties of the vet.
          items:
            $ref: '#/components/schemas/Specialty'
          title: Specialties
          type: array
      required:
      - firstName
      - lastName
      - specialties
      title: VetFields
      type: object
    Vet:
      allOf:
      - $ref: '#/components/schemas/VetFields'
      - properties:
          id:
            description: The ID of the vet.
            example: 1
            format: int32
            minimum: 0
            readOnly: true
            title: ID
            type: integer
        type: object
      description: A veterinarian.
      example:
        firstName: James
        lastName: Carter
        specialties:
        - name: radiology
          id: 1
        - name: radiology
          id: 1
        id: 1
      required:
      - firstName
      - id
      - lastName
      - specialties
      title: Vet
    VisitFields:
      description: Editable fields of a vet visit.
      example:
        date: 2013-01-01
        description: rabies shot
      properties:
        date:
          description: The date of the visit.
          example: 2013-01-01
          format: date
          title: Date
          type: string
        description:
          description: The description for the visit.
          example: rabies shot
          maxLength: 255
          minLength: 1
          title: Description
          type: string
      required:
      - description
      title: Visit fields
      type: object
    Visit:
      allOf:
      - $ref: '#/components/schemas/VisitFields'
      - properties:
          id:
            description: The ID of the visit.
            example: 1
            format: int32
            minimum: 0
            readOnly: true
            title: ID
            type: integer
          petId:
            description: The ID of the pet.
            example: 1
            format: int32
            minimum: 0
            readOnly: true
            title: Pet ID
            type: integer
        required:
        - id
        type: object
      description: A booking for a vet visit.
      example:
        date: 2013-01-01
        petId: 1
        description: rabies shot
        id: 1
      title: Visit
    PetTypeFields:
      description: Editable fields of a pet type.
      properties:
        name:
          description: The name of the pet type.
          example: cat
          maxLength: 80
          minLength: 1
          title: Name
          type: string
      required:
      - name
      title: PetType fields
      type: object
    PetType:
      allOf:
      - $ref: '#/components/schemas/PetTypeFields'
      - properties:
          id:
            description: The ID of the pet type.
            example: 1
            format: int32
            minimum: 0
            readOnly: true
            title: ID
            type: integer
        required:
        - id
        type: object
      description: A pet type.
      example:
        name: cat
        id: 1
      title: Pet type
    User:
      description: An user.
      example:
        password: 1234abc
        roles:
        - name: admin
        - name: admin
        enabled: true
        username: john.doe
      properties:
        username:
          description: The username
          example: john.doe
          maxLength: 80
          minLength: 1
          title: username
          type: string
        password:
          description: The password
          example: 1234abc
          maxLength: 80
          minLength: 1
          title: Password
          type: string
        enabled:
          description: Indicates if the user is enabled
          example: true
          title: enabled
          type: boolean
        roles:
          description: The roles of an user
          items:
            $ref: '#/components/schemas/Role'
          title: Roles
          type: array
      required:
      - username
      title: User
      type: object
    Role:
      description: A role.
      example:
        name: admin
      properties:
        name:
          description: The role's name
          example: admin
          maxLength: 80
          minLength: 1
          title: name
          type: string
      required:
      - name
      title: Role
      type: object

