openapi: 3.1.0
info:
  description: Registry for pets and their owners
  title: Pet Owner Registry
  version: 1.0.1
servers:
- url: /
tags:
- description: All APIs related to pet owners
  name: owner
- description: All APIs related to pets
  name: pet
paths:
  /owners:
    get:
      description: |
        List all owners by the given page number and page size. The page parameters such as `last` and `first` must be used to check
        the data set boundtries when paginating the owners list. Using invalid values such as out of boundary values will result in
        `400` errors.
      parameters:
      - description: The page number to fetch.
        explode: true
        in: query
        name: page
        required: true
        schema:
          type: integer
        style: form
      - description: The page size to fetch.
        explode: true
        in: query
        name: size
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_owners_get_200_response'
          description: The current requested page of owners
        "400":
          content:
            application/json:
              schema:
                description: The error message describing what went wrong with the
                  request.
                type: string
          description: "If the page parameters are invalid, for example if the page\
            \ number of out of boundary of maximum number of pages."
      tags:
      - owner
      x-accepts: application/json
    post:
      description: Register a new owner in the registry.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerRequest'
      responses:
        "200":
          description: Successfully registered the owner.
      tags:
      - owner
      x-content-type: application/json
      x-accepts: application/json
  /owners/{id}:
    delete:
      description: |
        Unregister a owner will remove the connection with the current pets this owner has. All connected pets will
        considered as ophant.
      parameters:
      - description: The owner id in the system.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          type: string
        style: simple
      responses:
        "200":
          description: Owner is successfully unregistered from the registry.
      tags:
      - owner
      x-accepts: application/json
    get:
      description: Get information about a single owner identified by the system id
      parameters:
      - description: The owner id in the system.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
          description: The owner for the given system id.
        "404":
          description: A owner could not be identified by the given system id.
      tags:
      - owner
      x-accepts: application/json
  /pets:
    get:
      description: |
        List all pets by the given page number and page size. The page parameters such as `last` and `first` must be used to check
        the data set boundtries when paginating the pets list. Using invalid values such as out of boundary values will result in
        `400` errors.
      parameters:
      - description: The page number to fetch.
        explode: true
        in: query
        name: page
        required: true
        schema:
          type: integer
        style: form
      - description: The page size to fetch.
        explode: true
        in: query
        name: size
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/_pets_get_200_response'
          description: The current requested page of pets
        "400":
          content:
            application/json:
              schema:
                description: The error message describing what went wrong with the
                  request.
                type: string
          description: "If the page parameters are invalid, for example if the page\
            \ number of out of boundary of maximum number of pages."
      tags:
      - pet
      x-accepts: application/json
    post:
      description: Register a new pet in the registry.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetRequest'
      responses:
        "200":
          description: Successfully registered the pet.
      tags:
      - pet
      x-content-type: application/json
      x-accepts: application/json
  /pets/{id}:
    delete:
      description: |
        Unregister a pet incase of the pet is migrated or deceased.
      parameters:
      - description: The pet id in the system.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          type: string
        style: simple
      responses:
        "200":
          description: Pet is successfully unregistered from the registry.
      tags:
      - pet
      x-accepts: application/json
    get:
      description: Get information about a single pet identified by the system id
      parameters:
      - description: The pet id in the system.
        explode: false
        in: path
        name: id
        required: true
        schema:
          format: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
          description: The pet for the given system id.
        "404":
          description: A pet could not be identified by the given system id.
      tags:
      - pet
      x-accepts: application/json
components:
  schemas:
    Address:
      description: Address of a owner or a pet residence.
      example:
        streetNumber: streetNumber
        city: city
        street: street
      properties:
        streetNumber:
          description: The street number of the residence.
          type: string
        street:
          description: The street name of the residence.
          type: string
        city:
          description: The city where the residence belongs to.
          type: string
    PetRequest:
      description: Request for registering a new pet in the registry.
      example:
        address:
          streetNumber: streetNumber
          city: city
          street: street
        gender: make
        name: name
        dateOfBirth: 2000-01-23
        type: dog
        breed: breed
      properties:
        name:
          description: The name of the pet
          type: string
        breed:
          description: Breed of the pet
          type: string
        type:
          description: Simple type of the pet
          enum:
          - dog
          - cat
          - bird
          type: string
        gender:
          description: Gender of the pet
          enum:
          - make
          - female
          type: string
        dateOfBirth:
          description: The date of birth of the pet
          format: date
          type: string
        address:
          $ref: '#/components/schemas/Address'
    Pet:
      description: Registration information of the pet
      example:
        address:
          streetNumber: streetNumber
          city: city
          street: street
        gender: make
        name: name
        dateOfBirth: 2000-01-23
        id: id
        type: dog
        breed: breed
      properties:
        id:
          description: The id of the pet in the system which can be used to uniquely
            identify each pet.
          format: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          readOnly: true
          type: string
        name:
          description: The name of the pet
          type: string
        breed:
          description: Breed of the pet
          type: string
        type:
          description: Simple type of the pet
          enum:
          - dog
          - cat
          - bird
          type: string
        gender:
          description: Gender of the pet
          enum:
          - make
          - female
          type: string
        dateOfBirth:
          description: The date of birth of the pet
          format: date
          type: string
        address:
          $ref: '#/components/schemas/Address'
    OwnerRequest:
      description: Request for registering a new pet owner in the registry.
      example:
        firstName: firstName
        lastName: lastName
        address:
          streetNumber: streetNumber
          city: city
          street: street
        nid: nid
      properties:
        firstName:
          description: The first name of the owner
          type: string
        lastName:
          description: The last name of the owner
          type: string
        nid:
          description: |
            The national ID of the owner. This could be the passport ID in case there is no
            nation ID for the owner.
          type: string
        address:
          $ref: '#/components/schemas/Address'
    Owner:
      description: Owner registration of the pets
      example:
        firstName: firstName
        lastName: lastName
        address:
          streetNumber: streetNumber
          city: city
          street: street
        nid: nid
        id: id
      properties:
        id:
          description: The id of the owner in the system which can be used to uniquely
            identify each owner.
          format: "^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$"
          readOnly: true
          type: string
        firstName:
          description: The first name of the owner
          type: string
        lastName:
          description: The last name of the owner
          type: string
        nid:
          description: |
            The national ID of the owner. This could be the passport ID in case there is no
            nation ID for the owner.
          type: string
        address:
          $ref: '#/components/schemas/Address'
    _owners_get_200_response:
      example:
        last: true
        first: true
        content:
        - firstName: firstName
          lastName: lastName
          address:
            streetNumber: streetNumber
            city: city
            street: street
          nid: nid
          id: id
        - firstName: firstName
          lastName: lastName
          address:
            streetNumber: streetNumber
            city: city
            street: street
          nid: nid
          id: id
      properties:
        last:
          description: If this is the last page
          type: boolean
        first:
          description: If this is the first page
          type: boolean
        content:
          description: Content of the page
          items:
            $ref: '#/components/schemas/Owner'
          type: array
    _pets_get_200_response:
      example:
        last: true
        first: true
        content:
        - address:
            streetNumber: streetNumber
            city: city
            street: street
          gender: make
          name: name
          dateOfBirth: 2000-01-23
          id: id
          type: dog
          breed: breed
        - address:
            streetNumber: streetNumber
            city: city
            street: street
          gender: make
          name: name
          dateOfBirth: 2000-01-23
          id: id
          type: dog
          breed: breed
      properties:
        last:
          description: If this is the last page
          type: boolean
        first:
          description: If this is the first page
          type: boolean
        content:
          description: Content of the page
          items:
            $ref: '#/components/schemas/Pet'
          type: array

