openapi: 3.1.0
info:
  description: "This is a sample Inventory Management System based on the OpenAPI\
    \ 3.1 specification. content 4 cors Customer(user), vendor, order, and items."
  title: Inventory Management System Rest APIs
  version: 1.0.0-oas3.1
servers:
- description: SwaggerHub API Auto Mocking
  url: https://app.swaggerhub.com/apis/YAQEENISSA3_1/Ass/1.0.0-oas3.1
paths:
  /user:
    get:
      description: Returns all registered users
      operationId: getuser
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserInput'
                type: array
          description: All the users
      tags:
      - user
      x-accepts: application/json
    post:
      operationId: registered
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/UserInput'
                type: array
          description: Response
        "201":
          description: Successfully created a new user
      tags:
      - user
      x-accepts: application/json
  /User/{Customer_Id}:
    delete:
      description: Delete a user
      operationId: deleteUser
      parameters:
      - description: User ID to delete
        explode: true
        in: query
        name: Customer_id
        required: true
        schema:
          format: int64
          type: integer
        style: form
      responses:
        "200":
          description: User Deleted
        "400":
          description: Invalid user value
        "403":
          description: Forbidden
      summary: Deletes a User
      tags:
      - user
      x-accepts: application/json
    get:
      description: Returns a single user based on the provided ID.
      parameters:
      - explode: false
        in: path
        name: Customer_Id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserInput'
          description: Successful operation
        "404":
          description: User not found
      summary: Get user by ID
      tags:
      - user
      x-accepts: application/json
    patch:
      description: Update an existing user by ID using PATCH method
      operationId: updateUserPatch
      parameters:
      - description: ID of the Customer to update
        explode: true
        in: query
        name: Customer_id
        required: true
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        description: Updated user information
        required: true
      responses:
        "200":
          description: User updated successfully
        "204":
          description: No Content
        "404":
          description: User not found
        "409":
          description: There is a conflict with the current state of the user
      summary: Update an existing user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Update an existing user by ID
      operationId: update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
        description: Update an existing user
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: User not found
        "409":
          description: conflict
      summary: Update an existing user
      tags:
      - user
      x-content-type: application/json
      x-accepts: application/json
  /item:
    get:
      description: Returns all registered items
      operationId: getAllItems
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Iteminput'
                type: array
          description: Successful operation
        "400":
          description: invalid request format
        "404":
          description: No items found
      tags:
      - item
      x-accepts: application/json
    post:
      operationId: Add new item
      parameters: []
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Add_new_item_200_response_inner'
                type: array
          description: Response
        "201":
          description: Successfully created a new item
        "405":
          description: the requested method is not allowed for this resource
        "409":
          description: item with the same id already exists
      tags:
      - item
      x-accepts: application/json
  /item/{product_id}:
    delete:
      description: Delete an item by ID
      operationId: deleteItem
      parameters:
      - description: ID of the item to delete
        explode: true
        in: query
        name: product_id
        required: true
        schema:
          type: integer
        style: form
      responses:
        "200":
          description: Item Deleted
        "400":
          description: Invalid ID supplied
        "403":
          description: the server understood the delete request but refuses to authorize
            it
        "404":
          description: Item not found
      summary: Deletes an item
      tags:
      - item
      x-accepts: application/json
    get:
      description: Returns a single item based on the provided ID.
      operationId: getItemById
      parameters:
      - description: ID of the item to retrieve
        explode: false
        in: path
        name: product_id
        required: true
        schema:
          format: int32
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Iteminput'
          description: Successful operation
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
        "422":
          description: Validation exception
      summary: Get item by ID
      tags:
      - item
      x-accepts: application/json
    patch:
      description: Update an existing item by ID using PATCH method
      operationId: updateItemPatch
      parameters:
      - description: ID of the item to update
        explode: true
        in: query
        name: product_id
        required: true
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Iteminput'
        description: Updated item information
        required: true
      responses:
        "200":
          description: Item updated successfully
        "204":
          description: No Content
        "400":
          description: Invalid ID supplied
        "404":
          description: Item not found
      summary: Update an existing item
      tags:
      - item
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Update an existing item
      operationId: update item
      parameters:
      - description: ID
        explode: true
        in: query
        name: product_id
        required: false
        schema:
          format: int32
          type: integer
        style: form
      - description: Product name
        explode: true
        in: query
        name: Name
        required: false
        schema:
          type: string
        style: form
      - description: Price of product
        explode: true
        in: query
        name: Price
        required: false
        schema:
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Iteminput'
        description: Update an existent item
      responses:
        "200":
          content:
            application/json:
              schema: {}
          description: Successful operation
        "400":
          description: Invalid ID
        "404":
          description: Item not found
        "409":
          description: conflict
      tags:
      - item
      x-content-type: application/json
      x-accepts: application/json
  /vendor:
    get:
      description: Returns all registered vendors
      operationId: getAllVendors
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Vendor'
                type: array
          description: Successful operation
      summary: Get all vendors
      tags:
      - vendor
      x-accepts: application/json
    post:
      operationId: createVendor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vendor'
        description: Vendor object to be created
        required: true
      responses:
        "200":
          description: Vendor created successfully
        "201":
          description: created
      summary: Create a new vendor
      tags:
      - vendor
      x-content-type: application/json
      x-accepts: application/json
  /Vendor/{vendor_id}:
    delete:
      description: Delete a vendor by ID
      operationId: deleteVendor
      parameters:
      - description: ID of the vendor to delete
        explode: false
        in: path
        name: vendor_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Vendor deleted successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Vendor not found
      summary: Delete a vendor
      tags:
      - vendor
      x-accepts: application/json
    get:
      description: Returns a single vendor based on the provided ID
      operationId: getVendorById
      parameters:
      - description: ID of the vendor to retrieve
        explode: false
        in: path
        name: vendor_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vendor'
          description: Successful operation
        "404":
          description: Vendor not found
      summary: Get vendor by ID
      tags:
      - vendor
      x-accepts: application/json
    patch:
      description: Update an existing vendor partially by ID
      operationId: partialUpdateVendor
      parameters:
      - description: ID of the vendor to update
        explode: false
        in: path
        name: vendor_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vendor'
        description: Partially updated vendor information
        required: true
      responses:
        "200":
          description: Vendor updated successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Vendor not found
        "422":
          description: Validation exception
      summary: Update an existing vendor partially
      tags:
      - vendor
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Update an existing vendor by ID
      operationId: updateVendor
      parameters:
      - description: ID of the vendor to update
        explode: false
        in: path
        name: vendor_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vendor'
        description: Updated vendor information
        required: true
      responses:
        "200":
          description: Vendor updated successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Vendor not found
        "422":
          description: Validation exception
      summary: Update an existing vendor
      tags:
      - vendor
      x-content-type: application/json
      x-accepts: application/json
  /order:
    get:
      description: Returns all registered orders
      operationId: getAllOrders
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Order'
                type: array
          description: Successful operation
      summary: Get all orders
      tags:
      - order
      x-accepts: application/json
    post:
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: Order object to be created
        required: true
      responses:
        "200":
          description: Order created successfully
      summary: Create a new order
      tags:
      - order
      x-content-type: application/json
      x-accepts: application/json
  /Order/{order_id}:
    delete:
      description: Delete an order by ID
      operationId: deleteOrder
      parameters:
      - description: ID of the order to delete
        explode: false
        in: path
        name: order_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          description: Order deleted successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Delete an order
      tags:
      - order
      x-accepts: application/json
    get:
      description: Returns a single order based on the provided ID
      operationId: getOrderById
      parameters:
      - description: ID of the order to retrieve
        explode: false
        in: path
        name: order_id
        required: true
        schema:
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
          description: Successful operation
        "404":
          description: Order not found
      summary: Get order by ID
      tags:
      - order
      x-accepts: application/json
    patch:
      description: Update an existing order partially by ID
      operationId: partialUpdateOrder
      parameters:
      - description: ID of the order to update
        explode: false
        in: path
        name: order_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: Partially updated order information
        required: true
      responses:
        "200":
          description: Order updated successfully
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
        "409":
          description: conflict
      summary: Update an existing order partially
      tags:
      - order
      x-content-type: application/json
      x-accepts: application/json
    put:
      description: Update an existing order by ID
      operationId: updateOrder
      parameters:
      - description: ID of the order to update
        explode: false
        in: path
        name: order_id
        required: true
        schema:
          type: integer
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
        description: Updated order information
        required: true
      responses:
        "200":
          description: Order updated successfully
        "204":
          description: No Content
        "400":
          description: Invalid ID supplied
        "404":
          description: Order not found
      summary: Update an existing order
      tags:
      - order
      x-content-type: application/json
      x-accepts: application/json
components:
  schemas:
    UserInput:
      example:
        password: password
        UserName: UserName
        Customer_id: 0
        Name: Name
      properties:
        Customer_id:
          type: integer
        Name:
          type: string
        UserName:
          type: string
        password:
          type: string
      required:
      - Customer_id
      - Name
      - UserName
      - password
    Iteminput:
      example:
        price: 6
        product_id: 0
        Name: Name
      properties:
        product_id:
          type: integer
        Name:
          type: string
        price:
          type: integer
      required:
      - Name
      - price
      - product_id
    Vendor:
      example:
        password: password
        UserName: UserName
        vendor_id: 0
        Name: Name
      properties:
        vendor_id:
          type: integer
        Name:
          type: string
        UserName:
          type: string
        password:
          type: string
      required:
      - Name
      - UserName
      - password
      - vendor_id
    Order:
      example:
        product_id: 1
        Quantity: 5
        customer_id: 6
        order_id: 0
      properties:
        order_id:
          type: integer
        customer_id:
          type: integer
        product_id:
          type: integer
        Quantity:
          type: integer
      required:
      - Quantity
      - customer_id
      - order_id
      - product_id
    Add_new_item_200_response_inner:
      example:
        Price: 6
        product_id: 0
        Name: Name
      properties:
        product_id:
          type: integer
        Name:
          type: string
        Price:
          type: integer

